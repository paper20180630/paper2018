{"content": "用惯了各种jQuery插件，来看看它们都是怎么写出来的吧， 如何从学javascript做出动态的网页，这本书从functionality功能性角度给了你手段和方法！ 老外的书，不错的", "marks": "推荐"}
{"content": "是函数式的框架，不过了解一下javascript的各种应用还是不错的。", "marks": "推荐"}
{"content": "没什么意思", "marks": "较差"}
{"content": "反反复复的快看了一年了，终于看完咯 。。=。= ..", "marks": "力荐"}
{"content": "一天刷完。DOM讲的比较详细，没有一开始就死扣语法而是边做案例边学。Coursera上前端课对DOM基本有覆盖，不过现在大家都用jQuery了，但是案例还是不错的。", "marks": "力荐"}
{"content": "入门的，建议去学TypeScript和jQuery", "marks": "还行"}
{"content": "在没有实践操作的情况下阅读了全书，解决了我这个外行人很多代码方面的困惑。不愧是最佳入门书籍。改天有空要把示例亲自实现一遍并完成几项留给自己的作业。", "marks": "力荐"}
{"content": "书中介绍了dom的基本操作函数，最后通过一个网站实例复习前十一章的小功能，总的来说非常适合新手。至于为什么要给4星，因为中文版第十一章遍历图像的代码印错了啊，x=i*4*c.width活生生改成了c.height，亏得你还是本正版书，网上的PDF影印都是对的，wtf。", "marks": "推荐"}
{"content": "深入浅出吊炸天！不是很厚，两天就看完了。", "marks": "力荐"}
{"content": "感觉好入门...", "marks": "力荐"}
{"content": "非常入门的一本书，名字居然翻译成“XX编程艺术”，太坑人了", "marks": "推荐"}
{"content": "入门可读。啰嗦了一点……", "marks": "推荐"}
{"content": "讲解非常简单，容易入手，可以当入门书看。", "marks": "推荐"}
{"content": "不错的入门书\n", "marks": "推荐"}
{"content": "翻译得还不错，其中有些错别字…… 适合js入门。", "marks": "推荐"}
{"content": "非常好的入门书。", "marks": "力荐"}
{"content": "基础知识讲的印象挺深刻的", "marks": "力荐"}
{"content": "挺好的入门书，能够带你入门，了解最常用的DOM操作", "marks": "推荐"}
{"content": "很平易近人的书， 翻译的名字有点过了。\n以实例来介绍了几个重要的dom api 同时强调了一些编码规范，不过并非全都苟同。\n号称300页，去除大量重复代码估计也就150页的量。\n最值得称赞的是 js与html分离的思想， 别的书也说，只有这个书不停强调。", "marks": "还行"}
{"content": "因为要准备培训所以第一次完整地读了下来，作为倍受推崇的js入门书籍实在是实至名归。", "marks": "推荐"}
{"content": "内容不深，但讲的非常清晰，适合入门。", "marks": "推荐"}
{"content": "周末冲刺python", "marks": "力荐"}
{"content": "入门绝佳。", "marks": "力荐"}
{"content": "入门书籍，买亏了，买回来发现自己已经入门了。。。", "marks": "推荐"}
{"content": "虽然都掌握了，但还是有一些收获。0基础绝对看不懂……", "marks": "推荐"}
{"content": "DOM讲的详细易懂，例子渐进增强挺不错。", "marks": "推荐"}
{"content": "讲的很清楚，而且可以看出作者的思维非常之严谨，写出来的东西真的可以称作艺术", "marks": "力荐"}
{"content": "@2012年翻过一遍,除了最后一章没看.  书写的很有意思,看起来不会乏味.\n@20130423 准备再看一遍.", "marks": "力荐"}
{"content": "知乎上大大们推荐的，上个星期买了这星期某天在地铁上开始读的。内容浅显易懂，有一点基础的读起来有知识被捋顺的感觉，一个星期内可以看完~", "marks": "力荐"}
{"content": "01 http://limu.iteye.com/blog/1267475", "marks": "力荐"}
{"content": "入门 有趣 路漫漫 想哭", "marks": "力荐"}
{"content": "条理清晰，包含了很多思想，非常不错。里面有句话让人很感动，“达成目标的过程与目标本身同样重要”。下周把读书笔记整理出来。", "marks": "推荐"}
{"content": "名字确实太大了，只能当做入门书。书中许多东西都只是提一下。", "marks": "较差"}
{"content": "比较浅显易懂，入门很不错的。", "marks": "还行"}
{"content": "js入门手册，DOM思想，html、css、javascript分别应用于结构层，表示层，和行为层，js可以操作html，也可以操作css。主要的原则：选择对象，对其操作。 20150311", "marks": "力荐"}
{"content": "和作者进行了深入的交谈，并向他扔出了五蕉。感觉外国人的书和国人的就是不一样，语言生动幽默，好像这并不是一门技术而是一门艺术。但是然并卵···我这个渣女看着看着越来越觉得啰嗦··然后就没看完···嗯嗯我是个渣渣···", "marks": "力荐"}
{"content": "经典中的经典", "marks": "力荐"}
{"content": "入门好书。", "marks": "力荐"}
{"content": "敲完这种啰嗦又友好的计算机畅销书就是会给人已经能 code 的错觉（不过感觉这次真的入门了 @-@", "marks": "力荐"}
{"content": "应该是比较简单,容易理解。印象较深的是分离markup(structure), css(presentation)，js(behavior)。\nApply progressive enhancement in order to provide graceful degradati", "marks": "推荐"}
{"content": "果然比看一些零碎的教程更有感觉", "marks": "力荐"}
{"content": "实例+白话文——通俗易懂。就是太精简了点。", "marks": "推荐"}
{"content": "虽然大家都推荐是入门书，但对我来说还是比较难的。", "marks": "力荐"}
{"content": "非常好的JS入门书籍，但是因为是入门，以实际操作为主，也没有详细说明该语言解析时候的坑和惊喜。仅用作入门，而且入门后请一定要看看其他的详细指南。", "marks": "力荐"}
{"content": "初学程序设计，人会迷茫语法，算法和数据结构，及Linux黑框编程，如何能做出那么丰富和复杂的程序，其实这本书讲解了这个过程及框架和面向对象的基础", "marks": "力荐"}
{"content": "扫盲书啊  挺适合我这样入门选手的   不过感觉这书名起得太霸气了", "marks": "推荐"}
{"content": "HTML负责结构/模型，CSS负责显示，Javascript和DOM负责行为，难怪大多数框架都采用MVC。下一本书就可以看RoR或者django了。", "marks": "力荐"}
{"content": "感觉不错，讲得挺细 ", "marks": "推荐"}
{"content": "在我github里有第12章的练习", "marks": "力荐"}
{"content": "甘い", "marks": "推荐"}
{"content": "挺基础的一本书。想学js的最好都看看。之前看一位大拿说他复习这书只要两天，而我断断续续看了2礼拜。还是学了点东西的。还是一句话，基础很重要。", "marks": "力荐"}
{"content": "适合用来入门JS，尽管有些部分啰哩啰嗦容易让人找不到重点，但是保证了讲解明白透彻，内容也比较基础。", "marks": "推荐"}
{"content": "开始入门", "marks": "推荐"}
{"content": "一开始爱不释手，看到后来没动手，前面的就又记不太清了", "marks": "推荐"}
{"content": "作者用生动的例子，不断的讲述Web编程的原则——“渐进增强”和“平稳退化”，写的很棒", "marks": "推荐"}
{"content": "非常适合Javascript入门  每一章的例子讲解的也非常细致 可以参照下载的源代码 自己编写来实现一下！今天读的最后一章实例部分我还没读好，还有后面的附录！感觉 还会再读的  ", "marks": "力荐"}
{"content": "薄薄一本，精华净收其中，知识循循渐进，案例实用易懂，真可谓入门JS不可多得的好教材，以后还要再看两遍！", "marks": "推荐"}
{"content": "不错，思路清晰。", "marks": "力荐"}
{"content": "dom非常好的入门书，讲的很细，适合初学者", "marks": "力荐"}
{"content": "非常棒的教科书，初学者都很容易看懂", "marks": "力荐"}
{"content": "入门最佳书籍...", "marks": "力荐"}
{"content": "JS真是最适合网页编写的语言", "marks": "力荐"}
{"content": "Javascript 入门书籍，还不错的~~", "marks": "推荐"}
{"content": "入门好书。", "marks": "推荐"}
{"content": "简单友好，入门必备。", "marks": "力荐"}
{"content": "好教材 推荐", "marks": "力荐"}
{"content": "初学者必读的js书。精华之处在于讲解javascript的使用原则：渐进增强和平稳退化。不足之处（感觉像是外文书的一个特点）是有的地方有点罗嗦。\n", "marks": "力荐"}
{"content": "面向初学者的书，所以如果看过《JavaScript高级程序设计》的话，建议把它当做小说看好咯O(∩_∩)O~", "marks": "推荐"}
{"content": "简单易懂，不过只适合入门级别的", "marks": "推荐"}
{"content": "比较适合入门。非常不错", "marks": "力荐"}
{"content": "很不错的入门书，再深入一点就好了。", "marks": "推荐"}
{"content": "曾几何时这本书绝应作为你进入JavaScript世界的第一本书，但从今天看来，中文版是12年的了，原版更旧；内容编排也较为啰嗦，很多逻辑代码在实践中完全可以省略，对初学者来说短平快的理念和可操作性是入门书最应该注重的，这方面此书做得不够好。", "marks": "力荐"}
{"content": "一步一步的看着网站变好，展示改进的原理的方法，是本好教材。", "marks": "还行"}
{"content": "打基础的好书，罗嗦的恰到好处", "marks": "推荐"}
{"content": "读过，比较基础，适合初学入门。", "marks": "推荐"}
{"content": "差不多5天刷完 语言有趣例子现代化 喜欢 做好准备入门前端代码啦~", "marks": "力荐"}
{"content": "内容太旧了，很多兼容性的考虑都不需要了(它竟然还考虑了不支持JavaScript的浏览器)", "marks": "推荐"}
{"content": "主要介绍一些基础DOM的应用，通过实例的方式来一步步说明几个常用DCM，并且介绍了一些编程思想。对于前端入门来说还是不错的，不然直接用框架会导致一些原理不清楚。不过也不适合完全没有任何编程基础的人来说，对js和dom的基础介绍太少了，尤其是后面有些例子都不说明一些属性、方法使用方式，直接让人看还是不太能懂的", "marks": "推荐"}
{"content": "了解DOM编程的入门书。虽然比较老了，但还是值得一看。", "marks": "力荐"}
{"content": "终于看完了一本书😂", "marks": "推荐"}
{"content": "小伍说：不要成为码农~好吧，就点到为止~", "marks": "力荐"}
{"content": "优点：讲的清楚详细；突出了下一些前端开发的的思想。\n缺点：内容非常有限没有接收到太多新东西（如果已经写过半年的js几乎3个小时过完），前端理念一直在快速发展，要找到很好并且够前卫的教科书还不如读博客、做些项目来的有用。", "marks": "还行"}
{"content": "对于入门的好书，我是这样理解的\n1）会帮你隐藏现在用不到的知识。\n2）会告诉你初学者的最佳实践。\n3）通过它你具备自学这个领域知识的基础。\n技术牛人不少，但好的书真的不多，且看且学习！", "marks": "力荐"}
{"content": "Ajax和Html5两个部分比较鸡肋，完全看不懂……其他部分还不错，非程序员入门js阅读此书基本没有障碍。", "marks": "推荐"}
{"content": "浅显易懂。", "marks": "力荐"}
{"content": "纸上得来终觉浅，绝知此事要躬行", "marks": "力荐"}
{"content": "文字清新，简单明了", "marks": "力荐"}
{"content": "最后一个项目没做，懒得弄图片素材（还是懒）。作者一点点的构筑项目，详解了DOM 中的基本方法，和JavaScript中的编程规范。入门看非常合适。", "marks": "推荐"}
{"content": "虽然讲的是很简单的内容，但现在很少能看到按照：语法总结---->注意事项---->项目实战,这种简单而又符合学习规律的结构进行组织了，光是从这一点看这分数就是应得的。", "marks": "力荐"}
{"content": "之涉及dom部分 内容还可以 但是很多地方都比较过时了", "marks": "还行"}
{"content": "1、新知识点：第7章尾Ajax部分，第10章JS动画效果，第11章HTML5和附录JavaScript库，只是简单介绍。2、其他因为先前看视频也学了不少，因此读得很轻松。", "marks": "还行"}
{"content": "【二刷，2017.02】DOM入门好书。花2天看完，少一些理论，多一些代码、实例，挺通俗易懂的。想起刚入门前端时，基础不太好，所以看不太懂，当时觉得这本书和红皮书是一样的书，现在发现很不一样，我心中的js经典还是《JavaScript高级程序设计》。", "marks": "推荐"}
{"content": "渐进增强，平稳退化", "marks": "力荐"}
{"content": "内容清晰，但部分内容略显重复。完全适合对dom不了解的人。", "marks": "力荐"}
{"content": "学习呢，好书", "marks": "力荐"}
{"content": "太棒了特别适合新手，逻辑清晰", "marks": "力荐"}
{"content": "入门非常好，真的真的！！！", "marks": "力荐"}
{"content": "已经读了一半了，估计这周就能看完。我个人感觉，如果DOM编程不是很规范，或者说不得其法的，可以看看。如果已经写过一段时间JS了，不建议看。", "marks": "推荐"}
{"content": "基本入门读物", "marks": "推荐"}
{"content": "前端入门读物", "marks": "推荐"}
{"content": "我觉得作者一定是个特别善良 乐于助人 爱扶老奶奶过马路的大叔。 部分东西感觉有点老了，虽然我刚学。", "marks": "推荐"}
{"content": "感觉很古老的样子，但是写得好有诚意啊。", "marks": "推荐"}
{"content": "入门书籍", "marks": "力荐"}
{"content": "入门 JavaScript 的时候很容易就 “只识巫山不见云”，沉溺于学习 JavaScript 的各种语法，却遗漏了同等重要的 DOM 操作，此书虽薄，却是入门的最好补给品。", "marks": "推荐"}
{"content": "内容简洁，但是目前有更方便的写法，可以看看以前的历史", "marks": "还行"}
{"content": "想不到第一本敲完的技术书居然是JS入门...", "marks": "推荐"}
{"content": "读的慢，还有很多不懂，要重读第二遍。", "marks": "力荐"}
{"content": "有点啰嗦……自己比较急性子，这种类型的书看完我估计是没法立刻上手做项目，但是现在工作后回来补基础这本知识点太零散也不全又不合适了……有点鸡肋……估计适合给想转行入门的人？", "marks": "还行"}
{"content": "很入门，在思维思想上有很大的引导力，对于初学者而言做到了应有的引导，这样的书就是好书。", "marks": "推荐"}
{"content": "浅显易懂，还是比较适合初学者的", "marks": "推荐"}
{"content": "入门的书籍，很简单，", "marks": "推荐"}
{"content": "有茅塞顿开之感！最后项目没写，有时间补上。", "marks": "力荐"}
{"content": "很不错，之后应该还会再读几遍", "marks": "力荐"}
{"content": "写得有点墨迹。。", "marks": "推荐"}
{"content": "读这本书做练习时体会到的，用文本编辑器写js，简直就是做死:-)", "marks": "力荐"}
{"content": "JavaScript 和 DOM 编程入门的好书，先介绍了 JavaScript 的语法，然后介绍了 DOM 的概念，再向读者讲述了“平稳退化，渐进增强”的原则，为后面的学习、开发培养正确的观念，最后有一个综合示例将前面的内容全部串连在一起。附录里面还介绍了几个有用的 JavaScript 库。", "marks": "力荐"}
{"content": "挺好的js入门书籍，适合我这种算是完全不会js的人，看了两遍，印象最深的是里面的“平稳进化、渐进增强”的思想", "marks": "力荐"}
{"content": "是javascript 入门经典", "marks": "力荐"}
{"content": "渐进增强，平稳退化。", "marks": "力荐"}
{"content": "特别经典！作者讲的特别好。但是，web发展太快，好多更新的内容，还是需要从其他途径继续学习了。", "marks": "力荐"}
{"content": "果然经典", "marks": "力荐"}
{"content": "很好的入门书，从对前端一知半解到有系统性的认识", "marks": "力荐"}
{"content": "入门书，适合快速上手。很早就引入 DOM 的概念。快速介绍了怎么用原生 JavaScript 来操作 DOM 元素。对于更复杂的特性，比如事件响应没有涉及太多。", "marks": "推荐"}
{"content": "通过简单的几个例子，讲解了基本的操作DOM的方法", "marks": "力荐"}
{"content": "睡前读物……附录和从HTML5开始就已经在跳步了，前面又太烦", "marks": "推荐"}
{"content": "这本书，十分适合有html和css基础的人快速入门javascript，而且书中不断强调各种网页编程思想，让像我这种刚接触javascript的人就可以养成良好的编程习惯，所以这真的是一本快速入门的好书。当然这本书仅仅适合入门或已经入门的而又想优化自己的代码的人看。", "marks": "力荐"}
{"content": "正如前言所说，不是给程序员读的，是给设计人员读的，因此显得啰嗦，起点过低，因此不可避免的深度广度不够。程序员更适合读权威指南那本。", "marks": "还行"}
{"content": "-_-# 打死不做前端", "marks": "推荐"}
{"content": "更像是一本介绍JS编程规范的书，很多语法细节均无提及，不能仅靠此本完成入门。", "marks": "还行"}
{"content": "读完第二遍，感觉理解的深刻一点。", "marks": "推荐"}
{"content": "很棒的javascript入门书", "marks": "力荐"}
{"content": "内容不多，算下来一天左右看完的。看的第一本javascript的书，没办法跟其它同类书对比，但就个人而言觉得用来入门还是挺靠谱的。讲东西符合认知规律，最重要的是对为什么要这么做解释得很清楚。至于啰嗦么，初学者嘛，重复也不失为一种好选择：）", "marks": "推荐"}
{"content": "javascript的入门好书，清楚明白有理", "marks": "力荐"}
{"content": "尽信书不如无书，书是一本算是还好（很一般）的书，书中有些观点和做法实在不合适。", "marks": "推荐"}
{"content": "入门，很多可被jQuery替代", "marks": "力荐"}
{"content": "一步一步的讲解JS DOM方面的知识，后面的表单跟AJAX还不是很懂", "marks": "力荐"}
{"content": "一开始觉得是一本很水的书，觉得讲的东西太底层了，同事买的，因为当时也并没有系统地学习过dom，后来渐渐的沉住气，看下来这本书，觉得理解了dom，其实才能理解js在浏览器上的操作，另外也要说一句，有了这本书的知识，我其实才终于能够自己编写油猴脚本，恩，编写油猴脚本是我大学几年里都觉得很神奇的事情，这几天系统地学了这本书，也终于能够编写脚本了。有了这本书的知识，react也能更好理解了，所以也就照例5星了。", "marks": "力荐"}
{"content": "检查兼容性的写法非常out，部分代码的语句冗杂，幸亏之前看视频get到好的写法。新手入门实用性四星。", "marks": "推荐"}
{"content": "浅显易懂，入门必备", "marks": "推荐"}
{"content": "好入门书", "marks": "力荐"}
{"content": "还差个最后一章不过基本上照着敲了一遍吧，讲道理这个从零开始的肯定是看不懂的……中间配合着高级程序设计看了下也只能算是了解了个大概_(:з」∠)_等我回头撸玩高级程序设计估计还得再看遍这个orz", "marks": "力荐"}
{"content": "DOM方法讲的不错，几个函数很实用，前后思路清晰，很多东西还是过时了。感谢皮皮酱在睡梦中陪我看完。", "marks": "推荐"}
{"content": "授人以鱼不如授人以渔，整本书其实都没有深入去讲在DOM编程中的任何细节。提到DOM API也只是最基本的那几个而已。但是整本书，由始至终都在向读者传递一个在DOM开发中很重要的原则逐步增强，平稳退化。", "marks": "力荐"}
{"content": "浅显易懂。\n我这学了ES6后，才来学DOM😂\n发现for of和let大法好\n\n前端更新快，这本书里面有些东西好像已经过时了。dom讲的还是挺精彩的。", "marks": "推荐"}
{"content": "通俗易懂.从javascript对DOM的基本操作入手.基本上道出了jquery等框架的实现方式.现在对DOM的操作很少用原生态javascript了.", "marks": "力荐"}
{"content": "简单介绍了 JavaScript，主要讲解了利用 DOM 和 HTML、CSS 构建网站。对实践很有帮助。但是还需要阅读其他书籍来熟悉 JavaScript。", "marks": "推荐"}
{"content": "本来买这本书仅仅是为了屯书吧。很快翻完了，果然和预料的差不多，没有太多值得看的。适合初学者，但是不适合已经有一定基础的，讲 DOM 本身的不多，反而更多的篇幅去讲其他的东西（过时的也比较多）。如果想学更多 DOM 相关细节，应该去看 JS 高程；更深入学习 JS 应该去看 You don't know JS", "marks": "推荐"}
{"content": "前端入门的不二之选，阅读顺序大概在读完head first之后，将高程读完前3到4章然后阅读此书", "marks": "力荐"}
{"content": "这本对我来说就相对简单了点，算是娱乐吧，给我们美工看看还可以", "marks": "推荐"}
{"content": "系统理解DOM的原理和机制，还有作者坚持的良好编程风格。整本书用一个实例串起来，安排也很合理。推荐入门阅读。", "marks": "力荐"}
{"content": "我觉得我已经入门了！", "marks": "力荐"}
{"content": "前端必读系列。", "marks": "力荐"}
{"content": "简单入门书", "marks": "推荐"}
{"content": "生动简练的JavaScript入门书。适合零基础前端开发者。", "marks": "力荐"}
{"content": "作为一本快速入门JS和DOM操作的书还是很称职的，而且讲的很生动", "marks": "推荐"}
{"content": "一句话，这本书算是程序员的心灵鸡汤。书中所写所引，不少箴言/警言，收获多少，存乎一心。\n\n本书许多条目其实与敏捷无关，但为了吸引眼球，让内容敏捷，纷纷在前头加上“敏捷”二字。《高效程序员的45个习惯》似乎是在向《程序员修炼之道》致敬，前者45条，后者46条，但看下来，前者远不如后者精致。整本书读下来，个人觉得此书主笔只有Venkat，封面上的Andy貌似只是打酱油，为自家出版的书充一下门面。", "marks": "还行"}
{"content": "被注释逗笑N次，一个段子是：XML就像人类，小的时候很可爱，长大了之后，非常讨厌。", "marks": "力荐"}
{"content": "对我来说，这本书没达到温伯格目标(Weinberg's Target).", "marks": "还行"}
{"content": "若已对敏捷有所了解，那么此书除了插科打诨外实在没有什么新意。", "marks": "还行"}
{"content": "很多想法不仅仅限于软件设计，有很多关于管理的思路。", "marks": "推荐"}
{"content": "这是本充满了“正确的话”的书，如果已经有敏捷开发经验的话，可能会觉得此书太浅；如果没有经验的话，不知道能吸收多少", "marks": "推荐"}
{"content": "还成,指出了方向,但是每一条具体作的时候有什么工具/思路/问题/体验,都得自个儿去闯了,,,", "marks": "推荐"}
{"content": "经过实践，一定程度上反对此书", "marks": "还行"}
{"content": "印象深刻的是：懂得丢弃", "marks": "推荐"}
{"content": "最喜欢其中“平衡的艺术”", "marks": "力荐"}
{"content": "翻了翻，重温做程序员的日子。", "marks": "还行"}
{"content": "#豆瓣阅读# 部分东西有用吧。。。> <但是好像太针对Java或者面向对象了", "marks": "推荐"}
{"content": "个人体会是 水平得高   实现技术得熟练～  然后这些就好上手~  留着看10年后的自己会不会来笑自己……", "marks": "还行"}
{"content": "学习下", "marks": "力荐"}
{"content": "书做得真好啊 内容没看完", "marks": "推荐"}
{"content": "择其善者而从之，其不善者而改之。", "marks": "推荐"}
{"content": "是否可以用来衡量是贼上了船还是上了贼船？", "marks": "推荐"}
{"content": "没有太多新东西。我想看的不是“有哪些好习惯”，而是“如何选择哪些好习惯”。可惜，没有。", "marks": "还行"}
{"content": "境界不够。。收获不大。。。", "marks": "还行"}
{"content": "很实用的敏捷开发手册，很多Bad Practices都在以前的经历中若隐若现。", "marks": "推荐"}
{"content": "需要再细品", "marks": "推荐"}
{"content": "关键在于实践。需要制定出可行的计划，从最容易实现的点开始，一步步将这些技巧变成真正的习惯。", "marks": "推荐"}
{"content": "不错", "marks": "推荐"}
{"content": "和其他同类书籍一样，有点知易行难的感觉。\n翻译很生硬。", "marks": "还行"}
{"content": "2年前看了英文版，2年后看了中文版……", "marks": "力荐"}
{"content": "虽然都是老声常谈，不过没个习惯的“平衡的艺术”是亮点。", "marks": "推荐"}
{"content": "非常棒的一本书，其主旨就是不断去实践，然后不断去收集反馈，勇敢地去否定昨天，相信自己的工作会越做越好。", "marks": "力荐"}
{"content": "泛泛看了一遍，还成吧。可以算《程序员修炼之道》的模仿版。", "marks": "还行"}
{"content": "关于敏捷的纲领。", "marks": "力荐"}
{"content": "敏捷开发最佳实践读本(呃,截止到 2010-11-04 02:02)", "marks": "力荐"}
{"content": "可直接阅读各章标题和“小天使”，讲述了一下基本的agile dev概念。", "marks": "还行"}
{"content": "读了目录就已经看到了本书95%的内容", "marks": "还行"}
{"content": "还不错的一本敏捷开发的书，特点是本节都有“切身感受”与“平衡的艺术”从正反两方面点题。", "marks": "推荐"}
{"content": "简单轻松地介绍了敏捷开发", "marks": "力荐"}
{"content": "还不错，只是每一点都讲得不够深入，当然，从另一个角度看，这也是本书的优点，呵呵", "marks": "推荐"}
{"content": "应该时常翻翻，融入到自己的感觉中，最后扔掉的一本书。", "marks": "推荐"}
{"content": "前面魔鬼说的话，跟我平时工作很契合啊", "marks": "推荐"}
{"content": "敏捷开发金玉良言集，balance", "marks": "还行"}
{"content": "Practices of an Agile Developer: Working in the Real World", "marks": "推荐"}
{"content": "两年前读过，有机会再读一遍。", "marks": "推荐"}
{"content": "好！！！", "marks": "力荐"}
{"content": "深入浅出地讲解敏捷核心实践的书，把各种敏捷方法中的有效实践有机地串联成一个整体。与其说是45个个人习惯，不如说是45个思想观念，45个方法。要学的东西还有很多，积极修炼吧，骚年！", "marks": "推荐"}
{"content": "不仅仅是程序员", "marks": "推荐"}
{"content": "光凑十个习惯都不好意思拿出来说了", "marks": "推荐"}
{"content": "理论浅显易懂", "marks": "力荐"}
{"content": "其实这本书看看目录就行了", "marks": "还行"}
{"content": "生于灵活，死于灵活！这45个习惯基本都软件编程习惯都包含完了，不过侧重于灵活。瀑布式相比敏捷太复杂严格了！我很赞同“变化才是永恒”，如果不想偏离预期，那只好实时跟进和反馈了！", "marks": "推荐"}
{"content": "在项目中记录Bug的解决方案，态度决定一切，学无止境，敏捷的反馈，编码，调试和协作。", "marks": "力荐"}
{"content": "终身学习", "marks": "力荐"}
{"content": "更像是一本哲学书或是心理学的人生指导书，不仅仅适用于程序员，人人都该看啊，可能是因为高复杂度项目的要求，geek们常常要进行高标准合作所以个人素质的提升显得更急迫。", "marks": "力荐"}
{"content": "敏捷开发人员必读～", "marks": "力荐"}
{"content": "其实呢，敏捷是一种生活态度。", "marks": "力荐"}
{"content": "敏捷而已", "marks": "还行"}
{"content": "非常不错的一本书，敏捷编程更多是一种敏捷的思维习惯，敏捷的行事方式，最终目的是提高工作学习的效率", "marks": "推荐"}
{"content": "程序员必读书籍", "marks": "力荐"}
{"content": "敏捷开发非常有参考价值的书", "marks": "力荐"}
{"content": "这种最佳实践的书，最好了。。。", "marks": "还行"}
{"content": "要做组里最差的那个，这样才有前进的动力。。。这是在安慰我吗", "marks": "推荐"}
{"content": "很有收获", "marks": "推荐"}
{"content": "培训", "marks": "推荐"}
{"content": "这本书看的时间不短了，毕竟不是一本一口气能看完的书，需要揣摩，体会和实践。team member角色的程序员们一定要读，了解基本的思想。", "marks": "力荐"}
{"content": "貌似是大一时在火车上看的，当时还记了一堆笔记。。估计再看一边会有新的体会。", "marks": "推荐"}
{"content": "不管是什么工程都是这样吧，这类书就是直接告诉你看山就是山，看山不是山，看山还是山里面最后一个阶段里的朴素真理，不浮夸，挺好的。不过中文排版很烂。PS.本意我是不想当程序员以及code相关。", "marks": "推荐"}
{"content": "跳着看完的，基本上都对。只是实在是意识到“纸上得来始觉前，绝知此事要躬行”", "marks": "力荐"}
{"content": "对事不对人", "marks": "推荐"}
{"content": "我司 PM 说我很多观点都是从这本书来的，冤……真理都是统一的对不对？", "marks": "推荐"}
{"content": "敏捷开发小册子", "marks": "推荐"}
{"content": "告诉你在软件开发工作中应该注意的种种。很好的书，值得一读。", "marks": "推荐"}
{"content": "敏捷实战", "marks": "推荐"}
{"content": "初习可以看看。", "marks": "推荐"}
{"content": "一堆好的习惯", "marks": "力荐"}
{"content": "内容不错，有指导意义，一遍读下来有点意犹未尽的感觉。个中方法值得再回过头来推敲学习并加以实践", "marks": "推荐"}
{"content": "还行，但相比同类型的书籍《程序员的职业素养》却逊色不少。", "marks": "推荐"}
{"content": "本书用纸只比厕纸多了一些文字。", "marks": "推荐"}
{"content": "书中介绍了一些比较实用的实践方法，执行起来简单有效，如“立会”、“代码复查”等。不过其中关于代码捡入的观点不太赞同：书中提倡提交经过仔细测试的代码，以保证自动测试代码、自动集成的可用性。喜欢git的同学估计会不以为然，git崇尚的就是提交、提交、再提交！", "marks": "力荐"}
{"content": "据说是我写的序", "marks": "推荐"}
{"content": "在还没开发之前，看看这本书，拥有好习惯，以后的路走的顺一写。书里提到一些我还不了解怎么操作的词，“持续集成”、“重构测试”、FIT测试框架，PIE原则等等，有几本书想看“单元测试之道JAVA版”，“项目自动化之道“、”版本控制之道“。", "marks": "推荐"}
{"content": "2天干完，酣畅淋漓的说，值得一读再读的好书。。。", "marks": "力荐"}
{"content": "整体围绕敏捷这个核心概念，向外做发散性习惯介绍。刚接触敏捷这个概念一直不太懂，深入点了解后，其实国内很多团队都在使用这种开发方式了，只是敏捷化程度还不够高，仍有提升空间。", "marks": "推荐"}
{"content": "２、３章不错，给了很多提高程序员自身修为的建议。", "marks": "推荐"}
{"content": "敏捷的一切都为了更高效地完成项目", "marks": "力荐"}
{"content": "前人的经验总结，值得一看", "marks": "力荐"}
{"content": "方法论不同于工具，只有完全理解，不断实践反思才有意义。阅读，实践，反思，然后再实践。本书从测试到持续集成，到编写代码，几乎涉及现代软件开发的所有方面，至于敏捷，像空气一样自然吧", "marks": "力荐"}
{"content": "提醒了许多我们熟视无睹的地方。", "marks": "力荐"}
{"content": "以前读", "marks": "还行"}
{"content": "接纳别人的想法，而不是盲目接受，这是受过教育的头脑的标志。", "marks": "力荐"}
{"content": "每一章都会给出一个建议，简洁明了，很有启发。不过一会儿就翻玩了。。", "marks": "力荐"}
{"content": "这些书越看越觉得公司是在胡整。", "marks": "推荐"}
{"content": "花半个小时看了一遍，感觉一般啊。有时间再看看", "marks": "推荐"}
{"content": "书中很多方法已经成为了业界内通行的准则，推荐刚入行的读一读", "marks": "推荐"}
{"content": "敏捷的艺术，是对软件开发过程中时间空间粒度和反馈方式的管理", "marks": "推荐"}
{"content": "翻译得不错，能流畅看下来。讲的内容还是那些，编码习惯+单元测试+持续集成+敏捷会议……虽然没有特别创新的点（作者本意也没想创新啥吧），但是汇总的依然很不错。书里面引用了大量著名人士的话语，有些话很不错。", "marks": "推荐"}
{"content": "敏捷开发", "marks": "力荐"}
{"content": "敏捷开发实践", "marks": "还行"}
{"content": "读完这本书，大概明白了敏捷开发以及在项目开发、团队协作中应该注意事项，非常不错的书。", "marks": "推荐"}
{"content": "看了一多半，适合项目经理看，互联网开发", "marks": "推荐"}
{"content": "修身，对事不对人。", "marks": "力荐"}
{"content": "就是敏捷开发啦", "marks": "力荐"}
{"content": "不仅仅是程序员，做项目管理的都应该看看。", "marks": "力荐"}
{"content": "适合团队一起阅读的技术书籍", "marks": "力荐"}
{"content": "零零散散的看完了，习惯都不错，关键还是在于实践吧。", "marks": "推荐"}
{"content": "虽然不是为了敏捷才看的，不过里面的许多习惯对于建设一个良好的团队还是很有价值（其实很多地方看过多遍）。如果叫敏捷开发之道我估计不会看，这书名太标题党了些。", "marks": "推荐"}
{"content": "全书章节明确，言简意赅，说的都是经验丰富的大牛的真知灼见。非常具有实践意义的一本好书。", "marks": "力荐"}
{"content": "这种讲究观点的书，是要程序员做到一种地步之后才会感同身受。当你感同身受的时候，已经觉得这都是常识了。不需要再看这种书了。", "marks": "推荐"}
{"content": "该书有很强的指导和法则，在读过的48小时内要应用上才算有实际意义，否则就是乱翻书，过一过眼而已。", "marks": "推荐"}
{"content": "开发需持续不断，切勿时断时续。\t你要防微杜渐，把问题解决在萌芽阶段，你要探索未知领域，在大量成本投入之前确定可行性。\n\t敏捷开发就是在一个高度协作的环境，不断使用反馈进行自我调整和完善。\n\n\n指责不能修复bug，消极扼杀创新，你不需要很出色才能起步，但是你必须起步才能变得很出色。", "marks": "还行"}
{"content": "非常适合工作的挨踢人士阅读。强烈推荐！", "marks": "力荐"}
{"content": "回头再看一遍。", "marks": "推荐"}
{"content": "敏捷大杂烩", "marks": "还行"}
{"content": "非常不错，不同时间阅读有不同的感受。尤其喜欢每章的平衡之道", "marks": "力荐"}
{"content": "读完，需review", "marks": "还行"}
{"content": "不错的书，短小精悍", "marks": "推荐"}
{"content": "两个半天看完，看起来不怎么费力；可以结合编码过程中的大多实际情景，推荐每年都看一次！@", "marks": "推荐"}
{"content": "敏捷考试", "marks": "力荐"}
{"content": "还行。", "marks": "还行"}
{"content": "内容不错，书的质量太差了。18页之后从第3页重新开始了，再到18页的时候直接跳到第35页了。我还以为自己穿越了呢。", "marks": "推荐"}
{"content": "敏捷 不错", "marks": "推荐"}
{"content": "需要反复看，每次看都有新感受，程序员鸡汤？", "marks": "还行"}
{"content": "讲了方法论，印象不深刻", "marks": "还行"}
{"content": "看似很散，其实主题很突出，部分内容有重合", "marks": "推荐"}
{"content": "总有一些什么人说，一个出色的工程师要能总结方法论，于是就有人问，方法论和方法的区别是啥？好吧，这本书的内容就是方法论。", "marks": "推荐"}
{"content": "不止编程，可以用在很多方面", "marks": "推荐"}
{"content": "纯粹因为豆瓣招聘有一条是关于敏捷开发，我在看到副标题的下一秒就把它拖进了购物单。亏了这本书才误打误撞地被TW收编。", "marks": "推荐"}
{"content": "比较轻松的一本书，主要讲敏捷实践。不难，也不浅显，都是需要付诸行动的准则。中文译名太烂俗，不知道怎么想的。", "marks": "推荐"}
{"content": "经典，作译者皆是大牛！", "marks": "力荐"}
{"content": "内容稍微有点儿老，不过还是有些指导意义的。", "marks": "推荐"}
{"content": "虽然全书都在讲敏捷，但其实都是些好的常规的开发习惯。里面有些习惯要是一直能保持还是挺不错的，比如记录bug，经常沟通，提早集成。不过其实整书的讲解都很general了，感觉看一遍目录就能复习一遍 =。=", "marks": "推荐"}
{"content": "我都知道啊", "marks": "还行"}
{"content": "老魔头说的好有道理, 我竟无言以对...", "marks": "推荐"}
{"content": "一般吧。\n", "marks": "推荐"}
{"content": "有关敏捷的，理解不多", "marks": "推荐"}
{"content": "其中讲的大部分习惯已经了解，权当复习一遍了。作为程序员修炼之道的升级版，不仅仅对敏捷开发有知道作用，书中9成以上的观点适用于软件开发的通用领域。", "marks": "推荐"}
{"content": "敏捷精品！", "marks": "力荐"}
{"content": "试读，未通过", "marks": "较差"}
{"content": "知行合一，对这些习惯进行实践才行！", "marks": "推荐"}
{"content": "第二次详读，感慨良多，部分翻译还是不那么好。", "marks": "力荐"}
{"content": "很多习惯跟敏捷没有关系，不过内容真的不错，虽然都是理论性偏多，但是有一种醍醐灌顶的感觉，这本书可以作为床头书籍，没事可以翻翻。", "marks": "推荐"}
{"content": "值得看", "marks": "推荐"}
{"content": "没有客户的需求是固定不变的，唯有变化本身是永恒的！", "marks": "力荐"}
{"content": "很平易近人的一本床头书，比某些死板的方法论书籍更有营养。喜欢敏捷和正在进行敏捷执行的同学都不要错过哦！", "marks": "力荐"}
{"content": "一般。", "marks": "还行"}
{"content": "敏捷入门，读起来很轻松", "marks": "力荐"}
{"content": "原来是\"猪和鸡的故事\"的出处", "marks": "还行"}
{"content": "Hunt三书之一，花费两天时间读完，确实是本将习惯的书，其中基本不包括任何技术细节，看似每一条都是简单的常识，但越简单的往往是越复杂的，相信每一条经验都是历经编程洗礼的精华，而且戳开了我一些知识上的盲点（单元测试，结对编程），要速度补一下", "marks": "推荐"}
{"content": "明白敏捷的原则后，不需要把这45个习惯全部记住。态度决定程序员的高度，敏捷方法论只是把提高沟通减少drama的东西放到台面上说了。书中的很多具体建议先进有了更好的产品替代，有用到的可以扩展下。", "marks": "推荐"}
{"content": "学习敏捷开发的思想、习惯~", "marks": "还行"}
{"content": "变化才是永恒", "marks": "推荐"}
{"content": "孙春奇推荐过这本书。大四能在图书馆安静地读这样一本书，这感觉真的很美妙！", "marks": "力荐"}
{"content": "很好的参考书，对X86汇编很有帮助，不过实验系统是在WindowS 感觉不太喜欢，还是LINUX/UNIX 上比较习惯。", "marks": "力荐"}
{"content": "看这本书是因为深入浅出MFC还在路上，然后托人在学校借了这本书，用来大概了解MFC的结构和用法还是可以的，不过翻译水平可真不怎么样，ODBC翻译成了打开数据库连接，还有一些脑残代码我就不吐槽了，谁看谁知道啊，呵呵", "marks": "还行"}
{"content": "书还可以，但例子感觉不是很好", "marks": "推荐"}
{"content": "@工具书", "marks": "推荐"}
{"content": "翻译烂，云里雾里。", "marks": "较差"}
{"content": "总的章节安排有一个体系结构，但章节内的讲述比较凌乱。如前言所述，适合中、高级shell开发人员做备忘之用。", "marks": "还行"}
{"content": "翻译的有些硬……", "marks": "还行"}
{"content": "不够", "marks": "推荐"}
{"content": "4M => 1,2 => 7", "marks": "推荐"}
{"content": "毕业时从宝珠同学那里低价收购，读罢立即后悔没有早看中，胜读x年书啊", "marks": "推荐"}
{"content": "1 2 3 1 2 3 1 2 3……", "marks": "推荐"}
{"content": "翻译的还是不怎么好，内容并不多，但是讲的不连贯", "marks": "还行"}
{"content": "开卷有益，有些枯燥", "marks": "推荐"}
{"content": "Nov,21,2016,弃，page96.", "marks": "较差"}
{"content": "中文翻译非常差，看了一半是在看不下去改英文版了", "marks": "很差"}
{"content": "echo \"need a second deep learning!\"", "marks": "还行"}
{"content": "翻译的像狗屎一样的书，两个译者骗钱的！", "marks": "很差"}
{"content": "入门教程，四天翻完～", "marks": "推荐"}
{"content": "这本书有这么好吗？是不是过誉了？还是我自己的问题。", "marks": "还行"}
{"content": "让你的manager读一读！", "marks": "力荐"}
{"content": "你根本不能改变的话你就永远不会有改进。{旧的现状}—外来因素—{混乱}—正在转变的观念—{实践和综合}—{新的现状}。环境因素，胶状团队，人员流动的隐性成本。", "marks": "推荐"}
{"content": "翻译有让我不是在看中文的感觉", "marks": "还行"}
{"content": "版本老了点，10多年前的了，有些东西还有些借鉴意义，有些就过时了", "marks": "还行"}
{"content": "重读完毕，疑惑依旧，对这类书似乎已经有了免疫力", "marks": "推荐"}
{"content": "意淫一下可以", "marks": "推荐"}
{"content": "字字戳心。", "marks": "力荐"}
{"content": "3小时30分钟。不要把人当做单纯的机器来进行管理，而是要把人放在一个系统中进行思考，如何提高个体的生产力，降低个体之间的沟通成本。", "marks": "力荐"}
{"content": "《人件》第1版于 1987 年出版，专门讨论了软件开发和维护团队的管理问题，并向人们的传统认识提出了挑战。", "marks": "推荐"}
{"content": "义理在现实面前是崇高的、正确的，只是很难实现。", "marks": "还行"}
{"content": "看的是英文版, 中文版没看过", "marks": "力荐"}
{"content": "除了“家具警察”一段觉得有共鸣之外，其他的好像我不是很感兴趣。或者说我一开始就对这本书的期望太高了？", "marks": "还行"}
{"content": "我觉得，所有做与人相关的工作的，都可以看看这本书。尤其是管理那些好歹念过一些书的。", "marks": "力荐"}
{"content": "1、能够帮助一个项目凝聚起来的人比得上两个只做工作的人；2、人们在受到时间重压的时候不是工作得更好，只是工作得更快。", "marks": "力荐"}
{"content": "不知所云", "marks": "很差"}
{"content": "要给自己创造良好的工作环境。", "marks": "推荐"}
{"content": "读过英文，中文mark一下", "marks": "力荐"}
{"content": "观点很有启发，但有些冗长了，其实是4星半。\n但为了不让好书埋没，给五星", "marks": "力荐"}
{"content": "讲述的理念很好，但是不少的东西无法做到。对工作环境的要求太高，基本上很难达到。\n另外，太强调个人了", "marks": "推荐"}
{"content": "看的时候没多大兴致，比较适合老板去看吧", "marks": "还行"}
{"content": "本质上人是不可能管理的，成功管理的本质是使每一个人都朝着相同的方向努力。", "marks": "推荐"}
{"content": "读了一半，弃", "marks": "还行"}
{"content": "好书一本。", "marks": "力荐"}
{"content": "如果《人月神话》看着没啥赶脚，就翻这本吧~~~", "marks": "力荐"}
{"content": "一開始我覺得只是一本嘩眾取寵的書,但隨著深入,發現它其實挺深刻~~", "marks": "推荐"}
{"content": "请程序员们的上司读一读，原来偶们一直生活在水深火热中。", "marks": "力荐"}
{"content": "如果每个经理都按照这个做，那么开发人员多么幸福啊。", "marks": "推荐"}
{"content": "没有想象中那么好，但也不错了，只是，应用呢......", "marks": "推荐"}
{"content": "大概看看吧", "marks": "推荐"}
{"content": "对照自己的工作，好想给我老板看。", "marks": "力荐"}
{"content": "书是好书，可惜被翻译给毁了。建议豆瓣对翻译书籍增加一个“翻译评价”。", "marks": "很差"}
{"content": "获益匪浅", "marks": "力荐"}
{"content": "非常好的书，值得多次阅读。值得购买。", "marks": "力荐"}
{"content": "很不错，强调人在软件开发和企业中的作用，偏管理而非技术", "marks": "推荐"}
{"content": "呵呵，很多理论太经典了，不能不读啊。", "marks": "推荐"}
{"content": "这种翻译水平怎么好意思出书的 真佩服不要脸的", "marks": "很差"}
{"content": "读的第一本管理类的书，虽然目前看来和我关系的确微弱……翻译得很不错，启发也有一些。", "marks": "力荐"}
{"content": "从一个项目经历的角度，看如何管理人员识得他们高效率，深入到 被管理者（程序员)的思维模式中来构思，项目经理必读书", "marks": "力荐"}
{"content": "应该是借同事的书看的", "marks": "力荐"}
{"content": "每年读一次吧", "marks": "推荐"}
{"content": "因为人月神话，所以才买了这本，但是感觉远不如《软件工艺》", "marks": "还行"}
{"content": "看完有种豁然开朗的感觉。", "marks": "力荐"}
{"content": "三星半，四星吧，关于管理的书，翻译烂了点", "marks": "推荐"}
{"content": "建议每个管理人员阅读", "marks": "力荐"}
{"content": "本书于1987年出版，专门讨论了软件开发和维护的团队管理问题，并向人们的传统认识提出了挑战。作者在书中推崇人本管理思想，正确指出知识型企业的核心是人，而不是技术，呼吁给予软件工作者充分的自由和信任。本书于1987年出版后，立即在西方引起了轰动，被誉为“几十年来对美国软件业影响最大的理念”。", "marks": "力荐"}
{"content": "开发人员看了属于自我安慰,老板看了不会全都执行", "marks": "还行"}
{"content": "翻译的跟屎一样。", "marks": "很差"}
{"content": "从程序员角度考虑问题，细致又独到", "marks": "推荐"}
{"content": "软件以人为本。", "marks": "力荐"}
{"content": "几年前就买了，最近两周认真读完，受益匪浅。\n接下来会把大量精力投入到培育高生产力团队的工作中", "marks": "力荐"}
{"content": "管理重在理而不是管。无奈的是，这么多年过去了，大环境仍犯着书中提到的各种问题。书中关于编程语言的论述有的过时的。", "marks": "力荐"}
{"content": "吐槽佳作", "marks": "力荐"}
{"content": "好书，可惜翻译质量有点低。", "marks": "推荐"}
{"content": "以前曾经翻过一遍，没感觉，这次重看，醍醐灌顶，屡次激动得想哭。", "marks": "力荐"}
{"content": "2003年看过，忘记了内容", "marks": "还行"}
{"content": "充分关注到了程序员的状态，仅从人道主义来说，也是值得推荐的。", "marks": "力荐"}
{"content": "“大多数软件经理人乐于承认这样的观点：他们在人员上遇到的难题比在技术上遇到的难题更多。然而他们很少用这样的思想指导管理工作；他们做管理工作时，好像技术是他们关心的主要事情。”", "marks": "还行"}
{"content": "如何形成the Jelled Team，举出了技术管理方面的诸多现象与问题", "marks": "推荐"}
{"content": "这本书的观点对于公司管理人员很有启发，然而奇怪又不奇怪的是，从来在组织的执行中，正确的往往不被执行，而错误的却一直在进行。无论，读读这本书，会对自己有触发，可能不充分，但是也足够了。", "marks": "推荐"}
{"content": "以人为主的软件管理图书，5年前读过，当时的冲击力很大，但是都已经忘记内容了，就记住电话打扰工作什么的，呵呵，有空再度吧", "marks": "推荐"}
{"content": "只能算是暼了一眼，没有留下太深的印象。仍然觉得项目管理的理论太多，书太多，而实际有用的太少。", "marks": "还行"}
{"content": "可是，程序员也算“人\"吗？", "marks": "推荐"}
{"content": "翻译的像屎一样，准备看原版", "marks": "较差"}
{"content": "。。。。看完了还是没什么灵感", "marks": "还行"}
{"content": "开发中对人的‘管理’重于对技术的管理，这种‘管理’重在‘理’而不是‘管’，这种管理的核心理念是尊重开发人员、让开发人员‘快乐开发’，这种管理的最高境界是无招胜有招——看似无为，其实处处费尽心机。 \r\n", "marks": "还行"}
{"content": "曾送过这本书给boss", "marks": "推荐"}
{"content": "重视人，但是没有解决方案", "marks": "推荐"}
{"content": "或许是没有接触实际的项目？感觉前言和宣传有些溢美。", "marks": "还行"}
{"content": "软件工程必须读的经典之一", "marks": "力荐"}
{"content": "简单的管理读本，其中的空间优化，人员流动的隐形成本分析，胶冻状态构建值得管理者深思", "marks": "还行"}
{"content": "把人当成人来看待就够了", "marks": "推荐"}
{"content": "理解如何建立富有战斗力的软件项目团队，以及“Team”为什么如此重要", "marks": "推荐"}
{"content": "需要看N+1遍以及N+1年经验才能深刻理解的书", "marks": "力荐"}
{"content": "好久以前读了，有些文章不错", "marks": "推荐"}
{"content": "推荐~", "marks": "推荐"}
{"content": "中国国情啊中国国情......", "marks": "力荐"}
{"content": "在地铁上点完了这本书……原来Paul Graham和37signal的观点都是从这里发端的，此书提供了一个完整的视觉，去重新审视知识工人的需求，以及如何尊重这群新时代工人。关于团队建设一节多有启发，要找到或者培养起一支胶合团队并非易事啊", "marks": "推荐"}
{"content": "散，帕金森定律。工作会自动膨胀，工作流", "marks": "还行"}
{"content": "研一下看到研二开学，终于看完。每一章都做了笔记，有些章节说得挺有道理，但作者比较啰嗦，有时几个章节都在重复说一件事。有些地方很难理解，可能是西方人的思维和表述中国人不太习惯，也可能是翻译的原因，不知道作者想表达什么，有时候很散，抓不住一个章节的中心。不过本书核心可以说是以人为本。", "marks": "推荐"}
{"content": "关于时间、改变、工作空间、人际关系，社会学比技术更有生产力。", "marks": "力荐"}
{"content": "　一个团队的成功取决于五大要素：人力资源的管理；办公环境的协调；筛选适当的人才；高生产力的培育；工作心态的调整。\n　　\n　　这五大要素缺一不可，个人利益总是与团队利益有着千丝万缕的联系，只有团员积极向上才能让团队徐徐生辉，而要想让对团员积极工作，强制是愚昧的，咱们不能改变他人思想，但可以在工作上做到统一行动。 ", "marks": "推荐"}
{"content": "一口气读完的。", "marks": "力荐"}
{"content": "老外写书随便一引就能引到君主论什么的~", "marks": "推荐"}
{"content": "软件是对人的管理", "marks": "力荐"}
{"content": "人月神话介绍过这样一本书\r\n挺有意思，哈哈\r\n要是公司都按照这样弄的话 那不都圆满了。", "marks": "推荐"}
{"content": "不知所云", "marks": "较差"}
{"content": "太琐碎了，可能得等我工作了之后有所体会，才会有耐心慢慢读吧！", "marks": "还行"}
{"content": "一个安静的环境确实很重要。", "marks": "力荐"}
{"content": "前面还行，后面太多废话，不适合中国人读，翻译是个神经病", "marks": "还行"}
{"content": "简单直白可行的管理tips", "marks": "力荐"}
{"content": "这根本是一本应该改管理层去看的书。", "marks": "还行"}
{"content": "毫无疑问，任何需要团队协作的问题都可以归结为社会学问题。作者从经理的角度出发论述了时限、工作环境、工作逃避、无干扰时间、冻胶团队、团队杀手等一系列相关问题，足以说明人，而不是高科技，才是工程的核心和灵魂。", "marks": "力荐"}
{"content": "不错。可惜，现实就是现实。", "marks": "推荐"}
{"content": "感觉读着很不顺畅。", "marks": "还行"}
{"content": "软件工程与团队建设的入门书籍. 算是对目前软件开发过程的观察笔记, 没有完整性的指导意见.", "marks": "还行"}
{"content": "一本讲软件开发的书。非常不错。而且比《人月神话》读着要舒服的多——当然，这或许是由于后者的思想在包括这本书的许多书里头体现过吧。这本书主要关注“人”的问题，因而读起来非常令人舒服。有些事情让人感受颇深。", "marks": "力荐"}
{"content": "话太多，如果缩减成10页就有4星了。", "marks": "还行"}
{"content": "专注于码农", "marks": "力荐"}
{"content": "管理上最大的恶行是....浪费人的时间。说得真对啊，领导们咋就不明白了。我今天就彻底明白了，开会时间短，工作效率高。 这本书的不好在于翻译太差。唉，还是宝岛的翻译水平高啊", "marks": "还行"}
{"content": "经典是需要收藏滴", "marks": "力荐"}
{"content": "比起MMM， 我更爱这个。", "marks": "力荐"}
{"content": "翻译太屎了，内容应该也很屎，假装看过", "marks": "很差"}
{"content": "在那个时代交付出这样的观点集，让人钦佩", "marks": "力荐"}
{"content": "关注具体的细节，缺少提炼，这就是要求“悟”吗？", "marks": "力荐"}
{"content": "我所阅读的关于软件工程的第二本书籍，通过本书认识到人在软件开发中的重要性", "marks": "还行"}
{"content": "一本无限关怀开发人员的书，一本写给管理者的书。作为程序员读来，十分感动。老板对于你来说，不觉得建立一家世界上最关怀自己员工的公司比起建立一家只顾利益的机器公司在人生旅程上更有意义吗？", "marks": "推荐"}
{"content": "一套一套的理论，有大量的实践经验后再来阅读效果会很好，否则容易昏昏欲睡", "marks": "还行"}
{"content": "面向技术型人才的管理者", "marks": "力荐"}
{"content": "翻译的像屎，有空把原版找来再读一读", "marks": "推荐"}
{"content": "花了很长时间是总算是读完了  软件中，人才是最重要的 ", "marks": "力荐"}
{"content": "peopleware，力推。谁说流程比人重要和谁急", "marks": "力荐"}
{"content": "我表示我什么时候才会在一个和书中说的那样注重办公环境的公司啊。。书中说的好人性化啊，简直就是说出了程序员的心声啊。但是，", "marks": "还行"}
{"content": "！！！", "marks": "力荐"}
{"content": "很多公司都是把员工当零件啊，希望自己做领导时能让员工有归属感（啥时候做领导呢。。）", "marks": "推荐"}
{"content": "真没觉得这本书有多神品，尤其是翻译的话读起来使理解更困难，思路不顺。", "marks": "还行"}
{"content": "这一本软件管理的书其实是关于团队管理的书，而不是单一软件项目管理，坐在老板位置上的人看更合适。", "marks": "推荐"}
{"content": "第二次阅读，为了和科长们一起学习，发现里面有些理念也不全对；", "marks": "力荐"}
{"content": "翻译的不是太流畅，内容也不是太突出。因为时间的缘故，当时认为很新颖的观点，现在已经被大家反复强调并觉得习以为常了。", "marks": "还行"}
{"content": "peopleware讲的恰恰是不能把people当ware。研究生的时候读过一些段落，现在重看，颇多感慨。There's nothing new under the sun.", "marks": "推荐"}
{"content": "据说是微软的项目管理精髓，却发现内容并不是过时的东西。和做软件的同事聊聊，大家还是觉得相比新兴的一些硅谷巨鳄，微软的实力是很难低估的。我相信这是一本老板们不是特别喜欢的书，里面的核心“更关心人”，而不是技术，时间表和没完没了升级的质量指标。这是一本纯粹研发人员写给研发人员的书籍，而不是一本管理层强加给研发团队的行政命令。能有能力接受这样书籍的公司，的确是很伟大的。", "marks": "推荐"}
{"content": "每个项目经理和管理层都应该看一下。", "marks": "力荐"}
{"content": "经典，和人月神话组成软件工程的两本神书", "marks": "力荐"}
{"content": "不大符合实际。", "marks": "还行"}
{"content": "对cmm的评价很中肯啊！", "marks": "推荐"}
{"content": "软件工程经典书，主要关注软件开发中的人的作用。是员工，一定要给老板推荐看的。", "marks": "力荐"}
{"content": "书中提到的很多问题今天还是存在，还是一针见血。很多问题的存在有的是公司没有解决的能力与资源，有的是知道问题但却没有信心或没有兴趣去解决它。问题既然存在，那它的影响就不会消失。管理上不下功夫、投入，那代价自然要在项目、产品、人员等方面来扣除弥补。", "marks": "推荐"}
{"content": "临渊羡鱼，不如授之以渔，思考中", "marks": "力荐"}
{"content": "现在看还太早了，没理解", "marks": "很差"}
{"content": "书是好书，而且很有内容。但是被软件界的愤青引用的太过了。读起来反而觉得盛名之下其实难副。", "marks": "推荐"}
{"content": "智力性活动中人的因素，可惜现实中离这个太远...", "marks": "推荐"}
{"content": "软件行业一本不可多得的经典", "marks": "力荐"}
{"content": "软件管理真是很困难的事啊~~", "marks": "力荐"}
{"content": "解决之道-以人为本", "marks": "力荐"}
{"content": "经典就是经典", "marks": "力荐"}
{"content": "很有趣的书，人在软件开发中是最重要的。", "marks": "还行"}
{"content": "本书的题目应该改为:《如何提高码农福利》……", "marks": "还行"}
{"content": "以故事的形式来通俗易懂的讲述软件开发中的问题，比如团队、进度等。", "marks": "推荐"}
{"content": "很好的一部入门书", "marks": "推荐"}
{"content": "感谢国家，多次折腾VPN，代理等后基本功扎实，这本书两个小时看完了，基本没什么难点。工作需要还是继续看看实现吧。", "marks": "推荐"}
{"content": "在看原版，買了中文打算以後拿來手頭做 reference ，結果到手纔翻了幾頁就幾個硬傷，回頭一看都印刷四十次了。。書是好書，直接看原版好了，來給翻譯打個一星拉低評分做提醒。", "marks": "很差"}
{"content": "真的是非常不错的书，现在才读完是我的错。", "marks": "力荐"}
{"content": "我觉得写得不是很好，第一卷肯定不是stevens写的。", "marks": "还行"}
{"content": "稍微有点过时", "marks": "推荐"}
{"content": "没看完额...差不多了,看不下去了...", "marks": "力荐"}
{"content": "完美的书", "marks": "力荐"}
{"content": "好麻烦", "marks": "推荐"}
{"content": "主要看了下TCP的内容，IP的内容没看。看这书的好处就是不需要自己做任何事情（写代码），只需要跟着作者思路就行", "marks": "推荐"}
{"content": "很久以前读的，现在都忘了，悲剧", "marks": "推荐"}
{"content": "进阶卷2中 ...", "marks": "力荐"}
{"content": "任何一个搞网络的人都应认真研读。", "marks": "力荐"}
{"content": "TCP/IP方面的经典之作，不过有一定的难度，我只读了个一知半解。", "marks": "推荐"}
{"content": "网络基础", "marks": "力荐"}
{"content": "不适合初学者，当手册查的时候才感觉到他的强悍", "marks": "力荐"}
{"content": "不错的，读研读博都用的上", "marks": "力荐"}
{"content": "第一本直接跳过吧......", "marks": "还行"}
{"content": "3 卷都看了", "marks": "还行"}
{"content": "很经典的书，只是翻译不太好，要是有时间真应该读原版……", "marks": "推荐"}
{"content": "M", "marks": "还行"}
{"content": "接着看看实现。。一头雾水。", "marks": "力荐"}
{"content": "这本书值得翻来覆去读来读去不停地读。", "marks": "力荐"}
{"content": "经典", "marks": "推荐"}
{"content": "翻译得真的很差", "marks": "还行"}
{"content": "神作。。", "marks": "力荐"}
{"content": "解释详尽而又不失条理。", "marks": "力荐"}
{"content": "TCP部分及以后章节浅尝辄止。此书翻译问题较多，需看英文原版。", "marks": "推荐"}
{"content": "经典必备", "marks": "力荐"}
{"content": "n = 1.5", "marks": "推荐"}
{"content": "其实并没有读完，就读过前面2章", "marks": "力荐"}
{"content": "一年下来陆陆续续又读了一遍。每读一次都有新收获，这次TCP的RTT部分还是没理解透。", "marks": "力荐"}
{"content": "浏览一遍，理论基础，光看不行，关键是要有适当的知识点引导和辅助实验。自行设计实验，并撰写实验报告是最好的学习手段……通过公司的实习培训又把全书细细过了一遍\n2017/11 看的越仔细，发现翻译细节之处确实错误多多。不懂英文坑死人，还是要结合原版一起看。那么，翻译的媒介作用在这本书上就被大大削弱了", "marks": "还行"}
{"content": "不得不看的东西啊", "marks": "力荐"}
{"content": "太老的翻译，有一些翻译无法忍受，令人费解。", "marks": "推荐"}
{"content": "4M => 2,4 => 1\nstevens的神品, 每个技术人员必读书之一", "marks": "力荐"}
{"content": "还行，感觉没用到这么深入", "marks": "较差"}
{"content": "06年找工作前读了两遍，有点佩服自己，真的是闭门造车，在没有任何实践的情况下，臆想这些到底是啥玩意。。。迈瑞面试时，二面面试官看我简历写了熟悉TCP/IP，让我讲讲，我就讲三次握手，结果被他一顿训斥，让我自己回去再看书。。。想不到这本书成了我以后工作中的“红宝书”。。。工作后第一周的任务就是再读一遍。。。", "marks": "力荐"}
{"content": "怎么能把packet翻译成分组呢", "marks": "还行"}
{"content": "旧经典了。主要看了TCP和FTP协议。", "marks": "力荐"}
{"content": "感觉写作质量是仅次于csapp的", "marks": "力荐"}
{"content": "做嵌入式项目时根据这本书实现过一些协议，感觉老外写的书确实实用性比较强。", "marks": "推荐"}
{"content": "大三上：计算机网络", "marks": "力荐"}
{"content": "真的，不错，说不出其他的什么，只是说该看，该读", "marks": "推荐"}
{"content": "经典就是经典, 网络之神果然不是盖的", "marks": "力荐"}
{"content": "五星给原著，零星给翻译", "marks": "很差"}
{"content": "理论很重要", "marks": "推荐"}
{"content": "有点老了。。。但是很多内容还是很好的。", "marks": "推荐"}
{"content": "啃了两遍，估计以后至少还要再看两 到三遍才够。竟然有人说这些基础无关紧要，估计是哪个培训机构蹦出来的傻鸟", "marks": "力荐"}
{"content": "一共分为三卷的书，好多的内容，泛读了一下，力推。", "marks": "力荐"}
{"content": "翻译的实在太糟糕了", "marks": "还行"}
{"content": "经典之作啊，这次算是比较认真（看了很多细节东西）却又不算太认真（其实是为了应试）地读了一遍～", "marks": "力荐"}
{"content": "计算机网络的必修功，很全面", "marks": "力荐"}
{"content": "嗯，算是看过……", "marks": "推荐"}
{"content": "入门、查询都是很不错呢", "marks": "力荐"}
{"content": "走马观花的浏览了一遍", "marks": "推荐"}
{"content": "Stevens本本经典~！", "marks": "力荐"}
{"content": "经典之作，配合RFC文档看，非常好", "marks": "力荐"}
{"content": "这本很适合学习!  !!! ", "marks": "力荐"}
{"content": "将得相当得透彻，牛人的好书", "marks": "推荐"}
{"content": "全5星给原作，冲这翻译必须减星！ 有空再去慢慢啃英文版，网络协议圣经，值得没事就翻出来读一遍", "marks": "推荐"}
{"content": "翻译烂。", "marks": "很差"}
{"content": "陆陆续续花了1年多时间通读完整体的，对于了解TCP/IP协议还是很不错的一本书", "marks": "力荐"}
{"content": "相比之下，谢希仁的那本计算机网络就只能呵呵了。", "marks": "力荐"}
{"content": "经典中的经典。需要对基础网络协议有所了解的时候需要参考的一本书。", "marks": "力荐"}
{"content": "翻译一般，内容也有点老了，虽然是经典", "marks": "推荐"}
{"content": "好书，没的说..", "marks": "力荐"}
{"content": "经典，只是稍微有点旧了，毕竟TCP/IP网络又发展了20多年", "marks": "力荐"}
{"content": "不知道是不是翻译的原因，读起来非常费劲", "marks": "较差"}
{"content": "还没有读完。非常好的一本书。\n", "marks": "推荐"}
{"content": "自下而上介绍网络协议的参考书，对于了解基本原理很有帮助，但是对于程序员和网络管理员，还是读那本“network: top down approach”吧", "marks": "还行"}
{"content": "绝对经典，强力推荐", "marks": "力荐"}
{"content": "说实话老外的脑回路真的不一样，有些你特别想搞懂的地方他就不给你仔细讲", "marks": "推荐"}
{"content": "比教材里讲的深入", "marks": "力荐"}
{"content": "CS书中，Stevens出品，必是精品", "marks": "力荐"}
{"content": "必修绝技", "marks": "力荐"}
{"content": "只记得看了不少内容，但不记得看完没看完了...尴尬...", "marks": "力荐"}
{"content": "翻译有些问题，有时间直接看原版吧", "marks": "还行"}
{"content": "当初初读还是大二，什么都不懂，想想现在也是", "marks": "力荐"}
{"content": "最重要的TCP我没有读。。。", "marks": "力荐"}
{"content": "中文翻译反而把我看糊涂了...以后技术书还是得看原版", "marks": "很差"}
{"content": "粗略地扫了一遍，等遇到不会的在进行查找。", "marks": "力荐"}
{"content": "读专业性书籍是一件很枯燥的事，我的建议就是把它作为一本手册，先浏览一遍，遇到问题再去详细查，高效。", "marks": "力荐"}
{"content": "把tcp协议部分完全看完了，真的是经典，都讲的很清楚，作者还生怕讲的不清楚所以还有详细的例子", "marks": "力荐"}
{"content": "各层的各个协议", "marks": "力荐"}
{"content": "已买，在读，各种看不懂，呵呵，没关系，慢慢看、反复看～～读了一半，刚看到ping协议，以后再翻出来读。", "marks": "推荐"}
{"content": "对理解TCP/IP协议很有帮助", "marks": "推荐"}
{"content": "算是读了一遍，也算是对 TCP 初窥门径了，作为计算机基础，这个应该是必须掌握的", "marks": "推荐"}
{"content": "经典的网络教科书", "marks": "力荐"}
{"content": "web开发不可或缺的案头书", "marks": "力荐"}
{"content": "最近又翻了一遍，内容太多，一直在当工具书看", "marks": "力荐"}
{"content": "没啥好多说的，大部分开发者与网络的交集也就到tcp这一层了，反复阅读本书足以应付绝大多数网络相关问题。书写的不错，翻译也没有太明显的问题，阅读无障碍，我给5星。", "marks": "力荐"}
{"content": "唉,为了这本书...", "marks": "力荐"}
{"content": "绝对是好书，可惜就是老了一点，有些内容过时了", "marks": "力荐"}
{"content": "翻译太差！看过谢希仁的书再看收获不大。", "marks": "推荐"}
{"content": "深入浅出的一本协议栈教科书", "marks": "推荐"}
{"content": "读过好多遍，细节总会忘，内容比较老，但是底层的变化还不大，依旧有看的价值。", "marks": "力荐"}
{"content": "【翻过】研究网络体系的人看这本书理解网络协议再好不过了。", "marks": "力荐"}
{"content": "圣经", "marks": "力荐"}
{"content": "如果想学习网络协议的基础内容，只用看这本书就行了，但是要看3遍，第1遍了解讲了那些东西，第2遍针对性的看关注的协议，第3遍把tcp那几章再反复琢磨几遍！", "marks": "力荐"}
{"content": "网络界的圣书啊，但其实没有我们老师讲得明白，真的～～～", "marks": "还行"}
{"content": "还好吧，读第一遍的时候也是有点困难的；一旦理解了什么是协议，就方便了", "marks": "还行"}
{"content": "经典必读", "marks": "力荐"}
{"content": "复习了前8章，翻看了17-24章", "marks": "力荐"}
{"content": "R.S", "marks": "力荐"}
{"content": "翻译实在好差，说的都不是人话。编排好混乱", "marks": "还行"}
{"content": "掌握tcp\\ip协议只要读这一本书足矣", "marks": "力荐"}
{"content": "翻译渣到中文版就是为了戕害莘莘学子而生，每次到看不懂的地方都会怀疑自己智商有问题，直到最近下载到一份原版PDF......教训就是这种大师级别的经典著作必须看原版，最少也要中英文两版对着看，你永远不会知道出版社会塞给你一个什么样的傻掰翻译", "marks": "很差"}
{"content": "内容有点老旧，但比第二版讲地好。\n不能忍的是，在印刷达47次以后，书里还存在大量的翻译与印刷错误！\n", "marks": "较差"}
{"content": "只有真正实践过才能理解细节啊，为什么会这么设计？看过并不代表完全掌握……还需多思考才行", "marks": "力荐"}
{"content": "很久以前读的，在精读和略读之间吧。", "marks": "力荐"}
{"content": "迅速扫完。", "marks": "力荐"}
{"content": "经典的TCP/IP 协议书，值得一读，我自己也只是大概的读了第一遍而已，需要多读读，个人感觉要是对linux了解多一点的话，对这本书的阅读会更加深刻一点", "marks": "推荐"}
{"content": "经典", "marks": "力荐"}
{"content": "翻译不能忍，很多文字靠案例才能明白，内容本身详细清晰。", "marks": "较差"}
{"content": "要再读的当真无愧领域经典", "marks": "力荐"}
{"content": "一直放在书架上，就是狠不下心来看～", "marks": "力荐"}
{"content": "1111-1301", "marks": "力荐"}
{"content": "读过几章，工作上用的着再翻翻吧", "marks": "推荐"}
{"content": "主要阅读TCP和IP相关的知识。又是一个月。。。", "marks": "推荐"}
{"content": "看的是14年印刷的，感觉有些位置翻译的很费解。。。其余倒是挺好，算是把整个协议栈的职责理清楚了，其实关键点还是在于UDP和TCP吧。大部分内容不是运维根本碰不到。。。", "marks": "力荐"}
{"content": "好详细，好多图，很多细节都记不住了", "marks": "力荐"}
{"content": "TCP/IP网络的经典启蒙书籍", "marks": "推荐"}
{"content": "计算机网络入门书籍，全面度还是不错的，虽然举例上有点老。想对网络协议有较全面了解的可以一看，但卷一关注的是协议部分", "marks": "推荐"}
{"content": "这次才算比较认真的读，同时结合LwIP代码一起看效果更佳", "marks": "力荐"}
{"content": "这么多本科的回忆", "marks": "还行"}
{"content": "讲解的很清楚 非常适合入门来读 很基础的协议知识 按照协议模型由下至上的来讲解每层协议 不过怎么和谢希仁那本计网辣么辣么一样捏.....", "marks": "力荐"}
{"content": "神作", "marks": "力荐"}
{"content": "需要一定背景并且多次阅读才能彻底消化", "marks": "推荐"}
{"content": "不能完全看懂，但是看懂的部分已经受益匪浅", "marks": "力荐"}
{"content": "第一遍读完了。。估计这学期会读完第二遍。。到时候批注就该比较全了吧~", "marks": "力荐"}
{"content": "4❤给原版", "marks": "推荐"}
{"content": "这本书唯一的缺点就是部分内容已经过时了，一些花功夫讲了的协议现在基本上已经被淘汰了，而且部分细节与现在主流的实现并不相同。", "marks": "力荐"}
{"content": "2014-07-27：详细读了tcp和udp，其它的用到的时候再看。\n2017-02-07：将tcp后的章节都读完了\n还有一些链路层和IP层的协议没有读", "marks": "力荐"}
{"content": "bible", "marks": "力荐"}
{"content": "重新温故基础，更详细了解四层模型，包括一些linux系统网络命令，读完后的感慨就是好书被翻译烂了，一看就是所谓的叫兽找自己的研究生翻译的。。。", "marks": "推荐"}
{"content": "主要看了 TCP 部分，讲解很深入。结合网上的一些文章，理解了很多概念。写了篇文章，加深下理解：http://www.jianshu.com/p/44615f62747a", "marks": "力荐"}
{"content": "杂但全", "marks": "还行"}
{"content": "熟悉TCP/IP协议", "marks": "力荐"}
{"content": "程序员眼中的TCP/IP？不错，你需要stevens的经典著作", "marks": "力荐"}
{"content": "略读完毕，耗时6h。STL还真有够小巧精致的。书非借不能读也！", "marks": "推荐"}
{"content": "特别对 STL 容器的内存管理感兴趣，看过一部分，不过觉得 jjhou 有些时候说得过于罗嗦了。 ^_^bb", "marks": "还行"}
{"content": "看第二章的时候忍住，我当年第一次读的时候总在第二章徘徊，好烦躁，后来一口气五天看完了，写得好棒啊！值得一再重读！", "marks": "力荐"}
{"content": "以前在图书馆里看见这本书总是不太想借，现在看看完才感叹相见恨晚。此书作为一个把STL精致巧妙的思想呈现给读者的引子，已经不能好更多了！\n当然，想要了解的更深入还是得RTFSC。", "marks": "力荐"}
{"content": "通过这本书来复习数据结构再好不过，里面对各种二叉树、查找、排序等的描述非常详细，而且非常注重效率，对我而言，比起枯燥又厚实的数据结构，此书更深得我心", "marks": "还行"}
{"content": "了解事物的本质，能更好的利用该事物；掌握该事物的本质，能控制该事物。", "marks": "力荐"}
{"content": "天下大事 必作于细", "marks": "力荐"}
{"content": "代码有点老了。书还是不错～", "marks": "力荐"}
{"content": "我是有多喜欢侯捷蒋勋这种书生气十足的作者啊！", "marks": "力荐"}
{"content": "如果觉得算法实在是很抽象的话,可以试试这本,侯捷的书,一直是容易理解,讲解深刻.", "marks": "力荐"}
{"content": "侯捷的经典之作，没有看过这本书何谈对STL熟练掌握？", "marks": "力荐"}
{"content": "了解std::后面的故事，加深对基本算法的理解。如果不是太容易，也不能算太难，看来剖析得很到位。我应该十年前就看这本书了，但如果是十年前，我一定看不下去，也看不懂。", "marks": "推荐"}
{"content": "一本数据结构教材！！", "marks": "还行"}
{"content": "C＋＋书籍能写这样不错了", "marks": "还行"}
{"content": "侯捷有些地方还是写错了啊", "marks": "推荐"}
{"content": "。。。", "marks": "推荐"}
{"content": "就下载SGI的源码和这本书对照看的，我觉得基础够好，直接看SGI的源码更好，不像书中的代码都是不连续的，大脑容易造成Context Switch.", "marks": "力荐"}
{"content": "如果让零基础的我开始学C++，并只能选择两本书，我选择C++ Primer以及本书。\n", "marks": "力荐"}
{"content": "很实在，但是缺少boost库分析", "marks": "力荐"}
{"content": "看过一点。。", "marks": "推荐"}
{"content": "啃了一周终于读完了，源码采用低版本的g++使用的STL，原理讲得深入浅出，@林动潇潇 推荐给你。另推荐＜＜泛型编程与STL＞＞据说有很多STL当初设计时的哲学思维，想必是本好书。", "marks": "推荐"}
{"content": "多少幡然醒悟，醍醐灌顶", "marks": "力荐"}
{"content": "侯老师的作品，主要看看stl中的小技巧，学习算法和数据结构就不用看这本了。", "marks": "推荐"}
{"content": "如果说《Effective C++》让我第一次感受到C++的博大精深，那么这本书则带我走入C++的大门。 ", "marks": "力荐"}
{"content": "如果以前没有看过STL源码，这本书提供了很好的介绍。不过看着本书，最好还是会一些STL。以前很多书都不教STL。", "marks": "还行"}
{"content": "高屋建瓴，细致入微，源码之前，了无秘密。", "marks": "力荐"}
{"content": "去年找工作时翻了一遍，不过，对特别细的实现缺乏兴趣。。。", "marks": "推荐"}
{"content": "这本书特点是代码量很大，讲解部分比较少，很多东西需要自己实际查看源码，自己去摸索，另外侯老师写堆的部分有一个小错误，进行删除操作的时候使用的是两次shift-up而不是常见的一次shift-down，这是STL为了达到最大复用进行的取舍。", "marks": "推荐"}
{"content": "介绍挺直白，有基础的可以直接上SGI的源代码。对于对STL当中的数据结构和算法不熟悉以及泛型方法不熟悉的，是一本很好的书，直接从源代码角度分析。JJH的书还是很细致的。", "marks": "还行"}
{"content": "很好看，但是不算完整翻了一遍。侯捷挑的代码是比较好阅读的部分，加上他的讲解，变得很好理解。但是粗读一遍，只能增加阅读模板代码的信心和对STL基本原理的理解，不能直接增加编程能力。", "marks": "力荐"}
{"content": "回想起来，读的并不太懂。隐约还记得STL的快排的实现，以及i++和++i的实现。侯捷应该在序言里有说过，这类书的作用肯定重在授人以渔，否则改天出了个RTL，YTL，难道读者还期待这类框架的源码剖析吗？那真是本书作者摇头喟叹的事情。", "marks": "推荐"}
{"content": "还算清楚，只是那些术语和大陆通常的说法差别很大。", "marks": "还行"}
{"content": "任何特定的数据结构就是为了实现特定的算法。算法和数据结构是理解标准库的基础。STL库本身是一个设计模式与算法和数据结构的体系", "marks": "力荐"}
{"content": "打印代码用9pt的Courier New最舒服！因为8.5pt设置起来麻烦= =", "marks": "力荐"}
{"content": "还是觉得生涩", "marks": "推荐"}
{"content": "深入理解STL之必读，侯捷抱着学习的态度写的此书，同样适合我们跟着他的脚步来剖析STL源码。", "marks": "力荐"}
{"content": "源码之前无秘密！这本书对STL的6个方面（Allocator, Container, Iterator, Algorithm, Function Object, Adapter）的源码做了详细地分析，书没有传说中的难，红黑树部分只讲了插入没讲删除。繁体勘误部分可以在侯捷官网上找到。算法一章选择性地看了一些。泛型编程是STL的基础。从STL源码中可以学习到顶级programmers是如何理解并实现各种常用数据结构和算法的。STL Allocator也是一个关于内存分配和管理的极好的范例。", "marks": "推荐"}
{"content": "20160307，粗看一遍，基础数据结构和算法方面别的书里有讲到过。不过，前面几章内存分配等据说是重点，反而没怎么看懂。需要再看一遍。", "marks": "推荐"}
{"content": "对这本经典的书我已经无法用简单的词语来形容了。我只能说，学C/C++的人如果没有看过这本书，实在是可惜。对侯捷先生的代码剖析能力表示由衷的敬佩，是您把我带入了阅读优质代码的宝库！\np.s 2012.03.08, restart", "marks": "力荐"}
{"content": "还是不能一本满足，准备再看一遍源代码，顺便撸一遍编程的本质", "marks": "推荐"}
{"content": "烂尾书中的烂尾书，从开始看的相逢恨晚到现在的食不知味，一晃好几年过去了。书是好书，码农必看，不过到了30再看实在木啥必要了", "marks": "力荐"}
{"content": "絮絮叨叨的，看得真捉急。", "marks": "还行"}
{"content": "靠！下的一个电子版居然只有前四章，看完完全没得感觉，就对STL是怎么实现的有进一步的了解。说实话，STL只是对模板编程的一个典型应用。下一步我要去看BOOST了。", "marks": "还行"}
{"content": "勉强给个四星吧～", "marks": "推荐"}
{"content": "没完全读完，买了没多久被一个同事切走了……我恨他……侯捷写书非常认真，对源码解读也很到位", "marks": "推荐"}
{"content": "代码真经典，有些地方读不太懂，通过阅读该书，可以学到很多知识：算法，数据结构，stl等等", "marks": "力荐"}
{"content": "写的不错，但不一定非得掏钱买……主要是封装得很好的C++代码的可读性差一些，直接看java.util的代码就不一定需要书什么的了", "marks": "推荐"}
{"content": "对泛型的理解和框架的编写有一定好处", "marks": "推荐"}
{"content": "第一次给了四星。最近又翻了一遍，发现这本书是需要读者做更多的思考才能读好的书。跟大多数传授知识思想型的书不同，这本书可以看做是一个学习泛型和STL的guide。\n算法章节我个人感觉有点鸡肋，但是不写的话就不会是一本完整的关于STL的书。所以个人觉得精华在泛型部分。\n这本书需要多看代码，反复思考，然后再读作者的讲解，相信帮助会很大。", "marks": "力荐"}
{"content": "从此stl不再晦涩", "marks": "力荐"}
{"content": "两晚就读完了..", "marks": "推荐"}
{"content": "采用C++的软件项目团队必备...新人培训必读", "marks": "力荐"}
{"content": "经典书籍，书里讲了很多高效的数据结构。需要精读的一本书。抽空再重读一遍", "marks": "力荐"}
{"content": "有点老了，而且对异常安全着墨甚少，但仍是必读之作。", "marks": "力荐"}
{"content": "2016.9.27 读完. 用中午时间翻的, 继<深入浅出MFC>之后读完的第二本侯捷的书, 还是一如既往的精彩, 打算用c++的stl写程序的话, 这本书是越早读越好, 后悔看的有点晚了", "marks": "力荐"}
{"content": "侯捷大师代表作之一，清澈透彻，看完再用 STL，心里就有底许多了", "marks": "力荐"}
{"content": "模板编程太强大了", "marks": "力荐"}
{"content": "学习大家设计，对于使用和理解STL都大有裨益。同时通过阅读源码对于算法的学习也很有帮助。", "marks": "力荐"}
{"content": "很有收获，“看剖析，不看源码”，同学语，哈哈哈", "marks": "推荐"}
{"content": "应该是看得最快的一本技术书了。不想钻到实现细节，算法一概略过，翻起来相当快。模板这个东西真是让人又爱又恨，强大但复杂。相比之下，动态语言显得无比优雅。还是有很多思想值得慢慢体会。", "marks": "推荐"}
{"content": "天下大事，必做于细。源码之前，了无秘密！", "marks": "力荐"}
{"content": "划水时候读的…花了一天半…感觉对容器范型/stl的认识被刷新了（暴露C++菜鸡选手2333）…作为万物开端的STL肯定还有更多的秘密…应该早点读的(:3▓", "marks": "推荐"}
{"content": "功力不够 略读", "marks": "力荐"}
{"content": "茶余饭后的好科普", "marks": "推荐"}
{"content": "真心好书，发现好多大公司的面试里就是stl里的数据结构和算法。", "marks": "力荐"}
{"content": "源码剖析所以源码篇幅占了很大一部分，对一些数据机构的算法分析很到位，模板妙用除了traits并无太多出众的地方，CPP码农还是推荐看看。", "marks": "推荐"}
{"content": "知之所以然，才不会被其繁杂的外表所迷惑\n", "marks": "力荐"}
{"content": "终于翻了一遍了。。。。 \n这本书是在四年前，大二时候学c++时，买的，周老师推荐的。 ", "marks": "推荐"}
{"content": "前面讲allocator和iterator的章节确实不错。后面容器和算法部分，缺乏深度。总体感觉没有传言中的好，但还是值得一读。", "marks": "还行"}
{"content": "刷完一遍，对cpp理解不一样了，还需要再刷的书。", "marks": "推荐"}
{"content": "等于是重新复习下数据结构。还有挺多思想，比如配置器，函数对象，模板的技巧，挺不错。", "marks": "力荐"}
{"content": "侯捷说：我的确认为99.99%的程序员所写的程序，在SGI STL面前都是三流水准", "marks": "力荐"}
{"content": "很好", "marks": "力荐"}
{"content": "08年读这本书的的时候，惊讶用中文也可以写出高水平的计算机技术书籍。 时至今日，中文作者的高品质技术书籍已不算稀罕了。 这次买一本收藏是向作者致敬。", "marks": "力荐"}
{"content": "候捷的书，都是对要点解释得很清楚。非常不错。可惜我只看完了前面4章。", "marks": "力荐"}
{"content": "stl\n", "marks": "力荐"}
{"content": "看了这本书，对C++模版不再恐惧了。\n书中的Alloc感觉好难看懂，于是放弃了。迭代器的设计很有启发。数据结构部分，大多都学过了，很快翻完了。", "marks": "推荐"}
{"content": "2014-11-06", "marks": "还行"}
{"content": "好书，但是讲得不是很全，如非递归的快排、红黑树的删除都没展开讲讲", "marks": "推荐"}
{"content": "精巧的deque, 复杂的copy, 神奇的traits, 一览无余.", "marks": "力荐"}
{"content": "源码之前，了无秘密", "marks": "力荐"}
{"content": "适合初学者拿去应付各种公司面试的宝典，不管是否理解了，随便引一段还是挺唬人的。", "marks": "推荐"}
{"content": "对STL会有更深入的认识，如果以后要做c++开发，最好还是看一下。找工作面试也可能问到。", "marks": "推荐"}
{"content": "五颗星给STL库开发者，优美的代码", "marks": "力荐"}
{"content": "中规中矩吧", "marks": "还行"}
{"content": "此书名声大于其实用性", "marks": "还行"}
{"content": "早就该好好看看了", "marks": "力荐"}
{"content": "STL的魅力源于数学上是完备的", "marks": "推荐"}
{"content": "大概看看即可，阅读代码更佳", "marks": "还行"}
{"content": "看完C++ Primer后，不怕困难的话，可以直接入手该书学习数据结构。", "marks": "力荐"}
{"content": "看看design和code的技巧还是很有必要的", "marks": "推荐"}
{"content": "虽说是源码剖析，其实更注重于STL中的部分核心内容，读后很受用，不过进一步研究就感觉没有书名显得那么“全面”和“深刻”", "marks": "力荐"}
{"content": "历时一年多时间，断断续续，终于完成了第一遍阅读。\n迭代器/容器/算法；\ntraits编程技巧/空间分配器/泛型思维；\n平衡树/红黑树/函数对象/配接器；\n诸多C++中级乃至高级技术被作者娓娓道来，图文并茂，通过认真/反复揣摩，算是看懂了大部分，收获更是非常多。\n本书属于值得多次/反复阅读的经典书籍！以后会继续回来拜读！！", "marks": "力荐"}
{"content": "不如当做工具书吧。", "marks": "力荐"}
{"content": "看了80%，越看越激动，真的是编程之美啊～", "marks": "力荐"}
{"content": "对应了侯捷一直说的那句话：源码面前了无秘密。STL源代码并不算特别庞大，但如果初涉其中，一定会被各种形形色色的技巧，看似杂乱的组织给迷乱了双眼。但作者于万军从中取上将首级，提干契领，很快便抓住了主要脉落，但大刀阔斧之下又不丢失细节。尤其是在所有组件展开之后，优先介绍了空间配置器这一贯穿始终之物，为读者进入STL大门荡平了障碍，然后随着其对其它组件一一展开，酣畅淋漓。由于之前看过他的其它著作以及译作，非常喜欢他的写作风格，文字描述，图形，代码搭配得当，如网友所言，不知不觉左手边便积累起成就感。另外，通过这本书来复习数据结构再好不过，里面对各种二叉树、查找、排序等的描述非常详细，而且完全以效率至上，工业级的代码", "marks": "力荐"}
{"content": "对C++语言来说要求不高, 虽然都是模板, 只要了解了traits如何使用难度就降低很多了. rbtree和stl算法的实现简直就是面试题嘛...", "marks": "推荐"}
{"content": "facebook面试者直接考到里面的next_perm算法了，惊爆全场", "marks": "力荐"}
{"content": "真心好书", "marks": "力荐"}
{"content": "这本书看一下关于traits和container的实现就可以了，其它的没有什么看的必要。", "marks": "力荐"}
{"content": "把stl剖析的很清晰，", "marks": "推荐"}
{"content": "想要深入理解STL的设计，侯老师的这本书还是必不可少的，讲的非常清楚，包括vector的空间扩展方案、deque的底层实现、map/set的底层实现。", "marks": "力荐"}
{"content": "复习了一遍数据结构与算法，对STL内部紧凑优美的设计有了一定的认识。大师炉火纯青的编码技巧真是目不暇接。", "marks": "力荐"}
{"content": "侯jj的书简直就是质量的保障，看这本书可以顺便复习一下数据结构和算法", "marks": "力荐"}
{"content": "将STL的源码整理出来导读，有价值，但更重要是对模板和泛型的思想的引导", "marks": "推荐"}
{"content": "三分之二数据结构，三分之一C++特性编程和内存管理", "marks": "推荐"}
{"content": "理解STL和模板", "marks": "推荐"}
{"content": "只表示现在的认识，如果再给机会编程，如果不涉及到游戏类的，我会尽可能使用C，而不是C++，也不会是STL", "marks": "较差"}
{"content": "STL实现精华，以及泛型初步：）", "marks": "力荐"}
{"content": "里面的代码比vc里面的好懂多了", "marks": "力荐"}
{"content": "good when you are reading the stl code.", "marks": "力荐"}
{"content": "稍微翻过一点，不过我自己还是主要看STL的源码了", "marks": "推荐"}
{"content": "作为学数据结构来说，对cpp要求有点高了，不过确实是好书", "marks": "力荐"}
{"content": "能够深入理解STL内部实现，解释很详尽，很好~", "marks": "力荐"}
{"content": "(1)2015-12-31：不错，但有一些小错误；\n(2)2016-5-15：再过一遍。", "marks": "推荐"}
{"content": "非常赞同封底的最后一段\n\n> 参观飞机工厂不能让你学得流体力学,也不能让你学会开飞机.但是如果你机会开飞机又懂流体力学,参观飞机工厂可以带给你最大的乐趣和价值.", "marks": "力荐"}
{"content": "言之有趣，有料", "marks": "力荐"}
{"content": "图表很好，有点儿话多。", "marks": "推荐"}
{"content": "侯老师的书，经典，由浅入深，循序渐进", "marks": "力荐"}
{"content": "将近500页的书，开始以为会很难，结果扎进去之后感觉还行，书中很多图表示例，做得不错，比较有收获的是allocator、traits、deque和hashtable。", "marks": "推荐"}
{"content": "中规中矩。", "marks": "推荐"}
{"content": "只看萃取的那一章，当然我主要是看模板的，至于后面vector和list只是粗略看下，感觉这种看算法的书更好", "marks": "推荐"}
{"content": "想登上C++的山顶，它可助你一臂之力。", "marks": "力荐"}
{"content": "侯sir自己写书的说", "marks": "推荐"}
{"content": "工业标准的代码，值得多看几次", "marks": "力荐"}
{"content": "挺不错的一本书，深入介绍了stl的实现", "marks": "力荐"}
{"content": "想高性能使用stl，那得花点时间读读stl的一种实现，对于实际编程中选择合适的结构非常有用。", "marks": "推荐"}
{"content": "虽然我觉得过于依赖STL不好 但是STL确然是C++的精华之一", "marks": "推荐"}
{"content": "还行吧，没想象中的好，但这个类型的书，也就这么一本，没得选择", "marks": "推荐"}
{"content": "可以结合算法导论看，和面向对象没有多少关系。", "marks": "力荐"}
{"content": "流水账", "marks": "还行"}
{"content": "品读经典", "marks": "推荐"}
{"content": "读的时候多次出现以下状态：咦？怎么这么用？我擦还能这样？", "marks": "力荐"}
{"content": "不适合初学者的C++好书。 很不错的一本书籍。 改变了STL是庞然大物的看法。 轻巧，巧妙的设计。 内存池严密的逻辑。 迭代器精巧的设计。 以及一些常见的算法，都可以让你有似曾相识的感觉。 看完此书，会让你使用stl的信心进一步上涨。 ", "marks": "力荐"}
{"content": "还是要结合最新版本的stl源码去看，书里面介绍的版本貌似有点旧了==", "marks": "推荐"}
{"content": "这本书给人一种狗尾续貂的感觉。前面讲解非常详细。但是没有成体系。还是泛型编程与STL讲解的更加系统。但是这本书从源码级别上分析还是挺有意思的。", "marks": "推荐"}
{"content": "深入学习STL。", "marks": "力荐"}
{"content": "STL进阶必读. must read", "marks": "力荐"}
{"content": "学习STL实现的经典。", "marks": "推荐"}
{"content": "个人认为候捷最棒的两本书就是它和MFC那本了，这本书在理解STL中非常的过瘾，特别是前几章介绍数据结构的，在那段学习GP和STL的过程中，这本书很有价值，也很详细，顺便调试一下MFC、STLPort和vc9的STL库在内存管理里面微妙的处理，你会留下相当深刻的印象。\n很经典的读物，在STL学习中属于必读科目，当然也很庆幸是国人写的一本技术好书，另外一本就是WIndows图形编程啦，呵呵。", "marks": "力荐"}
{"content": "不适合作为学习STL的读物。倒是可以看看别人怎么剖析和阅读源代码的，阅读代码的时候思路很重要，可以从此书中借鉴一些。", "marks": "力荐"}
{"content": "较易懂，是否又可以说适合非科班人士阅读？", "marks": "推荐"}
{"content": "如果觉得《深入计算机系统》太厚，这本也不错", "marks": "推荐"}
{"content": "写系统必读之书", "marks": "还行"}
{"content": "对非科班程序员很有意义", "marks": "还行"}
{"content": "看的是英文版，不错，不知道中文的怎么样了", "marks": "力荐"}
{"content": "还不错 从底层的机构上去关心程序的质量和效率 虽大多不是太深,大多泛泛而谈  像偶这种初级的拿来通一下便会比较舒畅", "marks": "推荐"}
{"content": "如果有时间,有金钱读读也无妨", "marks": "还行"}
{"content": "大学草草的度过，感觉还不错", "marks": "还行"}
{"content": "等着出卷三，希望卷三能达到《代码大全》的高度^_^", "marks": "推荐"}
{"content": "这种书看多了... 不过也忘的差不多了...", "marks": "推荐"}
{"content": "从这本书作为美国一些大学计算机专业的课本就可以看得出来，中国的高等教育，不仅仅落后在教材，在教育方法、师资力量上，都与美国高校差距较大，我们在初等教育上的领先优势在大学阶段不复存在", "marks": "力荐"}
{"content": "挺基础的一本书,不过在于把一些基础的东东再不厌其烦地再说了一下,静下心来,不是有点收获的, 其中关于big endian与little endian的转换不错,当然还有一些典故吧......不过对书中不断推行HLA不爽", "marks": "还行"}
{"content": "入门推荐", "marks": "推荐"}
{"content": "非常好的一套书，当时真是跑到哪里都要背着这个大厚本看一下", "marks": "力荐"}
{"content": "还行", "marks": "推荐"}
{"content": "很不错的一本书，里面涉及了很多基础上的东西，我读这本书的时候只学了VB，看着有点困难，没能读完，但是我读的前半部分就已经非常非常有用了，给我后面对很多东西的学习带来很大的帮助", "marks": "力荐"}
{"content": "很不错的书，前边很简单，后边有点深入的感觉，总体感觉并没有讲的十分深入，但是对于一种思维体制的建立还是很有帮助的", "marks": "力荐"}
{"content": "日本人的设计思想，全面，将机械设计考虑的方方面面都写的很详细。实乃经验之谈，值得所有机械设计类人士参考。", "marks": "力荐"}
{"content": "很好的书，力荐", "marks": "力荐"}
{"content": "很全面的一本书，看了启发很大！相见恨晚", "marks": "推荐"}
{"content": "日本的书，不错，有情怀", "marks": "推荐"}
{"content": "看了3遍以上，依然觉得是经典。尤其书中提到很多设计者工作过程中的思想动态是其他同类书籍从未提及的。这本书是真正的直奔实践去的。", "marks": "力荐"}
{"content": "基础实用，不可多得的好书。", "marks": "力荐"}
{"content": "程序设计能从冯诺依曼风格中解放出来吗？冯程序设计语言使用变量来仿真计算机的存储单元；控制语句精心完成它的跳转和测试指令；而赋值语句仿真它的取、存和算术运算。赋值语\n句是程序设计语言的冯诺依曼瓶颈，而且使我们以和计算机的瓶颈同样的方\n式来想像一次一字的项。考虑一个典型的程序，其核心是包含某些下标变量的些赋值语句。每个赋值语句产生一个字的结果。在改变下标值时，这个程序必然引起这些语句执行许多次，以便在存储中实现所希望的整个变化，因为它必须做成一次一个字。\n因此程序员关心的是，如同设计控制语句的嵌套来引起必要的重复那样，字的\n流动通过赋值瓶颈进行。赋值语句把程序设计分成为两个世界。头一个世界由赋值语句的右\n边组成。这是有序表达式的世界，这是一个有用的代数性质的世界（那些经常\n被副效应", "marks": "力荐"}
{"content": "翻译得不是很好，幸亏原文可以下载。", "marks": "推荐"}
{"content": "在ACM的主页上可以找到历届Turing Award得奖者的生平与Lecture，感觉看原文更自然一些", "marks": "还行"}
{"content": "如果你对历史有考究癖的话,建议看看", "marks": "推荐"}
{"content": "在孙总娃那儿收刮的书。看了会儿。觉得挺好玩的。", "marks": "还行"}
{"content": "看不完了，翻译实在太倒胃口", "marks": "很差"}
{"content": "只是希望我可以看得懂一点", "marks": "力荐"}
{"content": "CS这一学科发展不过几十年，其开山祖师很多还健在，我们这一代人真幸运", "marks": "推荐"}
{"content": "好是好，但是看着想睡觉", "marks": "推荐"}
{"content": "都是经典演讲，但中文翻译远不够尽职。", "marks": "推荐"}
{"content": "前辈们太伟大了", "marks": "力荐"}
{"content": "5星是给原书的，翻译不是一般的烂，苏老先生真是盛名之下其实难符啊，图灵演讲本来就很抽象，翻译成中文就更难懂了。真是很糟蹋这样的好书", "marks": "力荐"}
{"content": "如果要了解算法和分析的历史发展，这本书则是上选。Knuth、Backus等好多耳熟能详的名士都出现在本书中。这帮人虽然都是研究数学的，但其实都还蛮幽默。", "marks": "力荐"}
{"content": "演讲论文，有好多看不懂。。。", "marks": "推荐"}
{"content": "被翻译毁了的经典系列。", "marks": "还行"}
{"content": "第一次知道苏运霖是在TAOCP上看到的，一次在图书馆随意翻书时又看到了他的这本译作，但读来读去总觉得十分别扭，下次还是找原版来读读", "marks": "较差"}
{"content": "激励了我对计算机之热爱，翻译不大好", "marks": "力荐"}
{"content": "其实有点看不懂啦", "marks": "推荐"}
{"content": "文章非常好，翻译非常烂", "marks": "推荐"}
{"content": "图灵奖，计算机届的诺贝尔奖", "marks": "还行"}
{"content": "额。。。没看完。。。感觉学问太深的东西，我听不懂，不过程序设计语言是一样伟大的发明，这是我看完得出的结论", "marks": "推荐"}
{"content": "Donald的还不错", "marks": "还行"}
{"content": "翻译得一塌糊涂", "marks": "很差"}
{"content": "编程的关键是从陈述问题到解决问题的转变，逻辑化思考问题，训练自己用计算机能理解的方式表达自己的逻辑", "marks": "力荐"}
{"content": "挺不错的", "marks": "推荐"}
{"content": "关于C语言的语法讲解的不如国产书籍细致，但此书并不着眼于C的语法，而是引导学习者自己开发一个属于你自己的库。很不错的教材。", "marks": "力荐"}
{"content": "非常透彻的分析，初学者读到这些一针见血式的观点后必有恍然大悟之感！不足之处就是作者没有告诉初学者该如何使用他编写的库，用不了作者的库就不能实践，势必使初学者半途抛弃此书。", "marks": "力荐"}
{"content": "秒杀谭浩强好么！", "marks": "推荐"}
{"content": "觉得要比其他的C语言书好多了 ^_^", "marks": "力荐"}
{"content": "想当年做里面的题做得那叫一个欢乐~啊,当时好像是编出了一个猜单词之类的游戏...lol...好吧,其实程序还是很有趣的...可惜我实在太弱了嘤嘤嘤...", "marks": "推荐"}
{"content": "大一C语言教材，带我领略零一世界四季的变换，窦春燕姐姐~", "marks": "力荐"}
{"content": "哎，从这本书里才知道\"库\"这回事。\n后来大学时代所有的小作业都用了书中提供的那个超小的库来做。\n那时还不知道C++、STL，觉得那个库简直是世上少有，简洁逆天啊。\n曾经年少。\n还是要推荐，初学C，这个真的是个不错的选择。", "marks": "力荐"}
{"content": "入门的时候要是能看看这个书对人的提升是非常大的，如果有经验的话，本书帮助不大了。", "marks": "推荐"}
{"content": "不错的书，图形部分自己做了个库用，蛮 Happy 的", "marks": "推荐"}
{"content": "又回顾了一遍经典", "marks": "推荐"}
{"content": "相比之下还是这本有爱点，排版翻译都不错。", "marks": "推荐"}
{"content": "学 C 语言时候在图书馆借的影印版，非常好的入门书。", "marks": "力荐"}
{"content": "卧槽今天才想起来翻出来……", "marks": "力荐"}
{"content": "这本书让大一时候只会用office软件和上网的我对编程、cs产生了极大的兴趣，虽然后来这被证明是一种delusion.", "marks": "力荐"}
{"content": "我看过的最好的C语言教程", "marks": "力荐"}
{"content": "没有想想中的好", "marks": "还行"}
{"content": "翻译做得非常好，译者的水平相当高。", "marks": "力荐"}
{"content": "好书！", "marks": "力荐"}
{"content": "C的比较全面和较为深入的介绍", "marks": "推荐"}
{"content": "浅显易懂，有部分没读，实在是时间紧迫，不过里面涉及很多代码规范与编程的一般规则，感觉学到了很多，指针部分也讲得不错，可能还需要读别的来充实下~", "marks": "力荐"}
{"content": "学校的课本", "marks": "推荐"}
{"content": "我真是太喜欢作者的书写风格。", "marks": "力荐"}
{"content": "世界上有两种人：一种是读过此书的人，一种是没读过的人。", "marks": "力荐"}
{"content": "哎哟。。。这本真读伤掉了，不用照镜子就知道自己是猪。。。奇书啊，翻译也奇，理工科或是计算机专业的估计比较容易懂吧，太杂合百家了。。。大一的时候逻辑课老师推荐这本看来是有道理的，刚高考完，智商还处于人生的至高点。。。", "marks": "推荐"}
{"content": "读了之后，你会感慨，怎么有人能写出这样的书，玩出如此上乘的思想游戏。", "marks": "力荐"}
{"content": "亚马逊大促的时候买的，果然看不懂，penny是永远无法成为谢耳朵的，现实就是这么残酷。。。。", "marks": "推荐"}
{"content": "比较适合我国大二、大三学计算机又有点憧憬人工智能的学生们作课外拓展阅读。主体就三次大过渡：形式逻辑——哥德尔定理——人工智能。由于已经看了《哥德尔证明》和《人工智能哲学》两本，再看这本就觉得作者绕了好大的一圈，最后也没有太多建设性的想法。另外巴赫和埃舍尔虽然一直出场，却并没有达到期待中的深度，大多还是作为辅助解释。“自指”和“配位”是作者强调的两个核心思想。我想随着交叉学科人才的增多，以及AI领域的发展，未来这种类型的书将不会鲜见吧。翻译很有趣，体现出另一个维度的对偶，不过后期是不是校对崩了，从介绍图灵那一章开始，有三、四处错字出现。总的来说，这书还是给人以启发的。", "marks": "推荐"}
{"content": "书中的“自指”其实就是递归（函数自我调用），而哥德尔的“递归自指”不完备作用本质就是等式（递归=计算理论=随机性）换句话说，逻辑推理时遇见了关键的随机性，只是这个随机性到底是伪随机还是真随机，这个问题是不是和拉姆齐定理（完全的无序不可能）：可视化例子是乐高玩具。其中编程中lisp语言就是采用抽象数据列表与递归作符号演算来衍生人工智能。读了离散数学和组合学才发现物理的连续假设是个伟大的假设，只有从离散角度思考，利用测度来综合离散和连续，而这个桥梁是概率，才能理解世界的本质。哥德尔的最深的内涵是数论等价于逻辑，自然数和集合一一对应。逻辑学上的名句「从一个错误的假设开始，能够推导出任何可能的结论」逻辑学就是非稳定的动力系统", "marks": "力荐"}
{"content": "文科生读这样一本书，的确是勉为其难了，不过各取所需罢了。这本奇书的定位是“科学普及读物”，也就是还算不得是理论专著，这不禁让我联想到同样非常有名而且我很喜欢的哲学普及读物《苏菲的世界》。不管怎么样，36年前的这本奇书意外地加深了我对巴赫的理解：不论是从理性的角度，还是从艺术的角度去理解和演绎巴赫，都将是非常艰巨的，可以说如朝圣一般~~~", "marks": "力荐"}
{"content": "从前有座山，山里有个庙，庙里有个侯世达在讲故事", "marks": "力荐"}
{"content": "形式逻辑,哥德尔定理,人工智能. \n准备撸MIT的赏析课.", "marks": "力荐"}
{"content": "Grand piece.", "marks": "力荐"}
{"content": "这本书太诡异，一个元灯的request可以触发一个元元灯request一个元元元灯，元元元灯再request元元元元灯。。。如此内推然后在有限时间内返回。那么就不存在顶端的Object. 可是没有顶端Object如何设计垃圾回收呢？宇宙从来不回收垃圾。", "marks": "推荐"}
{"content": "神奇的书…每次翻到随机的一页，都发现是没看过的…", "marks": "力荐"}
{"content": "艰难看完五章之后决定打五星，然后不再往下看了，放在书架上供起来。", "marks": "力荐"}
{"content": "唯一不給五星的原因是，譯文就像跑了氣的可口可樂，你唾幾口吐沫進去，不等於說我就能喝出泡泡來。這本書在“智”的層面大概已臻極點。2 theorems of mathematical logic that establish inherent limitations of all but the most trivial axiomatic systems capable of doing arithmetic.\r\n1st states that no consistent system of axioms whose theorems can be listed by an \"effective procedure\" ) is capable of proving all truths abou", "marks": "力荐"}
{"content": "花半年时间捋了一遍，累觉不爱.........", "marks": "推荐"}
{"content": "拣自己能读懂的部分浏览了遍，虚荣地标上“已读”，但这些都不影响我真诚地觉得这是一本牛逼的书。是的我第一次用这个词形容一本书！", "marks": "推荐"}
{"content": "2012年读", "marks": "推荐"}
{"content": "断断续续看了一个月之久，算是啃完了。作者博闻强识、引经据典涉略了诸多领域：数学、生物、计算机、音乐、物理等。纵观全书，侯世达似乎在说一个词——self，一种对自我的思考，自我的认知，自我的成长。阿波罗神庙上的“认识你自己”，尼采的“成为你自己！”，概如是矣。没有你，你所观察到的世界还在么？我想一定不在。  好书还需重读。就这样。", "marks": "力荐"}
{"content": "神书。", "marks": "力荐"}
{"content": "神作", "marks": "力荐"}
{"content": "自知看不懂，本来以为某人会感兴趣，结果人家根本不看，还是自己慢慢啃吧……", "marks": "推荐"}
{"content": "神作", "marks": "力荐"}
{"content": "上高中的时候读过。不明觉厉=。=", "marks": "力荐"}
{"content": "中文版部分内容看得肠子略打结，虽然翻译百里挑一能得九十九分毕竟也还是要扣个一分不是么。。。原文么我非常不要脸地只肯看劣质免费pdf，通篇充斥着乱码和错别字，我英语这么差当然驾驭不了不是么。。。于是我把中英文一起像嚼蜡一样慢慢看完了。。。当然遇到高尚的推导部分，作为无知中年妇女我都果断地跳了过去。。。", "marks": "力荐"}
{"content": "其实只读了1/5，碎片化的时间不适合阅读此书，逻辑打断了下次很难接着读。。。感觉这辈子都没机会读完了。。。有时间逻辑好的话应该读读这本书，神作", "marks": "力荐"}
{"content": "作者舉重若輕地介紹了很多我沒有看懂的音樂知識，以及勉強可以看懂的數學和計算機知識。", "marks": "力荐"}
{"content": "老天啊这书居然有中文版，而且这标题译得太彪悍了，我一定要膜拜一下……", "marks": "力荐"}
{"content": "作者对于人工智能的阐述和分析观点并不是特别出奇，然而牛逼之处在于触类旁通，能够把音乐、艺术和计算机三个领域中共同理念提炼出来并加以整合，让人不禁慨叹作者脑洞之大。除了书籍本书的神书属性，译者群也功莫大焉，作为专业翻译的一员，真心对本书译者群的整体素质表示拜服，尤其是在序中提出的“移译”理念，简直不能同意更多。这种融合百家且能给人以思想启迪的书，注定要摆在书架上留给闺女将来看~~", "marks": "力荐"}
{"content": "对不起。。似乎只有我把这本书当做是催眠神器了。。", "marks": "力荐"}
{"content": "不明觉厉🙄", "marks": "力荐"}
{"content": "无法用简单的一两句话来概括的奇书。汪洋恣肆，旁征博引，融会贯通，浑然天成。", "marks": "力荐"}
{"content": "标记读过其实只能是翻阅浏览了一遍吧，无比遗憾和羡慕的是有数学和计算机基础的人，就巴赫和埃舍尔的部分虽然并不是很深入但是可以从中找到很多乐趣。综合来看会有一种神秘的共同原始的奇特感觉。有的评论把此书神化了，既然要神化那也应该分为读懂此书和读不懂此书的人。", "marks": "推荐"}
{"content": "奇书！", "marks": "力荐"}
{"content": "一次关于有序与无序的探寻之旅——音乐，数学，生命，智能——规律即是美", "marks": "力荐"}
{"content": "弃读", "marks": "还行"}
{"content": "神作呀", "marks": "力荐"}
{"content": "一本绞脑子的书", "marks": "力荐"}
{"content": "哲普作品。", "marks": "推荐"}
{"content": "神书", "marks": "力荐"}
{"content": "奇书 奇书 。想来我还是没读懂 鉴定完毕", "marks": "力荐"}
{"content": "不是人写的，是人类智慧的最高明解读角度", "marks": "力荐"}
{"content": "晓煦推荐。", "marks": "力荐"}
{"content": "我只能说，佩服得五体投地！", "marks": "力荐"}
{"content": ":TP301-49/1250", "marks": "力荐"}
{"content": "总算读完了，对数学与哲学的关系有了些新的认识", "marks": "力荐"}
{"content": "1.这不算一本科普书，因为书中所涉及的内容之宽度广度不可思议，这也体现了作者的博学。 2.书的翻译无与伦比，内容简介里已经说得很清楚了。 3.尽管不少东西我一时无法理解，但就和巴赫的音乐一样，光看书的结构我就能体验到阅读畅快。 4.相比于给四颗星的凯文·凯利《失控》，本书绝对比他高明十倍，所以给五颗星实在是很无奈。 5.本书绝对值得收藏", "marks": "力荐"}
{"content": "4.5！！！！！！！！！！！", "marks": "推荐"}
{"content": "著名的GEB", "marks": "推荐"}
{"content": "好书展示问题本质，洞见深刻。缺点是论述不够精简，有些对话真的很无聊。翻译和著作都有点过誉了", "marks": "力荐"}
{"content": "神书", "marks": "力荐"}
{"content": "1、能够读完的都应该给自己点赞；2、知识面宽广，3、逻辑性强；4、哥德尔的不确定性定理，5、认知", "marks": "力荐"}
{"content": "虽然讨论的是数学和计算机方面，但是用音乐和绘画来解释，里面的故事非常精妙，翻译也堪称一绝。强烈推荐！！", "marks": "力荐"}
{"content": "神作..", "marks": "力荐"}
{"content": "天书～～～", "marks": "力荐"}
{"content": "和朋友偶然聊起，补标。原著和翻译都是艺术品。", "marks": "力荐"}
{"content": "超棒～～!下次回家再读一遍", "marks": "力荐"}
{"content": "“读”完了。我只知道我一无所知", "marks": "力荐"}
{"content": "fabulous ", "marks": "力荐"}
{"content": "到现在好像也没看“懂”，可能要慢慢看", "marks": "推荐"}
{"content": "第二遍读，对我现在的帮助非常大。", "marks": "力荐"}
{"content": "【藏】", "marks": "力荐"}
{"content": "2011年7月复刻版。实体书拿在手中那一瞬间几乎泪奔。电脑里的pdf文件是06年创建的。某种意义上讲geb是我的心灵之书、成长之书。我得在书架子上修一个神龛给它。", "marks": "力荐"}
{"content": "可好玩了，可惜太厚", "marks": "力荐"}
{"content": "奇书 ", "marks": "力荐"}
{"content": "何止五星", "marks": "力荐"}
{"content": "A与非A。我更迷茫了。", "marks": "力荐"}
{"content": "读这个的时候 我已经发现 我中文也读不懂啦－ －", "marks": "还行"}
{"content": "GEB昨晚终于啃食完毕，用时超越无注释《后汉书》，不敢妄评集大成者，可惜近些年不买板砖了，自顾自看个电子版的不知道有没有漏页", "marks": "力荐"}
{"content": "用两个月时间读完，一次激动人心的旅程", "marks": "力荐"}
{"content": "我靠！！！！！！！！！！！！！太牛逼了！！！！！！！！！！商务印书馆的各位，我跪拜你们！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！", "marks": "力荐"}
{"content": "很有智慧的一本书，就是非计算机专业的是在太难读下去了！", "marks": "推荐"}
{"content": "神书！", "marks": "力荐"}
{"content": "无爱", "marks": "还行"}
{"content": "或许仅面向小众\r\n对复杂性关注的人会很喜欢", "marks": "力荐"}
{"content": "其实只读了1/3，其他就是看别人的读后感，和计算机很多相通的地方。对于同一思想在不同领域的延展，我总是很犹豫和怀疑。", "marks": "力荐"}
{"content": "|294:54|", "marks": "力荐"}
{"content": "牛逼的理念，牛逼的翻译，牛逼的厚度，牛逼我居然买到了一本。。。", "marks": "力荐"}
{"content": "这是一部优秀的书，不止于“科普”那么简单。这又是一部被“神化”了的书，并不能完全匹配得上被神化后的地位。巴赫的音乐，其逻辑性、理性的光芒，在各种书中描述的，其实更多的是从乐谱分析的角度而言。但是，音乐是不能这样被分析的，至少脱离了音乐的最本质性东西。这是表达上的先天短处，无论是从文字还是语言的角度，都是这样。音乐是一种高级的美学感知的东西，说严重点儿，很神圣，无法言传的一种高级美感，能享受到的，就是最大的幸福。这怎么能从文字、语言、甚至是数学的方式来表达呢？即便是有，那也不是最宝贵最本质的东西。巴赫的音乐，确实闪耀着理性的光辉，但我想要说的是：巴赫音乐中的感知式美学，照样也有超级高度的光辉。这一点，在多数时候恰恰被反智的选择性盲视了，从这个角度来说，很可悲。我不止A比你好，B也比你厉害好吗！", "marks": "还行"}
{"content": "跳过了很多看不明白的部分，但上半本确实让人耳目一新", "marks": "力荐"}
{"content": "太聪明的书了，作者什么智商啊。。。", "marks": "推荐"}
{"content": "看了上部", "marks": "力荐"}
{"content": "。。。忘记内容了。。。这。。。", "marks": "推荐"}
{"content": "跳过了很多看不明白的部分，但上半本确实让人耳目一新 ", "marks": "力荐"}
{"content": "仍是没看完。", "marks": "力荐"}
{"content": "大约是修行不够,没读到一小半就让我拿来垫显示器了", "marks": "还行"}
{"content": "暂时还理解不了", "marks": "力荐"}
{"content": "中后部AI部分讲的太多了。。", "marks": "力荐"}
{"content": "挺好的书，就是太考验耐性了", "marks": "推荐"}
{"content": "略读，四年不学数学，基本的东西都不会了。但是总体而言，还是很好书，四点五星。", "marks": "推荐"}
{"content": "过了就过了", "marks": "还行"}
{"content": "大学的时候第一次看就知道自己是猪", "marks": "力荐"}
{"content": "直接看尿了", "marks": "力荐"}
{"content": "那些图就够搞脑子的了。", "marks": "力荐"}
{"content": "从数论到人工智能到心智，灵魂还是哥德尔定理，巴赫和埃舍尔只是骨头和皮肉。不过感觉稍微有点啰嗦", "marks": "推荐"}
{"content": "花了几个月的时间，在上海难得的一个大晴天终于读完这本书。最初吸引我的音乐和逻辑主题，加上后来愈发复杂的计算机理论和生物学，极大的满足了我蓬勃的好奇心。虽然囫囵吞枣的看完了，收获还是很大的：这个世界，追根溯源，都是相通的。", "marks": "力荐"}
{"content": "觉今是而昨非/美、真与形式 Page767", "marks": "力荐"}
{"content": "太厚了！但是好书", "marks": "力荐"}
{"content": "惊为天人，跨学科领悟的神书。数学、绘画和音乐，逻辑本身的循环交替和往复。", "marks": "推荐"}
{"content": "准备第二遍。", "marks": "力荐"}
{"content": "读到第四章弃了，如果想了解相关知识，不如去买本计算机领域的课本看看。", "marks": "推荐"}
{"content": "奇书、奇翻译、奇跨界……反正我就只看看乌龟螃蟹和阿基里斯的神烦扯淡", "marks": "推荐"}
{"content": "有意思，学习人工智能的感觉。", "marks": "还行"}
{"content": "I wish my wish would not be granted!\n我的愿望是，我的愿望不会得到满足。\n", "marks": "还行"}
{"content": "第五部分没读. 一般.", "marks": "还行"}
{"content": "适合C++初学者", "marks": "力荐"}
{"content": "经典", "marks": "还行"}
{"content": "关于http协议最为深入的一本，其中tcp/http interaction这部分很有特色。", "marks": "力荐"}
{"content": "其实HTTP协议一点都已简单，自己了解的也不是很多，这本书也应该作为需要重新读的。 HTTP的缓存、代理、持久连接...", "marks": "推荐"}
{"content": "一本不错的老书，适合做Web相关开发的参考资料。虽然里面提述的一些名词或者软件有点古老，不过本质和概念的东西今天拿来一样适用。", "marks": "力荐"}
{"content": "http好书。", "marks": "推荐"}
{"content": "看了一半，还了。", "marks": "推荐"}
{"content": "半天看完，讲得很实用。", "marks": "力荐"}
{"content": "实验室里人手一本的入门书... 其实也不是因为有多好, 而是讲fortran的书好少啊", "marks": "推荐"}
{"content": "经典的经典", "marks": "力荐"}
{"content": "这就叫做经典", "marks": "力荐"}
{"content": "简洁明了，有C语言基础，看这个顺便知道了很多term的最初来历。", "marks": "推荐"}
{"content": "最后一章印刷错误比较多，总的来说还不错", "marks": "推荐"}
{"content": "写的蛮清晰的", "marks": "推荐"}
{"content": "浅显易懂，深入浅出", "marks": "力荐"}
{"content": "非常清晰易懂，哗啦啦，很快可以看完看懂。。。。", "marks": "力荐"}
{"content": "真没想到豆瓣上会有这本书啊hhhhhhhhhhhhhhhhhh", "marks": "力荐"}
{"content": "教不会人的书不是好书~！", "marks": "较差"}
{"content": "適合自學也適合教學的書，關於Fortran的書比想像中的少多了所以才找到這麼早以前的書（仍然是市面上能找到的數一數二跟得上時代質量又好的書）……", "marks": "力荐"}
{"content": "对于我这种以实用为目的的程序小白是极好的教材。。", "marks": "力荐"}
{"content": "毕设要学", "marks": "推荐"}
{"content": "Fortran95入门经典书籍，推荐阅读！讲的非常透彻，就喜欢这种风格的作者", "marks": "力荐"}
{"content": "很不错的入门fortran自学用书，特别适合计算机语言零基础的同学！", "marks": "力荐"}
{"content": "下学期的有限元和计算力学可能会用到fortran，所以这个寒假还是得好好学。", "marks": "推荐"}
{"content": "好懂", "marks": "力荐"}
{"content": "应该是市面上fortran入门书籍中，写的最好的了，很实用。相比这本，谭浩强的那本F77太过基础了", "marks": "力荐"}
{"content": "很经典的Fortran入门书，说得很清楚", "marks": "力荐"}
{"content": "不错，经典", "marks": "推荐"}
{"content": "书不错,但是讨厌这个专家2个字,入门书籍", "marks": "推荐"}
{"content": "八卦很好看", "marks": "力荐"}
{"content": "虽然我是个自学的（未来）计算机科学家，不过这本书的技术内容还是没什么新意（早点看也许会好一点）。不过好在，原来程序员所喜闻乐见的那些稀奇古怪的幽默是有出处的。看来暴龙渐渐变专业了。", "marks": "推荐"}
{"content": "很好的C语言高级教程，文笔幽默", "marks": "力荐"}
{"content": "什么叫指针，什么叫函数，看了这本书才会有所了解", "marks": "力荐"}
{"content": "|117:50|", "marks": "力荐"}
{"content": "可以称 C 语言休闲读物，非常有趣，经典读物，在中国曾经一度脱销啊！", "marks": "力荐"}
{"content": "在以前应用的模糊概念，刷新了一遍", "marks": "力荐"}
{"content": "不错", "marks": "推荐"}
{"content": "读的电子版，值得买一本在手里", "marks": "力荐"}
{"content": "上学的时候看过，当时记得看得很开心，里面不少内容很有趣，不过后来一直没怎么关注这方面，就忘完咯", "marks": "推荐"}
{"content": "06年，书店没有卖了，只能买复印的。08年又重新出版了。不过现在不什么也只是看一看，不会再买了。", "marks": "力荐"}
{"content": "力荐。不过在对体系结构和编译器有了一定了解后，这本书只不过是前两者的C表达", "marks": "力荐"}
{"content": "幽默的程序设计读物", "marks": "力荐"}
{"content": "作者好八卦阿，哈哈，有点2", "marks": "力荐"}
{"content": "5,6,7,8章看得似懂非懂，还要把“编程挑战”的代码全部敲一遍。书中有许多有趣之处。", "marks": "力荐"}
{"content": "计算机八卦很多很好很强大!就冲着这些超搞的八卦这本书就已经值得一看了^_^。。其实我是想说我看了之后印象最深的就是八卦们了~~哈哈~~难得有一本书写得这么搞。。", "marks": "力荐"}
{"content": "关于c的历史 主要讲unix下的实现 偏了一些", "marks": "还行"}
{"content": "都是c语言的经典，好不容易才再版，买了一本狂看，呵呵，非常好，看完后就对c语言有新的理解", "marks": "力荐"}
{"content": "月底我会写一份详细的读书笔记，敬请期待~虽然没人期待吧。。。哈哈~", "marks": "力荐"}
{"content": "书绝对是好书，只是翻译太水。建议看原版", "marks": "推荐"}
{"content": "写的蛮有意思的一本书，可以当作一本闲暇时候的读物，生动介绍了不少计算机的历史知识。", "marks": "力荐"}
{"content": "研2才读的。我觉得没有过时。", "marks": "力荐"}
{"content": "已购.", "marks": "力荐"}
{"content": "深入探讨了数组与指针，也翻出了许多历史小八卦，比较有意思。", "marks": "推荐"}
{"content": "大师级的programmer根据自己多年的编译器和操作系统经验写出的一本非常实用的c编程书。非常值得细细品味", "marks": "力荐"}
{"content": "明白了不少细节，关于数组指针声明什么的讲的比较清晰", "marks": "力荐"}
{"content": "这本书的八卦很精彩..", "marks": "力荐"}
{"content": "c程序员必看，我不知接下来有没有时间继续看了", "marks": "力荐"}
{"content": "c语言必看书籍", "marks": "力荐"}
{"content": "应该叫《C PRIMER》", "marks": "力荐"}
{"content": "这本书更多的是系统层次的理解，内存，指针，数组，链接这些话题已经是沉淀下来的精髓，我认为每个程序员都应该了解。", "marks": "力荐"}
{"content": "C语言编程教学推荐用书", "marks": "推荐"}
{"content": "看过\n讲的什么\n忘了", "marks": "推荐"}
{"content": "如果我被困在一个荒岛上且只允许带一本编程技术书，那么毫无疑问就是这本。", "marks": "力荐"}
{"content": "喜欢这种写作风格，懒人看书慢啊", "marks": "力荐"}
{"content": "这本是我看关于C语言的最后一本，倒不是多难，而是内容很经典，很新，不过我还准备再看一遍K＆R C", "marks": "力荐"}
{"content": "非常非常好的，诙谐而又深入", "marks": "力荐"}
{"content": "充满智慧和幽默的一本书，\nC/C++的骨灰级玩家最好都读读", "marks": "力荐"}
{"content": "看不懂", "marks": "还行"}
{"content": "走火入魔", "marks": "力荐"}
{"content": "must read. N多牛人推荐", "marks": "力荐"}
{"content": "嗯，当时图书馆里应该是这本，已经让人翻的不成样子了。翻译应该说是极烂，很长时间以后我才开始看英文书。", "marks": "力荐"}
{"content": "很久以前和那本《C语言的陷阱与缺陷》一正买来的，读了两遍都没太看懂。工作后看见一些软件工程师也在读这本书，一问，很多人也不是很懂。看来，大师就是大师。", "marks": "推荐"}
{"content": "第一次没能坚持读下去，现在重新翻翻，受益匪浅啊，经典果然还是经典。", "marks": "力荐"}
{"content": "不但可以看技术, 还可以看八卦.", "marks": "力荐"}
{"content": "一本算是C语言的进阶书籍吧，结合作者多年编程经验，讲诉了一些编程技巧，编程中常见的错误，很值得一读，并且穿插了很多有趣的故事，阅读起来比较有意思。有些东西可能有点陈旧，可以果断跳过。最后一章讲C++的基本可以略过，可以去看其他讲C++比较好的书籍。", "marks": "还行"}
{"content": "我觉得是C程序员必看的书之一。翻译的不太好，但是书中讲到的问题极有实践意义。", "marks": "力荐"}
{"content": "就一个字：好", "marks": "力荐"}
{"content": "行文流畅，幽默，一气呵成。可以当小说来读。", "marks": "力荐"}
{"content": "很好很强大，学C之人必看的一本书", "marks": "力荐"}
{"content": "这本书的作用是引发人们的思考，想要知道的更具体是不够的还是，但是作者角度是十分新颖的，也是够直白的，简直就是经典。", "marks": "力荐"}
{"content": "c语言四大圣经，研读吧。作者风趣幽默，各种打趣揶揄。", "marks": "力荐"}
{"content": "必读", "marks": "力荐"}
{"content": "看了两遍，在学校看第一遍觉得讲得有道理，但是也就停留在觉得上面；出来工作后再看一遍，有点经验了，里面讲的有些都遇到过或者自己也能动手试验，真心赞，好书。", "marks": "力荐"}
{"content": "读过两次，非常好的一本书，让我受益匪浅。同样是面试前必看。", "marks": "力荐"}
{"content": "完美的C语言读物", "marks": "力荐"}
{"content": "挺好的书，c语言其实就够了，c++太复杂了", "marks": "推荐"}
{"content": "里面的故事挺搞笑的。。。", "marks": "力荐"}
{"content": "非常棒的一本书，常对别人推荐这本书，我觉得和C陷阱与缺陷+C和指针可以并为C语言进阶的三剑客了，哈哈。今年面试笔试的时候，很受用。", "marks": "力荐"}
{"content": "不多说", "marks": "力荐"}
{"content": "uml必读", "marks": "力荐"}
{"content": "UML 程序员", "marks": "还行"}
{"content": "介绍如何写一个完整的用例", "marks": "推荐"}
{"content": "Except for the nasty translation, this book is awesome for those who want to understand more about compiler based on architecture.\nI would recommend those to read the original English version.", "marks": "还行"}
{"content": "略读一遍。主要搞清知识框架。优化的主要方法是依赖。精读了第二章的部分章节。搞清了依赖的三种类型及依赖图的画法。个人觉得已经足够。其他知识等需要时再精读一点不晚。其实精读那部分还是挺来劲的。", "marks": "力荐"}
{"content": "粗略的翻了下，讲编译器优化细节的，以Fortran为主", "marks": "还行"}
{"content": "OO,UML入门书籍", "marks": "推荐"}
{"content": "研究生教材", "marks": "推荐"}
{"content": "听过王老师的课，所以买了这本书，讲得简单明了。", "marks": "推荐"}
{"content": "讲的很全面，例子也很多，只是在网上看的电子书，案例里的图片都看不清。", "marks": "推荐"}
{"content": "传说中的CLRS  算法方面的经典～  但是个人觉得写得不怎么样～  刻意追求严谨无漏洞而不注重让读者容易懂  相比之下还是听老师讲课比较好   发现越牛的老师越是能用浅显易懂的方式讲给你听……", "marks": "还行"}
{"content": "本书的意义在于锻炼基础的算法思维和感觉，以及在日后的工作有能力发现或者构造适用这些算法的场景。如果有更好的基础，甚至可以改造某些算法来适应更特殊的需求。 ", "marks": "还行"}
{"content": "CLRS。算法课的教材。根本没学好，要找时间补课。", "marks": "力荐"}
{"content": "比较全面，大部分读完，课后题待作", "marks": "力荐"}
{"content": "终于可以把这本书看完了……", "marks": "力荐"}
{"content": "除了太厚，其他都还不错", "marks": "力荐"}
{"content": "CLRS", "marks": "力荐"}
{"content": "很早读的了，当时是就着MIT的那个24集教程读的。名符其实的启蒙读物。当时被感动的涕泗横流，哈哈，它打开了我心中的一堵墙。从此我对MIT刮目相看。", "marks": "力荐"}
{"content": "令人如痴如醉的 Chaper 25", "marks": "力荐"}
{"content": "读一半烂尾了，以后再读", "marks": "力荐"}
{"content": "读得不够细致。。。", "marks": "力荐"}
{"content": "启发而不是填鸭！", "marks": "力荐"}
{"content": "一本陪我长大的书", "marks": "力荐"}
{"content": "唔，不予置评了，算法入门书，入门书也能当砖头拍死你……", "marks": "力荐"}
{"content": "[昔时所读]英文书参考性看过一些。", "marks": "力荐"}
{"content": "这书不用我多说吧", "marks": "力荐"}
{"content": "尼玛，什么时候能把这本啃完啊！停止。。。。", "marks": "力荐"}
{"content": "高二（03年）的时候买的，为了NOI。结果后来也没看太多，把动态规划和网络流那部分看了下。", "marks": "力荐"}
{"content": "很经典，是优点但是也是缺点", "marks": "推荐"}
{"content": "zxq什么时候才从mit回来呢``", "marks": "力荐"}
{"content": "经典之作，学计算机的都应该看看", "marks": "力荐"}
{"content": "写得真好，数学证明没仔细看，还得再来过", "marks": "力荐"}
{"content": "写得很好 深入浅出", "marks": "力荐"}
{"content": "对于面试这本书是大大的好。对于计算机专业编程，这些东西早点弄清楚，可以少走很多弯路。", "marks": "力荐"}
{"content": "需要反复读的书。", "marks": "力荐"}
{"content": "工作需要时，可当作参考", "marks": "推荐"}
{"content": "对算法一窍不通。踏不下心来看啊", "marks": "推荐"}
{"content": "我心中的第二圣经...", "marks": "力荐"}
{"content": "搜录了各种常用的算法，值得收藏~", "marks": "推荐"}
{"content": "發現英文版不是很難懂耶～", "marks": "力荐"}
{"content": "讲解很清晰，内容很全面。但是，少了一些更深刻的洞察。", "marks": "力荐"}
{"content": "是机械出版社前一版吧。。大学的时候图书馆里看过。。。这个算是系统看完了的。。", "marks": "还行"}
{"content": "我日啊，课本", "marks": "力荐"}
{"content": "去年看了两遍，每一遍都有新的收获，书中将复杂的过程讲得很清晰，从原理出发", "marks": "力荐"}
{"content": "很不错，例子都有，而且解释很详细。当时图书馆借的，有点想买一本", "marks": "力荐"}
{"content": "CLRS", "marks": "力荐"}
{"content": "经典著作！将来再读给儿子讲算法！", "marks": "力荐"}
{"content": "算法导论 (Introduction to Algorithm), 在圈子里常常按四个作者的首字母写成 CLRS, 算是对不愿意看或者看不懂 TAOCP 的人送上了半个梯子(还有半个当属具体数学 Concrete Mathematics). 这本书在美国大部分大学中被列为算法类教材, 在国内也是 ACM 竞赛集训必看的教材之一. 虽然名字里面带一个导论, 内容却一点不含糊. 在我个人看来, 其内容基本覆盖绝大多数常用的算法, 在 NP 复杂性理论以及近似算法方面也有所涉及. 这本书最好的地方是习题详细且全", "marks": "力荐"}
{"content": "配合光头叔叔和大胡子叔叔的视频来看，效果更加。看过这本书之后我再也不怕看英文砖头了", "marks": "力荐"}
{"content": "一直想读完它，一直断断续续。真心的经典之作，作者的思路和深度都超过了我的预想。\n参照MIT的公开课，阅读速度翻倍了", "marks": "力荐"}
{"content": "教科书", "marks": "力荐"}
{"content": "训练思维，老顾讲的很好", "marks": "推荐"}
{"content": "ing", "marks": "力荐"}
{"content": "神书", "marks": "力荐"}
{"content": "本科读时感觉很难读，前阵子过了一遍，基本上都能接受", "marks": "推荐"}
{"content": "one more needed", "marks": "力荐"}
{"content": "2014-04-11", "marks": "还行"}
{"content": "CLRS... 证明严格, 内容全面. 语言有点罗嗦", "marks": "推荐"}
{"content": "算法经典", "marks": "力荐"}
{"content": "这玩意，算了，又爱又恨。。", "marks": "推荐"}
{"content": "还有比这个更经典的?", "marks": "力荐"}
{"content": "略显繁琐", "marks": "推荐"}
{"content": "这本书带领我走进了多彩缤纷的世界，如果当时没有读到这本书的话，人生轨迹也许都会完全不同。", "marks": "力荐"}
{"content": "买了没看，偶尔查一下", "marks": "还行"}
{"content": "很好的算法入门书籍，理论介绍恰到好处，适用于初学者。", "marks": "力荐"}
{"content": "基本过了一遍，略过了不少内容。[当年的教材，小声的说一句，我都快忘光了。重新读。]", "marks": "力荐"}
{"content": "好久没读英文原版书了", "marks": "推荐"}
{"content": "绝对经典", "marks": "力荐"}
{"content": "我就标注一下而已。", "marks": "力荐"}
{"content": "学了算法三年后再看，竟然感觉有点难。。。是我太渣了么。。。", "marks": "力荐"}
{"content": "数学之美, 美你妹阿...我还没入门\n", "marks": "力荐"}
{"content": "案头常备。可以跟MIT视频一起边看边读。", "marks": "力荐"}
{"content": "其实英文版才能读懂", "marks": "力荐"}
{"content": "一本算法经典，读懂了的话变成必然大有精进，可惜当时囫囵吞枣马马虎虎，现在没机会再读。", "marks": "力荐"}
{"content": "D.E.Knuth 的学生都不一般。。", "marks": "力荐"}
{"content": "无可非议的Bible，准备看第二遍巩固一下。", "marks": "力荐"}
{"content": "好书，那个leiserson在 MIT 的讲课视频也是要看的，真是大牛的风采，那个助教讲的也不错。特别有意思的是Leiserson讲的那个用双手做乘法的小算法。", "marks": "力荐"}
{"content": "原版的读过，影印版的也看过。", "marks": "力荐"}
{"content": "算法入门的书籍中，难得的好书。教参也丰富，mit提供视频资料。", "marks": "力荐"}
{"content": "书是本好书，但是东西真的讲的挺多，需要花时间慢慢去体会 ", "marks": "力荐"}
{"content": "好书，可惜至今没有领会精髓", "marks": "力荐"}
{"content": "没有好好读。", "marks": "推荐"}
{"content": "貌似这是最后一版影印版的算法导论了，现在国内都只有中文版的了。", "marks": "推荐"}
{"content": "当年大二下的时候和lipeng一起在武汉好不容易找到这本书，还跑到武大东湖分校那边去取书，结果到现在我都还没读完，lipeng的书都不知道跑哪儿去了...", "marks": "力荐"}
{"content": "数学证明非常有力", "marks": "推荐"}
{"content": "非常非常好的书，推荐多次阅读，并且做后面的习题", "marks": "力荐"}
{"content": "Classical textbook from MIT.", "marks": "力荐"}
{"content": "经典算法教材，讲解很详细。", "marks": "推荐"}
{"content": "这本书挺经典的，用的类pascal的伪代码，代码规范，讲解也比较清晰。", "marks": "力荐"}
{"content": "很厚的一本书，需要啃的一本书", "marks": "还行"}
{"content": "教材...", "marks": "力荐"}
{"content": "深奥，深奥！需要多读多学！", "marks": "力荐"}
{"content": "四大牛合著，经典非常", "marks": "力荐"}
{"content": "我的启蒙图书", "marks": "力荐"}
{"content": "算法就是哥心中的痛……", "marks": "力荐"}
{"content": "第一次发现原版图书是那么亲切，怀念那些读软工的日子。", "marks": "推荐"}
{"content": "大二的必修课教材，经典", "marks": "力荐"}
{"content": "MIT press", "marks": "力荐"}
{"content": "= = 看到自己初中的时候写得密密麻麻的单词翻译实在是蠢爆了...", "marks": "推荐"}
{"content": "研究生课程的教科书！这门课程是我当时成绩最好的，95分！", "marks": "力荐"}
{"content": "这书满分不谈了吧。", "marks": "力荐"}
{"content": "本书对算法和数据结构描述特别详细和深入，值得仔细研读。数据结构方面再介绍得全面些就好了", "marks": "力荐"}
{"content": "本人读的第一本全英文的技术书籍，非常nice", "marks": "力荐"}
{"content": "基础", "marks": "力荐"}
{"content": "提升内功必备。", "marks": "力荐"}
{"content": "这本英文的算法导论是我看过的解释算法比较清晰的一本。", "marks": "力荐"}
{"content": "读的最用心的书", "marks": "力荐"}
{"content": "虽然说这是经典，但里面大段的数学符号、公式和伪代码，数学基础不好者，或者没有一定算法基础的读者，建议慎重选择，起码去书店，往后面多翻翻，看看能不能看懂再决定买不买。我推荐算法竞赛宝典这本书，新出的", "marks": "还行"}
{"content": "这学期CSOR4231才开始接触这本书，计算机最本质的数学原理引人入胜。想起了最初王子屯儿老师说的一句话，有人问为什么要学习算法，其实应该问的是，为什么不呢。\n\n原来Clifford Stein是哥大的，这下找到了一个剁手的理由。", "marks": "力荐"}
{"content": "非常的详细，最初我也是指望通过这本书学会读大型代码。后来发现，真正让我学会读大型代码的还是了解功能和debug。", "marks": "推荐"}
{"content": "作者写书不多，但都是精品。学会阅读代码是一个合格的程序员的基本功！", "marks": "力荐"}
{"content": "可读性不强，整体糟糕", "marks": "还行"}
{"content": "附录B才是精华。", "marks": "较差"}
{"content": "永远的经典!", "marks": "力荐"}
{"content": "我还是很欣赏这本书的, 起码选题就很有特色. 其实我当它是C语言技巧书 :)", "marks": "推荐"}
{"content": "感觉这本书没有想象中好。", "marks": "还行"}
{"content": "大部分工作都是在既有代码上的＝ ＝ 并且还有一些动不得  不管你怀疑那部分到底有没有问题  这本书不可避免滴成为了必修⋯⋯", "marks": "还行"}
{"content": "书名很吸引人，不过对内容的组织感觉有些糟糕，三百多页的书几乎一半以上介绍控制结构和简单数据结构，要说学习这方面这么点篇幅高不成低不就。工具介绍方面还算可以，最后的一次实际例子好好学习也能有所收获。总体而言包含了太多和主题无关的内容", "marks": "还行"}
{"content": "烂书烂翻译", "marks": "很差"}
{"content": "borrow from bob", "marks": "推荐"}
{"content": "应该刚学完c的时候看", "marks": "还行"}
{"content": "有些道理直到现在还很有用", "marks": "推荐"}
{"content": "有点太宽泛，又有一点锁细。", "marks": "还行"}
{"content": "我没有读完，但是总感觉对我的帮助不大，总之这本书对读者的“觉悟”有很高要求，要能和作者产生共鸣，但是从各方面的反应来看，这本书应该是一本好书。", "marks": "还行"}
{"content": "偏爱后面的章节，比较大纲", "marks": "推荐"}
{"content": "TP311.11/4814", "marks": "还行"}
{"content": "扫读，看完没啥感觉", "marks": "还行"}
{"content": "大概过了一遍，但是感觉没有看的特别的清楚，没看出来好在哪里，这本可是获奖书籍。", "marks": "还行"}
{"content": "不错的一本书, 从下向上的讲解了代码阅读的方法, 很系统, 尤其适合C/C++的程序员. 也适合在校的大学生学习", "marks": "还行"}
{"content": "有些文不对题，虽说语法模式架构等等是阅读代码的基础，不过借着讲阅读代码讲了一大堆就有点凑篇幅的嫌疑了。把开头和附录过一下就差不多。", "marks": "较差"}
{"content": "怎么说呢，这本书主题写的比较乱，没有突出重点，另外，写的内容过于偏重C的一些技巧，这貌似和主题不太靠谱。要是自己实际参加过开源项目的话就别看此书了，可以看看谷歌的C++编程规范，比这个写的好。", "marks": "还行"}
{"content": "还是很不错的，适合读代码时参考一下", "marks": "推荐"}
{"content": "这里不是没有规则，本书的确也在努力制定，但很显然，它失败了。。。", "marks": "还行"}
{"content": "只是通篇浏览了一遍，和想象的差别很大", "marks": "较差"}
{"content": "看完以后发现神马都没学到。。。", "marks": "还行"}
{"content": "我只能说还行吧。很多东西虽然有小部分代码，但是还是觉得讲的很空洞。希腊的作者，能把代码阅读做题材写一本书，可见作者还是很用心的。那就再加一分吧，本来要给三分的", "marks": "推荐"}
{"content": "学会读代码是每一个软件工程师的入门技艺", "marks": "推荐"}
{"content": "粗略地看了电子版的，文不对题。书中内容和书名想去甚远，书中大部分都是C语言编程细节，而很少有提及阅读项目代码的方法。无收获", "marks": "很差"}
{"content": "不知道要干嘛，也没有太大启发，没有读完", "marks": "较差"}
{"content": "读了一部分", "marks": "力荐"}
{"content": "很新颖的视角,从阅读代码的角度来谈如何写代码", "marks": "推荐"}
{"content": "想向开源方向发展的孩子～最好看看这本书～", "marks": "推荐"}
{"content": "能直接改名叫语法大全么，以为多么炫酷的一本书，哎。", "marks": "较差"}
{"content": "讲了很多程序结构性的东西，看了第六章往后的内容，还是没觉得讲了多少实际内容，多数是重复。总体来说一般。另外，翻译很差，不如看原版", "marks": "还行"}
{"content": "原版应该不错，附带不少奇技淫巧，就是翻译的不咋样。”makefile“翻译成“制作文件”,是用机器翻译的吗", "marks": "还行"}
{"content": "专门讲代码阅读技巧的书这是第一本，题材比较新颖，而且对软件工程师来说也足够实用。作者显然在开源软件中浸淫许久，举例佐证都很丰富，几乎是顺手拈来。适合扩大下自己的眼界，从高层看：学习如何分解大型的开源软件源码库，从低层看：单个的函数，语句，C编程的惯用法等等。", "marks": "推荐"}
{"content": "这本书最有价值的部分，恐怕只是每一章末尾的进阶阅读列表", "marks": "较差"}
{"content": "写的比较深。", "marks": "力荐"}
{"content": "还想看一遍，许多内容可以与“.NET环境编程全景”相佐的", "marks": "力荐"}
{"content": "跟CLR Via C#一起读的，对照着读，理解更深刻，这本专门讲编译原理和过程，提及了很多MSIL代码。", "marks": "推荐"}
{"content": "深入介绍了CLR，不过难度很大，翻译的一般，一定要多读几遍才能充分理解其中之意，有几个地方我看了2遍没太看懂。", "marks": "力荐"}
{"content": "看了一半", "marks": "推荐"}
{"content": "对clr有比较 深入的介绍，虽然有些语句或名词翻译的不太准确，但整体的结构非常清晰，看了后对crl有一个结构化的认识了", "marks": "力荐"}
{"content": "前半部分还好，后面太底层了，如果平时用不到相关内容的话看起来很吃力", "marks": "推荐"}
{"content": ".NET底层机制深入探讨的好书", "marks": "力荐"}
{"content": "第二遍看了，还是难的要死。我用.NET算起来也有七年多了，虽然水平烂的满大街，但就算水平比我再高几个级别的我想也很难把CLR说的很清楚。就像美女蒙着面纱，一阵风吹过面纱漏出冰山一角，凝目去看奈何近视，急走过去待细瞧时，面纱又落回去了，芳容总是若隐若现看不真切。很郁闷。", "marks": "力荐"}
{"content": "很难懂，不过写的超好", "marks": "力荐"}
{"content": "学习.NET很不错的书。", "marks": "力荐"}
{"content": "程序的力量", "marks": "力荐"}
{"content": "本书的主要目的是讲述如何以面向对象的方式对Web应用的页面和其他Web专用组件进行建模，并且与系统中的其他模型保持一致。", "marks": "还行"}
{"content": "学习perl用小骆驼书最好", "marks": "推荐"}
{"content": "好书啊好书，可以当作小说看的好书", "marks": "力荐"}
{"content": "入门了以后就不学了。。。没啥兴趣", "marks": "还行"}
{"content": "流畅明快，读来如水银泻地", "marks": "力荐"}
{"content": "很精彩！翻译的不错！", "marks": "力荐"}
{"content": "小亚麻小骆驼～", "marks": "还行"}
{"content": "简明，习题很好，有点浅，可能也是优点吧", "marks": "推荐"}
{"content": "小骆驼书，经典入门作品", "marks": "力荐"}
{"content": "入门书，勉强过了一遍。。", "marks": "推荐"}
{"content": "经典，入门", "marks": "力荐"}
{"content": "A quick tutor into perl. 书是好书，不过还是喜欢原版的。总体说翻译还是可以的，没有必须要还原到原文才能理解的词句。", "marks": "推荐"}
{"content": "perl 的入门书", "marks": "力荐"}
{"content": "快翻烂了。。", "marks": "力荐"}
{"content": "三天草草看完，结果我头疼的狠", "marks": "推荐"}
{"content": "2004年，当时是在China-Pub.com买的，还是特价书。书读起来很有趣...", "marks": "力荐"}
{"content": "a basic book for perl", "marks": "还行"}
{"content": "传说中的小骆驼书\r\n初学的时候看过 觉得没意思", "marks": "较差"}
{"content": "入门容易，精通难啊", "marks": "力荐"}
{"content": "Perl的入门书，没有涉及OO", "marks": "推荐"}
{"content": "good to start with", "marks": "力荐"}
{"content": "翻译不是很好", "marks": "还行"}
{"content": "perl入门必读，很容易看懂的。", "marks": "力荐"}
{"content": "仙林自然918213", "marks": "还行"}
{"content": "乱，没劲。", "marks": "较差"}
{"content": "这是人工智能的革命性的一战。", "marks": "推荐"}
{"content": "实用，不错！", "marks": "推荐"}
{"content": "本科大三时买得，没看多少就送给好友了", "marks": "推荐"}
{"content": "编写串口是参考了。", "marks": "还行"}
{"content": "下周买", "marks": "力荐"}
{"content": "实用，可参考", "marks": "推荐"}
{"content": "日本人的设计思想，全面，将机械设计考虑的方方面面都写的很详细。实乃经验之谈，值得所有机械设计类人士参考。", "marks": "力荐"}
{"content": "很好的书，力荐", "marks": "力荐"}
{"content": "很全面的一本书，看了启发很大！相见恨晚", "marks": "推荐"}
{"content": "日本的书，不错，有情怀", "marks": "推荐"}
{"content": "看了3遍以上，依然觉得是经典。尤其书中提到很多设计者工作过程中的思想动态是其他同类书籍从未提及的。这本书是真正的直奔实践去的。", "marks": "力荐"}
{"content": "基础实用，不可多得的好书。", "marks": "力荐"}
{"content": "程序设计能从冯诺依曼风格中解放出来吗？冯程序设计语言使用变量来仿真计算机的存储单元；控制语句精心完成它的跳转和测试指令；而赋值语句仿真它的取、存和算术运算。赋值语\n句是程序设计语言的冯诺依曼瓶颈，而且使我们以和计算机的瓶颈同样的方\n式来想像一次一字的项。考虑一个典型的程序，其核心是包含某些下标变量的些赋值语句。每个赋值语句产生一个字的结果。在改变下标值时，这个程序必然引起这些语句执行许多次，以便在存储中实现所希望的整个变化，因为它必须做成一次一个字。\n因此程序员关心的是，如同设计控制语句的嵌套来引起必要的重复那样，字的\n流动通过赋值瓶颈进行。赋值语句把程序设计分成为两个世界。头一个世界由赋值语句的右\n边组成。这是有序表达式的世界，这是一个有用的代数性质的世界（那些经常\n被副效应", "marks": "力荐"}
{"content": "翻译得不是很好，幸亏原文可以下载。", "marks": "推荐"}
{"content": "在ACM的主页上可以找到历届Turing Award得奖者的生平与Lecture，感觉看原文更自然一些", "marks": "还行"}
{"content": "如果你对历史有考究癖的话,建议看看", "marks": "推荐"}
{"content": "在孙总娃那儿收刮的书。看了会儿。觉得挺好玩的。", "marks": "还行"}
{"content": "看不完了，翻译实在太倒胃口", "marks": "很差"}
{"content": "只是希望我可以看得懂一点", "marks": "力荐"}
{"content": "CS这一学科发展不过几十年，其开山祖师很多还健在，我们这一代人真幸运", "marks": "推荐"}
{"content": "好是好，但是看着想睡觉", "marks": "推荐"}
{"content": "都是经典演讲，但中文翻译远不够尽职。", "marks": "推荐"}
{"content": "前辈们太伟大了", "marks": "力荐"}
{"content": "5星是给原书的，翻译不是一般的烂，苏老先生真是盛名之下其实难符啊，图灵演讲本来就很抽象，翻译成中文就更难懂了。真是很糟蹋这样的好书", "marks": "力荐"}
{"content": "如果要了解算法和分析的历史发展，这本书则是上选。Knuth、Backus等好多耳熟能详的名士都出现在本书中。这帮人虽然都是研究数学的，但其实都还蛮幽默。", "marks": "力荐"}
{"content": "演讲论文，有好多看不懂。。。", "marks": "推荐"}
{"content": "被翻译毁了的经典系列。", "marks": "还行"}
{"content": "第一次知道苏运霖是在TAOCP上看到的，一次在图书馆随意翻书时又看到了他的这本译作，但读来读去总觉得十分别扭，下次还是找原版来读读", "marks": "较差"}
{"content": "激励了我对计算机之热爱，翻译不大好", "marks": "力荐"}
{"content": "其实有点看不懂啦", "marks": "推荐"}
{"content": "文章非常好，翻译非常烂", "marks": "推荐"}
{"content": "图灵奖，计算机届的诺贝尔奖", "marks": "还行"}
{"content": "额。。。没看完。。。感觉学问太深的东西，我听不懂，不过程序设计语言是一样伟大的发明，这是我看完得出的结论", "marks": "推荐"}
{"content": "Donald的还不错", "marks": "还行"}
{"content": "翻译得一塌糊涂", "marks": "很差"}
{"content": "编程的关键是从陈述问题到解决问题的转变，逻辑化思考问题，训练自己用计算机能理解的方式表达自己的逻辑", "marks": "力荐"}
{"content": "挺不错的", "marks": "推荐"}
{"content": "关于C语言的语法讲解的不如国产书籍细致，但此书并不着眼于C的语法，而是引导学习者自己开发一个属于你自己的库。很不错的教材。", "marks": "力荐"}
{"content": "非常透彻的分析，初学者读到这些一针见血式的观点后必有恍然大悟之感！不足之处就是作者没有告诉初学者该如何使用他编写的库，用不了作者的库就不能实践，势必使初学者半途抛弃此书。", "marks": "力荐"}
{"content": "秒杀谭浩强好么！", "marks": "推荐"}
{"content": "觉得要比其他的C语言书好多了 ^_^", "marks": "力荐"}
{"content": "想当年做里面的题做得那叫一个欢乐~啊,当时好像是编出了一个猜单词之类的游戏...lol...好吧,其实程序还是很有趣的...可惜我实在太弱了嘤嘤嘤...", "marks": "推荐"}
{"content": "大一C语言教材，带我领略零一世界四季的变换，窦春燕姐姐~", "marks": "力荐"}
{"content": "哎，从这本书里才知道\"库\"这回事。\n后来大学时代所有的小作业都用了书中提供的那个超小的库来做。\n那时还不知道C++、STL，觉得那个库简直是世上少有，简洁逆天啊。\n曾经年少。\n还是要推荐，初学C，这个真的是个不错的选择。", "marks": "力荐"}
{"content": "入门的时候要是能看看这个书对人的提升是非常大的，如果有经验的话，本书帮助不大了。", "marks": "推荐"}
{"content": "不错的书，图形部分自己做了个库用，蛮 Happy 的", "marks": "推荐"}
{"content": "又回顾了一遍经典", "marks": "推荐"}
{"content": "相比之下还是这本有爱点，排版翻译都不错。", "marks": "推荐"}
{"content": "学 C 语言时候在图书馆借的影印版，非常好的入门书。", "marks": "力荐"}
{"content": "卧槽今天才想起来翻出来……", "marks": "力荐"}
{"content": "这本书让大一时候只会用office软件和上网的我对编程、cs产生了极大的兴趣，虽然后来这被证明是一种delusion.", "marks": "力荐"}
{"content": "我看过的最好的C语言教程", "marks": "力荐"}
{"content": "没有想想中的好", "marks": "还行"}
{"content": "翻译做得非常好，译者的水平相当高。", "marks": "力荐"}
{"content": "好书！", "marks": "力荐"}
{"content": "C的比较全面和较为深入的介绍", "marks": "推荐"}
{"content": "浅显易懂，有部分没读，实在是时间紧迫，不过里面涉及很多代码规范与编程的一般规则，感觉学到了很多，指针部分也讲得不错，可能还需要读别的来充实下~", "marks": "力荐"}
{"content": "学校的课本", "marks": "推荐"}
{"content": "我真是太喜欢作者的书写风格。", "marks": "力荐"}
{"content": "本书的主要目的是讲述如何以面向对象的方式对Web应用的页面和其他Web专用组件进行建模，并且与系统中的其他模型保持一致。", "marks": "还行"}
{"content": "程序的力量", "marks": "力荐"}
{"content": "关于http协议最为深入的一本，其中tcp/http interaction这部分很有特色。", "marks": "力荐"}
{"content": "其实HTTP协议一点都已简单，自己了解的也不是很多，这本书也应该作为需要重新读的。 HTTP的缓存、代理、持久连接...", "marks": "推荐"}
{"content": "一本不错的老书，适合做Web相关开发的参考资料。虽然里面提述的一些名词或者软件有点古老，不过本质和概念的东西今天拿来一样适用。", "marks": "力荐"}
{"content": "http好书。", "marks": "推荐"}
{"content": "看了一半，还了。", "marks": "推荐"}
{"content": "课本", "marks": "推荐"}
{"content": "C++数据结构与程序设计", "marks": "力荐"}
{"content": "机翻版", "marks": "很差"}
{"content": "写的比较深。", "marks": "力荐"}
{"content": "还想看一遍，许多内容可以与“.NET环境编程全景”相佐的", "marks": "力荐"}
{"content": "跟CLR Via C#一起读的，对照着读，理解更深刻，这本专门讲编译原理和过程，提及了很多MSIL代码。", "marks": "推荐"}
{"content": "深入介绍了CLR，不过难度很大，翻译的一般，一定要多读几遍才能充分理解其中之意，有几个地方我看了2遍没太看懂。", "marks": "力荐"}
{"content": "看了一半", "marks": "推荐"}
{"content": "对clr有比较 深入的介绍，虽然有些语句或名词翻译的不太准确，但整体的结构非常清晰，看了后对crl有一个结构化的认识了", "marks": "力荐"}
{"content": "前半部分还好，后面太底层了，如果平时用不到相关内容的话看起来很吃力", "marks": "推荐"}
{"content": ".NET底层机制深入探讨的好书", "marks": "力荐"}
{"content": "第二遍看了，还是难的要死。我用.NET算起来也有七年多了，虽然水平烂的满大街，但就算水平比我再高几个级别的我想也很难把CLR说的很清楚。就像美女蒙着面纱，一阵风吹过面纱漏出冰山一角，凝目去看奈何近视，急走过去待细瞧时，面纱又落回去了，芳容总是若隐若现看不真切。很郁闷。", "marks": "力荐"}
{"content": "很难懂，不过写的超好", "marks": "力荐"}
{"content": "学习.NET很不错的书。", "marks": "力荐"}
{"content": "非常的详细，最初我也是指望通过这本书学会读大型代码。后来发现，真正让我学会读大型代码的还是了解功能和debug。", "marks": "推荐"}
{"content": "作者写书不多，但都是精品。学会阅读代码是一个合格的程序员的基本功！", "marks": "力荐"}
{"content": "可读性不强，整体糟糕", "marks": "还行"}
{"content": "附录B才是精华。", "marks": "较差"}
{"content": "永远的经典!", "marks": "力荐"}
{"content": "我还是很欣赏这本书的, 起码选题就很有特色. 其实我当它是C语言技巧书 :)", "marks": "推荐"}
{"content": "感觉这本书没有想象中好。", "marks": "还行"}
{"content": "大部分工作都是在既有代码上的＝ ＝ 并且还有一些动不得  不管你怀疑那部分到底有没有问题  这本书不可避免滴成为了必修⋯⋯", "marks": "还行"}
{"content": "书名很吸引人，不过对内容的组织感觉有些糟糕，三百多页的书几乎一半以上介绍控制结构和简单数据结构，要说学习这方面这么点篇幅高不成低不就。工具介绍方面还算可以，最后的一次实际例子好好学习也能有所收获。总体而言包含了太多和主题无关的内容", "marks": "还行"}
{"content": "烂书烂翻译", "marks": "很差"}
{"content": "borrow from bob", "marks": "推荐"}
{"content": "应该刚学完c的时候看", "marks": "还行"}
{"content": "有些道理直到现在还很有用", "marks": "推荐"}
{"content": "有点太宽泛，又有一点锁细。", "marks": "还行"}
{"content": "我没有读完，但是总感觉对我的帮助不大，总之这本书对读者的“觉悟”有很高要求，要能和作者产生共鸣，但是从各方面的反应来看，这本书应该是一本好书。", "marks": "还行"}
{"content": "偏爱后面的章节，比较大纲", "marks": "推荐"}
{"content": "TP311.11/4814", "marks": "还行"}
{"content": "扫读，看完没啥感觉", "marks": "还行"}
{"content": "大概过了一遍，但是感觉没有看的特别的清楚，没看出来好在哪里，这本可是获奖书籍。", "marks": "还行"}
{"content": "不错的一本书, 从下向上的讲解了代码阅读的方法, 很系统, 尤其适合C/C++的程序员. 也适合在校的大学生学习", "marks": "还行"}
{"content": "有些文不对题，虽说语法模式架构等等是阅读代码的基础，不过借着讲阅读代码讲了一大堆就有点凑篇幅的嫌疑了。把开头和附录过一下就差不多。", "marks": "较差"}
{"content": "怎么说呢，这本书主题写的比较乱，没有突出重点，另外，写的内容过于偏重C的一些技巧，这貌似和主题不太靠谱。要是自己实际参加过开源项目的话就别看此书了，可以看看谷歌的C++编程规范，比这个写的好。", "marks": "还行"}
{"content": "还是很不错的，适合读代码时参考一下", "marks": "推荐"}
{"content": "这里不是没有规则，本书的确也在努力制定，但很显然，它失败了。。。", "marks": "还行"}
{"content": "只是通篇浏览了一遍，和想象的差别很大", "marks": "较差"}
{"content": "看完以后发现神马都没学到。。。", "marks": "还行"}
{"content": "我只能说还行吧。很多东西虽然有小部分代码，但是还是觉得讲的很空洞。希腊的作者，能把代码阅读做题材写一本书，可见作者还是很用心的。那就再加一分吧，本来要给三分的", "marks": "推荐"}
{"content": "学会读代码是每一个软件工程师的入门技艺", "marks": "推荐"}
{"content": "粗略地看了电子版的，文不对题。书中内容和书名想去甚远，书中大部分都是C语言编程细节，而很少有提及阅读项目代码的方法。无收获", "marks": "很差"}
{"content": "不知道要干嘛，也没有太大启发，没有读完", "marks": "较差"}
{"content": "读了一部分", "marks": "力荐"}
{"content": "很新颖的视角,从阅读代码的角度来谈如何写代码", "marks": "推荐"}
{"content": "想向开源方向发展的孩子～最好看看这本书～", "marks": "推荐"}
{"content": "能直接改名叫语法大全么，以为多么炫酷的一本书，哎。", "marks": "较差"}
{"content": "讲了很多程序结构性的东西，看了第六章往后的内容，还是没觉得讲了多少实际内容，多数是重复。总体来说一般。另外，翻译很差，不如看原版", "marks": "还行"}
{"content": "原版应该不错，附带不少奇技淫巧，就是翻译的不咋样。”makefile“翻译成“制作文件”,是用机器翻译的吗", "marks": "还行"}
{"content": "专门讲代码阅读技巧的书这是第一本，题材比较新颖，而且对软件工程师来说也足够实用。作者显然在开源软件中浸淫许久，举例佐证都很丰富，几乎是顺手拈来。适合扩大下自己的眼界，从高层看：学习如何分解大型的开源软件源码库，从低层看：单个的函数，语句，C编程的惯用法等等。", "marks": "推荐"}
{"content": "这本书最有价值的部分，恐怕只是每一章末尾的进阶阅读列表", "marks": "较差"}
{"content": "传说中的CLRS  算法方面的经典～  但是个人觉得写得不怎么样～  刻意追求严谨无漏洞而不注重让读者容易懂  相比之下还是听老师讲课比较好   发现越牛的老师越是能用浅显易懂的方式讲给你听……", "marks": "还行"}
{"content": "本书的意义在于锻炼基础的算法思维和感觉，以及在日后的工作有能力发现或者构造适用这些算法的场景。如果有更好的基础，甚至可以改造某些算法来适应更特殊的需求。 ", "marks": "还行"}
{"content": "CLRS。算法课的教材。根本没学好，要找时间补课。", "marks": "力荐"}
{"content": "比较全面，大部分读完，课后题待作", "marks": "力荐"}
{"content": "终于可以把这本书看完了……", "marks": "力荐"}
{"content": "除了太厚，其他都还不错", "marks": "力荐"}
{"content": "CLRS", "marks": "力荐"}
{"content": "很早读的了，当时是就着MIT的那个24集教程读的。名符其实的启蒙读物。当时被感动的涕泗横流，哈哈，它打开了我心中的一堵墙。从此我对MIT刮目相看。", "marks": "力荐"}
{"content": "令人如痴如醉的 Chaper 25", "marks": "力荐"}
{"content": "读一半烂尾了，以后再读", "marks": "力荐"}
{"content": "读得不够细致。。。", "marks": "力荐"}
{"content": "启发而不是填鸭！", "marks": "力荐"}
{"content": "一本陪我长大的书", "marks": "力荐"}
{"content": "唔，不予置评了，算法入门书，入门书也能当砖头拍死你……", "marks": "力荐"}
{"content": "[昔时所读]英文书参考性看过一些。", "marks": "力荐"}
{"content": "这书不用我多说吧", "marks": "力荐"}
{"content": "尼玛，什么时候能把这本啃完啊！停止。。。。", "marks": "力荐"}
{"content": "高二（03年）的时候买的，为了NOI。结果后来也没看太多，把动态规划和网络流那部分看了下。", "marks": "力荐"}
{"content": "很经典，是优点但是也是缺点", "marks": "推荐"}
{"content": "zxq什么时候才从mit回来呢``", "marks": "力荐"}
{"content": "经典之作，学计算机的都应该看看", "marks": "力荐"}
{"content": "写得真好，数学证明没仔细看，还得再来过", "marks": "力荐"}
{"content": "写得很好 深入浅出", "marks": "力荐"}
{"content": "对于面试这本书是大大的好。对于计算机专业编程，这些东西早点弄清楚，可以少走很多弯路。", "marks": "力荐"}
{"content": "需要反复读的书。", "marks": "力荐"}
{"content": "工作需要时，可当作参考", "marks": "推荐"}
{"content": "对算法一窍不通。踏不下心来看啊", "marks": "推荐"}
{"content": "我心中的第二圣经...", "marks": "力荐"}
{"content": "搜录了各种常用的算法，值得收藏~", "marks": "推荐"}
{"content": "發現英文版不是很難懂耶～", "marks": "力荐"}
{"content": "讲解很清晰，内容很全面。但是，少了一些更深刻的洞察。", "marks": "力荐"}
{"content": "是机械出版社前一版吧。。大学的时候图书馆里看过。。。这个算是系统看完了的。。", "marks": "还行"}
{"content": "我日啊，课本", "marks": "力荐"}
{"content": "去年看了两遍，每一遍都有新的收获，书中将复杂的过程讲得很清晰，从原理出发", "marks": "力荐"}
{"content": "很不错，例子都有，而且解释很详细。当时图书馆借的，有点想买一本", "marks": "力荐"}
{"content": "CLRS", "marks": "力荐"}
{"content": "经典著作！将来再读给儿子讲算法！", "marks": "力荐"}
{"content": "算法导论 (Introduction to Algorithm), 在圈子里常常按四个作者的首字母写成 CLRS, 算是对不愿意看或者看不懂 TAOCP 的人送上了半个梯子(还有半个当属具体数学 Concrete Mathematics). 这本书在美国大部分大学中被列为算法类教材, 在国内也是 ACM 竞赛集训必看的教材之一. 虽然名字里面带一个导论, 内容却一点不含糊. 在我个人看来, 其内容基本覆盖绝大多数常用的算法, 在 NP 复杂性理论以及近似算法方面也有所涉及. 这本书最好的地方是习题详细且全", "marks": "力荐"}
{"content": "配合光头叔叔和大胡子叔叔的视频来看，效果更加。看过这本书之后我再也不怕看英文砖头了", "marks": "力荐"}
{"content": "一直想读完它，一直断断续续。真心的经典之作，作者的思路和深度都超过了我的预想。\n参照MIT的公开课，阅读速度翻倍了", "marks": "力荐"}
{"content": "教科书", "marks": "力荐"}
{"content": "训练思维，老顾讲的很好", "marks": "推荐"}
{"content": "ing", "marks": "力荐"}
{"content": "神书", "marks": "力荐"}
{"content": "本科读时感觉很难读，前阵子过了一遍，基本上都能接受", "marks": "推荐"}
{"content": "one more needed", "marks": "力荐"}
{"content": "2014-04-11", "marks": "还行"}
{"content": "CLRS... 证明严格, 内容全面. 语言有点罗嗦", "marks": "推荐"}
{"content": "算法经典", "marks": "力荐"}
{"content": "这玩意，算了，又爱又恨。。", "marks": "推荐"}
{"content": "还有比这个更经典的?", "marks": "力荐"}
{"content": "略显繁琐", "marks": "推荐"}
{"content": "这本书带领我走进了多彩缤纷的世界，如果当时没有读到这本书的话，人生轨迹也许都会完全不同。", "marks": "力荐"}
{"content": "买了没看，偶尔查一下", "marks": "还行"}
{"content": "很好的算法入门书籍，理论介绍恰到好处，适用于初学者。", "marks": "力荐"}
{"content": "基本过了一遍，略过了不少内容。[当年的教材，小声的说一句，我都快忘光了。重新读。]", "marks": "力荐"}
{"content": "好久没读英文原版书了", "marks": "推荐"}
{"content": "绝对经典", "marks": "力荐"}
{"content": "我就标注一下而已。", "marks": "力荐"}
{"content": "学了算法三年后再看，竟然感觉有点难。。。是我太渣了么。。。", "marks": "力荐"}
{"content": "数学之美, 美你妹阿...我还没入门\n", "marks": "力荐"}
{"content": "案头常备。可以跟MIT视频一起边看边读。", "marks": "力荐"}
{"content": "其实英文版才能读懂", "marks": "力荐"}
{"content": "一本算法经典，读懂了的话变成必然大有精进，可惜当时囫囵吞枣马马虎虎，现在没机会再读。", "marks": "力荐"}
{"content": "D.E.Knuth 的学生都不一般。。", "marks": "力荐"}
{"content": "无可非议的Bible，准备看第二遍巩固一下。", "marks": "力荐"}
{"content": "好书，那个leiserson在 MIT 的讲课视频也是要看的，真是大牛的风采，那个助教讲的也不错。特别有意思的是Leiserson讲的那个用双手做乘法的小算法。", "marks": "力荐"}
{"content": "原版的读过，影印版的也看过。", "marks": "力荐"}
{"content": "算法入门的书籍中，难得的好书。教参也丰富，mit提供视频资料。", "marks": "力荐"}
{"content": "书是本好书，但是东西真的讲的挺多，需要花时间慢慢去体会 ", "marks": "力荐"}
{"content": "好书，可惜至今没有领会精髓", "marks": "力荐"}
{"content": "没有好好读。", "marks": "推荐"}
{"content": "貌似这是最后一版影印版的算法导论了，现在国内都只有中文版的了。", "marks": "推荐"}
{"content": "当年大二下的时候和lipeng一起在武汉好不容易找到这本书，还跑到武大东湖分校那边去取书，结果到现在我都还没读完，lipeng的书都不知道跑哪儿去了...", "marks": "力荐"}
{"content": "数学证明非常有力", "marks": "推荐"}
{"content": "非常非常好的书，推荐多次阅读，并且做后面的习题", "marks": "力荐"}
{"content": "Classical textbook from MIT.", "marks": "力荐"}
{"content": "经典算法教材，讲解很详细。", "marks": "推荐"}
{"content": "这本书挺经典的，用的类pascal的伪代码，代码规范，讲解也比较清晰。", "marks": "力荐"}
{"content": "很厚的一本书，需要啃的一本书", "marks": "还行"}
{"content": "教材...", "marks": "力荐"}
{"content": "深奥，深奥！需要多读多学！", "marks": "力荐"}
{"content": "四大牛合著，经典非常", "marks": "力荐"}
{"content": "我的启蒙图书", "marks": "力荐"}
{"content": "算法就是哥心中的痛……", "marks": "力荐"}
{"content": "第一次发现原版图书是那么亲切，怀念那些读软工的日子。", "marks": "推荐"}
{"content": "大二的必修课教材，经典", "marks": "力荐"}
{"content": "MIT press", "marks": "力荐"}
{"content": "= = 看到自己初中的时候写得密密麻麻的单词翻译实在是蠢爆了...", "marks": "推荐"}
{"content": "研究生课程的教科书！这门课程是我当时成绩最好的，95分！", "marks": "力荐"}
{"content": "这书满分不谈了吧。", "marks": "力荐"}
{"content": "本书对算法和数据结构描述特别详细和深入，值得仔细研读。数据结构方面再介绍得全面些就好了", "marks": "力荐"}
{"content": "本人读的第一本全英文的技术书籍，非常nice", "marks": "力荐"}
{"content": "基础", "marks": "力荐"}
{"content": "提升内功必备。", "marks": "力荐"}
{"content": "这本英文的算法导论是我看过的解释算法比较清晰的一本。", "marks": "力荐"}
{"content": "读的最用心的书", "marks": "力荐"}
{"content": "虽然说这是经典，但里面大段的数学符号、公式和伪代码，数学基础不好者，或者没有一定算法基础的读者，建议慎重选择，起码去书店，往后面多翻翻，看看能不能看懂再决定买不买。我推荐算法竞赛宝典这本书，新出的", "marks": "还行"}
{"content": "这学期CSOR4231才开始接触这本书，计算机最本质的数学原理引人入胜。想起了最初王子屯儿老师说的一句话，有人问为什么要学习算法，其实应该问的是，为什么不呢。\n\n原来Clifford Stein是哥大的，这下找到了一个剁手的理由。", "marks": "力荐"}
{"content": "OO,UML入门书籍", "marks": "推荐"}
{"content": "研究生教材", "marks": "推荐"}
{"content": "听过王老师的课，所以买了这本书，讲得简单明了。", "marks": "推荐"}
{"content": "讲的很全面，例子也很多，只是在网上看的电子书，案例里的图片都看不清。", "marks": "推荐"}
{"content": "Except for the nasty translation, this book is awesome for those who want to understand more about compiler based on architecture.\nI would recommend those to read the original English version.", "marks": "还行"}
{"content": "略读一遍。主要搞清知识框架。优化的主要方法是依赖。精读了第二章的部分章节。搞清了依赖的三种类型及依赖图的画法。个人觉得已经足够。其他知识等需要时再精读一点不晚。其实精读那部分还是挺来劲的。", "marks": "力荐"}
{"content": "粗略的翻了下，讲编译器优化细节的，以Fortran为主", "marks": "还行"}
{"content": "介绍如何写一个完整的用例", "marks": "推荐"}
{"content": "uml必读", "marks": "力荐"}
{"content": "UML 程序员", "marks": "还行"}
{"content": "居然把费马大定理当第一章课后习题！！！尼玛的全世界花了358年才证出来啊！！！当读者都是冯诺依曼啊？", "marks": "力荐"}
{"content": "建议去看《算法导论》！这套书纯粹是学术届炒作起来的，其实已经过时，没有太多参考价值。把算法描述得那么复杂，还用汇编语言来实现，真TM蛋疼！", "marks": "还行"}
{"content": "数据表的关键在于这些数据的关系：排列理解为重新安排或者是对象的更名，排列的动态理解，行列式的动态过程理解", "marks": "力荐"}
{"content": "经典", "marks": "力荐"}
{"content": "这是每一位计算机相关专业的人士必读的一本书，虽然成书时间比较早但并不落后，正如我们到了大学才学习18世纪的数学知识一样，无论任何时候作为一名计算机相关专业或者广义的说想对计算机科学更深入的了解的人们都有阅读的必要性。高德纳伟大的人物！！！", "marks": "力荐"}
{"content": "国防工业的的这本翻译的并不好. 不推荐购买. ", "marks": "推荐"}
{"content": "看的不多，主要作为英文版的辅助。", "marks": "力荐"}
{"content": "中文版的排版不是很好，翻译也很一般，建议还是直接看英文版的", "marks": "推荐"}
{"content": "又多了一个声称看过此书的人，准确说是“翻过此书”", "marks": "力荐"}
{"content": "东图一共有三卷，我看得是第一还是第二卷不记得了，粗览，收获当是日后读其他的东西将浮现出的。", "marks": "推荐"}
{"content": "经典之作，第一卷 写几本数据结构，以及内存管理等。", "marks": "力荐"}
{"content": "翻过一遍尔尔。这本书更多的是计算机模型MIX来实现的过去的算法，缺少时间的情况下还是看其他书吧，要啃完这本书需要大量时间来完成习题，单纯过内容能从书中学到的实在不算多。", "marks": "推荐"}
{"content": "翻译得实在不怎么样.", "marks": "还行"}
{"content": "强力不容置疑", "marks": "力荐"}
{"content": "虽然是巨大的经典，但是太难懂了，最后放弃了。", "marks": "推荐"}
{"content": "这一卷味同嚼蜡，但不时能被作者充沛的知识和思想所震撼。比较重要的是算法复杂度的分析", "marks": "推荐"}
{"content": "虽然很厚，但是很适合花时间去读。计算机领域最经典的教材，也是最经典的工具书。", "marks": "力荐"}
{"content": "可以", "marks": "还行"}
{"content": "学习perl用小骆驼书最好", "marks": "推荐"}
{"content": "好书啊好书，可以当作小说看的好书", "marks": "力荐"}
{"content": "入门了以后就不学了。。。没啥兴趣", "marks": "还行"}
{"content": "流畅明快，读来如水银泻地", "marks": "力荐"}
{"content": "很精彩！翻译的不错！", "marks": "力荐"}
{"content": "小亚麻小骆驼～", "marks": "还行"}
{"content": "简明，习题很好，有点浅，可能也是优点吧", "marks": "推荐"}
{"content": "小骆驼书，经典入门作品", "marks": "力荐"}
{"content": "入门书，勉强过了一遍。。", "marks": "推荐"}
{"content": "经典，入门", "marks": "力荐"}
{"content": "A quick tutor into perl. 书是好书，不过还是喜欢原版的。总体说翻译还是可以的，没有必须要还原到原文才能理解的词句。", "marks": "推荐"}
{"content": "perl 的入门书", "marks": "力荐"}
{"content": "快翻烂了。。", "marks": "力荐"}
{"content": "三天草草看完，结果我头疼的狠", "marks": "推荐"}
{"content": "2004年，当时是在China-Pub.com买的，还是特价书。书读起来很有趣...", "marks": "力荐"}
{"content": "a basic book for perl", "marks": "还行"}
{"content": "传说中的小骆驼书\r\n初学的时候看过 觉得没意思", "marks": "较差"}
{"content": "入门容易，精通难啊", "marks": "力荐"}
{"content": "Perl的入门书，没有涉及OO", "marks": "推荐"}
{"content": "good to start with", "marks": "力荐"}
{"content": "翻译不是很好", "marks": "还行"}
{"content": "perl入门必读，很容易看懂的。", "marks": "力荐"}
{"content": "还是《设计模式》最经典", "marks": "推荐"}
{"content": "POSA系列的开山之作，系统编程和中间件编程的一些架构模式，翻译一般，架构师必读", "marks": "推荐"}
{"content": "还好，还是需要多实践。", "marks": "推荐"}
{"content": "概述模式系统", "marks": "还行"}
{"content": "从更高层次去俯视软件，难得的一本书", "marks": "力荐"}
{"content": "翻译的不好，有原版电子版，读起来会顺畅一些。对于经验丰富的程序员虽然也可受益，但很多内容可能太罗索。", "marks": "推荐"}
{"content": "# 面向模式的架构POA。名字上与OOP、OOD很有连续性。 # OOP、OOD、POA三者是视角上切换，值得互为补充地学习。", "marks": "力荐"}
{"content": "书值5星，翻译3星", "marks": "推荐"}
{"content": "书是好书，可惜翻译。。。", "marks": "推荐"}
{"content": "如饮甘露", "marks": "力荐"}
{"content": "实在翻译得太差了", "marks": "较差"}
{"content": "有点学究气，看起来比较慢", "marks": "还行"}
{"content": "翻译的有点烂啊", "marks": "推荐"}
{"content": "这卷跟《设计模式》那本可以配合着看，内容有相通之处．", "marks": "推荐"}
{"content": "翻译很烂", "marks": "还行"}
{"content": "第一次完整的描述了软件架构的模式", "marks": "力荐"}
{"content": "这几个翻译的语文是小学体育老师教的", "marks": "推荐"}
{"content": "原著很好，翻译很差。", "marks": "很差"}
{"content": "德国人写的书，语言晦涩难懂。翻译的质量也不怎么样。很多地方要多看几遍，细细揣摩在能体会。不要被译者误导。", "marks": "推荐"}
{"content": "架构模式，设计模式，实现模式 三大模式，另外翻译的太烂了，英文好的同学还是看英文吧。", "marks": "推荐"}
{"content": "虽然google翻译做得不错，你们也不能这么用啊。。。\n\n对得起这本书的原作者吗？", "marks": "很差"}
{"content": "书不错,但是讨厌这个专家2个字,入门书籍", "marks": "推荐"}
{"content": "八卦很好看", "marks": "力荐"}
{"content": "虽然我是个自学的（未来）计算机科学家，不过这本书的技术内容还是没什么新意（早点看也许会好一点）。不过好在，原来程序员所喜闻乐见的那些稀奇古怪的幽默是有出处的。看来暴龙渐渐变专业了。", "marks": "推荐"}
{"content": "很好的C语言高级教程，文笔幽默", "marks": "力荐"}
{"content": "什么叫指针，什么叫函数，看了这本书才会有所了解", "marks": "力荐"}
{"content": "|117:50|", "marks": "力荐"}
{"content": "可以称 C 语言休闲读物，非常有趣，经典读物，在中国曾经一度脱销啊！", "marks": "力荐"}
{"content": "在以前应用的模糊概念，刷新了一遍", "marks": "力荐"}
{"content": "不错", "marks": "推荐"}
{"content": "读的电子版，值得买一本在手里", "marks": "力荐"}
{"content": "上学的时候看过，当时记得看得很开心，里面不少内容很有趣，不过后来一直没怎么关注这方面，就忘完咯", "marks": "推荐"}
{"content": "06年，书店没有卖了，只能买复印的。08年又重新出版了。不过现在不什么也只是看一看，不会再买了。", "marks": "力荐"}
{"content": "力荐。不过在对体系结构和编译器有了一定了解后，这本书只不过是前两者的C表达", "marks": "力荐"}
{"content": "幽默的程序设计读物", "marks": "力荐"}
{"content": "作者好八卦阿，哈哈，有点2", "marks": "力荐"}
{"content": "5,6,7,8章看得似懂非懂，还要把“编程挑战”的代码全部敲一遍。书中有许多有趣之处。", "marks": "力荐"}
{"content": "计算机八卦很多很好很强大!就冲着这些超搞的八卦这本书就已经值得一看了^_^。。其实我是想说我看了之后印象最深的就是八卦们了~~哈哈~~难得有一本书写得这么搞。。", "marks": "力荐"}
{"content": "关于c的历史 主要讲unix下的实现 偏了一些", "marks": "还行"}
{"content": "都是c语言的经典，好不容易才再版，买了一本狂看，呵呵，非常好，看完后就对c语言有新的理解", "marks": "力荐"}
{"content": "月底我会写一份详细的读书笔记，敬请期待~虽然没人期待吧。。。哈哈~", "marks": "力荐"}
{"content": "书绝对是好书，只是翻译太水。建议看原版", "marks": "推荐"}
{"content": "写的蛮有意思的一本书，可以当作一本闲暇时候的读物，生动介绍了不少计算机的历史知识。", "marks": "力荐"}
{"content": "研2才读的。我觉得没有过时。", "marks": "力荐"}
{"content": "已购.", "marks": "力荐"}
{"content": "深入探讨了数组与指针，也翻出了许多历史小八卦，比较有意思。", "marks": "推荐"}
{"content": "大师级的programmer根据自己多年的编译器和操作系统经验写出的一本非常实用的c编程书。非常值得细细品味", "marks": "力荐"}
{"content": "明白了不少细节，关于数组指针声明什么的讲的比较清晰", "marks": "力荐"}
{"content": "这本书的八卦很精彩..", "marks": "力荐"}
{"content": "c程序员必看，我不知接下来有没有时间继续看了", "marks": "力荐"}
{"content": "c语言必看书籍", "marks": "力荐"}
{"content": "应该叫《C PRIMER》", "marks": "力荐"}
{"content": "这本书更多的是系统层次的理解，内存，指针，数组，链接这些话题已经是沉淀下来的精髓，我认为每个程序员都应该了解。", "marks": "力荐"}
{"content": "C语言编程教学推荐用书", "marks": "推荐"}
{"content": "看过\n讲的什么\n忘了", "marks": "推荐"}
{"content": "如果我被困在一个荒岛上且只允许带一本编程技术书，那么毫无疑问就是这本。", "marks": "力荐"}
{"content": "喜欢这种写作风格，懒人看书慢啊", "marks": "力荐"}
{"content": "这本是我看关于C语言的最后一本，倒不是多难，而是内容很经典，很新，不过我还准备再看一遍K＆R C", "marks": "力荐"}
{"content": "非常非常好的，诙谐而又深入", "marks": "力荐"}
{"content": "充满智慧和幽默的一本书，\nC/C++的骨灰级玩家最好都读读", "marks": "力荐"}
{"content": "看不懂", "marks": "还行"}
{"content": "走火入魔", "marks": "力荐"}
{"content": "must read. N多牛人推荐", "marks": "力荐"}
{"content": "嗯，当时图书馆里应该是这本，已经让人翻的不成样子了。翻译应该说是极烂，很长时间以后我才开始看英文书。", "marks": "力荐"}
{"content": "很久以前和那本《C语言的陷阱与缺陷》一正买来的，读了两遍都没太看懂。工作后看见一些软件工程师也在读这本书，一问，很多人也不是很懂。看来，大师就是大师。", "marks": "推荐"}
{"content": "第一次没能坚持读下去，现在重新翻翻，受益匪浅啊，经典果然还是经典。", "marks": "力荐"}
{"content": "不但可以看技术, 还可以看八卦.", "marks": "力荐"}
{"content": "一本算是C语言的进阶书籍吧，结合作者多年编程经验，讲诉了一些编程技巧，编程中常见的错误，很值得一读，并且穿插了很多有趣的故事，阅读起来比较有意思。有些东西可能有点陈旧，可以果断跳过。最后一章讲C++的基本可以略过，可以去看其他讲C++比较好的书籍。", "marks": "还行"}
{"content": "我觉得是C程序员必看的书之一。翻译的不太好，但是书中讲到的问题极有实践意义。", "marks": "力荐"}
{"content": "就一个字：好", "marks": "力荐"}
{"content": "行文流畅，幽默，一气呵成。可以当小说来读。", "marks": "力荐"}
{"content": "很好很强大，学C之人必看的一本书", "marks": "力荐"}
{"content": "这本书的作用是引发人们的思考，想要知道的更具体是不够的还是，但是作者角度是十分新颖的，也是够直白的，简直就是经典。", "marks": "力荐"}
{"content": "c语言四大圣经，研读吧。作者风趣幽默，各种打趣揶揄。", "marks": "力荐"}
{"content": "必读", "marks": "力荐"}
{"content": "看了两遍，在学校看第一遍觉得讲得有道理，但是也就停留在觉得上面；出来工作后再看一遍，有点经验了，里面讲的有些都遇到过或者自己也能动手试验，真心赞，好书。", "marks": "力荐"}
{"content": "读过两次，非常好的一本书，让我受益匪浅。同样是面试前必看。", "marks": "力荐"}
{"content": "完美的C语言读物", "marks": "力荐"}
{"content": "挺好的书，c语言其实就够了，c++太复杂了", "marks": "推荐"}
{"content": "里面的故事挺搞笑的。。。", "marks": "力荐"}
{"content": "非常棒的一本书，常对别人推荐这本书，我觉得和C陷阱与缺陷+C和指针可以并为C语言进阶的三剑客了，哈哈。今年面试笔试的时候，很受用。", "marks": "力荐"}
{"content": "不多说", "marks": "力荐"}
{"content": "本书的主要目的是讲述如何以面向对象的方式对Web应用的页面和其他Web专用组件进行建模，并且与系统中的其他模型保持一致。", "marks": "还行"}
{"content": "日本人的设计思想，全面，将机械设计考虑的方方面面都写的很详细。实乃经验之谈，值得所有机械设计类人士参考。", "marks": "力荐"}
{"content": "很好的书，力荐", "marks": "力荐"}
{"content": "很全面的一本书，看了启发很大！相见恨晚", "marks": "推荐"}
{"content": "日本的书，不错，有情怀", "marks": "推荐"}
{"content": "看了3遍以上，依然觉得是经典。尤其书中提到很多设计者工作过程中的思想动态是其他同类书籍从未提及的。这本书是真正的直奔实践去的。", "marks": "力荐"}
{"content": "基础实用，不可多得的好书。", "marks": "力荐"}
{"content": "程序设计能从冯诺依曼风格中解放出来吗？冯程序设计语言使用变量来仿真计算机的存储单元；控制语句精心完成它的跳转和测试指令；而赋值语句仿真它的取、存和算术运算。赋值语\n句是程序设计语言的冯诺依曼瓶颈，而且使我们以和计算机的瓶颈同样的方\n式来想像一次一字的项。考虑一个典型的程序，其核心是包含某些下标变量的些赋值语句。每个赋值语句产生一个字的结果。在改变下标值时，这个程序必然引起这些语句执行许多次，以便在存储中实现所希望的整个变化，因为它必须做成一次一个字。\n因此程序员关心的是，如同设计控制语句的嵌套来引起必要的重复那样，字的\n流动通过赋值瓶颈进行。赋值语句把程序设计分成为两个世界。头一个世界由赋值语句的右\n边组成。这是有序表达式的世界，这是一个有用的代数性质的世界（那些经常\n被副效应", "marks": "力荐"}
{"content": "翻译得不是很好，幸亏原文可以下载。", "marks": "推荐"}
{"content": "在ACM的主页上可以找到历届Turing Award得奖者的生平与Lecture，感觉看原文更自然一些", "marks": "还行"}
{"content": "如果你对历史有考究癖的话,建议看看", "marks": "推荐"}
{"content": "在孙总娃那儿收刮的书。看了会儿。觉得挺好玩的。", "marks": "还行"}
{"content": "看不完了，翻译实在太倒胃口", "marks": "很差"}
{"content": "只是希望我可以看得懂一点", "marks": "力荐"}
{"content": "CS这一学科发展不过几十年，其开山祖师很多还健在，我们这一代人真幸运", "marks": "推荐"}
{"content": "好是好，但是看着想睡觉", "marks": "推荐"}
{"content": "都是经典演讲，但中文翻译远不够尽职。", "marks": "推荐"}
{"content": "前辈们太伟大了", "marks": "力荐"}
{"content": "5星是给原书的，翻译不是一般的烂，苏老先生真是盛名之下其实难符啊，图灵演讲本来就很抽象，翻译成中文就更难懂了。真是很糟蹋这样的好书", "marks": "力荐"}
{"content": "如果要了解算法和分析的历史发展，这本书则是上选。Knuth、Backus等好多耳熟能详的名士都出现在本书中。这帮人虽然都是研究数学的，但其实都还蛮幽默。", "marks": "力荐"}
{"content": "演讲论文，有好多看不懂。。。", "marks": "推荐"}
{"content": "被翻译毁了的经典系列。", "marks": "还行"}
{"content": "第一次知道苏运霖是在TAOCP上看到的，一次在图书馆随意翻书时又看到了他的这本译作，但读来读去总觉得十分别扭，下次还是找原版来读读", "marks": "较差"}
{"content": "激励了我对计算机之热爱，翻译不大好", "marks": "力荐"}
{"content": "其实有点看不懂啦", "marks": "推荐"}
{"content": "文章非常好，翻译非常烂", "marks": "推荐"}
{"content": "图灵奖，计算机届的诺贝尔奖", "marks": "还行"}
{"content": "额。。。没看完。。。感觉学问太深的东西，我听不懂，不过程序设计语言是一样伟大的发明，这是我看完得出的结论", "marks": "推荐"}
{"content": "Donald的还不错", "marks": "还行"}
{"content": "翻译得一塌糊涂", "marks": "很差"}
{"content": "编程的关键是从陈述问题到解决问题的转变，逻辑化思考问题，训练自己用计算机能理解的方式表达自己的逻辑", "marks": "力荐"}
{"content": "挺不错的", "marks": "推荐"}
{"content": "关于C语言的语法讲解的不如国产书籍细致，但此书并不着眼于C的语法，而是引导学习者自己开发一个属于你自己的库。很不错的教材。", "marks": "力荐"}
{"content": "非常透彻的分析，初学者读到这些一针见血式的观点后必有恍然大悟之感！不足之处就是作者没有告诉初学者该如何使用他编写的库，用不了作者的库就不能实践，势必使初学者半途抛弃此书。", "marks": "力荐"}
{"content": "秒杀谭浩强好么！", "marks": "推荐"}
{"content": "觉得要比其他的C语言书好多了 ^_^", "marks": "力荐"}
{"content": "想当年做里面的题做得那叫一个欢乐~啊,当时好像是编出了一个猜单词之类的游戏...lol...好吧,其实程序还是很有趣的...可惜我实在太弱了嘤嘤嘤...", "marks": "推荐"}
{"content": "大一C语言教材，带我领略零一世界四季的变换，窦春燕姐姐~", "marks": "力荐"}
{"content": "哎，从这本书里才知道\"库\"这回事。\n后来大学时代所有的小作业都用了书中提供的那个超小的库来做。\n那时还不知道C++、STL，觉得那个库简直是世上少有，简洁逆天啊。\n曾经年少。\n还是要推荐，初学C，这个真的是个不错的选择。", "marks": "力荐"}
{"content": "入门的时候要是能看看这个书对人的提升是非常大的，如果有经验的话，本书帮助不大了。", "marks": "推荐"}
{"content": "不错的书，图形部分自己做了个库用，蛮 Happy 的", "marks": "推荐"}
{"content": "又回顾了一遍经典", "marks": "推荐"}
{"content": "相比之下还是这本有爱点，排版翻译都不错。", "marks": "推荐"}
{"content": "学 C 语言时候在图书馆借的影印版，非常好的入门书。", "marks": "力荐"}
{"content": "卧槽今天才想起来翻出来……", "marks": "力荐"}
{"content": "这本书让大一时候只会用office软件和上网的我对编程、cs产生了极大的兴趣，虽然后来这被证明是一种delusion.", "marks": "力荐"}
{"content": "我看过的最好的C语言教程", "marks": "力荐"}
{"content": "没有想想中的好", "marks": "还行"}
{"content": "翻译做得非常好，译者的水平相当高。", "marks": "力荐"}
{"content": "好书！", "marks": "力荐"}
{"content": "C的比较全面和较为深入的介绍", "marks": "推荐"}
{"content": "浅显易懂，有部分没读，实在是时间紧迫，不过里面涉及很多代码规范与编程的一般规则，感觉学到了很多，指针部分也讲得不错，可能还需要读别的来充实下~", "marks": "力荐"}
{"content": "学校的课本", "marks": "推荐"}
{"content": "我真是太喜欢作者的书写风格。", "marks": "力荐"}
{"content": "世界上有两种人：一种是读过此书的人，一种是没读过的人。", "marks": "力荐"}
{"content": "哎哟。。。这本真读伤掉了，不用照镜子就知道自己是猪。。。奇书啊，翻译也奇，理工科或是计算机专业的估计比较容易懂吧，太杂合百家了。。。大一的时候逻辑课老师推荐这本看来是有道理的，刚高考完，智商还处于人生的至高点。。。", "marks": "推荐"}
{"content": "读了之后，你会感慨，怎么有人能写出这样的书，玩出如此上乘的思想游戏。", "marks": "力荐"}
{"content": "亚马逊大促的时候买的，果然看不懂，penny是永远无法成为谢耳朵的，现实就是这么残酷。。。。", "marks": "推荐"}
{"content": "比较适合我国大二、大三学计算机又有点憧憬人工智能的学生们作课外拓展阅读。主体就三次大过渡：形式逻辑——哥德尔定理——人工智能。由于已经看了《哥德尔证明》和《人工智能哲学》两本，再看这本就觉得作者绕了好大的一圈，最后也没有太多建设性的想法。另外巴赫和埃舍尔虽然一直出场，却并没有达到期待中的深度，大多还是作为辅助解释。“自指”和“配位”是作者强调的两个核心思想。我想随着交叉学科人才的增多，以及AI领域的发展，未来这种类型的书将不会鲜见吧。翻译很有趣，体现出另一个维度的对偶，不过后期是不是校对崩了，从介绍图灵那一章开始，有三、四处错字出现。总的来说，这书还是给人以启发的。", "marks": "推荐"}
{"content": "书中的“自指”其实就是递归（函数自我调用），而哥德尔的“递归自指”不完备作用本质就是等式（递归=计算理论=随机性）换句话说，逻辑推理时遇见了关键的随机性，只是这个随机性到底是伪随机还是真随机，这个问题是不是和拉姆齐定理（完全的无序不可能）：可视化例子是乐高玩具。其中编程中lisp语言就是采用抽象数据列表与递归作符号演算来衍生人工智能。读了离散数学和组合学才发现物理的连续假设是个伟大的假设，只有从离散角度思考，利用测度来综合离散和连续，而这个桥梁是概率，才能理解世界的本质。哥德尔的最深的内涵是数论等价于逻辑，自然数和集合一一对应。逻辑学上的名句「从一个错误的假设开始，能够推导出任何可能的结论」逻辑学就是非稳定的动力系统", "marks": "力荐"}
{"content": "文科生读这样一本书，的确是勉为其难了，不过各取所需罢了。这本奇书的定位是“科学普及读物”，也就是还算不得是理论专著，这不禁让我联想到同样非常有名而且我很喜欢的哲学普及读物《苏菲的世界》。不管怎么样，36年前的这本奇书意外地加深了我对巴赫的理解：不论是从理性的角度，还是从艺术的角度去理解和演绎巴赫，都将是非常艰巨的，可以说如朝圣一般~~~", "marks": "力荐"}
{"content": "从前有座山，山里有个庙，庙里有个侯世达在讲故事", "marks": "力荐"}
{"content": "形式逻辑,哥德尔定理,人工智能. \n准备撸MIT的赏析课.", "marks": "力荐"}
{"content": "Grand piece.", "marks": "力荐"}
{"content": "这本书太诡异，一个元灯的request可以触发一个元元灯request一个元元元灯，元元元灯再request元元元元灯。。。如此内推然后在有限时间内返回。那么就不存在顶端的Object. 可是没有顶端Object如何设计垃圾回收呢？宇宙从来不回收垃圾。", "marks": "推荐"}
{"content": "神奇的书…每次翻到随机的一页，都发现是没看过的…", "marks": "力荐"}
{"content": "艰难看完五章之后决定打五星，然后不再往下看了，放在书架上供起来。", "marks": "力荐"}
{"content": "唯一不給五星的原因是，譯文就像跑了氣的可口可樂，你唾幾口吐沫進去，不等於說我就能喝出泡泡來。這本書在“智”的層面大概已臻極點。2 theorems of mathematical logic that establish inherent limitations of all but the most trivial axiomatic systems capable of doing arithmetic.\r\n1st states that no consistent system of axioms whose theorems can be listed by an \"effective procedure\" ) is capable of proving all truths abou", "marks": "力荐"}
{"content": "花半年时间捋了一遍，累觉不爱.........", "marks": "推荐"}
{"content": "拣自己能读懂的部分浏览了遍，虚荣地标上“已读”，但这些都不影响我真诚地觉得这是一本牛逼的书。是的我第一次用这个词形容一本书！", "marks": "推荐"}
{"content": "2012年读", "marks": "推荐"}
{"content": "断断续续看了一个月之久，算是啃完了。作者博闻强识、引经据典涉略了诸多领域：数学、生物、计算机、音乐、物理等。纵观全书，侯世达似乎在说一个词——self，一种对自我的思考，自我的认知，自我的成长。阿波罗神庙上的“认识你自己”，尼采的“成为你自己！”，概如是矣。没有你，你所观察到的世界还在么？我想一定不在。  好书还需重读。就这样。", "marks": "力荐"}
{"content": "神书。", "marks": "力荐"}
{"content": "神作", "marks": "力荐"}
{"content": "自知看不懂，本来以为某人会感兴趣，结果人家根本不看，还是自己慢慢啃吧……", "marks": "推荐"}
{"content": "神作", "marks": "力荐"}
{"content": "上高中的时候读过。不明觉厉=。=", "marks": "力荐"}
{"content": "中文版部分内容看得肠子略打结，虽然翻译百里挑一能得九十九分毕竟也还是要扣个一分不是么。。。原文么我非常不要脸地只肯看劣质免费pdf，通篇充斥着乱码和错别字，我英语这么差当然驾驭不了不是么。。。于是我把中英文一起像嚼蜡一样慢慢看完了。。。当然遇到高尚的推导部分，作为无知中年妇女我都果断地跳了过去。。。", "marks": "力荐"}
{"content": "其实只读了1/5，碎片化的时间不适合阅读此书，逻辑打断了下次很难接着读。。。感觉这辈子都没机会读完了。。。有时间逻辑好的话应该读读这本书，神作", "marks": "力荐"}
{"content": "作者舉重若輕地介紹了很多我沒有看懂的音樂知識，以及勉強可以看懂的數學和計算機知識。", "marks": "力荐"}
{"content": "老天啊这书居然有中文版，而且这标题译得太彪悍了，我一定要膜拜一下……", "marks": "力荐"}
{"content": "作者对于人工智能的阐述和分析观点并不是特别出奇，然而牛逼之处在于触类旁通，能够把音乐、艺术和计算机三个领域中共同理念提炼出来并加以整合，让人不禁慨叹作者脑洞之大。除了书籍本书的神书属性，译者群也功莫大焉，作为专业翻译的一员，真心对本书译者群的整体素质表示拜服，尤其是在序中提出的“移译”理念，简直不能同意更多。这种融合百家且能给人以思想启迪的书，注定要摆在书架上留给闺女将来看~~", "marks": "力荐"}
{"content": "对不起。。似乎只有我把这本书当做是催眠神器了。。", "marks": "力荐"}
{"content": "不明觉厉🙄", "marks": "力荐"}
{"content": "无法用简单的一两句话来概括的奇书。汪洋恣肆，旁征博引，融会贯通，浑然天成。", "marks": "力荐"}
{"content": "标记读过其实只能是翻阅浏览了一遍吧，无比遗憾和羡慕的是有数学和计算机基础的人，就巴赫和埃舍尔的部分虽然并不是很深入但是可以从中找到很多乐趣。综合来看会有一种神秘的共同原始的奇特感觉。有的评论把此书神化了，既然要神化那也应该分为读懂此书和读不懂此书的人。", "marks": "推荐"}
{"content": "奇书！", "marks": "力荐"}
{"content": "一次关于有序与无序的探寻之旅——音乐，数学，生命，智能——规律即是美", "marks": "力荐"}
{"content": "弃读", "marks": "还行"}
{"content": "神作呀", "marks": "力荐"}
{"content": "一本绞脑子的书", "marks": "力荐"}
{"content": "哲普作品。", "marks": "推荐"}
{"content": "神书", "marks": "力荐"}
{"content": "奇书 奇书 。想来我还是没读懂 鉴定完毕", "marks": "力荐"}
{"content": "不是人写的，是人类智慧的最高明解读角度", "marks": "力荐"}
{"content": "晓煦推荐。", "marks": "力荐"}
{"content": "我只能说，佩服得五体投地！", "marks": "力荐"}
{"content": ":TP301-49/1250", "marks": "力荐"}
{"content": "总算读完了，对数学与哲学的关系有了些新的认识", "marks": "力荐"}
{"content": "1.这不算一本科普书，因为书中所涉及的内容之宽度广度不可思议，这也体现了作者的博学。 2.书的翻译无与伦比，内容简介里已经说得很清楚了。 3.尽管不少东西我一时无法理解，但就和巴赫的音乐一样，光看书的结构我就能体验到阅读畅快。 4.相比于给四颗星的凯文·凯利《失控》，本书绝对比他高明十倍，所以给五颗星实在是很无奈。 5.本书绝对值得收藏", "marks": "力荐"}
{"content": "4.5！！！！！！！！！！！", "marks": "推荐"}
{"content": "著名的GEB", "marks": "推荐"}
{"content": "好书展示问题本质，洞见深刻。缺点是论述不够精简，有些对话真的很无聊。翻译和著作都有点过誉了", "marks": "力荐"}
{"content": "神书", "marks": "力荐"}
{"content": "1、能够读完的都应该给自己点赞；2、知识面宽广，3、逻辑性强；4、哥德尔的不确定性定理，5、认知", "marks": "力荐"}
{"content": "虽然讨论的是数学和计算机方面，但是用音乐和绘画来解释，里面的故事非常精妙，翻译也堪称一绝。强烈推荐！！", "marks": "力荐"}
{"content": "神作..", "marks": "力荐"}
{"content": "天书～～～", "marks": "力荐"}
{"content": "和朋友偶然聊起，补标。原著和翻译都是艺术品。", "marks": "力荐"}
{"content": "超棒～～!下次回家再读一遍", "marks": "力荐"}
{"content": "“读”完了。我只知道我一无所知", "marks": "力荐"}
{"content": "fabulous ", "marks": "力荐"}
{"content": "到现在好像也没看“懂”，可能要慢慢看", "marks": "推荐"}
{"content": "第二遍读，对我现在的帮助非常大。", "marks": "力荐"}
{"content": "【藏】", "marks": "力荐"}
{"content": "2011年7月复刻版。实体书拿在手中那一瞬间几乎泪奔。电脑里的pdf文件是06年创建的。某种意义上讲geb是我的心灵之书、成长之书。我得在书架子上修一个神龛给它。", "marks": "力荐"}
{"content": "可好玩了，可惜太厚", "marks": "力荐"}
{"content": "奇书 ", "marks": "力荐"}
{"content": "何止五星", "marks": "力荐"}
{"content": "A与非A。我更迷茫了。", "marks": "力荐"}
{"content": "读这个的时候 我已经发现 我中文也读不懂啦－ －", "marks": "还行"}
{"content": "GEB昨晚终于啃食完毕，用时超越无注释《后汉书》，不敢妄评集大成者，可惜近些年不买板砖了，自顾自看个电子版的不知道有没有漏页", "marks": "力荐"}
{"content": "用两个月时间读完，一次激动人心的旅程", "marks": "力荐"}
{"content": "我靠！！！！！！！！！！！！！太牛逼了！！！！！！！！！！商务印书馆的各位，我跪拜你们！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！", "marks": "力荐"}
{"content": "很有智慧的一本书，就是非计算机专业的是在太难读下去了！", "marks": "推荐"}
{"content": "神书！", "marks": "力荐"}
{"content": "无爱", "marks": "还行"}
{"content": "或许仅面向小众\r\n对复杂性关注的人会很喜欢", "marks": "力荐"}
{"content": "其实只读了1/3，其他就是看别人的读后感，和计算机很多相通的地方。对于同一思想在不同领域的延展，我总是很犹豫和怀疑。", "marks": "力荐"}
{"content": "|294:54|", "marks": "力荐"}
{"content": "牛逼的理念，牛逼的翻译，牛逼的厚度，牛逼我居然买到了一本。。。", "marks": "力荐"}
{"content": "这是一部优秀的书，不止于“科普”那么简单。这又是一部被“神化”了的书，并不能完全匹配得上被神化后的地位。巴赫的音乐，其逻辑性、理性的光芒，在各种书中描述的，其实更多的是从乐谱分析的角度而言。但是，音乐是不能这样被分析的，至少脱离了音乐的最本质性东西。这是表达上的先天短处，无论是从文字还是语言的角度，都是这样。音乐是一种高级的美学感知的东西，说严重点儿，很神圣，无法言传的一种高级美感，能享受到的，就是最大的幸福。这怎么能从文字、语言、甚至是数学的方式来表达呢？即便是有，那也不是最宝贵最本质的东西。巴赫的音乐，确实闪耀着理性的光辉，但我想要说的是：巴赫音乐中的感知式美学，照样也有超级高度的光辉。这一点，在多数时候恰恰被反智的选择性盲视了，从这个角度来说，很可悲。我不止A比你好，B也比你厉害好吗！", "marks": "还行"}
{"content": "跳过了很多看不明白的部分，但上半本确实让人耳目一新", "marks": "力荐"}
{"content": "太聪明的书了，作者什么智商啊。。。", "marks": "推荐"}
{"content": "看了上部", "marks": "力荐"}
{"content": "。。。忘记内容了。。。这。。。", "marks": "推荐"}
{"content": "跳过了很多看不明白的部分，但上半本确实让人耳目一新 ", "marks": "力荐"}
{"content": "仍是没看完。", "marks": "力荐"}
{"content": "大约是修行不够,没读到一小半就让我拿来垫显示器了", "marks": "还行"}
{"content": "暂时还理解不了", "marks": "力荐"}
{"content": "中后部AI部分讲的太多了。。", "marks": "力荐"}
{"content": "挺好的书，就是太考验耐性了", "marks": "推荐"}
{"content": "略读，四年不学数学，基本的东西都不会了。但是总体而言，还是很好书，四点五星。", "marks": "推荐"}
{"content": "过了就过了", "marks": "还行"}
{"content": "大学的时候第一次看就知道自己是猪", "marks": "力荐"}
{"content": "直接看尿了", "marks": "力荐"}
{"content": "那些图就够搞脑子的了。", "marks": "力荐"}
{"content": "从数论到人工智能到心智，灵魂还是哥德尔定理，巴赫和埃舍尔只是骨头和皮肉。不过感觉稍微有点啰嗦", "marks": "推荐"}
{"content": "花了几个月的时间，在上海难得的一个大晴天终于读完这本书。最初吸引我的音乐和逻辑主题，加上后来愈发复杂的计算机理论和生物学，极大的满足了我蓬勃的好奇心。虽然囫囵吞枣的看完了，收获还是很大的：这个世界，追根溯源，都是相通的。", "marks": "力荐"}
{"content": "觉今是而昨非/美、真与形式 Page767", "marks": "力荐"}
{"content": "太厚了！但是好书", "marks": "力荐"}
{"content": "惊为天人，跨学科领悟的神书。数学、绘画和音乐，逻辑本身的循环交替和往复。", "marks": "推荐"}
{"content": "准备第二遍。", "marks": "力荐"}
{"content": "读到第四章弃了，如果想了解相关知识，不如去买本计算机领域的课本看看。", "marks": "推荐"}
{"content": "奇书、奇翻译、奇跨界……反正我就只看看乌龟螃蟹和阿基里斯的神烦扯淡", "marks": "推荐"}
{"content": "有意思，学习人工智能的感觉。", "marks": "还行"}
{"content": "I wish my wish would not be granted!\n我的愿望是，我的愿望不会得到满足。\n", "marks": "还行"}
{"content": "孙春奇推荐过这本书。大四能在图书馆安静地读这样一本书，这感觉真的很美妙！", "marks": "力荐"}
{"content": "很好的参考书，对X86汇编很有帮助，不过实验系统是在WindowS 感觉不太喜欢，还是LINUX/UNIX 上比较习惯。", "marks": "力荐"}
{"content": "这本书的写作风格真是让人相当的无语！见鬼。。。", "marks": "推荐"}
{"content": "a decent lisp book, though not as good as its antecessor. figures are more interesting than words...", "marks": "力荐"}
{"content": "趁着周末把这本书大概翻了一遍，比起little schemer，讲了不少新的内容。不过整本书有点累赘的感觉，感觉学究气息浓，对话形式看得好蛋疼。理解最后的推倒式回来再看对话反而更容易理解作者的意图.....", "marks": "推荐"}
{"content": "没看完.还剩最后一章.下次接着看...", "marks": "推荐"}
{"content": "网上的pdf竟然缺了30页...", "marks": "力荐"}
{"content": "introduce side-effect to eliminate redundancy 2015.1 collection of scattered wisdom", "marks": "力荐"}
{"content": "my hat still fits. good.", "marks": "力荐"}
{"content": "还得再读一遍..", "marks": "推荐"}
{"content": "理解什么是计算的本质", "marks": "推荐"}
{"content": "最后一章，懒得看了", "marks": "力荐"}
{"content": "有continuation的入门介绍 等 （忘了", "marks": "力荐"}
{"content": "作者说了 这本书只要懂英语和会数数就能看：）", "marks": "力荐"}
{"content": "学而时习之，不亦悦乎", "marks": "推荐"}
{"content": "一般。", "marks": "还行"}
{"content": "将 Church Encoding 化入无形之中。。。最后一章依旧是那么精彩！", "marks": "力荐"}
{"content": "最后几章需要琢磨琢磨，以后有空吧", "marks": "力荐"}
{"content": "确实不喜欢这种问答式的风格，尤其是里面老是喜欢抖一些匪夷所思的包袱，比如冰淇淋什么的，可能是文化差异吧。书本身是非常棒的。为了避免陷入对话，一般都是先自己解决问题，如果运行结果无误，就不再阅读对话部分了。", "marks": "推荐"}
{"content": "关于http协议最为深入的一本，其中tcp/http interaction这部分很有特色。", "marks": "力荐"}
{"content": "其实HTTP协议一点都已简单，自己了解的也不是很多，这本书也应该作为需要重新读的。 HTTP的缓存、代理、持久连接...", "marks": "推荐"}
{"content": "一本不错的老书，适合做Web相关开发的参考资料。虽然里面提述的一些名词或者软件有点古老，不过本质和概念的东西今天拿来一样适用。", "marks": "力荐"}
{"content": "http好书。", "marks": "推荐"}
{"content": "看了一半，还了。", "marks": "推荐"}
{"content": "仙林自然918213", "marks": "还行"}
{"content": "乱，没劲。", "marks": "较差"}
{"content": "这是人工智能的革命性的一战。", "marks": "推荐"}
{"content": "实用，不错！", "marks": "推荐"}
{"content": "本科大三时买得，没看多少就送给好友了", "marks": "推荐"}
{"content": "编写串口是参考了。", "marks": "还行"}
{"content": "下周买", "marks": "力荐"}
{"content": "实用，可参考", "marks": "推荐"}
{"content": "半天看完，讲得很实用。", "marks": "力荐"}
{"content": "实验室里人手一本的入门书... 其实也不是因为有多好, 而是讲fortran的书好少啊", "marks": "推荐"}
{"content": "经典的经典", "marks": "力荐"}
{"content": "这就叫做经典", "marks": "力荐"}
{"content": "简洁明了，有C语言基础，看这个顺便知道了很多term的最初来历。", "marks": "推荐"}
{"content": "最后一章印刷错误比较多，总的来说还不错", "marks": "推荐"}
{"content": "写的蛮清晰的", "marks": "推荐"}
{"content": "浅显易懂，深入浅出", "marks": "力荐"}
{"content": "非常清晰易懂，哗啦啦，很快可以看完看懂。。。。", "marks": "力荐"}
{"content": "真没想到豆瓣上会有这本书啊hhhhhhhhhhhhhhhhhh", "marks": "力荐"}
{"content": "教不会人的书不是好书~！", "marks": "较差"}
{"content": "適合自學也適合教學的書，關於Fortran的書比想像中的少多了所以才找到這麼早以前的書（仍然是市面上能找到的數一數二跟得上時代質量又好的書）……", "marks": "力荐"}
{"content": "对于我这种以实用为目的的程序小白是极好的教材。。", "marks": "力荐"}
{"content": "毕设要学", "marks": "推荐"}
{"content": "Fortran95入门经典书籍，推荐阅读！讲的非常透彻，就喜欢这种风格的作者", "marks": "力荐"}
{"content": "很不错的入门fortran自学用书，特别适合计算机语言零基础的同学！", "marks": "力荐"}
{"content": "下学期的有限元和计算力学可能会用到fortran，所以这个寒假还是得好好学。", "marks": "推荐"}
{"content": "好懂", "marks": "力荐"}
{"content": "应该是市面上fortran入门书籍中，写的最好的了，很实用。相比这本，谭浩强的那本F77太过基础了", "marks": "力荐"}
{"content": "很经典的Fortran入门书，说得很清楚", "marks": "力荐"}
{"content": "不错，经典", "marks": "推荐"}
{"content": "书还可以，但例子感觉不是很好", "marks": "推荐"}
{"content": "@工具书", "marks": "推荐"}
{"content": "翻译烂，云里雾里。", "marks": "较差"}
{"content": "总的章节安排有一个体系结构，但章节内的讲述比较凌乱。如前言所述，适合中、高级shell开发人员做备忘之用。", "marks": "还行"}
{"content": "翻译的有些硬……", "marks": "还行"}
{"content": "不够", "marks": "推荐"}
{"content": "4M => 1,2 => 7", "marks": "推荐"}
{"content": "毕业时从宝珠同学那里低价收购，读罢立即后悔没有早看中，胜读x年书啊", "marks": "推荐"}
{"content": "1 2 3 1 2 3 1 2 3……", "marks": "推荐"}
{"content": "翻译的还是不怎么好，内容并不多，但是讲的不连贯", "marks": "还行"}
{"content": "开卷有益，有些枯燥", "marks": "推荐"}
{"content": "Nov,21,2016,弃，page96.", "marks": "较差"}
{"content": "中文翻译非常差，看了一半是在看不下去改英文版了", "marks": "很差"}
{"content": "echo \"need a second deep learning!\"", "marks": "还行"}
{"content": "翻译的像狗屎一样的书，两个译者骗钱的！", "marks": "很差"}
{"content": "入门教程，四天翻完～", "marks": "推荐"}
{"content": "很好的一部入门书", "marks": "推荐"}
{"content": "看这本书是因为深入浅出MFC还在路上，然后托人在学校借了这本书，用来大概了解MFC的结构和用法还是可以的，不过翻译水平可真不怎么样，ODBC翻译成了打开数据库连接，还有一些脑残代码我就不吐槽了，谁看谁知道啊，呵呵", "marks": "还行"}
{"content": "较易懂，是否又可以说适合非科班人士阅读？", "marks": "推荐"}
{"content": "如果觉得《深入计算机系统》太厚，这本也不错", "marks": "推荐"}
{"content": "写系统必读之书", "marks": "还行"}
{"content": "对非科班程序员很有意义", "marks": "还行"}
{"content": "看的是英文版，不错，不知道中文的怎么样了", "marks": "力荐"}
{"content": "还不错 从底层的机构上去关心程序的质量和效率 虽大多不是太深,大多泛泛而谈  像偶这种初级的拿来通一下便会比较舒畅", "marks": "推荐"}
{"content": "如果有时间,有金钱读读也无妨", "marks": "还行"}
{"content": "大学草草的度过，感觉还不错", "marks": "还行"}
{"content": "等着出卷三，希望卷三能达到《代码大全》的高度^_^", "marks": "推荐"}
{"content": "这种书看多了... 不过也忘的差不多了...", "marks": "推荐"}
{"content": "从这本书作为美国一些大学计算机专业的课本就可以看得出来，中国的高等教育，不仅仅落后在教材，在教育方法、师资力量上，都与美国高校差距较大，我们在初等教育上的领先优势在大学阶段不复存在", "marks": "力荐"}
{"content": "挺基础的一本书,不过在于把一些基础的东东再不厌其烦地再说了一下,静下心来,不是有点收获的, 其中关于big endian与little endian的转换不错,当然还有一些典故吧......不过对书中不断推行HLA不爽", "marks": "还行"}
{"content": "入门推荐", "marks": "推荐"}
{"content": "非常好的一套书，当时真是跑到哪里都要背着这个大厚本看一下", "marks": "力荐"}
{"content": "还行", "marks": "推荐"}
{"content": "很不错的一本书，里面涉及了很多基础上的东西，我读这本书的时候只学了VB，看着有点困难，没能读完，但是我读的前半部分就已经非常非常有用了，给我后面对很多东西的学习带来很大的帮助", "marks": "力荐"}
{"content": "很不错的书，前边很简单，后边有点深入的感觉，总体感觉并没有讲的十分深入，但是对于一种思维体制的建立还是很有帮助的", "marks": "力荐"}
{"content": "略读完毕，耗时6h。STL还真有够小巧精致的。书非借不能读也！", "marks": "推荐"}
{"content": "特别对 STL 容器的内存管理感兴趣，看过一部分，不过觉得 jjhou 有些时候说得过于罗嗦了。 ^_^bb", "marks": "还行"}
{"content": "看第二章的时候忍住，我当年第一次读的时候总在第二章徘徊，好烦躁，后来一口气五天看完了，写得好棒啊！值得一再重读！", "marks": "力荐"}
{"content": "以前在图书馆里看见这本书总是不太想借，现在看看完才感叹相见恨晚。此书作为一个把STL精致巧妙的思想呈现给读者的引子，已经不能好更多了！\n当然，想要了解的更深入还是得RTFSC。", "marks": "力荐"}
{"content": "通过这本书来复习数据结构再好不过，里面对各种二叉树、查找、排序等的描述非常详细，而且非常注重效率，对我而言，比起枯燥又厚实的数据结构，此书更深得我心", "marks": "还行"}
{"content": "了解事物的本质，能更好的利用该事物；掌握该事物的本质，能控制该事物。", "marks": "力荐"}
{"content": "天下大事 必作于细", "marks": "力荐"}
{"content": "代码有点老了。书还是不错～", "marks": "力荐"}
{"content": "我是有多喜欢侯捷蒋勋这种书生气十足的作者啊！", "marks": "力荐"}
{"content": "如果觉得算法实在是很抽象的话,可以试试这本,侯捷的书,一直是容易理解,讲解深刻.", "marks": "力荐"}
{"content": "侯捷的经典之作，没有看过这本书何谈对STL熟练掌握？", "marks": "力荐"}
{"content": "了解std::后面的故事，加深对基本算法的理解。如果不是太容易，也不能算太难，看来剖析得很到位。我应该十年前就看这本书了，但如果是十年前，我一定看不下去，也看不懂。", "marks": "推荐"}
{"content": "一本数据结构教材！！", "marks": "还行"}
{"content": "C＋＋书籍能写这样不错了", "marks": "还行"}
{"content": "侯捷有些地方还是写错了啊", "marks": "推荐"}
{"content": "。。。", "marks": "推荐"}
{"content": "就下载SGI的源码和这本书对照看的，我觉得基础够好，直接看SGI的源码更好，不像书中的代码都是不连续的，大脑容易造成Context Switch.", "marks": "力荐"}
{"content": "如果让零基础的我开始学C++，并只能选择两本书，我选择C++ Primer以及本书。\n", "marks": "力荐"}
{"content": "很实在，但是缺少boost库分析", "marks": "力荐"}
{"content": "看过一点。。", "marks": "推荐"}
{"content": "啃了一周终于读完了，源码采用低版本的g++使用的STL，原理讲得深入浅出，@林动潇潇 推荐给你。另推荐＜＜泛型编程与STL＞＞据说有很多STL当初设计时的哲学思维，想必是本好书。", "marks": "推荐"}
{"content": "多少幡然醒悟，醍醐灌顶", "marks": "力荐"}
{"content": "侯老师的作品，主要看看stl中的小技巧，学习算法和数据结构就不用看这本了。", "marks": "推荐"}
{"content": "如果说《Effective C++》让我第一次感受到C++的博大精深，那么这本书则带我走入C++的大门。 ", "marks": "力荐"}
{"content": "如果以前没有看过STL源码，这本书提供了很好的介绍。不过看着本书，最好还是会一些STL。以前很多书都不教STL。", "marks": "还行"}
{"content": "高屋建瓴，细致入微，源码之前，了无秘密。", "marks": "力荐"}
{"content": "去年找工作时翻了一遍，不过，对特别细的实现缺乏兴趣。。。", "marks": "推荐"}
{"content": "这本书特点是代码量很大，讲解部分比较少，很多东西需要自己实际查看源码，自己去摸索，另外侯老师写堆的部分有一个小错误，进行删除操作的时候使用的是两次shift-up而不是常见的一次shift-down，这是STL为了达到最大复用进行的取舍。", "marks": "推荐"}
{"content": "介绍挺直白，有基础的可以直接上SGI的源代码。对于对STL当中的数据结构和算法不熟悉以及泛型方法不熟悉的，是一本很好的书，直接从源代码角度分析。JJH的书还是很细致的。", "marks": "还行"}
{"content": "很好看，但是不算完整翻了一遍。侯捷挑的代码是比较好阅读的部分，加上他的讲解，变得很好理解。但是粗读一遍，只能增加阅读模板代码的信心和对STL基本原理的理解，不能直接增加编程能力。", "marks": "力荐"}
{"content": "回想起来，读的并不太懂。隐约还记得STL的快排的实现，以及i++和++i的实现。侯捷应该在序言里有说过，这类书的作用肯定重在授人以渔，否则改天出了个RTL，YTL，难道读者还期待这类框架的源码剖析吗？那真是本书作者摇头喟叹的事情。", "marks": "推荐"}
{"content": "还算清楚，只是那些术语和大陆通常的说法差别很大。", "marks": "还行"}
{"content": "任何特定的数据结构就是为了实现特定的算法。算法和数据结构是理解标准库的基础。STL库本身是一个设计模式与算法和数据结构的体系", "marks": "力荐"}
{"content": "打印代码用9pt的Courier New最舒服！因为8.5pt设置起来麻烦= =", "marks": "力荐"}
{"content": "还是觉得生涩", "marks": "推荐"}
{"content": "深入理解STL之必读，侯捷抱着学习的态度写的此书，同样适合我们跟着他的脚步来剖析STL源码。", "marks": "力荐"}
{"content": "源码之前无秘密！这本书对STL的6个方面（Allocator, Container, Iterator, Algorithm, Function Object, Adapter）的源码做了详细地分析，书没有传说中的难，红黑树部分只讲了插入没讲删除。繁体勘误部分可以在侯捷官网上找到。算法一章选择性地看了一些。泛型编程是STL的基础。从STL源码中可以学习到顶级programmers是如何理解并实现各种常用数据结构和算法的。STL Allocator也是一个关于内存分配和管理的极好的范例。", "marks": "推荐"}
{"content": "20160307，粗看一遍，基础数据结构和算法方面别的书里有讲到过。不过，前面几章内存分配等据说是重点，反而没怎么看懂。需要再看一遍。", "marks": "推荐"}
{"content": "对这本经典的书我已经无法用简单的词语来形容了。我只能说，学C/C++的人如果没有看过这本书，实在是可惜。对侯捷先生的代码剖析能力表示由衷的敬佩，是您把我带入了阅读优质代码的宝库！\np.s 2012.03.08, restart", "marks": "力荐"}
{"content": "还是不能一本满足，准备再看一遍源代码，顺便撸一遍编程的本质", "marks": "推荐"}
{"content": "烂尾书中的烂尾书，从开始看的相逢恨晚到现在的食不知味，一晃好几年过去了。书是好书，码农必看，不过到了30再看实在木啥必要了", "marks": "力荐"}
{"content": "絮絮叨叨的，看得真捉急。", "marks": "还行"}
{"content": "靠！下的一个电子版居然只有前四章，看完完全没得感觉，就对STL是怎么实现的有进一步的了解。说实话，STL只是对模板编程的一个典型应用。下一步我要去看BOOST了。", "marks": "还行"}
{"content": "勉强给个四星吧～", "marks": "推荐"}
{"content": "没完全读完，买了没多久被一个同事切走了……我恨他……侯捷写书非常认真，对源码解读也很到位", "marks": "推荐"}
{"content": "代码真经典，有些地方读不太懂，通过阅读该书，可以学到很多知识：算法，数据结构，stl等等", "marks": "力荐"}
{"content": "写的不错，但不一定非得掏钱买……主要是封装得很好的C++代码的可读性差一些，直接看java.util的代码就不一定需要书什么的了", "marks": "推荐"}
{"content": "对泛型的理解和框架的编写有一定好处", "marks": "推荐"}
{"content": "第一次给了四星。最近又翻了一遍，发现这本书是需要读者做更多的思考才能读好的书。跟大多数传授知识思想型的书不同，这本书可以看做是一个学习泛型和STL的guide。\n算法章节我个人感觉有点鸡肋，但是不写的话就不会是一本完整的关于STL的书。所以个人觉得精华在泛型部分。\n这本书需要多看代码，反复思考，然后再读作者的讲解，相信帮助会很大。", "marks": "力荐"}
{"content": "从此stl不再晦涩", "marks": "力荐"}
{"content": "两晚就读完了..", "marks": "推荐"}
{"content": "采用C++的软件项目团队必备...新人培训必读", "marks": "力荐"}
{"content": "经典书籍，书里讲了很多高效的数据结构。需要精读的一本书。抽空再重读一遍", "marks": "力荐"}
{"content": "有点老了，而且对异常安全着墨甚少，但仍是必读之作。", "marks": "力荐"}
{"content": "2016.9.27 读完. 用中午时间翻的, 继<深入浅出MFC>之后读完的第二本侯捷的书, 还是一如既往的精彩, 打算用c++的stl写程序的话, 这本书是越早读越好, 后悔看的有点晚了", "marks": "力荐"}
{"content": "侯捷大师代表作之一，清澈透彻，看完再用 STL，心里就有底许多了", "marks": "力荐"}
{"content": "模板编程太强大了", "marks": "力荐"}
{"content": "学习大家设计，对于使用和理解STL都大有裨益。同时通过阅读源码对于算法的学习也很有帮助。", "marks": "力荐"}
{"content": "很有收获，“看剖析，不看源码”，同学语，哈哈哈", "marks": "推荐"}
{"content": "应该是看得最快的一本技术书了。不想钻到实现细节，算法一概略过，翻起来相当快。模板这个东西真是让人又爱又恨，强大但复杂。相比之下，动态语言显得无比优雅。还是有很多思想值得慢慢体会。", "marks": "推荐"}
{"content": "天下大事，必做于细。源码之前，了无秘密！", "marks": "力荐"}
{"content": "划水时候读的…花了一天半…感觉对容器范型/stl的认识被刷新了（暴露C++菜鸡选手2333）…作为万物开端的STL肯定还有更多的秘密…应该早点读的(:3▓", "marks": "推荐"}
{"content": "功力不够 略读", "marks": "力荐"}
{"content": "茶余饭后的好科普", "marks": "推荐"}
{"content": "真心好书，发现好多大公司的面试里就是stl里的数据结构和算法。", "marks": "力荐"}
{"content": "源码剖析所以源码篇幅占了很大一部分，对一些数据机构的算法分析很到位，模板妙用除了traits并无太多出众的地方，CPP码农还是推荐看看。", "marks": "推荐"}
{"content": "知之所以然，才不会被其繁杂的外表所迷惑\n", "marks": "力荐"}
{"content": "终于翻了一遍了。。。。 \n这本书是在四年前，大二时候学c++时，买的，周老师推荐的。 ", "marks": "推荐"}
{"content": "前面讲allocator和iterator的章节确实不错。后面容器和算法部分，缺乏深度。总体感觉没有传言中的好，但还是值得一读。", "marks": "还行"}
{"content": "刷完一遍，对cpp理解不一样了，还需要再刷的书。", "marks": "推荐"}
{"content": "等于是重新复习下数据结构。还有挺多思想，比如配置器，函数对象，模板的技巧，挺不错。", "marks": "力荐"}
{"content": "侯捷说：我的确认为99.99%的程序员所写的程序，在SGI STL面前都是三流水准", "marks": "力荐"}
{"content": "很好", "marks": "力荐"}
{"content": "08年读这本书的的时候，惊讶用中文也可以写出高水平的计算机技术书籍。 时至今日，中文作者的高品质技术书籍已不算稀罕了。 这次买一本收藏是向作者致敬。", "marks": "力荐"}
{"content": "候捷的书，都是对要点解释得很清楚。非常不错。可惜我只看完了前面4章。", "marks": "力荐"}
{"content": "stl\n", "marks": "力荐"}
{"content": "看了这本书，对C++模版不再恐惧了。\n书中的Alloc感觉好难看懂，于是放弃了。迭代器的设计很有启发。数据结构部分，大多都学过了，很快翻完了。", "marks": "推荐"}
{"content": "2014-11-06", "marks": "还行"}
{"content": "好书，但是讲得不是很全，如非递归的快排、红黑树的删除都没展开讲讲", "marks": "推荐"}
{"content": "精巧的deque, 复杂的copy, 神奇的traits, 一览无余.", "marks": "力荐"}
{"content": "源码之前，了无秘密", "marks": "力荐"}
{"content": "适合初学者拿去应付各种公司面试的宝典，不管是否理解了，随便引一段还是挺唬人的。", "marks": "推荐"}
{"content": "对STL会有更深入的认识，如果以后要做c++开发，最好还是看一下。找工作面试也可能问到。", "marks": "推荐"}
{"content": "五颗星给STL库开发者，优美的代码", "marks": "力荐"}
{"content": "中规中矩吧", "marks": "还行"}
{"content": "此书名声大于其实用性", "marks": "还行"}
{"content": "早就该好好看看了", "marks": "力荐"}
{"content": "STL的魅力源于数学上是完备的", "marks": "推荐"}
{"content": "大概看看即可，阅读代码更佳", "marks": "还行"}
{"content": "看完C++ Primer后，不怕困难的话，可以直接入手该书学习数据结构。", "marks": "力荐"}
{"content": "看看design和code的技巧还是很有必要的", "marks": "推荐"}
{"content": "虽说是源码剖析，其实更注重于STL中的部分核心内容，读后很受用，不过进一步研究就感觉没有书名显得那么“全面”和“深刻”", "marks": "力荐"}
{"content": "历时一年多时间，断断续续，终于完成了第一遍阅读。\n迭代器/容器/算法；\ntraits编程技巧/空间分配器/泛型思维；\n平衡树/红黑树/函数对象/配接器；\n诸多C++中级乃至高级技术被作者娓娓道来，图文并茂，通过认真/反复揣摩，算是看懂了大部分，收获更是非常多。\n本书属于值得多次/反复阅读的经典书籍！以后会继续回来拜读！！", "marks": "力荐"}
{"content": "不如当做工具书吧。", "marks": "力荐"}
{"content": "看了80%，越看越激动，真的是编程之美啊～", "marks": "力荐"}
{"content": "对应了侯捷一直说的那句话：源码面前了无秘密。STL源代码并不算特别庞大，但如果初涉其中，一定会被各种形形色色的技巧，看似杂乱的组织给迷乱了双眼。但作者于万军从中取上将首级，提干契领，很快便抓住了主要脉落，但大刀阔斧之下又不丢失细节。尤其是在所有组件展开之后，优先介绍了空间配置器这一贯穿始终之物，为读者进入STL大门荡平了障碍，然后随着其对其它组件一一展开，酣畅淋漓。由于之前看过他的其它著作以及译作，非常喜欢他的写作风格，文字描述，图形，代码搭配得当，如网友所言，不知不觉左手边便积累起成就感。另外，通过这本书来复习数据结构再好不过，里面对各种二叉树、查找、排序等的描述非常详细，而且完全以效率至上，工业级的代码", "marks": "力荐"}
{"content": "对C++语言来说要求不高, 虽然都是模板, 只要了解了traits如何使用难度就降低很多了. rbtree和stl算法的实现简直就是面试题嘛...", "marks": "推荐"}
{"content": "facebook面试者直接考到里面的next_perm算法了，惊爆全场", "marks": "力荐"}
{"content": "真心好书", "marks": "力荐"}
{"content": "这本书看一下关于traits和container的实现就可以了，其它的没有什么看的必要。", "marks": "力荐"}
{"content": "把stl剖析的很清晰，", "marks": "推荐"}
{"content": "想要深入理解STL的设计，侯老师的这本书还是必不可少的，讲的非常清楚，包括vector的空间扩展方案、deque的底层实现、map/set的底层实现。", "marks": "力荐"}
{"content": "复习了一遍数据结构与算法，对STL内部紧凑优美的设计有了一定的认识。大师炉火纯青的编码技巧真是目不暇接。", "marks": "力荐"}
{"content": "侯jj的书简直就是质量的保障，看这本书可以顺便复习一下数据结构和算法", "marks": "力荐"}
{"content": "将STL的源码整理出来导读，有价值，但更重要是对模板和泛型的思想的引导", "marks": "推荐"}
{"content": "三分之二数据结构，三分之一C++特性编程和内存管理", "marks": "推荐"}
{"content": "理解STL和模板", "marks": "推荐"}
{"content": "只表示现在的认识，如果再给机会编程，如果不涉及到游戏类的，我会尽可能使用C，而不是C++，也不会是STL", "marks": "较差"}
{"content": "STL实现精华，以及泛型初步：）", "marks": "力荐"}
{"content": "里面的代码比vc里面的好懂多了", "marks": "力荐"}
{"content": "good when you are reading the stl code.", "marks": "力荐"}
{"content": "稍微翻过一点，不过我自己还是主要看STL的源码了", "marks": "推荐"}
{"content": "作为学数据结构来说，对cpp要求有点高了，不过确实是好书", "marks": "力荐"}
{"content": "能够深入理解STL内部实现，解释很详尽，很好~", "marks": "力荐"}
{"content": "(1)2015-12-31：不错，但有一些小错误；\n(2)2016-5-15：再过一遍。", "marks": "推荐"}
{"content": "非常赞同封底的最后一段\n\n> 参观飞机工厂不能让你学得流体力学,也不能让你学会开飞机.但是如果你机会开飞机又懂流体力学,参观飞机工厂可以带给你最大的乐趣和价值.", "marks": "力荐"}
{"content": "言之有趣，有料", "marks": "力荐"}
{"content": "图表很好，有点儿话多。", "marks": "推荐"}
{"content": "侯老师的书，经典，由浅入深，循序渐进", "marks": "力荐"}
{"content": "将近500页的书，开始以为会很难，结果扎进去之后感觉还行，书中很多图表示例，做得不错，比较有收获的是allocator、traits、deque和hashtable。", "marks": "推荐"}
{"content": "中规中矩。", "marks": "推荐"}
{"content": "只看萃取的那一章，当然我主要是看模板的，至于后面vector和list只是粗略看下，感觉这种看算法的书更好", "marks": "推荐"}
{"content": "想登上C++的山顶，它可助你一臂之力。", "marks": "力荐"}
{"content": "侯sir自己写书的说", "marks": "推荐"}
{"content": "工业标准的代码，值得多看几次", "marks": "力荐"}
{"content": "挺不错的一本书，深入介绍了stl的实现", "marks": "力荐"}
{"content": "想高性能使用stl，那得花点时间读读stl的一种实现，对于实际编程中选择合适的结构非常有用。", "marks": "推荐"}
{"content": "虽然我觉得过于依赖STL不好 但是STL确然是C++的精华之一", "marks": "推荐"}
{"content": "还行吧，没想象中的好，但这个类型的书，也就这么一本，没得选择", "marks": "推荐"}
{"content": "可以结合算法导论看，和面向对象没有多少关系。", "marks": "力荐"}
{"content": "流水账", "marks": "还行"}
{"content": "品读经典", "marks": "推荐"}
{"content": "读的时候多次出现以下状态：咦？怎么这么用？我擦还能这样？", "marks": "力荐"}
{"content": "不适合初学者的C++好书。 很不错的一本书籍。 改变了STL是庞然大物的看法。 轻巧，巧妙的设计。 内存池严密的逻辑。 迭代器精巧的设计。 以及一些常见的算法，都可以让你有似曾相识的感觉。 看完此书，会让你使用stl的信心进一步上涨。 ", "marks": "力荐"}
{"content": "还是要结合最新版本的stl源码去看，书里面介绍的版本貌似有点旧了==", "marks": "推荐"}
{"content": "这本书给人一种狗尾续貂的感觉。前面讲解非常详细。但是没有成体系。还是泛型编程与STL讲解的更加系统。但是这本书从源码级别上分析还是挺有意思的。", "marks": "推荐"}
{"content": "深入学习STL。", "marks": "力荐"}
{"content": "STL进阶必读. must read", "marks": "力荐"}
{"content": "学习STL实现的经典。", "marks": "推荐"}
{"content": "个人认为候捷最棒的两本书就是它和MFC那本了，这本书在理解STL中非常的过瘾，特别是前几章介绍数据结构的，在那段学习GP和STL的过程中，这本书很有价值，也很详细，顺便调试一下MFC、STLPort和vc9的STL库在内存管理里面微妙的处理，你会留下相当深刻的印象。\n很经典的读物，在STL学习中属于必读科目，当然也很庆幸是国人写的一本技术好书，另外一本就是WIndows图形编程啦，呵呵。", "marks": "力荐"}
{"content": "不适合作为学习STL的读物。倒是可以看看别人怎么剖析和阅读源代码的，阅读代码的时候思路很重要，可以从此书中借鉴一些。", "marks": "力荐"}
{"content": "不太好理解", "marks": "还行"}
{"content": "Do you want correct programs?", "marks": "推荐"}
{"content": "这本书有这么好吗？是不是过誉了？还是我自己的问题。", "marks": "还行"}
{"content": "让你的manager读一读！", "marks": "力荐"}
{"content": "你根本不能改变的话你就永远不会有改进。{旧的现状}—外来因素—{混乱}—正在转变的观念—{实践和综合}—{新的现状}。环境因素，胶状团队，人员流动的隐性成本。", "marks": "推荐"}
{"content": "翻译有让我不是在看中文的感觉", "marks": "还行"}
{"content": "版本老了点，10多年前的了，有些东西还有些借鉴意义，有些就过时了", "marks": "还行"}
{"content": "重读完毕，疑惑依旧，对这类书似乎已经有了免疫力", "marks": "推荐"}
{"content": "意淫一下可以", "marks": "推荐"}
{"content": "字字戳心。", "marks": "力荐"}
{"content": "3小时30分钟。不要把人当做单纯的机器来进行管理，而是要把人放在一个系统中进行思考，如何提高个体的生产力，降低个体之间的沟通成本。", "marks": "力荐"}
{"content": "《人件》第1版于 1987 年出版，专门讨论了软件开发和维护团队的管理问题，并向人们的传统认识提出了挑战。", "marks": "推荐"}
{"content": "义理在现实面前是崇高的、正确的，只是很难实现。", "marks": "还行"}
{"content": "看的是英文版, 中文版没看过", "marks": "力荐"}
{"content": "除了“家具警察”一段觉得有共鸣之外，其他的好像我不是很感兴趣。或者说我一开始就对这本书的期望太高了？", "marks": "还行"}
{"content": "我觉得，所有做与人相关的工作的，都可以看看这本书。尤其是管理那些好歹念过一些书的。", "marks": "力荐"}
{"content": "1、能够帮助一个项目凝聚起来的人比得上两个只做工作的人；2、人们在受到时间重压的时候不是工作得更好，只是工作得更快。", "marks": "力荐"}
{"content": "不知所云", "marks": "很差"}
{"content": "要给自己创造良好的工作环境。", "marks": "推荐"}
{"content": "读过英文，中文mark一下", "marks": "力荐"}
{"content": "观点很有启发，但有些冗长了，其实是4星半。\n但为了不让好书埋没，给五星", "marks": "力荐"}
{"content": "讲述的理念很好，但是不少的东西无法做到。对工作环境的要求太高，基本上很难达到。\n另外，太强调个人了", "marks": "推荐"}
{"content": "看的时候没多大兴致，比较适合老板去看吧", "marks": "还行"}
{"content": "本质上人是不可能管理的，成功管理的本质是使每一个人都朝着相同的方向努力。", "marks": "推荐"}
{"content": "读了一半，弃", "marks": "还行"}
{"content": "好书一本。", "marks": "力荐"}
{"content": "如果《人月神话》看着没啥赶脚，就翻这本吧~~~", "marks": "力荐"}
{"content": "一開始我覺得只是一本嘩眾取寵的書,但隨著深入,發現它其實挺深刻~~", "marks": "推荐"}
{"content": "请程序员们的上司读一读，原来偶们一直生活在水深火热中。", "marks": "力荐"}
{"content": "如果每个经理都按照这个做，那么开发人员多么幸福啊。", "marks": "推荐"}
{"content": "没有想象中那么好，但也不错了，只是，应用呢......", "marks": "推荐"}
{"content": "大概看看吧", "marks": "推荐"}
{"content": "对照自己的工作，好想给我老板看。", "marks": "力荐"}
{"content": "书是好书，可惜被翻译给毁了。建议豆瓣对翻译书籍增加一个“翻译评价”。", "marks": "很差"}
{"content": "获益匪浅", "marks": "力荐"}
{"content": "非常好的书，值得多次阅读。值得购买。", "marks": "力荐"}
{"content": "很不错，强调人在软件开发和企业中的作用，偏管理而非技术", "marks": "推荐"}
{"content": "呵呵，很多理论太经典了，不能不读啊。", "marks": "推荐"}
{"content": "这种翻译水平怎么好意思出书的 真佩服不要脸的", "marks": "很差"}
{"content": "读的第一本管理类的书，虽然目前看来和我关系的确微弱……翻译得很不错，启发也有一些。", "marks": "力荐"}
{"content": "从一个项目经历的角度，看如何管理人员识得他们高效率，深入到 被管理者（程序员)的思维模式中来构思，项目经理必读书", "marks": "力荐"}
{"content": "应该是借同事的书看的", "marks": "力荐"}
{"content": "每年读一次吧", "marks": "推荐"}
{"content": "因为人月神话，所以才买了这本，但是感觉远不如《软件工艺》", "marks": "还行"}
{"content": "看完有种豁然开朗的感觉。", "marks": "力荐"}
{"content": "三星半，四星吧，关于管理的书，翻译烂了点", "marks": "推荐"}
{"content": "建议每个管理人员阅读", "marks": "力荐"}
{"content": "本书于1987年出版，专门讨论了软件开发和维护的团队管理问题，并向人们的传统认识提出了挑战。作者在书中推崇人本管理思想，正确指出知识型企业的核心是人，而不是技术，呼吁给予软件工作者充分的自由和信任。本书于1987年出版后，立即在西方引起了轰动，被誉为“几十年来对美国软件业影响最大的理念”。", "marks": "力荐"}
{"content": "开发人员看了属于自我安慰,老板看了不会全都执行", "marks": "还行"}
{"content": "翻译的跟屎一样。", "marks": "很差"}
{"content": "从程序员角度考虑问题，细致又独到", "marks": "推荐"}
{"content": "软件以人为本。", "marks": "力荐"}
{"content": "几年前就买了，最近两周认真读完，受益匪浅。\n接下来会把大量精力投入到培育高生产力团队的工作中", "marks": "力荐"}
{"content": "管理重在理而不是管。无奈的是，这么多年过去了，大环境仍犯着书中提到的各种问题。书中关于编程语言的论述有的过时的。", "marks": "力荐"}
{"content": "吐槽佳作", "marks": "力荐"}
{"content": "好书，可惜翻译质量有点低。", "marks": "推荐"}
{"content": "以前曾经翻过一遍，没感觉，这次重看，醍醐灌顶，屡次激动得想哭。", "marks": "力荐"}
{"content": "2003年看过，忘记了内容", "marks": "还行"}
{"content": "充分关注到了程序员的状态，仅从人道主义来说，也是值得推荐的。", "marks": "力荐"}
{"content": "“大多数软件经理人乐于承认这样的观点：他们在人员上遇到的难题比在技术上遇到的难题更多。然而他们很少用这样的思想指导管理工作；他们做管理工作时，好像技术是他们关心的主要事情。”", "marks": "还行"}
{"content": "如何形成the Jelled Team，举出了技术管理方面的诸多现象与问题", "marks": "推荐"}
{"content": "这本书的观点对于公司管理人员很有启发，然而奇怪又不奇怪的是，从来在组织的执行中，正确的往往不被执行，而错误的却一直在进行。无论，读读这本书，会对自己有触发，可能不充分，但是也足够了。", "marks": "推荐"}
{"content": "以人为主的软件管理图书，5年前读过，当时的冲击力很大，但是都已经忘记内容了，就记住电话打扰工作什么的，呵呵，有空再度吧", "marks": "推荐"}
{"content": "只能算是暼了一眼，没有留下太深的印象。仍然觉得项目管理的理论太多，书太多，而实际有用的太少。", "marks": "还行"}
{"content": "可是，程序员也算“人\"吗？", "marks": "推荐"}
{"content": "翻译的像屎一样，准备看原版", "marks": "较差"}
{"content": "。。。。看完了还是没什么灵感", "marks": "还行"}
{"content": "开发中对人的‘管理’重于对技术的管理，这种‘管理’重在‘理’而不是‘管’，这种管理的核心理念是尊重开发人员、让开发人员‘快乐开发’，这种管理的最高境界是无招胜有招——看似无为，其实处处费尽心机。 \r\n", "marks": "还行"}
{"content": "曾送过这本书给boss", "marks": "推荐"}
{"content": "重视人，但是没有解决方案", "marks": "推荐"}
{"content": "或许是没有接触实际的项目？感觉前言和宣传有些溢美。", "marks": "还行"}
{"content": "软件工程必须读的经典之一", "marks": "力荐"}
{"content": "简单的管理读本，其中的空间优化，人员流动的隐形成本分析，胶冻状态构建值得管理者深思", "marks": "还行"}
{"content": "把人当成人来看待就够了", "marks": "推荐"}
{"content": "理解如何建立富有战斗力的软件项目团队，以及“Team”为什么如此重要", "marks": "推荐"}
{"content": "需要看N+1遍以及N+1年经验才能深刻理解的书", "marks": "力荐"}
{"content": "好久以前读了，有些文章不错", "marks": "推荐"}
{"content": "推荐~", "marks": "推荐"}
{"content": "中国国情啊中国国情......", "marks": "力荐"}
{"content": "在地铁上点完了这本书……原来Paul Graham和37signal的观点都是从这里发端的，此书提供了一个完整的视觉，去重新审视知识工人的需求，以及如何尊重这群新时代工人。关于团队建设一节多有启发，要找到或者培养起一支胶合团队并非易事啊", "marks": "推荐"}
{"content": "散，帕金森定律。工作会自动膨胀，工作流", "marks": "还行"}
{"content": "研一下看到研二开学，终于看完。每一章都做了笔记，有些章节说得挺有道理，但作者比较啰嗦，有时几个章节都在重复说一件事。有些地方很难理解，可能是西方人的思维和表述中国人不太习惯，也可能是翻译的原因，不知道作者想表达什么，有时候很散，抓不住一个章节的中心。不过本书核心可以说是以人为本。", "marks": "推荐"}
{"content": "关于时间、改变、工作空间、人际关系，社会学比技术更有生产力。", "marks": "力荐"}
{"content": "　一个团队的成功取决于五大要素：人力资源的管理；办公环境的协调；筛选适当的人才；高生产力的培育；工作心态的调整。\n　　\n　　这五大要素缺一不可，个人利益总是与团队利益有着千丝万缕的联系，只有团员积极向上才能让团队徐徐生辉，而要想让对团员积极工作，强制是愚昧的，咱们不能改变他人思想，但可以在工作上做到统一行动。 ", "marks": "推荐"}
{"content": "一口气读完的。", "marks": "力荐"}
{"content": "老外写书随便一引就能引到君主论什么的~", "marks": "推荐"}
{"content": "软件是对人的管理", "marks": "力荐"}
{"content": "人月神话介绍过这样一本书\r\n挺有意思，哈哈\r\n要是公司都按照这样弄的话 那不都圆满了。", "marks": "推荐"}
{"content": "不知所云", "marks": "较差"}
{"content": "太琐碎了，可能得等我工作了之后有所体会，才会有耐心慢慢读吧！", "marks": "还行"}
{"content": "一个安静的环境确实很重要。", "marks": "力荐"}
{"content": "前面还行，后面太多废话，不适合中国人读，翻译是个神经病", "marks": "还行"}
{"content": "简单直白可行的管理tips", "marks": "力荐"}
{"content": "这根本是一本应该改管理层去看的书。", "marks": "还行"}
{"content": "毫无疑问，任何需要团队协作的问题都可以归结为社会学问题。作者从经理的角度出发论述了时限、工作环境、工作逃避、无干扰时间、冻胶团队、团队杀手等一系列相关问题，足以说明人，而不是高科技，才是工程的核心和灵魂。", "marks": "力荐"}
{"content": "不错。可惜，现实就是现实。", "marks": "推荐"}
{"content": "感觉读着很不顺畅。", "marks": "还行"}
{"content": "软件工程与团队建设的入门书籍. 算是对目前软件开发过程的观察笔记, 没有完整性的指导意见.", "marks": "还行"}
{"content": "一本讲软件开发的书。非常不错。而且比《人月神话》读着要舒服的多——当然，这或许是由于后者的思想在包括这本书的许多书里头体现过吧。这本书主要关注“人”的问题，因而读起来非常令人舒服。有些事情让人感受颇深。", "marks": "力荐"}
{"content": "话太多，如果缩减成10页就有4星了。", "marks": "还行"}
{"content": "专注于码农", "marks": "力荐"}
{"content": "管理上最大的恶行是....浪费人的时间。说得真对啊，领导们咋就不明白了。我今天就彻底明白了，开会时间短，工作效率高。 这本书的不好在于翻译太差。唉，还是宝岛的翻译水平高啊", "marks": "还行"}
{"content": "经典是需要收藏滴", "marks": "力荐"}
{"content": "比起MMM， 我更爱这个。", "marks": "力荐"}
{"content": "翻译太屎了，内容应该也很屎，假装看过", "marks": "很差"}
{"content": "在那个时代交付出这样的观点集，让人钦佩", "marks": "力荐"}
{"content": "关注具体的细节，缺少提炼，这就是要求“悟”吗？", "marks": "力荐"}
{"content": "我所阅读的关于软件工程的第二本书籍，通过本书认识到人在软件开发中的重要性", "marks": "还行"}
{"content": "一本无限关怀开发人员的书，一本写给管理者的书。作为程序员读来，十分感动。老板对于你来说，不觉得建立一家世界上最关怀自己员工的公司比起建立一家只顾利益的机器公司在人生旅程上更有意义吗？", "marks": "推荐"}
{"content": "一套一套的理论，有大量的实践经验后再来阅读效果会很好，否则容易昏昏欲睡", "marks": "还行"}
{"content": "面向技术型人才的管理者", "marks": "力荐"}
{"content": "翻译的像屎，有空把原版找来再读一读", "marks": "推荐"}
{"content": "花了很长时间是总算是读完了  软件中，人才是最重要的 ", "marks": "力荐"}
{"content": "peopleware，力推。谁说流程比人重要和谁急", "marks": "力荐"}
{"content": "我表示我什么时候才会在一个和书中说的那样注重办公环境的公司啊。。书中说的好人性化啊，简直就是说出了程序员的心声啊。但是，", "marks": "还行"}
{"content": "！！！", "marks": "力荐"}
{"content": "很多公司都是把员工当零件啊，希望自己做领导时能让员工有归属感（啥时候做领导呢。。）", "marks": "推荐"}
{"content": "真没觉得这本书有多神品，尤其是翻译的话读起来使理解更困难，思路不顺。", "marks": "还行"}
{"content": "这一本软件管理的书其实是关于团队管理的书，而不是单一软件项目管理，坐在老板位置上的人看更合适。", "marks": "推荐"}
{"content": "第二次阅读，为了和科长们一起学习，发现里面有些理念也不全对；", "marks": "力荐"}
{"content": "翻译的不是太流畅，内容也不是太突出。因为时间的缘故，当时认为很新颖的观点，现在已经被大家反复强调并觉得习以为常了。", "marks": "还行"}
{"content": "peopleware讲的恰恰是不能把people当ware。研究生的时候读过一些段落，现在重看，颇多感慨。There's nothing new under the sun.", "marks": "推荐"}
{"content": "据说是微软的项目管理精髓，却发现内容并不是过时的东西。和做软件的同事聊聊，大家还是觉得相比新兴的一些硅谷巨鳄，微软的实力是很难低估的。我相信这是一本老板们不是特别喜欢的书，里面的核心“更关心人”，而不是技术，时间表和没完没了升级的质量指标。这是一本纯粹研发人员写给研发人员的书籍，而不是一本管理层强加给研发团队的行政命令。能有能力接受这样书籍的公司，的确是很伟大的。", "marks": "推荐"}
{"content": "每个项目经理和管理层都应该看一下。", "marks": "力荐"}
{"content": "经典，和人月神话组成软件工程的两本神书", "marks": "力荐"}
{"content": "不大符合实际。", "marks": "还行"}
{"content": "对cmm的评价很中肯啊！", "marks": "推荐"}
{"content": "软件工程经典书，主要关注软件开发中的人的作用。是员工，一定要给老板推荐看的。", "marks": "力荐"}
{"content": "书中提到的很多问题今天还是存在，还是一针见血。很多问题的存在有的是公司没有解决的能力与资源，有的是知道问题但却没有信心或没有兴趣去解决它。问题既然存在，那它的影响就不会消失。管理上不下功夫、投入，那代价自然要在项目、产品、人员等方面来扣除弥补。", "marks": "推荐"}
{"content": "临渊羡鱼，不如授之以渔，思考中", "marks": "力荐"}
{"content": "现在看还太早了，没理解", "marks": "很差"}
{"content": "书是好书，而且很有内容。但是被软件界的愤青引用的太过了。读起来反而觉得盛名之下其实难副。", "marks": "推荐"}
{"content": "智力性活动中人的因素，可惜现实中离这个太远...", "marks": "推荐"}
{"content": "软件行业一本不可多得的经典", "marks": "力荐"}
{"content": "软件管理真是很困难的事啊~~", "marks": "力荐"}
{"content": "解决之道-以人为本", "marks": "力荐"}
{"content": "经典就是经典", "marks": "力荐"}
{"content": "很有趣的书，人在软件开发中是最重要的。", "marks": "还行"}
{"content": "本书的题目应该改为:《如何提高码农福利》……", "marks": "还行"}
{"content": "以故事的形式来通俗易懂的讲述软件开发中的问题，比如团队、进度等。", "marks": "推荐"}
{"content": "THE Servlet book", "marks": "力荐"}
{"content": "做网站必看教材,很多实例直接可用", "marks": "力荐"}
{"content": "我的是中文版的", "marks": "还行"}
{"content": "数学味重", "marks": "推荐"}
{"content": "本来在5分档次的，可惜印刷错误太多了。瑕不掩瑜。", "marks": "推荐"}
{"content": "在算法书中，这本可以算是蛮差的了。要恶心自己的话，可以认真读一读", "marks": "较差"}
{"content": "介绍如何写一个完整的用例", "marks": "推荐"}
{"content": "OO,UML入门书籍", "marks": "推荐"}
{"content": "研究生教材", "marks": "推荐"}
{"content": "听过王老师的课，所以买了这本书，讲得简单明了。", "marks": "推荐"}
{"content": "讲的很全面，例子也很多，只是在网上看的电子书，案例里的图片都看不清。", "marks": "推荐"}
{"content": "传说中的CLRS  算法方面的经典～  但是个人觉得写得不怎么样～  刻意追求严谨无漏洞而不注重让读者容易懂  相比之下还是听老师讲课比较好   发现越牛的老师越是能用浅显易懂的方式讲给你听……", "marks": "还行"}
{"content": "本书的意义在于锻炼基础的算法思维和感觉，以及在日后的工作有能力发现或者构造适用这些算法的场景。如果有更好的基础，甚至可以改造某些算法来适应更特殊的需求。 ", "marks": "还行"}
{"content": "CLRS。算法课的教材。根本没学好，要找时间补课。", "marks": "力荐"}
{"content": "比较全面，大部分读完，课后题待作", "marks": "力荐"}
{"content": "终于可以把这本书看完了……", "marks": "力荐"}
{"content": "除了太厚，其他都还不错", "marks": "力荐"}
{"content": "CLRS", "marks": "力荐"}
{"content": "很早读的了，当时是就着MIT的那个24集教程读的。名符其实的启蒙读物。当时被感动的涕泗横流，哈哈，它打开了我心中的一堵墙。从此我对MIT刮目相看。", "marks": "力荐"}
{"content": "令人如痴如醉的 Chaper 25", "marks": "力荐"}
{"content": "读一半烂尾了，以后再读", "marks": "力荐"}
{"content": "读得不够细致。。。", "marks": "力荐"}
{"content": "启发而不是填鸭！", "marks": "力荐"}
{"content": "一本陪我长大的书", "marks": "力荐"}
{"content": "唔，不予置评了，算法入门书，入门书也能当砖头拍死你……", "marks": "力荐"}
{"content": "[昔时所读]英文书参考性看过一些。", "marks": "力荐"}
{"content": "这书不用我多说吧", "marks": "力荐"}
{"content": "尼玛，什么时候能把这本啃完啊！停止。。。。", "marks": "力荐"}
{"content": "高二（03年）的时候买的，为了NOI。结果后来也没看太多，把动态规划和网络流那部分看了下。", "marks": "力荐"}
{"content": "很经典，是优点但是也是缺点", "marks": "推荐"}
{"content": "zxq什么时候才从mit回来呢``", "marks": "力荐"}
{"content": "经典之作，学计算机的都应该看看", "marks": "力荐"}
{"content": "写得真好，数学证明没仔细看，还得再来过", "marks": "力荐"}
{"content": "写得很好 深入浅出", "marks": "力荐"}
{"content": "对于面试这本书是大大的好。对于计算机专业编程，这些东西早点弄清楚，可以少走很多弯路。", "marks": "力荐"}
{"content": "需要反复读的书。", "marks": "力荐"}
{"content": "工作需要时，可当作参考", "marks": "推荐"}
{"content": "对算法一窍不通。踏不下心来看啊", "marks": "推荐"}
{"content": "我心中的第二圣经...", "marks": "力荐"}
{"content": "搜录了各种常用的算法，值得收藏~", "marks": "推荐"}
{"content": "發現英文版不是很難懂耶～", "marks": "力荐"}
{"content": "讲解很清晰，内容很全面。但是，少了一些更深刻的洞察。", "marks": "力荐"}
{"content": "是机械出版社前一版吧。。大学的时候图书馆里看过。。。这个算是系统看完了的。。", "marks": "还行"}
{"content": "我日啊，课本", "marks": "力荐"}
{"content": "去年看了两遍，每一遍都有新的收获，书中将复杂的过程讲得很清晰，从原理出发", "marks": "力荐"}
{"content": "很不错，例子都有，而且解释很详细。当时图书馆借的，有点想买一本", "marks": "力荐"}
{"content": "CLRS", "marks": "力荐"}
{"content": "经典著作！将来再读给儿子讲算法！", "marks": "力荐"}
{"content": "算法导论 (Introduction to Algorithm), 在圈子里常常按四个作者的首字母写成 CLRS, 算是对不愿意看或者看不懂 TAOCP 的人送上了半个梯子(还有半个当属具体数学 Concrete Mathematics). 这本书在美国大部分大学中被列为算法类教材, 在国内也是 ACM 竞赛集训必看的教材之一. 虽然名字里面带一个导论, 内容却一点不含糊. 在我个人看来, 其内容基本覆盖绝大多数常用的算法, 在 NP 复杂性理论以及近似算法方面也有所涉及. 这本书最好的地方是习题详细且全", "marks": "力荐"}
{"content": "配合光头叔叔和大胡子叔叔的视频来看，效果更加。看过这本书之后我再也不怕看英文砖头了", "marks": "力荐"}
{"content": "一直想读完它，一直断断续续。真心的经典之作，作者的思路和深度都超过了我的预想。\n参照MIT的公开课，阅读速度翻倍了", "marks": "力荐"}
{"content": "教科书", "marks": "力荐"}
{"content": "训练思维，老顾讲的很好", "marks": "推荐"}
{"content": "ing", "marks": "力荐"}
{"content": "神书", "marks": "力荐"}
{"content": "本科读时感觉很难读，前阵子过了一遍，基本上都能接受", "marks": "推荐"}
{"content": "one more needed", "marks": "力荐"}
{"content": "2014-04-11", "marks": "还行"}
{"content": "CLRS... 证明严格, 内容全面. 语言有点罗嗦", "marks": "推荐"}
{"content": "算法经典", "marks": "力荐"}
{"content": "这玩意，算了，又爱又恨。。", "marks": "推荐"}
{"content": "还有比这个更经典的?", "marks": "力荐"}
{"content": "略显繁琐", "marks": "推荐"}
{"content": "这本书带领我走进了多彩缤纷的世界，如果当时没有读到这本书的话，人生轨迹也许都会完全不同。", "marks": "力荐"}
{"content": "买了没看，偶尔查一下", "marks": "还行"}
{"content": "很好的算法入门书籍，理论介绍恰到好处，适用于初学者。", "marks": "力荐"}
{"content": "基本过了一遍，略过了不少内容。[当年的教材，小声的说一句，我都快忘光了。重新读。]", "marks": "力荐"}
{"content": "好久没读英文原版书了", "marks": "推荐"}
{"content": "绝对经典", "marks": "力荐"}
{"content": "我就标注一下而已。", "marks": "力荐"}
{"content": "学了算法三年后再看，竟然感觉有点难。。。是我太渣了么。。。", "marks": "力荐"}
{"content": "数学之美, 美你妹阿...我还没入门\n", "marks": "力荐"}
{"content": "案头常备。可以跟MIT视频一起边看边读。", "marks": "力荐"}
{"content": "其实英文版才能读懂", "marks": "力荐"}
{"content": "一本算法经典，读懂了的话变成必然大有精进，可惜当时囫囵吞枣马马虎虎，现在没机会再读。", "marks": "力荐"}
{"content": "D.E.Knuth 的学生都不一般。。", "marks": "力荐"}
{"content": "无可非议的Bible，准备看第二遍巩固一下。", "marks": "力荐"}
{"content": "好书，那个leiserson在 MIT 的讲课视频也是要看的，真是大牛的风采，那个助教讲的也不错。特别有意思的是Leiserson讲的那个用双手做乘法的小算法。", "marks": "力荐"}
{"content": "原版的读过，影印版的也看过。", "marks": "力荐"}
{"content": "算法入门的书籍中，难得的好书。教参也丰富，mit提供视频资料。", "marks": "力荐"}
{"content": "书是本好书，但是东西真的讲的挺多，需要花时间慢慢去体会 ", "marks": "力荐"}
{"content": "好书，可惜至今没有领会精髓", "marks": "力荐"}
{"content": "没有好好读。", "marks": "推荐"}
{"content": "貌似这是最后一版影印版的算法导论了，现在国内都只有中文版的了。", "marks": "推荐"}
{"content": "当年大二下的时候和lipeng一起在武汉好不容易找到这本书，还跑到武大东湖分校那边去取书，结果到现在我都还没读完，lipeng的书都不知道跑哪儿去了...", "marks": "力荐"}
{"content": "数学证明非常有力", "marks": "推荐"}
{"content": "非常非常好的书，推荐多次阅读，并且做后面的习题", "marks": "力荐"}
{"content": "Classical textbook from MIT.", "marks": "力荐"}
{"content": "经典算法教材，讲解很详细。", "marks": "推荐"}
{"content": "这本书挺经典的，用的类pascal的伪代码，代码规范，讲解也比较清晰。", "marks": "力荐"}
{"content": "很厚的一本书，需要啃的一本书", "marks": "还行"}
{"content": "教材...", "marks": "力荐"}
{"content": "深奥，深奥！需要多读多学！", "marks": "力荐"}
{"content": "四大牛合著，经典非常", "marks": "力荐"}
{"content": "我的启蒙图书", "marks": "力荐"}
{"content": "算法就是哥心中的痛……", "marks": "力荐"}
{"content": "第一次发现原版图书是那么亲切，怀念那些读软工的日子。", "marks": "推荐"}
{"content": "大二的必修课教材，经典", "marks": "力荐"}
{"content": "MIT press", "marks": "力荐"}
{"content": "= = 看到自己初中的时候写得密密麻麻的单词翻译实在是蠢爆了...", "marks": "推荐"}
{"content": "研究生课程的教科书！这门课程是我当时成绩最好的，95分！", "marks": "力荐"}
{"content": "这书满分不谈了吧。", "marks": "力荐"}
{"content": "本书对算法和数据结构描述特别详细和深入，值得仔细研读。数据结构方面再介绍得全面些就好了", "marks": "力荐"}
{"content": "本人读的第一本全英文的技术书籍，非常nice", "marks": "力荐"}
{"content": "基础", "marks": "力荐"}
{"content": "提升内功必备。", "marks": "力荐"}
{"content": "这本英文的算法导论是我看过的解释算法比较清晰的一本。", "marks": "力荐"}
{"content": "读的最用心的书", "marks": "力荐"}
{"content": "虽然说这是经典，但里面大段的数学符号、公式和伪代码，数学基础不好者，或者没有一定算法基础的读者，建议慎重选择，起码去书店，往后面多翻翻，看看能不能看懂再决定买不买。我推荐算法竞赛宝典这本书，新出的", "marks": "还行"}
{"content": "这学期CSOR4231才开始接触这本书，计算机最本质的数学原理引人入胜。想起了最初王子屯儿老师说的一句话，有人问为什么要学习算法，其实应该问的是，为什么不呢。\n\n原来Clifford Stein是哥大的，这下找到了一个剁手的理由。", "marks": "力荐"}
{"content": "非常的详细，最初我也是指望通过这本书学会读大型代码。后来发现，真正让我学会读大型代码的还是了解功能和debug。", "marks": "推荐"}
{"content": "作者写书不多，但都是精品。学会阅读代码是一个合格的程序员的基本功！", "marks": "力荐"}
{"content": "可读性不强，整体糟糕", "marks": "还行"}
{"content": "附录B才是精华。", "marks": "较差"}
{"content": "永远的经典!", "marks": "力荐"}
{"content": "我还是很欣赏这本书的, 起码选题就很有特色. 其实我当它是C语言技巧书 :)", "marks": "推荐"}
{"content": "感觉这本书没有想象中好。", "marks": "还行"}
{"content": "大部分工作都是在既有代码上的＝ ＝ 并且还有一些动不得  不管你怀疑那部分到底有没有问题  这本书不可避免滴成为了必修⋯⋯", "marks": "还行"}
{"content": "书名很吸引人，不过对内容的组织感觉有些糟糕，三百多页的书几乎一半以上介绍控制结构和简单数据结构，要说学习这方面这么点篇幅高不成低不就。工具介绍方面还算可以，最后的一次实际例子好好学习也能有所收获。总体而言包含了太多和主题无关的内容", "marks": "还行"}
{"content": "烂书烂翻译", "marks": "很差"}
{"content": "borrow from bob", "marks": "推荐"}
{"content": "应该刚学完c的时候看", "marks": "还行"}
{"content": "有些道理直到现在还很有用", "marks": "推荐"}
{"content": "有点太宽泛，又有一点锁细。", "marks": "还行"}
{"content": "我没有读完，但是总感觉对我的帮助不大，总之这本书对读者的“觉悟”有很高要求，要能和作者产生共鸣，但是从各方面的反应来看，这本书应该是一本好书。", "marks": "还行"}
{"content": "偏爱后面的章节，比较大纲", "marks": "推荐"}
{"content": "TP311.11/4814", "marks": "还行"}
{"content": "扫读，看完没啥感觉", "marks": "还行"}
{"content": "大概过了一遍，但是感觉没有看的特别的清楚，没看出来好在哪里，这本可是获奖书籍。", "marks": "还行"}
{"content": "不错的一本书, 从下向上的讲解了代码阅读的方法, 很系统, 尤其适合C/C++的程序员. 也适合在校的大学生学习", "marks": "还行"}
{"content": "有些文不对题，虽说语法模式架构等等是阅读代码的基础，不过借着讲阅读代码讲了一大堆就有点凑篇幅的嫌疑了。把开头和附录过一下就差不多。", "marks": "较差"}
{"content": "怎么说呢，这本书主题写的比较乱，没有突出重点，另外，写的内容过于偏重C的一些技巧，这貌似和主题不太靠谱。要是自己实际参加过开源项目的话就别看此书了，可以看看谷歌的C++编程规范，比这个写的好。", "marks": "还行"}
{"content": "还是很不错的，适合读代码时参考一下", "marks": "推荐"}
{"content": "这里不是没有规则，本书的确也在努力制定，但很显然，它失败了。。。", "marks": "还行"}
{"content": "只是通篇浏览了一遍，和想象的差别很大", "marks": "较差"}
{"content": "看完以后发现神马都没学到。。。", "marks": "还行"}
{"content": "我只能说还行吧。很多东西虽然有小部分代码，但是还是觉得讲的很空洞。希腊的作者，能把代码阅读做题材写一本书，可见作者还是很用心的。那就再加一分吧，本来要给三分的", "marks": "推荐"}
{"content": "学会读代码是每一个软件工程师的入门技艺", "marks": "推荐"}
{"content": "粗略地看了电子版的，文不对题。书中内容和书名想去甚远，书中大部分都是C语言编程细节，而很少有提及阅读项目代码的方法。无收获", "marks": "很差"}
{"content": "不知道要干嘛，也没有太大启发，没有读完", "marks": "较差"}
{"content": "读了一部分", "marks": "力荐"}
{"content": "很新颖的视角,从阅读代码的角度来谈如何写代码", "marks": "推荐"}
{"content": "想向开源方向发展的孩子～最好看看这本书～", "marks": "推荐"}
{"content": "能直接改名叫语法大全么，以为多么炫酷的一本书，哎。", "marks": "较差"}
{"content": "讲了很多程序结构性的东西，看了第六章往后的内容，还是没觉得讲了多少实际内容，多数是重复。总体来说一般。另外，翻译很差，不如看原版", "marks": "还行"}
{"content": "原版应该不错，附带不少奇技淫巧，就是翻译的不咋样。”makefile“翻译成“制作文件”,是用机器翻译的吗", "marks": "还行"}
{"content": "专门讲代码阅读技巧的书这是第一本，题材比较新颖，而且对软件工程师来说也足够实用。作者显然在开源软件中浸淫许久，举例佐证都很丰富，几乎是顺手拈来。适合扩大下自己的眼界，从高层看：学习如何分解大型的开源软件源码库，从低层看：单个的函数，语句，C编程的惯用法等等。", "marks": "推荐"}
{"content": "这本书最有价值的部分，恐怕只是每一章末尾的进阶阅读列表", "marks": "较差"}
{"content": "写的比较深。", "marks": "力荐"}
{"content": "还想看一遍，许多内容可以与“.NET环境编程全景”相佐的", "marks": "力荐"}
{"content": "跟CLR Via C#一起读的，对照着读，理解更深刻，这本专门讲编译原理和过程，提及了很多MSIL代码。", "marks": "推荐"}
{"content": "深入介绍了CLR，不过难度很大，翻译的一般，一定要多读几遍才能充分理解其中之意，有几个地方我看了2遍没太看懂。", "marks": "力荐"}
{"content": "看了一半", "marks": "推荐"}
{"content": "对clr有比较 深入的介绍，虽然有些语句或名词翻译的不太准确，但整体的结构非常清晰，看了后对crl有一个结构化的认识了", "marks": "力荐"}
{"content": "前半部分还好，后面太底层了，如果平时用不到相关内容的话看起来很吃力", "marks": "推荐"}
{"content": ".NET底层机制深入探讨的好书", "marks": "力荐"}
{"content": "第二遍看了，还是难的要死。我用.NET算起来也有七年多了，虽然水平烂的满大街，但就算水平比我再高几个级别的我想也很难把CLR说的很清楚。就像美女蒙着面纱，一阵风吹过面纱漏出冰山一角，凝目去看奈何近视，急走过去待细瞧时，面纱又落回去了，芳容总是若隐若现看不真切。很郁闷。", "marks": "力荐"}
{"content": "很难懂，不过写的超好", "marks": "力荐"}
{"content": "学习.NET很不错的书。", "marks": "力荐"}
{"content": "课本", "marks": "推荐"}
{"content": "C++数据结构与程序设计", "marks": "力荐"}
{"content": "机翻版", "marks": "很差"}
{"content": "大二看过一遍，现在再看，记忆犹新，少数几本看完以后感觉得到升华的书 ", "marks": "力荐"}
{"content": "只看了想看的几章. ", "marks": "力荐"}
{"content": "译的很差，原版书还行，学数据库的不妨一读", "marks": "推荐"}
{"content": "没看完呢", "marks": "推荐"}
{"content": "不知道是我自身水平问题还是什么，整本书读起来极端的晦涩难懂；生产中的数据库好像也没有这么难啊，mysql的实现也不是不可理解啊。\n这本书的最大贡献其实就是让我们明白在各个层面上存在的事务特性=原子特性，其他以我目前的水平，确实获取不到更多......", "marks": "较差"}
{"content": "jim gray的大作当然值得推荐，只不过读起来比较晦涩，可能因为功底不够吧，近期才对一些章节很有感觉。现在想读明白10-12章，关于事务管理器的。有感兴趣的章节再继续读吧。", "marks": "力荐"}
{"content": "事务处理领域的权威著作，数据库大师Jim Gray智慧的奉献。", "marks": "力荐"}
{"content": "虽然lnw就是张学文定义的c，只不过整合了不同的名词，但是本书的结构臻于完美。", "marks": "力荐"}
{"content": "原创", "marks": "推荐"}
{"content": "作者的视角和想法都很独特。使我看完后，更加认为，世界由能量的振动而同时产生时间、空间、物质、狭义能量。由完全禁止的虚无，瞬间创造一切并延续！", "marks": "力荐"}
{"content": "拜拜垠神的老板之一。。。", "marks": "力荐"}
{"content": "这不是程序语言，这是纯智力游戏。", "marks": "推荐"}
{"content": "刚下了一本，159页？但是却标明第４版啊", "marks": "推荐"}
{"content": "第9章的Y combinator可以参考http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html 和 http://cuipengfei.me/blog/2013/04/09/make-y/", "marks": "力荐"}
{"content": "以前窝mm跟窝说，要改当码农挣大钱养我。然后就教了她老scheme，再后来好像也没有变成码农挣大钱，具体怎么回事忘了。LISP好，大家一定要多学LISP。", "marks": "力荐"}
{"content": "Felleisen: study hard and enjoy", "marks": "力荐"}
{"content": "第八章凶起来了……continuation和 Y combinator还需要时间理一理，还有那个解释器", "marks": "力荐"}
{"content": "所有讲程序设计语言的书里最神奇的存在。", "marks": "力荐"}
{"content": "好基础额", "marks": "还行"}
{"content": "前面七章是可以快速扫过的铺垫 最后三章才是重点 Lambda/Y Combinator的介绍 如果不是用LISP 去掉一些阻碍人类阅读的多余括号的话 应该不会那么难懂(看) ...", "marks": "推荐"}
{"content": "言簡意賅的表達了scheme的設計思想 最後兩個Chapter講Y combinator和interpretor真的講的很精彩", "marks": "力荐"}
{"content": "由于从小接受苏联式课本教育，遇到这类循循善诱的讲授方法便很不适应。但无论如何，学习一门新语言，就像去异邦旅行。不得不说这个地方很新奇。", "marks": "还行"}
{"content": "这个风格实在是太适合做教材了，自问自答、精辟到位，而且知识点是系统化组织起来的。建议软院爱尔兰班FP课程采纳。", "marks": "力荐"}
{"content": "学习S表达式最好的入门书籍，强烈推荐所有对编程感兴趣的人阅读，而且这本书的写作形式与内容高度统一，必须说是神作。", "marks": "力荐"}
{"content": "短小精悍，学习scheme入门最佳书籍。", "marks": "力荐"}
{"content": "Comupter Scienist，都是心理学家其实，随和亲切，春风化雨，simple is best// 8.9.10三章，太棒了", "marks": "力荐"}
{"content": "看这本书期间，我梦到自己递归递归...直到醒时才找到出口", "marks": "推荐"}
{"content": "函数编程和递归入门，问答形式新颖易读。Y Combinator现在还没彻底明白。需要再读。", "marks": "力荐"}
{"content": "read it in an hour during flight from boston to dallas... kind of smart and tricky ways to describe the lisp=)", "marks": "力荐"}
{"content": "非常喜欢这种书，非常多的练习，循序渐进的引导....lisp语法很简单，但语言的表现力却让人着迷不已....授人以鱼，不如授人以渔，谢谢作者Daniel 让我深切的体会到主动的思考和不断练习的好处...要看seasoned版了，宝盒里面究竟藏着什么东西呢", "marks": "力荐"}
{"content": "learn scheme in hard way", "marks": "推荐"}
{"content": "这算是哲学书吗？", "marks": "力荐"}
{"content": "健脑，防止老年痴呆要从青年抓起。", "marks": "力荐"}
{"content": "前面还觉得有点啰嗦，从倒数第三章末尾开始：continuation，停机问题证明，y combinator，scheme解释器的一个非常简洁的实现。Wow", "marks": "推荐"}
{"content": "理解递归。", "marks": "力荐"}
{"content": "非常有意思的书。", "marks": "力荐"}
{"content": "形式新颖，举重若轻", "marks": "推荐"}
{"content": "这文体真是坑爹啊..", "marks": "还行"}
{"content": "适合6岁以上儿童阅读~", "marks": "力荐"}
{"content": "clear and lovely part of Scheme.\nbefore you touch the real world complex Scheme", "marks": "推荐"}
{"content": "Scheme语言的入门神作。", "marks": "力荐"}
{"content": "奇妙的方式講解了遞迴的本質、Scheme 直譯器，一本很好的腦力練習書。", "marks": "力荐"}
{"content": "其实还差最后三章，已经忍不住要给它打分了", "marks": "力荐"}
{"content": "Functional Programming + Recursion 正确启蒙方式", "marks": "力荐"}
{"content": "1到7章很简单，后三章却是另一个难度。第8章让你意犹未尽，这是一种很有意思的技巧，却不知道它具体是怎么运作的。还好看过Y算子，不然第9章就完全如坠雾中了。最好去找找第10章的完整代码，否则就会陷入无尽的代码片段中。总的来说，内容很给人启迪，回味无穷，仿佛自己能给出更精彩的诠释，可实践过却发现真的很难，更感叹作者的不易。", "marks": "推荐"}
{"content": "Amazing enlightenment!", "marks": "力荐"}
{"content": "不太适应这种一问一答的写作风格", "marks": "力荐"}
{"content": "教学真不错。", "marks": "力荐"}
{"content": "这本书对我的价值不大。。\n不喜欢这种写作方式。。", "marks": "还行"}
{"content": "小书才能读完...", "marks": "推荐"}
{"content": "很好玩很好读⋯⋯两个小时读完吧如果有一点点程序基础", "marks": "力荐"}
{"content": "第九章applicative-order Y combinator好懵好懵好懵 救命啊", "marks": "力荐"}
{"content": "javascript 的根在scheme上", "marks": "力荐"}
{"content": "一问一答的形式组成了正本书。很有特色，写得也很好。", "marks": "推荐"}
{"content": "看了几章。得出了如果不是入门就看SICP的评价。", "marks": "还行"}
{"content": "太有爱的", "marks": "力荐"}
{"content": "前七章都是虚的，后三章才是正经。好吧，我是第一次见应用序的 y 组合子，之前只推导过正则序的", "marks": "力荐"}
{"content": "关于LISP，最佳入门书籍", "marks": "力荐"}
{"content": "好书，以前居然以为简单没看下去......不是简单，是基础。第一本从头看到尾的英文书。", "marks": "力荐"}
{"content": "第一次读问答式类的书，比较细节", "marks": "推荐"}
{"content": "幽默风趣的对话式讲解风格，作者相信读者能自己顿悟的递归思想，广度涵盖的也不错，深度稍有欠缺，但不是有SICP总结了吗？，呵呵", "marks": "力荐"}
{"content": "基本上花四五个钟头就能读完了。前半部分主要介绍了Scheme里的一些概念，十分简单。书的精华主要在后半部分，包括currying、continuation。然后推导了一下Y Combinator。最后实现了一个Scheme的解释器。", "marks": "力荐"}
{"content": "经典好书。", "marks": "力荐"}
{"content": "虽然号称是入门书， 看懂却不容易。", "marks": "力荐"}
{"content": "在 google books 上有电子版的，不过缺少 chapter 6 Shadow", "marks": "推荐"}
{"content": "比较容易的一本书。一是题目难度小，边看边写把大部分题都做了；二是不需要英文水平。比起sicp第一章就做数学运算，这本书更适合入门。", "marks": "力荐"}
{"content": "很棒的书。作者也是略鬼才了，各种奇葩例子绕你。然后很轻松的又抖落出一些重点。", "marks": "力荐"}
{"content": "很洗脑", "marks": "推荐"}
{"content": "第九章读不进啊读不进，第十章找不到啊找不到", "marks": "力荐"}
{"content": "打印了整本书，搞得我一个墨盒快用完来。以后再也不打印了。正本书循序渐进，中间介绍了Scheme中的重要概念和编程习惯。我是第一次接处觉得，在语法和概念上都需要跟深入的学习。作者也说了本书只是一个介绍（introduction)", "marks": "推荐"}
{"content": "入门，对lisp的基本元素有一个大概的了解。虽然是schemer，但是跟common lisp差不多", "marks": "力荐"}
{"content": "努力读！", "marks": "力荐"}
{"content": "short and inspiring", "marks": "推荐"}
{"content": "Y combinator彻底服了，附录一堆逻辑学的书，以及第三版还是有习题的，最后一章讲parser，续作估计就接着进一步实现和讲一些过程抽象吧，不想再看了= =。。。这书读着累，还是SICP顺手。。。", "marks": "力荐"}
{"content": "两百页都不到，停机问题和Y combinator都写了，抵啊。", "marks": "力荐"}
{"content": "清晰.简洁.比htdp写得好.", "marks": "力荐"}
{"content": "funtional programming, recursion, lambda calculi, ycombinator\n2015.1 又敲了一遍 大道无形啊", "marks": "力荐"}
{"content": "9,10章难度远大于前面。", "marks": "力荐"}
{"content": "虽是入门后面五章很值得深究【thank you", "marks": "力荐"}
{"content": "以前看过R5RS报告，所以只是快速抽了几个讲解的例子看了一下，发现语法都知道了，于是粗粗扫过。而函数结构那部分有其他教材学过，所以也直接扫过。", "marks": "推荐"}
{"content": "很有爱的写作方式。。。", "marks": "力荐"}
{"content": "一问一答还讨厌而且啰嗦死了", "marks": "力荐"}
{"content": "介绍Applicative Y Combinator和Continuation (as collector)的部分很有启发性", "marks": "力荐"}
{"content": "看到最后一章实在看不懂了，话说要适应作者写书的方式还是困难啊。", "marks": "还行"}
{"content": "看看", "marks": "推荐"}
{"content": "垠神助我快乐成长", "marks": "力荐"}
{"content": "每一章都不能跳过，上一章没吃透一定不要看下一章！！你会看到符号推导的美感。", "marks": "力荐"}
{"content": "作为教科书的地位可能不会有sicp高~毕竟是一本小册子嘛~但确实是一本深入浅出的好书~", "marks": "力荐"}
{"content": "一气呵成，看着不是一般的爽。现在越来越喜欢函数式编程这种思想了，大开眼界。", "marks": "力荐"}
{"content": "烧脑", "marks": "力荐"}
{"content": "最后2章看的有点马虎", "marks": "力荐"}
{"content": "读完第一本全英文的书，可喜可贺。后三章看得脑袋都快糊了。", "marks": "力荐"}
{"content": "很有意思，Scheme入门必读！！！", "marks": "力荐"}
{"content": "最后一章讲解释器反而不如第九章讲停机问题和 Y 组合子难……打开了 Lisp 世界的大门", "marks": "推荐"}
{"content": "-。-后面两章讲得实在云里雾里的", "marks": "推荐"}
{"content": "Reproduces half of SICP in a 100 pages", "marks": "力荐"}
{"content": "书很简单，但这个语言有何用处？不大理解", "marks": "力荐"}
{"content": "第8、9章真是难到冇朋友。#BrainAndMemoryOverflow#", "marks": "力荐"}
{"content": "λ演算 - 维基百科，自由的百科全书 http://t.cn/zlPODvb 不动点组合子 - 维基百科，自由的百科全书 http://t.cn/zY3tfwX", "marks": "力荐"}
{"content": "编程界的几何原本。对 Y Combinator 的解说较艰涩，可参看 http://stackoverflow.com/questions/10499514/y-combinator-discussion-in-the-little-schemer。", "marks": "力荐"}
{"content": "残害小朋友读物 code:https://github.com/pkrumins/the-little-schemer", "marks": "力荐"}
{"content": "https://github.com/pkrumins/the-little-schemer", "marks": "力荐"}
{"content": "for beginner", "marks": "推荐"}
{"content": "很神奇的书，用问答的形式教你Schemer和FP，目标是为了说明这很简单，所以感觉把传授的对象当个傻逼一样教。", "marks": "力荐"}
{"content": "新奇的入门书编写模式，有趣", "marks": "推荐"}
{"content": "sicp简化版 相比来说sicp中有些部分实在冗长得让人抓不到point", "marks": "推荐"}
{"content": "一般的教材，往往一开始接触的都是一堆全新的概念，让人难以消化。必须通过后续不断的接触，回头来看时才能恍然大悟。这是因为作者没有站在初学者的角度，理所当然的把概念先陈述，而不是像自己一开始思考的过程那样来讲述。这一点在刘未鹏老师的博客中很好的解释了，而这本书，由清一色的问题组成，由浅到深，没有太多概念，更多的是例子，以苏格拉底式的教学法逐步将scheme的知识教给我们。作为入门书实在是一流。更深入的学习则需要看SICP了", "marks": "力荐"}
{"content": "commandments非常受用", "marks": "力荐"}
{"content": "recursion", "marks": "力荐"}
{"content": "可入选“中学生必读丛书”，全书只在传达“递归”这个概念，行文轻松愉快，采用对话形式，reader-friendly。唯一的缺点是，函数命名不符合现在的常见约定，是为了缩短函数名？函数名长一点真的无所谓，最好能一眼看出来是干什么的。", "marks": "力荐"}
{"content": "【差最后两章没看】王垠非常推荐的一本学习函数式编程思想的书。本书由浅入深、系统描绘了如何使用递归思考编程问题的全过程（在书的最后两章还给出了Y combinator的推导）。非常推荐，安丰春同学很早就看这本书了。", "marks": "力荐"}
{"content": "竟然看完了", "marks": "力荐"}
{"content": "原来一直习惯自顶向下的方法论，本书介绍了另外一种需要更高要求的方法论：Bottom up", "marks": "推荐"}
{"content": "适合与SICP一起看", "marks": "力荐"}
{"content": "第9章cool:   define \"length\" function without \"define\"", "marks": "推荐"}
{"content": "以问答方式组织，思路很有新意，但全篇都这么搞，就太极端了，非常不利与找到要点，几乎逼着从头到尾follow他的每一个例子。尤其可恶的是，他的很多recursion都有重复之嫌，讲得真心罗嗦。果断1星", "marks": "很差"}
{"content": "作者你是在玩吗?", "marks": "力荐"}
{"content": "这个也是：）", "marks": "力荐"}
{"content": "最后三章太精彩了，需要二周目", "marks": "力荐"}
{"content": "嗯，入门书，循循善诱吧", "marks": "力荐"}
{"content": "学而时习之，不亦悦乎", "marks": "力荐"}
{"content": "小白Lisp及函数式编程入门的绝佳好书~", "marks": "推荐"}
{"content": "非常不同的风格，我不认同王垠对Friedman过分高的评价，但我不得不说他是一个鬼才。", "marks": "力荐"}
{"content": "A very enlightening experience about recurring guided by the author.", "marks": "力荐"}
{"content": "可以更好的理解递归，就爱读这种言简意赅的技术书。", "marks": "推荐"}
{"content": "最后几章有点意思", "marks": "力荐"}
{"content": "经典! 写了一篇相关的文章：http://martin-liu.github.io/#!/article/6", "marks": "力荐"}
{"content": "相见恨晚", "marks": "力荐"}
{"content": "不要以为书里画满了大象和小象就很简单，最后三章分别讲了csp、y组合子和closure，讲的那叫一个啰嗦啊……窃以为y组合子讲的不如我在知乎上700多字的回答容易懂，哈哈", "marks": "力荐"}
{"content": "看这本书的缘由，说起来不好意思的。主要看scip看着头痛，看到第二章的时候，做里面的习题做着头疼脑热的，看看能否对scheme语言有一个简要的介绍就在网上看到此书，有人评论此书可以做为scip的基础书，我读后感受是最好在读完scip的第一章和第二章中关于list的概念之后就可以阅读了。毕竟这本书一上来就是各种lambda表达式、以及scheme中内置的函数。\n\n本来想花一周的时间将此书看完，不厚也就200多页。但是期间加班比较严重，后面自己玩游戏也比较多，导致拖到今天才看完。\n\n作者在自问自答的方式中介绍5条原则和10条告诫。这些都是通过一个个实例进行论证说明的。总之，此书值得一读，喜欢这种自问自答的方式，感觉是对一个个知识点不断采掘。", "marks": "推荐"}
{"content": "让我深入理解了lambda演算的本质，就是递归. 如果你想理解计算的本质，那来读这本书吧，今年读过的最好的书", "marks": "力荐"}
{"content": "没什么必要看，直接上SICP吧", "marks": "还行"}
{"content": "通过简单的例子，教会你思考什么是递归、如何递归。", "marks": "推荐"}
{"content": "great fun", "marks": "力荐"}
{"content": "看完评论，再回去看才发现第八章是讲的CPS", "marks": "力荐"}
{"content": "最后三章值得反复看", "marks": "力荐"}
{"content": "最后两章似懂非懂，离运用自如还很远。", "marks": "力荐"}
{"content": "(((((((((((((((((((((((((((((((((((!)))))))))))))))))))))))))))))))))))", "marks": "力荐"}
{"content": "大师能把复杂的问题简化。", "marks": "力荐"}
{"content": "看到8章，用nu操练有点感觉了", "marks": "推荐"}
{"content": "初次翻开时看到问答形式的内容还以为是引言，渐渐才发现通篇都是这般腔调，确实是引导思考的不错方式。FPer必读，半天时间可以看完。", "marks": "力荐"}
{"content": "作为入门非常好，最好先看下lambda calculs", "marks": "力荐"}
{"content": "这本书最精彩的就是8，9，10三章了，分别讲CPS，Y Cmobinator 和解释器，很值得一读，很好的一本书，5星推荐。 ", "marks": "力荐"}
{"content": "还得多刷几遍才行…", "marks": "力荐"}
{"content": "牛逼到爆炸，为自己的短见自惭形愧。", "marks": "力荐"}
{"content": "真的很愉快的阅读过程。", "marks": "力荐"}
{"content": "详细展示了每个函数的流程，不是scheme的每个方面都讲，只讲透一个点，递归。如果读完SICP前三章，读这个很轻松，当然最后两章稍稍有点复杂，多在纸上操作几次应该就可以理解了", "marks": "推荐"}
{"content": "知其然,不知其所以然", "marks": "推荐"}
{"content": "内容由浅入深，适合程序员看，也适合不从事编程工作的普通人看，极有效的训练人的思维能力，将读者引入神奇的计算机世界。", "marks": "力荐"}
{"content": "我见过的最好的入门书，应当是没有之一的。", "marks": "力荐"}
{"content": "战斗书, 入门函数式必读的书.", "marks": "力荐"}
{"content": "2013年前差点就看完这本小册子了，可惜第九章扫描出问题了，悲剧。whatever，新年快乐。", "marks": "力荐"}
{"content": "enlighten you", "marks": "力荐"}
{"content": "小人书也有难度。", "marks": "力荐"}
{"content": "也许是刚看完开头，写得太简单。对于刚刚学习编程的新手来说，也许开始的几章难度正好，但对于我，感觉前面写的太简单了。希望后面会有更深刻的理解。", "marks": "还行"}
{"content": "感觉还是没太理解continuation 😕", "marks": "力荐"}
{"content": "深入浅出。使用 Scheme 介绍计算理论。更像是讲义，如果有好的老师指导效果会更好。", "marks": "推荐"}
{"content": "程序的形式复杂性并不必然意味着真诚的信服。", "marks": "推荐"}
{"content": "浅显。不过还是很诚恳的一本页数较少的书。", "marks": "推荐"}
{"content": "这本书不错，写作技巧上有独特之处，看似娓娓道来，其实转折之处却一针见血。另外，内容也不错，有的地方深入浅出的阐述着程序的理念观点。偶有看似疯狂之处，也能让意见不同的读者自动忽略。总之，我觉得还不错。", "marks": "力荐"}
{"content": "很多amazing的小hack。", "marks": "推荐"}
{"content": "read 2015", "marks": "推荐"}
{"content": "大多跟布尔代数有关", "marks": "力荐"}
{"content": "工具书", "marks": "力荐"}
{"content": "the only book in this topic", "marks": "力荐"}
{"content": "杀伤力过大，面试切勿使用", "marks": "力荐"}
{"content": "对这种纯技术类书籍无爱。。。", "marks": "推荐"}
{"content": "到处是我最爱的位运算！", "marks": "力荐"}
{"content": "Funny book for code optimization", "marks": "力荐"}
{"content": "推荐给有基础知识的看", "marks": "力荐"}
{"content": "这是一本让我受益很多的书", "marks": "力荐"}
{"content": "大一时候读的。（当做综述", "marks": "推荐"}
{"content": "8.4　DBSCAN　327\n8.4.1　传统的密度：基于中心的方法　327\n8.4.2　DBSCAN算法　328\n8.4.3　优点与缺点　329\n8.5　簇评估　330", "marks": "还行"}
{"content": "曾一度做这行，想一直做下去。留着做见证吧。", "marks": "还行"}
{"content": "期末刷书。这本书也就是考试用用", "marks": "还行"}
{"content": "最近不喜欢看导论类的 不需要科普", "marks": "还行"}
{"content": "对我来说 有点难", "marks": "推荐"}
{"content": "超级通俗易懂！可以快速了解数据挖掘，适合入门", "marks": "力荐"}
{"content": "本书涵盖五个主题：数据、分类、关联分析、聚类和异常检测。除异常检测外，每个主题都包含两章：前面一章讲述基本概念、代表性算法和评估技术，后面一章较深入地讨论高级概念和算法。对于一个数学基础不是很好但又想快速有效地学习数据挖掘的学生来讲。这本书无疑是个不错的选择", "marks": "力荐"}
{"content": "好吧，果然是导论，感觉有点粗。。离散数学学得一般的人看起来有点吃力啊。。。", "marks": "还行"}
{"content": "只看了100多页,跳跃性太大,很难看懂,加之时间有限--放弃!", "marks": "较差"}
{"content": "内容有点老了。翻了一半。最近做翻译来看看别人术语怎么翻的。可惜似乎参考性不大。", "marks": "还行"}
{"content": "翻译的不好～", "marks": "推荐"}
{"content": "教科书级别，详尽", "marks": "推荐"}
{"content": "翻得比较粗略，明白了大概的流程和概念，基本上入门了，不过其实还有很多细节可以再学一遍的，等到用到的时候再来看", "marks": "推荐"}
{"content": "就是没有我们的课本好，这个外国人貌似没有考虑难度的划分与知识的全面性~~", "marks": "较差"}
{"content": "基本所有的数据挖掘的书都千篇一律，同一套路", "marks": "力荐"}
{"content": "号称是DM的厕所科普读物，想必简单。翻了一下，内容也挺全。\n作为下一阶段的辅助性书籍吧。。。。\nPS：序列化以及移动对象相关知识没有，需要Han那本书的补充。。", "marks": "力荐"}
{"content": "要看了，慢慢了解，不急。简单扫了一遍", "marks": "推荐"}
{"content": "数据挖掘（或者机器学习、模式识别），非数学专业入门第一选择。", "marks": "力荐"}
{"content": "要慢慢看的书，好书。", "marks": "还行"}
{"content": "数据挖掘最经典的书", "marks": "力荐"}
{"content": "算是不错的工具书吧", "marks": "还行"}
{"content": "大三上学期读的，为了写论文，后来忙于其他事，就没怎么读了。所有的概念都讲的很清晰，但总觉的实践上有些不足。虽然有很多算法的伪码。", "marks": "推荐"}
{"content": "这本书讲的好详细", "marks": "推荐"}
{"content": "没看完，上本数据挖掘书觉得比这个好", "marks": "还行"}
{"content": "晕晕乎乎……", "marks": "推荐"}
{"content": "1、本书不需要数据库背景，只需要很少的统计学或数学背景知识，适合的读者面较广。\n2、本书全面介绍了数据挖掘的理论和方法，旨在为读者提供将数据挖掘应用于实际问题所必需的知识。", "marks": "力荐"}
{"content": "因为网上对这本书的评价普遍不错，所以买下这本书并且期待也很高。但是开始读时，则感到很气愤，翻译别扭，阅读晦涩，于是索性借来原本教材，中文版反而成为了参考。不过后面几章有些算法还是可圈可点，虽然只是导论，但是对于一些算法的阐述还是很不错的。未读完，还要潜心学习。", "marks": "还行"}
{"content": "入门读物，不会很深入。现在手上还有一本完整版。比J.Han那本数据挖掘概念技术强吧", "marks": "推荐"}
{"content": "确实是个导论，但是总觉得译者翻译的比较生硬", "marks": "还行"}
{"content": "数据挖掘", "marks": "推荐"}
{"content": "非常适合入门", "marks": "力荐"}
{"content": "垃圾，该详细的地方不详细，该简约的地方不简约。中文版的译者更是个垃圾。", "marks": "很差"}
{"content": "挺不深入的，要是有人想学，不能用这本，什么都没讲透。教材", "marks": "推荐"}
{"content": "我看的是还已完成的第二版和第二版中未完成内容的第一版。太啰嗦，这点是对零基础很友好。但是对于“函数式思维”，这本书只能算是 scheme/racket 的索引。此外编码习惯非常好。", "marks": "推荐"}
{"content": "在读修订中的第二版，http://www.ccs.neu.edu/home/matthias/HtDP2e/index.html 应该是快写完了。貌似有点太啰嗦", "marks": "力荐"}
{"content": "用Racket写代码真是太舒服了，第一次接触函数式编程。", "marks": "力荐"}
{"content": "看过SICP的同学可以不用看了", "marks": "推荐"}
{"content": "利用scheme教授编程为数不多的教材，大概翻了下，基本是《SICP》前三章的详细讲解版，但是用了drscheme作为运行平台。", "marks": "力荐"}
{"content": "力荐到天荒地老海枯石烂矢志不渝无怨无悔", "marks": "力荐"}
{"content": "探求程序设计的本源……入门好书，就算你是牛人，也要推荐看看！", "marks": "力荐"}
{"content": "好书好书好书！！！！", "marks": "力荐"}
{"content": "适合入门，有点罗嗦", "marks": "推荐"}
{"content": "Our textbook, problem solving skills", "marks": "力荐"}
{"content": "textbook for cs 135", "marks": "还行"}
{"content": "读了一点，后来去读了网上的第二版。", "marks": "推荐"}
{"content": "看到26章，觉得确实给入门学习编程的人用的，我真的不是初学者了……所以还是读其它的吧……这本就算读完了……", "marks": "力荐"}
{"content": "Create a solid understanding of programming.", "marks": "力荐"}
{"content": "scheme果然是很经典，不过比SICP要简单呢", "marks": "力荐"}
{"content": "都是泪", "marks": "力荐"}
{"content": "没看完就结课系列（", "marks": "还行"}
{"content": "学习编程要从lisp/scheme开始。对初学者来说，掌握计算的法则远比通晓语言特性重要。这本书阅读起来毫无压力，讲解又极为透彻，实在是太难得了。", "marks": "力荐"}
{"content": "相对于sicp显得太啰嗦", "marks": "还行"}
{"content": "关于mvc和递归的思想写得比较透彻", "marks": "推荐"}
{"content": "https://github.com/adaliu-gh/htdp (->link to my solutions).\nIt took me 3 months to finish this book (2ed). I used HTDP as a step-stone for SICP and found it very FRIENDLY (a little verbose) to BEGINNERS (like me). It teaches people how to design programs (including data abstraction and function abstraction) STEP BY STEP. Highly recommended!!!", "marks": "力荐"}
{"content": "循循善诱的风格，很适合作为程序设计的入门书籍，有助于培养良好的编程风格和思维习惯。", "marks": "推荐"}
{"content": "第二版，在线阅读。", "marks": "力荐"}
{"content": "。。不知道prof在讲什么。。。书才是王道", "marks": "力荐"}
{"content": "不如SICP好玩", "marks": "推荐"}
{"content": "Computation & Progamming", "marks": "力荐"}
{"content": "sicp的初级版", "marks": "力荐"}
{"content": "虽略有冗余，但配套设施一流，必有所获。之后再看sicp，则无不中矣。", "marks": "力荐"}
{"content": "不错", "marks": "推荐"}
{"content": "书不是很有必要买，刷HTDP官网就可以了，LISP入门", "marks": "力荐"}
{"content": "Scheme:Uwaterloo CS135", "marks": "力荐"}
{"content": "看完了前两章(后面章节翻过去的)，觉得没必要再看下去，直接上SICP。", "marks": "推荐"}
{"content": "此书谈不上读过，是一上大学被学校强制学的。函数式编程入门作，虽然写的确实啰啰嗦嗦（甚至包括了怎样用Scheme做GUI程序）不过深度什么的基本刚好合适。本来Lisp这种东西对大部分写程序的来说也很少会用。。。现在接触最多的跟Lisp沾边的无非就是开Emacs写程序的时候会用到Lisp命令。。。", "marks": "力荐"}
{"content": "较易懂，是否又可以说适合非科班人士阅读？", "marks": "推荐"}
{"content": "如果觉得《深入计算机系统》太厚，这本也不错", "marks": "推荐"}
{"content": "写系统必读之书", "marks": "还行"}
{"content": "对非科班程序员很有意义", "marks": "还行"}
{"content": "看的是英文版，不错，不知道中文的怎么样了", "marks": "力荐"}
{"content": "还不错 从底层的机构上去关心程序的质量和效率 虽大多不是太深,大多泛泛而谈  像偶这种初级的拿来通一下便会比较舒畅", "marks": "推荐"}
{"content": "如果有时间,有金钱读读也无妨", "marks": "还行"}
{"content": "大学草草的度过，感觉还不错", "marks": "还行"}
{"content": "等着出卷三，希望卷三能达到《代码大全》的高度^_^", "marks": "推荐"}
{"content": "这种书看多了... 不过也忘的差不多了...", "marks": "推荐"}
{"content": "从这本书作为美国一些大学计算机专业的课本就可以看得出来，中国的高等教育，不仅仅落后在教材，在教育方法、师资力量上，都与美国高校差距较大，我们在初等教育上的领先优势在大学阶段不复存在", "marks": "力荐"}
{"content": "挺基础的一本书,不过在于把一些基础的东东再不厌其烦地再说了一下,静下心来,不是有点收获的, 其中关于big endian与little endian的转换不错,当然还有一些典故吧......不过对书中不断推行HLA不爽", "marks": "还行"}
{"content": "入门推荐", "marks": "推荐"}
{"content": "非常好的一套书，当时真是跑到哪里都要背着这个大厚本看一下", "marks": "力荐"}
{"content": "还行", "marks": "推荐"}
{"content": "很不错的一本书，里面涉及了很多基础上的东西，我读这本书的时候只学了VB，看着有点困难，没能读完，但是我读的前半部分就已经非常非常有用了，给我后面对很多东西的学习带来很大的帮助", "marks": "力荐"}
{"content": "很不错的书，前边很简单，后边有点深入的感觉，总体感觉并没有讲的十分深入，但是对于一种思维体制的建立还是很有帮助的", "marks": "力荐"}
{"content": "我看的是中文版的。书很好呀。#notice:这次只是粗略的翻了一下，回头还需精度#", "marks": "力荐"}
{"content": "只能感慨技术更迭的太快，书里的Ajax实现估计早已经没人再用了", "marks": "还行"}
{"content": "主要参考了一下关于ajax的部分。感觉一般。", "marks": "还行"}
{"content": "Martin Fowler写的文章可读性很赞。", "marks": "推荐"}
{"content": "用，是因为需要。\n强出UML用户指南许多。", "marks": "推荐"}
{"content": "UML最好书籍，没有之一。事实上，UML比它所承诺能做到的要少。", "marks": "力荐"}
{"content": "MF的文笔还是蛮好的阿，写的很容易懂，果然是distilled！", "marks": "力荐"}
{"content": "大师的小品之作，摒弃了规范中很多对开发人员无用的东东\n\n另外，觉得不要去看中文版，太垃圾了", "marks": "力荐"}
{"content": "想了解UML 2.*的新特性，又不想在spec中痛苦挣扎的话，看看这本书吧", "marks": "力荐"}
{"content": "内容略老，还是以state code来跟踪缓存授取的，对动态页面不受用，这种书应该与时俱进啊", "marks": "还行"}
{"content": "粗略的浏览了一些感兴趣的章节，不是我关注的主题。", "marks": "还行"}
{"content": "其实我想给三星半", "marks": "推荐"}
{"content": "非常全面的介绍web cache的书，作者本身是squid的作者之一。", "marks": "力荐"}
{"content": "每年必买的书", "marks": "推荐"}
{"content": "买的第二本电脑报合订本", "marks": "力荐"}
{"content": "yoygetea", "marks": "推荐"}
{"content": "初学者有用。", "marks": "推荐"}
{"content": "需要的时候翻一下", "marks": "力荐"}
{"content": "在我读过的英文textbook里面算是比较烂的一本了，没有一个清晰的线索。不知道为什么被奉为经典。", "marks": "还行"}
{"content": "生吞活剥，硬是翻完了。帮助我理解了很多概念，特别是很少书涉及的PCI资源分配等硬件相关内容。本书细节很多，可以作为Linux驱动开发的API参考手册。要想真正理解某个子系统的概念，还是需要找专著，这本讲得太过泛泛。", "marks": "推荐"}
{"content": "第三版看了一点... \nUSB HotPlug 正好工作上用到", "marks": "力荐"}
{"content": "还是不能写driver。。", "marks": "推荐"}
{"content": "https://lwn.net/Kernel/LDD3/", "marks": "推荐"}
{"content": "Linux下驱动开发的不二选择", "marks": "力荐"}
{"content": "Practice guide for kernel newbie", "marks": "力荐"}
{"content": "经典ldd, 驱动开发必备no.1", "marks": "力荐"}
{"content": "这个是必读的吧", "marks": "力荐"}
{"content": "相当经典classic", "marks": "力荐"}
{"content": "好歹啃完了一遍。感觉更像是工具书。不太适合“从入门到精通”。位列经典可能因为同类的书太少了。", "marks": "推荐"}
{"content": "看到13章，发现有意思的东西不多，就半途而废了。\n作为一本教人写 Device Driver 的书，它理所当然的侧重于 How，具体来说就是如何往 Linux Kernel 提供的 framework 里嵌东西；而我比较喜欢讲 Why 的书，所以对本书中零星提及的一些有关 framework 构建和运转的部分比较欣赏（主要集中于第5、7、14、15章）。\n那些 How 的内容等到真正动手的时候再来查阅比较有效。", "marks": "还行"}
{"content": "must read!", "marks": "力荐"}
{"content": "从Documents和邮件列表里抽出来的，可以参考", "marks": "推荐"}
{"content": "4th遥遥无期. 唯一的driver基础. ", "marks": "力荐"}
{"content": "驱动入门书中最好的一本，没有之一！！", "marks": "力荐"}
{"content": "excellent!", "marks": "推荐"}
{"content": "点到为止", "marks": "推荐"}
{"content": "十分详尽", "marks": "力荐"}
{"content": "架子有了，还得看源码啊", "marks": "推荐"}
{"content": "引人入胜", "marks": "力荐"}
{"content": "书都坏掉了（不是因为我读得太勤奋了…… -.-bb）", "marks": "推荐"}
{"content": "前半本走马观花，后半本略微认真读了些。虽然作者字里行间偶有幽默，但如果不动手，读起来仍显枯燥。", "marks": "力荐"}
{"content": "大名鼎鼎的LKD，内核的科普读物，适合只是要初步了解内核机理的初学者，里边没有大块的代码说明，只侧重于原理讲解，个人认为是Kernel Newbie的第一本读物。", "marks": "推荐"}
{"content": "利用碎片时间读的，不错的入门书。大数据现在还是Silo系统，需要了解上至应用，下至操作系统、甚至体系结构的方方面面。", "marks": "推荐"}
{"content": "相对较薄，肯定需要重读的", "marks": "力荐"}
{"content": "这是一本进攻情景分析linux代码前必看的书。字字真言。", "marks": "力荐"}
{"content": "着重核心内容，但总体而言比较简略，这么薄的书把一切说清楚也不可能，要想弄明白还是RTFSC吧！", "marks": "推荐"}
{"content": "内核的科普书", "marks": "力荐"}
{"content": "4->5", "marks": "力荐"}
{"content": "暂先休息一下", "marks": "推荐"}
{"content": "没有大部头内核类书籍的冗长，很简明，值得一读。", "marks": "推荐"}
{"content": "下个学期的课本", "marks": "推荐"}
{"content": "没有废话，只讲根本问题。", "marks": "推荐"}
{"content": "结合《现代操作系统》的理论，窥一下Linux的实现细节。", "marks": "推荐"}
{"content": "4m => 1 => 5\n内核入门经典,精读  内核设计类精品.", "marks": "力荐"}
{"content": "好书", "marks": "力荐"}
{"content": "初学kernel的不二选择", "marks": "推荐"}
{"content": "应该是最好的 linux 内核总览的书了吧，系统性地介绍了核心的几个部分，最后还谈到调试、代码风格、提交 patch 流程等等，以及开发内核过程中的种种注意事项，绝对干货。", "marks": "力荐"}
{"content": "不可避免的要开始学这个了", "marks": "推荐"}
{"content": "good", "marks": "力荐"}
{"content": "粗略读了一下，有些收获；", "marks": "还行"}
{"content": "就着Linux讲才有味道嘛", "marks": "力荐"}
{"content": "功力有限，走马观花", "marks": "推荐"}
{"content": "很好的内核入门书，已经有一些linux 使用常识的人向内核进阶的时候可以从这个开始。可以先看一遍，有一个对内核整体的框架了解。然后就可以结合《深入理解Linux内核》等书一个个的专题看.个人觉得这么进阶不错。当然，能反复看一点点深入思考最好.", "marks": "力荐"}
{"content": "轻松幽默，如沐清风。", "marks": "力荐"}
{"content": "大学里学的那点OS知识基本上都忘光了，于是只好一边翻阅《Operating System Concept》一边磕磕碰碰地读，还有一本Windows OS的书作辅助。没办法，太菜了。o(╯□╰)o（本书的翻译很有问题，大错偶尔小错不断，我是找了本英文书一起看的。）", "marks": "还行"}
{"content": "一头栽进内核可能永远出不来，这本书给了你一个总览的概念，给你一丝丝信心，去看《深入理解LINUX内幕》。不亏是大师，会忽悠，把这么复杂的东西，简单几页说完了。", "marks": "推荐"}
{"content": "最好的内核全局观入门。", "marks": "推荐"}
{"content": "总算读完了，书不错，不过内容有限，只算个概览，如果想深入估计还得亲自读源码再配着《linux内核情景分析》学，anyway，没那么多时间看了~", "marks": "力荐"}
{"content": "作者的简明精辟让我收益颇深", "marks": "力荐"}
{"content": "粗略的看过一点目录觉得挺好的。", "marks": "力荐"}
{"content": "这是linux kernel入门的好书，文字介绍多，代码较少", "marks": "推荐"}
{"content": "3-9章看得较为详细，其余粗读", "marks": "还行"}
{"content": "需要细细品，自己对其中细节加以扩充才好", "marks": "推荐"}
{"content": "评价很高，想看看\n内容不错，可以算是一个概览，把握整体面貌。中文版错别字、印刷错误很多，难道我买的是盗版的……？", "marks": "推荐"}
{"content": "通俗易懂", "marks": "推荐"}
{"content": "读着顺畅", "marks": "力荐"}
{"content": "分析Linux内核的，内容比较深\n今天又看了一下，发现两年前已经读过一遍了，这次看起来比起那是记得笔记要轻松了许多。", "marks": "推荐"}
{"content": "最佳内核入门读物！感觉以前顺序有点问题呢", "marks": "推荐"}
{"content": "不错的linux内核入门书，内核关键的设计部分讲解的都比较清楚。", "marks": "推荐"}
{"content": "太简略了点", "marks": "推荐"}
{"content": "一本严肃的书，算是建立起了操作系统原理和Linux系统编程之间的桥梁，就是作者老爱夹带私货还卖萌（喜闻乐见）", "marks": "推荐"}
{"content": "内核入门读物，内容准确而简单易懂", "marks": "力荐"}
{"content": "慢慢体会", "marks": "力荐"}
{"content": "看的英文版，作为入门还不错哦。", "marks": "推荐"}
{"content": "内容：概览linux内核的各个子系统 --eol--\n适合人群：1，linux爱好者一窥内核究竟(like me)；2，欲进入内核开发领域的入门者", "marks": "推荐"}
{"content": "轻薄是它最大的优势 :) 我喜欢这样的书, 因为书始终只能是引导, 读懂代码才能真正体会代码背后的思想. 就目前来说, 这书里面的许多知识都不够新了. 喜欢内核的人, 最后都应该加入LKML.", "marks": "推荐"}
{"content": "2.6版的内核开发时间很久，代码的变更比较大。这本书是基于较早期版本的，其中一部分内容如进程的O(n)调度已经被CFS给替代了。不过能够在一本不到三百页的书籍里面将linux内核的进程调度、锁机制、VFS等内容的实现及进化过程梳理得头头是道，而且语言风趣，可见作者实力。2012年读过的最佳书籍！", "marks": "力荐"}
{"content": "我读的是英文版本，因此读的有点慢，但是本书在整体上带你进入linux世界，全面介绍linux系统的设计实现，不过都不是非常深入的内容，但是绝对是想进阶linux内核的人第一读物，也是最好的初步教材。", "marks": "力荐"}
{"content": "读的是第3版，主要看的是中文，看不懂时就对照英文书看了。\n之前看到内存管理（第12章）时，打了5星。\n现在只有最后一章（设备与模块）加一小节（slab分配器）没看。\n再回头看这个评分，真是太不合理了……\n内存管理和虚拟文件系统两章讲的内容有点太少——即使作为入门的内核编程也太少了。英文版错误还是比较少的（主要集中在虚拟文件系统一章，有几个数据结构和讲解不一致），作为入门内核编程，英文可以打五星。然而中文的从虚拟文件系统开始，就错误不断，而且都是很低级的错误，也有不少翻译非常不恰当，不仔细思考就可能得到和英文完全相反的含义，中文最多3星。\n建议看时中英文对照看，如果没这条件会比较痛苦（当然如果英文比较好，可以直接读英文，那会顺畅许多）。", "marks": "推荐"}
{"content": "重读一遍，深入浅出，不乏幽默。", "marks": "力荐"}
{"content": "大致看了一遍", "marks": "推荐"}
{"content": "很好的linux内核入门书籍", "marks": "推荐"}
{"content": "经典教材，没有五星的原因也就是中译问题了。怎么这年代什么书都需要配合原版电子书呢……", "marks": "推荐"}
{"content": "细读了前五章吧，学习linux kernel不错的一本书！", "marks": "推荐"}
{"content": "一本小而精的内核书籍 零碎这翻看了两三遍 收获还是挺大的 比板砖似的内核书好多了", "marks": "力荐"}
{"content": "大名鼎鼎的LKD，深入浅出，值得一读再读的好书", "marks": "力荐"}
{"content": "看着挺薄,当时读得挺久的", "marks": "推荐"}
{"content": "书不厚，但是对于入门还是及概念的了解还是很好的", "marks": "力荐"}
{"content": "love", "marks": "力荐"}
{"content": "这本书讲实现比较多，分开os的各个部分来细讲，我总感觉看不到系统的全貌，需要一本高屋建瓴的书理清思路", "marks": "还行"}
{"content": "一家之言：学习Linux内核应该读的第一本书，本书提纲挈领。读完本书之后，上可读：Understanding Linux Kernel（深入理解Linux内核），下可践：Linux Device Driver （Linux设备驱动）。", "marks": "力荐"}
{"content": "超级棒！醍醐灌顶，豁然开朗啊！", "marks": "力荐"}
{"content": "旁听李毅老师的课的时候用的教材，没有选这门课，但是旁听之后还是受益匪浅。这本书讲Linux内核短小精悍啊，已经出了第三版，只不过还没有中文版", "marks": "推荐"}
{"content": "还算能看懂。。。", "marks": "推荐"}
{"content": "王笑臣那边借来的书，帮助自己深入理解进程和内存在内核层面的知识", "marks": "力荐"}
{"content": "入门必看，对一些kernel基础概念有大致的认识", "marks": "力荐"}
{"content": "确实有提纲挈领的味道,  先看一遍这书, 再深入看其他书 是比较适合的学习过程.", "marks": "力荐"}
{"content": "没有汇编基础，导致看了10几页就开启天书模式了……", "marks": "推荐"}
{"content": "不懂内核，看这本书也能知道一些linux内核的一些实现原理。", "marks": "推荐"}
{"content": "从数据结构和函数调用两方面介绍内核, 但是没有深入具体实现, 也未对比分析", "marks": "推荐"}
{"content": "刚读完第三版", "marks": "推荐"}
{"content": "看的是英文版的，比起情景分析，这本书有点概括", "marks": "推荐"}
{"content": "看过的最浅显易懂的一本Linux内核书籍。不过看到讲计时器的那章还是没有接着看下去……", "marks": "力荐"}
{"content": "这页数就注定悲剧！尴尬的作品，作者希望深入浅出又希望有一定深度。结果两个任务都没有完成。我只坚持到第三章....", "marks": "较差"}
{"content": " 内核入门", "marks": "推荐"}
{"content": "linux内核开发的经典入门书籍。多年前初涉此道时看过，值得翻阅重读。", "marks": "力荐"}
{"content": "Love被译成了拉芙，晕。。", "marks": "力荐"}
{"content": "理解Linux 内核2.6.10的好书，内容比较全面，真的，而且陈老师也翻译的很好。", "marks": "力荐"}
{"content": "非常有趣  作者翻译的也很认真 加入大量解释  个别部分稍显僵硬 看在上帝的份上 我发誓 你们再这么翻译就踢你的屁股", "marks": "推荐"}
{"content": "读过好多遍。会经常去翻的一本书。", "marks": "力荐"}
{"content": "挺好的，就是基本轮廓。但是不常用到，会经常忘记。", "marks": "力荐"}
{"content": "大学的一个寒假读的，这类书看的太多，但没有过多总结。", "marks": "推荐"}
{"content": "赞! 看得第一本内核书", "marks": "力荐"}
{"content": "对linux kernel  有一个 overview 的介绍 ", "marks": "推荐"}
{"content": "涵盖了linux系统内核的几乎所有东西，虽然浅但讲得广。适合初学", "marks": "还行"}
{"content": "太早看过，还不错。", "marks": "推荐"}
{"content": "这本书我认为深度有限，比较适合作为内核入门级读物。", "marks": "还行"}
{"content": "内核开发", "marks": "力荐"}
{"content": "算是入门级的内核教程，基本可以理解为比《操作系统》恐龙书更具体地对 linux 进行介绍，因为篇幅原因，细节只能点到为止。", "marks": "还行"}
{"content": "作者蜻蜓点水般的介绍了内核设计，对读者来说比较容易形成对内核宏观的设计概念，很不错。", "marks": "推荐"}
{"content": "挺好的.就是太简单了.适合初学.所以只是简单的浏览了一遍.", "marks": "力荐"}
{"content": "入门书籍", "marks": "还行"}
{"content": "应用型的理论\n", "marks": "力荐"}
{"content": "很一般，空洞乏味", "marks": "较差"}
{"content": "一本基础的不能再基础的专业书。即使毫无软件工程基础的人也能读懂的书。非常适合入门级的产品经理去了解", "marks": "力荐"}
{"content": "虽然lnw就是张学文定义的c，只不过整合了不同的名词，但是本书的结构臻于完美。", "marks": "力荐"}
{"content": "原创", "marks": "推荐"}
{"content": "作者的视角和想法都很独特。使我看完后，更加认为，世界由能量的振动而同时产生时间、空间、物质、狭义能量。由完全禁止的虚无，瞬间创造一切并延续！", "marks": "力荐"}
{"content": "拜拜垠神的老板之一。。。", "marks": "力荐"}
{"content": "这不是程序语言，这是纯智力游戏。", "marks": "推荐"}
{"content": "刚下了一本，159页？但是却标明第４版啊", "marks": "推荐"}
{"content": "第9章的Y combinator可以参考http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html 和 http://cuipengfei.me/blog/2013/04/09/make-y/", "marks": "力荐"}
{"content": "以前窝mm跟窝说，要改当码农挣大钱养我。然后就教了她老scheme，再后来好像也没有变成码农挣大钱，具体怎么回事忘了。LISP好，大家一定要多学LISP。", "marks": "力荐"}
{"content": "Felleisen: study hard and enjoy", "marks": "力荐"}
{"content": "第八章凶起来了……continuation和 Y combinator还需要时间理一理，还有那个解释器", "marks": "力荐"}
{"content": "所有讲程序设计语言的书里最神奇的存在。", "marks": "力荐"}
{"content": "好基础额", "marks": "还行"}
{"content": "前面七章是可以快速扫过的铺垫 最后三章才是重点 Lambda/Y Combinator的介绍 如果不是用LISP 去掉一些阻碍人类阅读的多余括号的话 应该不会那么难懂(看) ...", "marks": "推荐"}
{"content": "言簡意賅的表達了scheme的設計思想 最後兩個Chapter講Y combinator和interpretor真的講的很精彩", "marks": "力荐"}
{"content": "由于从小接受苏联式课本教育，遇到这类循循善诱的讲授方法便很不适应。但无论如何，学习一门新语言，就像去异邦旅行。不得不说这个地方很新奇。", "marks": "还行"}
{"content": "这个风格实在是太适合做教材了，自问自答、精辟到位，而且知识点是系统化组织起来的。建议软院爱尔兰班FP课程采纳。", "marks": "力荐"}
{"content": "学习S表达式最好的入门书籍，强烈推荐所有对编程感兴趣的人阅读，而且这本书的写作形式与内容高度统一，必须说是神作。", "marks": "力荐"}
{"content": "短小精悍，学习scheme入门最佳书籍。", "marks": "力荐"}
{"content": "Comupter Scienist，都是心理学家其实，随和亲切，春风化雨，simple is best// 8.9.10三章，太棒了", "marks": "力荐"}
{"content": "看这本书期间，我梦到自己递归递归...直到醒时才找到出口", "marks": "推荐"}
{"content": "函数编程和递归入门，问答形式新颖易读。Y Combinator现在还没彻底明白。需要再读。", "marks": "力荐"}
{"content": "read it in an hour during flight from boston to dallas... kind of smart and tricky ways to describe the lisp=)", "marks": "力荐"}
{"content": "非常喜欢这种书，非常多的练习，循序渐进的引导....lisp语法很简单，但语言的表现力却让人着迷不已....授人以鱼，不如授人以渔，谢谢作者Daniel 让我深切的体会到主动的思考和不断练习的好处...要看seasoned版了，宝盒里面究竟藏着什么东西呢", "marks": "力荐"}
{"content": "learn scheme in hard way", "marks": "推荐"}
{"content": "这算是哲学书吗？", "marks": "力荐"}
{"content": "健脑，防止老年痴呆要从青年抓起。", "marks": "力荐"}
{"content": "前面还觉得有点啰嗦，从倒数第三章末尾开始：continuation，停机问题证明，y combinator，scheme解释器的一个非常简洁的实现。Wow", "marks": "推荐"}
{"content": "理解递归。", "marks": "力荐"}
{"content": "非常有意思的书。", "marks": "力荐"}
{"content": "形式新颖，举重若轻", "marks": "推荐"}
{"content": "这文体真是坑爹啊..", "marks": "还行"}
{"content": "适合6岁以上儿童阅读~", "marks": "力荐"}
{"content": "clear and lovely part of Scheme.\nbefore you touch the real world complex Scheme", "marks": "推荐"}
{"content": "Scheme语言的入门神作。", "marks": "力荐"}
{"content": "奇妙的方式講解了遞迴的本質、Scheme 直譯器，一本很好的腦力練習書。", "marks": "力荐"}
{"content": "其实还差最后三章，已经忍不住要给它打分了", "marks": "力荐"}
{"content": "Functional Programming + Recursion 正确启蒙方式", "marks": "力荐"}
{"content": "1到7章很简单，后三章却是另一个难度。第8章让你意犹未尽，这是一种很有意思的技巧，却不知道它具体是怎么运作的。还好看过Y算子，不然第9章就完全如坠雾中了。最好去找找第10章的完整代码，否则就会陷入无尽的代码片段中。总的来说，内容很给人启迪，回味无穷，仿佛自己能给出更精彩的诠释，可实践过却发现真的很难，更感叹作者的不易。", "marks": "推荐"}
{"content": "Amazing enlightenment!", "marks": "力荐"}
{"content": "不太适应这种一问一答的写作风格", "marks": "力荐"}
{"content": "教学真不错。", "marks": "力荐"}
{"content": "这本书对我的价值不大。。\n不喜欢这种写作方式。。", "marks": "还行"}
{"content": "小书才能读完...", "marks": "推荐"}
{"content": "很好玩很好读⋯⋯两个小时读完吧如果有一点点程序基础", "marks": "力荐"}
{"content": "第九章applicative-order Y combinator好懵好懵好懵 救命啊", "marks": "力荐"}
{"content": "javascript 的根在scheme上", "marks": "力荐"}
{"content": "一问一答的形式组成了正本书。很有特色，写得也很好。", "marks": "推荐"}
{"content": "看了几章。得出了如果不是入门就看SICP的评价。", "marks": "还行"}
{"content": "太有爱的", "marks": "力荐"}
{"content": "前七章都是虚的，后三章才是正经。好吧，我是第一次见应用序的 y 组合子，之前只推导过正则序的", "marks": "力荐"}
{"content": "关于LISP，最佳入门书籍", "marks": "力荐"}
{"content": "好书，以前居然以为简单没看下去......不是简单，是基础。第一本从头看到尾的英文书。", "marks": "力荐"}
{"content": "第一次读问答式类的书，比较细节", "marks": "推荐"}
{"content": "幽默风趣的对话式讲解风格，作者相信读者能自己顿悟的递归思想，广度涵盖的也不错，深度稍有欠缺，但不是有SICP总结了吗？，呵呵", "marks": "力荐"}
{"content": "基本上花四五个钟头就能读完了。前半部分主要介绍了Scheme里的一些概念，十分简单。书的精华主要在后半部分，包括currying、continuation。然后推导了一下Y Combinator。最后实现了一个Scheme的解释器。", "marks": "力荐"}
{"content": "经典好书。", "marks": "力荐"}
{"content": "虽然号称是入门书， 看懂却不容易。", "marks": "力荐"}
{"content": "在 google books 上有电子版的，不过缺少 chapter 6 Shadow", "marks": "推荐"}
{"content": "比较容易的一本书。一是题目难度小，边看边写把大部分题都做了；二是不需要英文水平。比起sicp第一章就做数学运算，这本书更适合入门。", "marks": "力荐"}
{"content": "很棒的书。作者也是略鬼才了，各种奇葩例子绕你。然后很轻松的又抖落出一些重点。", "marks": "力荐"}
{"content": "很洗脑", "marks": "推荐"}
{"content": "第九章读不进啊读不进，第十章找不到啊找不到", "marks": "力荐"}
{"content": "打印了整本书，搞得我一个墨盒快用完来。以后再也不打印了。正本书循序渐进，中间介绍了Scheme中的重要概念和编程习惯。我是第一次接处觉得，在语法和概念上都需要跟深入的学习。作者也说了本书只是一个介绍（introduction)", "marks": "推荐"}
{"content": "入门，对lisp的基本元素有一个大概的了解。虽然是schemer，但是跟common lisp差不多", "marks": "力荐"}
{"content": "努力读！", "marks": "力荐"}
{"content": "short and inspiring", "marks": "推荐"}
{"content": "Y combinator彻底服了，附录一堆逻辑学的书，以及第三版还是有习题的，最后一章讲parser，续作估计就接着进一步实现和讲一些过程抽象吧，不想再看了= =。。。这书读着累，还是SICP顺手。。。", "marks": "力荐"}
{"content": "两百页都不到，停机问题和Y combinator都写了，抵啊。", "marks": "力荐"}
{"content": "清晰.简洁.比htdp写得好.", "marks": "力荐"}
{"content": "funtional programming, recursion, lambda calculi, ycombinator\n2015.1 又敲了一遍 大道无形啊", "marks": "力荐"}
{"content": "9,10章难度远大于前面。", "marks": "力荐"}
{"content": "虽是入门后面五章很值得深究【thank you", "marks": "力荐"}
{"content": "以前看过R5RS报告，所以只是快速抽了几个讲解的例子看了一下，发现语法都知道了，于是粗粗扫过。而函数结构那部分有其他教材学过，所以也直接扫过。", "marks": "推荐"}
{"content": "很有爱的写作方式。。。", "marks": "力荐"}
{"content": "一问一答还讨厌而且啰嗦死了", "marks": "力荐"}
{"content": "介绍Applicative Y Combinator和Continuation (as collector)的部分很有启发性", "marks": "力荐"}
{"content": "看到最后一章实在看不懂了，话说要适应作者写书的方式还是困难啊。", "marks": "还行"}
{"content": "看看", "marks": "推荐"}
{"content": "垠神助我快乐成长", "marks": "力荐"}
{"content": "每一章都不能跳过，上一章没吃透一定不要看下一章！！你会看到符号推导的美感。", "marks": "力荐"}
{"content": "作为教科书的地位可能不会有sicp高~毕竟是一本小册子嘛~但确实是一本深入浅出的好书~", "marks": "力荐"}
{"content": "一气呵成，看着不是一般的爽。现在越来越喜欢函数式编程这种思想了，大开眼界。", "marks": "力荐"}
{"content": "烧脑", "marks": "力荐"}
{"content": "最后2章看的有点马虎", "marks": "力荐"}
{"content": "读完第一本全英文的书，可喜可贺。后三章看得脑袋都快糊了。", "marks": "力荐"}
{"content": "很有意思，Scheme入门必读！！！", "marks": "力荐"}
{"content": "最后一章讲解释器反而不如第九章讲停机问题和 Y 组合子难……打开了 Lisp 世界的大门", "marks": "推荐"}
{"content": "-。-后面两章讲得实在云里雾里的", "marks": "推荐"}
{"content": "Reproduces half of SICP in a 100 pages", "marks": "力荐"}
{"content": "书很简单，但这个语言有何用处？不大理解", "marks": "力荐"}
{"content": "第8、9章真是难到冇朋友。#BrainAndMemoryOverflow#", "marks": "力荐"}
{"content": "λ演算 - 维基百科，自由的百科全书 http://t.cn/zlPODvb 不动点组合子 - 维基百科，自由的百科全书 http://t.cn/zY3tfwX", "marks": "力荐"}
{"content": "编程界的几何原本。对 Y Combinator 的解说较艰涩，可参看 http://stackoverflow.com/questions/10499514/y-combinator-discussion-in-the-little-schemer。", "marks": "力荐"}
{"content": "残害小朋友读物 code:https://github.com/pkrumins/the-little-schemer", "marks": "力荐"}
{"content": "https://github.com/pkrumins/the-little-schemer", "marks": "力荐"}
{"content": "for beginner", "marks": "推荐"}
{"content": "很神奇的书，用问答的形式教你Schemer和FP，目标是为了说明这很简单，所以感觉把传授的对象当个傻逼一样教。", "marks": "力荐"}
{"content": "新奇的入门书编写模式，有趣", "marks": "推荐"}
{"content": "sicp简化版 相比来说sicp中有些部分实在冗长得让人抓不到point", "marks": "推荐"}
{"content": "一般的教材，往往一开始接触的都是一堆全新的概念，让人难以消化。必须通过后续不断的接触，回头来看时才能恍然大悟。这是因为作者没有站在初学者的角度，理所当然的把概念先陈述，而不是像自己一开始思考的过程那样来讲述。这一点在刘未鹏老师的博客中很好的解释了，而这本书，由清一色的问题组成，由浅到深，没有太多概念，更多的是例子，以苏格拉底式的教学法逐步将scheme的知识教给我们。作为入门书实在是一流。更深入的学习则需要看SICP了", "marks": "力荐"}
{"content": "commandments非常受用", "marks": "力荐"}
{"content": "recursion", "marks": "力荐"}
{"content": "可入选“中学生必读丛书”，全书只在传达“递归”这个概念，行文轻松愉快，采用对话形式，reader-friendly。唯一的缺点是，函数命名不符合现在的常见约定，是为了缩短函数名？函数名长一点真的无所谓，最好能一眼看出来是干什么的。", "marks": "力荐"}
{"content": "【差最后两章没看】王垠非常推荐的一本学习函数式编程思想的书。本书由浅入深、系统描绘了如何使用递归思考编程问题的全过程（在书的最后两章还给出了Y combinator的推导）。非常推荐，安丰春同学很早就看这本书了。", "marks": "力荐"}
{"content": "竟然看完了", "marks": "力荐"}
{"content": "原来一直习惯自顶向下的方法论，本书介绍了另外一种需要更高要求的方法论：Bottom up", "marks": "推荐"}
{"content": "适合与SICP一起看", "marks": "力荐"}
{"content": "第9章cool:   define \"length\" function without \"define\"", "marks": "推荐"}
{"content": "以问答方式组织，思路很有新意，但全篇都这么搞，就太极端了，非常不利与找到要点，几乎逼着从头到尾follow他的每一个例子。尤其可恶的是，他的很多recursion都有重复之嫌，讲得真心罗嗦。果断1星", "marks": "很差"}
{"content": "作者你是在玩吗?", "marks": "力荐"}
{"content": "这个也是：）", "marks": "力荐"}
{"content": "最后三章太精彩了，需要二周目", "marks": "力荐"}
{"content": "嗯，入门书，循循善诱吧", "marks": "力荐"}
{"content": "学而时习之，不亦悦乎", "marks": "力荐"}
{"content": "小白Lisp及函数式编程入门的绝佳好书~", "marks": "推荐"}
{"content": "非常不同的风格，我不认同王垠对Friedman过分高的评价，但我不得不说他是一个鬼才。", "marks": "力荐"}
{"content": "A very enlightening experience about recurring guided by the author.", "marks": "力荐"}
{"content": "可以更好的理解递归，就爱读这种言简意赅的技术书。", "marks": "推荐"}
{"content": "最后几章有点意思", "marks": "力荐"}
{"content": "经典! 写了一篇相关的文章：http://martin-liu.github.io/#!/article/6", "marks": "力荐"}
{"content": "相见恨晚", "marks": "力荐"}
{"content": "不要以为书里画满了大象和小象就很简单，最后三章分别讲了csp、y组合子和closure，讲的那叫一个啰嗦啊……窃以为y组合子讲的不如我在知乎上700多字的回答容易懂，哈哈", "marks": "力荐"}
{"content": "看这本书的缘由，说起来不好意思的。主要看scip看着头痛，看到第二章的时候，做里面的习题做着头疼脑热的，看看能否对scheme语言有一个简要的介绍就在网上看到此书，有人评论此书可以做为scip的基础书，我读后感受是最好在读完scip的第一章和第二章中关于list的概念之后就可以阅读了。毕竟这本书一上来就是各种lambda表达式、以及scheme中内置的函数。\n\n本来想花一周的时间将此书看完，不厚也就200多页。但是期间加班比较严重，后面自己玩游戏也比较多，导致拖到今天才看完。\n\n作者在自问自答的方式中介绍5条原则和10条告诫。这些都是通过一个个实例进行论证说明的。总之，此书值得一读，喜欢这种自问自答的方式，感觉是对一个个知识点不断采掘。", "marks": "推荐"}
{"content": "让我深入理解了lambda演算的本质，就是递归. 如果你想理解计算的本质，那来读这本书吧，今年读过的最好的书", "marks": "力荐"}
{"content": "没什么必要看，直接上SICP吧", "marks": "还行"}
{"content": "通过简单的例子，教会你思考什么是递归、如何递归。", "marks": "推荐"}
{"content": "great fun", "marks": "力荐"}
{"content": "看完评论，再回去看才发现第八章是讲的CPS", "marks": "力荐"}
{"content": "最后三章值得反复看", "marks": "力荐"}
{"content": "最后两章似懂非懂，离运用自如还很远。", "marks": "力荐"}
{"content": "(((((((((((((((((((((((((((((((((((!)))))))))))))))))))))))))))))))))))", "marks": "力荐"}
{"content": "大师能把复杂的问题简化。", "marks": "力荐"}
{"content": "看到8章，用nu操练有点感觉了", "marks": "推荐"}
{"content": "初次翻开时看到问答形式的内容还以为是引言，渐渐才发现通篇都是这般腔调，确实是引导思考的不错方式。FPer必读，半天时间可以看完。", "marks": "力荐"}
{"content": "作为入门非常好，最好先看下lambda calculs", "marks": "力荐"}
{"content": "这本书最精彩的就是8，9，10三章了，分别讲CPS，Y Cmobinator 和解释器，很值得一读，很好的一本书，5星推荐。 ", "marks": "力荐"}
{"content": "还得多刷几遍才行…", "marks": "力荐"}
{"content": "牛逼到爆炸，为自己的短见自惭形愧。", "marks": "力荐"}
{"content": "真的很愉快的阅读过程。", "marks": "力荐"}
{"content": "详细展示了每个函数的流程，不是scheme的每个方面都讲，只讲透一个点，递归。如果读完SICP前三章，读这个很轻松，当然最后两章稍稍有点复杂，多在纸上操作几次应该就可以理解了", "marks": "推荐"}
{"content": "知其然,不知其所以然", "marks": "推荐"}
{"content": "内容由浅入深，适合程序员看，也适合不从事编程工作的普通人看，极有效的训练人的思维能力，将读者引入神奇的计算机世界。", "marks": "力荐"}
{"content": "我见过的最好的入门书，应当是没有之一的。", "marks": "力荐"}
{"content": "战斗书, 入门函数式必读的书.", "marks": "力荐"}
{"content": "2013年前差点就看完这本小册子了，可惜第九章扫描出问题了，悲剧。whatever，新年快乐。", "marks": "力荐"}
{"content": "enlighten you", "marks": "力荐"}
{"content": "小人书也有难度。", "marks": "力荐"}
{"content": "也许是刚看完开头，写得太简单。对于刚刚学习编程的新手来说，也许开始的几章难度正好，但对于我，感觉前面写的太简单了。希望后面会有更深刻的理解。", "marks": "还行"}
{"content": "感觉还是没太理解continuation 😕", "marks": "力荐"}
{"content": "深入浅出。使用 Scheme 介绍计算理论。更像是讲义，如果有好的老师指导效果会更好。", "marks": "推荐"}
{"content": "程序的形式复杂性并不必然意味着真诚的信服。", "marks": "推荐"}
{"content": "浅显。不过还是很诚恳的一本页数较少的书。", "marks": "推荐"}
{"content": "这本书不错，写作技巧上有独特之处，看似娓娓道来，其实转折之处却一针见血。另外，内容也不错，有的地方深入浅出的阐述着程序的理念观点。偶有看似疯狂之处，也能让意见不同的读者自动忽略。总之，我觉得还不错。", "marks": "力荐"}
{"content": "数学味重", "marks": "推荐"}
{"content": "本来在5分档次的，可惜印刷错误太多了。瑕不掩瑜。", "marks": "推荐"}
{"content": "在算法书中，这本可以算是蛮差的了。要恶心自己的话，可以认真读一读", "marks": "较差"}
{"content": "这本书的写作风格真是让人相当的无语！见鬼。。。", "marks": "推荐"}
{"content": "a decent lisp book, though not as good as its antecessor. figures are more interesting than words...", "marks": "力荐"}
{"content": "趁着周末把这本书大概翻了一遍，比起little schemer，讲了不少新的内容。不过整本书有点累赘的感觉，感觉学究气息浓，对话形式看得好蛋疼。理解最后的推倒式回来再看对话反而更容易理解作者的意图.....", "marks": "推荐"}
{"content": "没看完.还剩最后一章.下次接着看...", "marks": "推荐"}
{"content": "网上的pdf竟然缺了30页...", "marks": "力荐"}
{"content": "introduce side-effect to eliminate redundancy 2015.1 collection of scattered wisdom", "marks": "力荐"}
{"content": "my hat still fits. good.", "marks": "力荐"}
{"content": "还得再读一遍..", "marks": "推荐"}
{"content": "理解什么是计算的本质", "marks": "推荐"}
{"content": "最后一章，懒得看了", "marks": "力荐"}
{"content": "有continuation的入门介绍 等 （忘了", "marks": "力荐"}
{"content": "作者说了 这本书只要懂英语和会数数就能看：）", "marks": "力荐"}
{"content": "学而时习之，不亦悦乎", "marks": "推荐"}
{"content": "一般。", "marks": "还行"}
{"content": "将 Church Encoding 化入无形之中。。。最后一章依旧是那么精彩！", "marks": "力荐"}
{"content": "最后几章需要琢磨琢磨，以后有空吧", "marks": "力荐"}
{"content": "确实不喜欢这种问答式的风格，尤其是里面老是喜欢抖一些匪夷所思的包袱，比如冰淇淋什么的，可能是文化差异吧。书本身是非常棒的。为了避免陷入对话，一般都是先自己解决问题，如果运行结果无误，就不再阅读对话部分了。", "marks": "推荐"}
{"content": "这书有点旧，开始的函数式还真有点难懂\n后面介绍模块的部分确实不错", "marks": "力荐"}
{"content": "吐血啊吐血，半本书都是python library的列表，剩下大半本书都是巨罗嗦的话，不过有一些例子还比较有用。", "marks": "还行"}
{"content": "After reading,I think I should using awk or perl instead of py in text processing. Orz", "marks": "还行"}
{"content": "翻译中...", "marks": "还行"}
{"content": "搞文本处理的可以看看", "marks": "推荐"}
{"content": "没有读完这本书，写作风格不是太喜欢，不过可以作为一个手册，当做文本处理工作时，可以翻翻相应的专题，参考参考代码", "marks": "还行"}
{"content": "这书有点旧，开始的函数式还真有点难懂\n后面介绍模块的部分确实不错", "marks": "力荐"}
{"content": "吐血啊吐血，半本书都是python library的列表，剩下大半本书都是巨罗嗦的话，不过有一些例子还比较有用。", "marks": "还行"}
{"content": "After reading,I think I should using awk or perl instead of py in text processing. Orz", "marks": "还行"}
{"content": "翻译中...", "marks": "还行"}
{"content": "搞文本处理的可以看看", "marks": "推荐"}
{"content": "没有读完这本书，写作风格不是太喜欢，不过可以作为一个手册，当做文本处理工作时，可以翻翻相应的专题，参考参考代码", "marks": "还行"}
{"content": "这本书的写作风格真是让人相当的无语！见鬼。。。", "marks": "推荐"}
{"content": "a decent lisp book, though not as good as its antecessor. figures are more interesting than words...", "marks": "力荐"}
{"content": "趁着周末把这本书大概翻了一遍，比起little schemer，讲了不少新的内容。不过整本书有点累赘的感觉，感觉学究气息浓，对话形式看得好蛋疼。理解最后的推倒式回来再看对话反而更容易理解作者的意图.....", "marks": "推荐"}
{"content": "没看完.还剩最后一章.下次接着看...", "marks": "推荐"}
{"content": "网上的pdf竟然缺了30页...", "marks": "力荐"}
{"content": "introduce side-effect to eliminate redundancy 2015.1 collection of scattered wisdom", "marks": "力荐"}
{"content": "my hat still fits. good.", "marks": "力荐"}
{"content": "还得再读一遍..", "marks": "推荐"}
{"content": "理解什么是计算的本质", "marks": "推荐"}
{"content": "最后一章，懒得看了", "marks": "力荐"}
{"content": "有continuation的入门介绍 等 （忘了", "marks": "力荐"}
{"content": "作者说了 这本书只要懂英语和会数数就能看：）", "marks": "力荐"}
{"content": "学而时习之，不亦悦乎", "marks": "推荐"}
{"content": "一般。", "marks": "还行"}
{"content": "将 Church Encoding 化入无形之中。。。最后一章依旧是那么精彩！", "marks": "力荐"}
{"content": "最后几章需要琢磨琢磨，以后有空吧", "marks": "力荐"}
{"content": "确实不喜欢这种问答式的风格，尤其是里面老是喜欢抖一些匪夷所思的包袱，比如冰淇淋什么的，可能是文化差异吧。书本身是非常棒的。为了避免陷入对话，一般都是先自己解决问题，如果运行结果无误，就不再阅读对话部分了。", "marks": "推荐"}
{"content": "点到为止", "marks": "推荐"}
{"content": "十分详尽", "marks": "力荐"}
{"content": "架子有了，还得看源码啊", "marks": "推荐"}
{"content": "引人入胜", "marks": "力荐"}
{"content": "书都坏掉了（不是因为我读得太勤奋了…… -.-bb）", "marks": "推荐"}
{"content": "前半本走马观花，后半本略微认真读了些。虽然作者字里行间偶有幽默，但如果不动手，读起来仍显枯燥。", "marks": "力荐"}
{"content": "大名鼎鼎的LKD，内核的科普读物，适合只是要初步了解内核机理的初学者，里边没有大块的代码说明，只侧重于原理讲解，个人认为是Kernel Newbie的第一本读物。", "marks": "推荐"}
{"content": "利用碎片时间读的，不错的入门书。大数据现在还是Silo系统，需要了解上至应用，下至操作系统、甚至体系结构的方方面面。", "marks": "推荐"}
{"content": "相对较薄，肯定需要重读的", "marks": "力荐"}
{"content": "这是一本进攻情景分析linux代码前必看的书。字字真言。", "marks": "力荐"}
{"content": "着重核心内容，但总体而言比较简略，这么薄的书把一切说清楚也不可能，要想弄明白还是RTFSC吧！", "marks": "推荐"}
{"content": "内核的科普书", "marks": "力荐"}
{"content": "4->5", "marks": "力荐"}
{"content": "暂先休息一下", "marks": "推荐"}
{"content": "没有大部头内核类书籍的冗长，很简明，值得一读。", "marks": "推荐"}
{"content": "下个学期的课本", "marks": "推荐"}
{"content": "没有废话，只讲根本问题。", "marks": "推荐"}
{"content": "结合《现代操作系统》的理论，窥一下Linux的实现细节。", "marks": "推荐"}
{"content": "4m => 1 => 5\n内核入门经典,精读  内核设计类精品.", "marks": "力荐"}
{"content": "好书", "marks": "力荐"}
{"content": "初学kernel的不二选择", "marks": "推荐"}
{"content": "应该是最好的 linux 内核总览的书了吧，系统性地介绍了核心的几个部分，最后还谈到调试、代码风格、提交 patch 流程等等，以及开发内核过程中的种种注意事项，绝对干货。", "marks": "力荐"}
{"content": "不可避免的要开始学这个了", "marks": "推荐"}
{"content": "good", "marks": "力荐"}
{"content": "粗略读了一下，有些收获；", "marks": "还行"}
{"content": "就着Linux讲才有味道嘛", "marks": "力荐"}
{"content": "功力有限，走马观花", "marks": "推荐"}
{"content": "很好的内核入门书，已经有一些linux 使用常识的人向内核进阶的时候可以从这个开始。可以先看一遍，有一个对内核整体的框架了解。然后就可以结合《深入理解Linux内核》等书一个个的专题看.个人觉得这么进阶不错。当然，能反复看一点点深入思考最好.", "marks": "力荐"}
{"content": "轻松幽默，如沐清风。", "marks": "力荐"}
{"content": "大学里学的那点OS知识基本上都忘光了，于是只好一边翻阅《Operating System Concept》一边磕磕碰碰地读，还有一本Windows OS的书作辅助。没办法，太菜了。o(╯□╰)o（本书的翻译很有问题，大错偶尔小错不断，我是找了本英文书一起看的。）", "marks": "还行"}
{"content": "一头栽进内核可能永远出不来，这本书给了你一个总览的概念，给你一丝丝信心，去看《深入理解LINUX内幕》。不亏是大师，会忽悠，把这么复杂的东西，简单几页说完了。", "marks": "推荐"}
{"content": "最好的内核全局观入门。", "marks": "推荐"}
{"content": "总算读完了，书不错，不过内容有限，只算个概览，如果想深入估计还得亲自读源码再配着《linux内核情景分析》学，anyway，没那么多时间看了~", "marks": "力荐"}
{"content": "作者的简明精辟让我收益颇深", "marks": "力荐"}
{"content": "粗略的看过一点目录觉得挺好的。", "marks": "力荐"}
{"content": "这是linux kernel入门的好书，文字介绍多，代码较少", "marks": "推荐"}
{"content": "3-9章看得较为详细，其余粗读", "marks": "还行"}
{"content": "需要细细品，自己对其中细节加以扩充才好", "marks": "推荐"}
{"content": "评价很高，想看看\n内容不错，可以算是一个概览，把握整体面貌。中文版错别字、印刷错误很多，难道我买的是盗版的……？", "marks": "推荐"}
{"content": "通俗易懂", "marks": "推荐"}
{"content": "读着顺畅", "marks": "力荐"}
{"content": "分析Linux内核的，内容比较深\n今天又看了一下，发现两年前已经读过一遍了，这次看起来比起那是记得笔记要轻松了许多。", "marks": "推荐"}
{"content": "最佳内核入门读物！感觉以前顺序有点问题呢", "marks": "推荐"}
{"content": "不错的linux内核入门书，内核关键的设计部分讲解的都比较清楚。", "marks": "推荐"}
{"content": "太简略了点", "marks": "推荐"}
{"content": "一本严肃的书，算是建立起了操作系统原理和Linux系统编程之间的桥梁，就是作者老爱夹带私货还卖萌（喜闻乐见）", "marks": "推荐"}
{"content": "内核入门读物，内容准确而简单易懂", "marks": "力荐"}
{"content": "慢慢体会", "marks": "力荐"}
{"content": "看的英文版，作为入门还不错哦。", "marks": "推荐"}
{"content": "内容：概览linux内核的各个子系统 --eol--\n适合人群：1，linux爱好者一窥内核究竟(like me)；2，欲进入内核开发领域的入门者", "marks": "推荐"}
{"content": "轻薄是它最大的优势 :) 我喜欢这样的书, 因为书始终只能是引导, 读懂代码才能真正体会代码背后的思想. 就目前来说, 这书里面的许多知识都不够新了. 喜欢内核的人, 最后都应该加入LKML.", "marks": "推荐"}
{"content": "2.6版的内核开发时间很久，代码的变更比较大。这本书是基于较早期版本的，其中一部分内容如进程的O(n)调度已经被CFS给替代了。不过能够在一本不到三百页的书籍里面将linux内核的进程调度、锁机制、VFS等内容的实现及进化过程梳理得头头是道，而且语言风趣，可见作者实力。2012年读过的最佳书籍！", "marks": "力荐"}
{"content": "我读的是英文版本，因此读的有点慢，但是本书在整体上带你进入linux世界，全面介绍linux系统的设计实现，不过都不是非常深入的内容，但是绝对是想进阶linux内核的人第一读物，也是最好的初步教材。", "marks": "力荐"}
{"content": "读的是第3版，主要看的是中文，看不懂时就对照英文书看了。\n之前看到内存管理（第12章）时，打了5星。\n现在只有最后一章（设备与模块）加一小节（slab分配器）没看。\n再回头看这个评分，真是太不合理了……\n内存管理和虚拟文件系统两章讲的内容有点太少——即使作为入门的内核编程也太少了。英文版错误还是比较少的（主要集中在虚拟文件系统一章，有几个数据结构和讲解不一致），作为入门内核编程，英文可以打五星。然而中文的从虚拟文件系统开始，就错误不断，而且都是很低级的错误，也有不少翻译非常不恰当，不仔细思考就可能得到和英文完全相反的含义，中文最多3星。\n建议看时中英文对照看，如果没这条件会比较痛苦（当然如果英文比较好，可以直接读英文，那会顺畅许多）。", "marks": "推荐"}
{"content": "重读一遍，深入浅出，不乏幽默。", "marks": "力荐"}
{"content": "大致看了一遍", "marks": "推荐"}
{"content": "很好的linux内核入门书籍", "marks": "推荐"}
{"content": "经典教材，没有五星的原因也就是中译问题了。怎么这年代什么书都需要配合原版电子书呢……", "marks": "推荐"}
{"content": "细读了前五章吧，学习linux kernel不错的一本书！", "marks": "推荐"}
{"content": "一本小而精的内核书籍 零碎这翻看了两三遍 收获还是挺大的 比板砖似的内核书好多了", "marks": "力荐"}
{"content": "大名鼎鼎的LKD，深入浅出，值得一读再读的好书", "marks": "力荐"}
{"content": "看着挺薄,当时读得挺久的", "marks": "推荐"}
{"content": "书不厚，但是对于入门还是及概念的了解还是很好的", "marks": "力荐"}
{"content": "love", "marks": "力荐"}
{"content": "这本书讲实现比较多，分开os的各个部分来细讲，我总感觉看不到系统的全貌，需要一本高屋建瓴的书理清思路", "marks": "还行"}
{"content": "一家之言：学习Linux内核应该读的第一本书，本书提纲挈领。读完本书之后，上可读：Understanding Linux Kernel（深入理解Linux内核），下可践：Linux Device Driver （Linux设备驱动）。", "marks": "力荐"}
{"content": "超级棒！醍醐灌顶，豁然开朗啊！", "marks": "力荐"}
{"content": "旁听李毅老师的课的时候用的教材，没有选这门课，但是旁听之后还是受益匪浅。这本书讲Linux内核短小精悍啊，已经出了第三版，只不过还没有中文版", "marks": "推荐"}
{"content": "还算能看懂。。。", "marks": "推荐"}
{"content": "王笑臣那边借来的书，帮助自己深入理解进程和内存在内核层面的知识", "marks": "力荐"}
{"content": "入门必看，对一些kernel基础概念有大致的认识", "marks": "力荐"}
{"content": "确实有提纲挈领的味道,  先看一遍这书, 再深入看其他书 是比较适合的学习过程.", "marks": "力荐"}
{"content": "没有汇编基础，导致看了10几页就开启天书模式了……", "marks": "推荐"}
{"content": "不懂内核，看这本书也能知道一些linux内核的一些实现原理。", "marks": "推荐"}
{"content": "从数据结构和函数调用两方面介绍内核, 但是没有深入具体实现, 也未对比分析", "marks": "推荐"}
{"content": "刚读完第三版", "marks": "推荐"}
{"content": "看的是英文版的，比起情景分析，这本书有点概括", "marks": "推荐"}
{"content": "看过的最浅显易懂的一本Linux内核书籍。不过看到讲计时器的那章还是没有接着看下去……", "marks": "力荐"}
{"content": "这页数就注定悲剧！尴尬的作品，作者希望深入浅出又希望有一定深度。结果两个任务都没有完成。我只坚持到第三章....", "marks": "较差"}
{"content": " 内核入门", "marks": "推荐"}
{"content": "linux内核开发的经典入门书籍。多年前初涉此道时看过，值得翻阅重读。", "marks": "力荐"}
{"content": "Love被译成了拉芙，晕。。", "marks": "力荐"}
{"content": "理解Linux 内核2.6.10的好书，内容比较全面，真的，而且陈老师也翻译的很好。", "marks": "力荐"}
{"content": "非常有趣  作者翻译的也很认真 加入大量解释  个别部分稍显僵硬 看在上帝的份上 我发誓 你们再这么翻译就踢你的屁股", "marks": "推荐"}
{"content": "读过好多遍。会经常去翻的一本书。", "marks": "力荐"}
{"content": "挺好的，就是基本轮廓。但是不常用到，会经常忘记。", "marks": "力荐"}
{"content": "大学的一个寒假读的，这类书看的太多，但没有过多总结。", "marks": "推荐"}
{"content": "赞! 看得第一本内核书", "marks": "力荐"}
{"content": "对linux kernel  有一个 overview 的介绍 ", "marks": "推荐"}
{"content": "涵盖了linux系统内核的几乎所有东西，虽然浅但讲得广。适合初学", "marks": "还行"}
{"content": "太早看过，还不错。", "marks": "推荐"}
{"content": "这本书我认为深度有限，比较适合作为内核入门级读物。", "marks": "还行"}
{"content": "内核开发", "marks": "力荐"}
{"content": "算是入门级的内核教程，基本可以理解为比《操作系统》恐龙书更具体地对 linux 进行介绍，因为篇幅原因，细节只能点到为止。", "marks": "还行"}
{"content": "作者蜻蜓点水般的介绍了内核设计，对读者来说比较容易形成对内核宏观的设计概念，很不错。", "marks": "推荐"}
{"content": "需要的时候翻一下", "marks": "力荐"}
{"content": "在我读过的英文textbook里面算是比较烂的一本了，没有一个清晰的线索。不知道为什么被奉为经典。", "marks": "还行"}
{"content": "生吞活剥，硬是翻完了。帮助我理解了很多概念，特别是很少书涉及的PCI资源分配等硬件相关内容。本书细节很多，可以作为Linux驱动开发的API参考手册。要想真正理解某个子系统的概念，还是需要找专著，这本讲得太过泛泛。", "marks": "推荐"}
{"content": "第三版看了一点... \nUSB HotPlug 正好工作上用到", "marks": "力荐"}
{"content": "还是不能写driver。。", "marks": "推荐"}
{"content": "https://lwn.net/Kernel/LDD3/", "marks": "推荐"}
{"content": "Linux下驱动开发的不二选择", "marks": "力荐"}
{"content": "Practice guide for kernel newbie", "marks": "力荐"}
{"content": "经典ldd, 驱动开发必备no.1", "marks": "力荐"}
{"content": "这个是必读的吧", "marks": "力荐"}
{"content": "相当经典classic", "marks": "力荐"}
{"content": "好歹啃完了一遍。感觉更像是工具书。不太适合“从入门到精通”。位列经典可能因为同类的书太少了。", "marks": "推荐"}
{"content": "看到13章，发现有意思的东西不多，就半途而废了。\n作为一本教人写 Device Driver 的书，它理所当然的侧重于 How，具体来说就是如何往 Linux Kernel 提供的 framework 里嵌东西；而我比较喜欢讲 Why 的书，所以对本书中零星提及的一些有关 framework 构建和运转的部分比较欣赏（主要集中于第5、7、14、15章）。\n那些 How 的内容等到真正动手的时候再来查阅比较有效。", "marks": "还行"}
{"content": "must read!", "marks": "力荐"}
{"content": "从Documents和邮件列表里抽出来的，可以参考", "marks": "推荐"}
{"content": "4th遥遥无期. 唯一的driver基础. ", "marks": "力荐"}
{"content": "驱动入门书中最好的一本，没有之一！！", "marks": "力荐"}
{"content": "excellent!", "marks": "推荐"}
{"content": "每年必买的书", "marks": "推荐"}
{"content": "买的第二本电脑报合订本", "marks": "力荐"}
{"content": "yoygetea", "marks": "推荐"}
{"content": "初学者有用。", "marks": "推荐"}
{"content": "真正关键的地方其实很容易被忽略~", "marks": "力荐"}
{"content": "太高深了", "marks": "推荐"}
{"content": "精彩的杂志专栏文章，但集结成书就略微失之琐碎。可作休闲读物，端着架子学反倒不合适了。", "marks": "推荐"}
{"content": "自己功力不到位吧，启发不大", "marks": "还行"}
{"content": "如果不是因为翻译的原因，绝对是五星级的好书", "marks": "推荐"}
{"content": "这周在重温编程珠玑，看着老婆夹在书里的一页页笔记和代码，赞一下。我也得加油", "marks": "较差"}
{"content": "不是算法教材，是修炼编程思维和实践能力的武器。几点感想：1，用好标准库。2，算法、代码时间空间上的预估和优化。3，经典算法、数据结构（如排序，查找，堆等）要能深入剖析。4，编码后的验证测试，利用循环不变式、函数进入退出条件、断言、边界条件等指导程序正确编写。5，要认真看习题。", "marks": "力荐"}
{"content": "发现自己貌似有算法天赋", "marks": "推荐"}
{"content": "挺难看懂的，算法方面的东西一堆，而且有很多都是古老的问题。看了大概1/5的样子，后面的没有什么时间看了。不过书肯定是好书", "marks": "推荐"}
{"content": "面了几次发现...大家都出这上面的题...", "marks": "推荐"}
{"content": "找时间再读一遍", "marks": "力荐"}
{"content": "学到不少东西，原版5星。", "marks": "推荐"}
{"content": "有点深奥，打算再读", "marks": "推荐"}
{"content": "里边的例子太经典了，循循善诱，完全没有一般算法书的枯燥乏味，在这么一本小册子中能写得如此深入浅出，实在了不起。", "marks": "力荐"}
{"content": "引用某大牛的评价：如果嫌《计算机程序设计的艺术》太厚就先读读这本书吧", "marks": "力荐"}
{"content": "还需要再读一次", "marks": "推荐"}
{"content": "话说又忘了，找时间再看吧。", "marks": "推荐"}
{"content": "这本书现在想起来是真不错，可惜就是想不起来到底是在说什么了", "marks": "推荐"}
{"content": "翻译略差", "marks": "推荐"}
{"content": "基础讲的还不够，也许是作者的基础还不行吧", "marks": "推荐"}
{"content": "相当不错的一本书，内容也很有意思，虽然有很多没怎么看懂，不过有时间好好看看是准没错的", "marks": "推荐"}
{"content": "编程珠玑这本书有些生不逢时", "marks": "较差"}
{"content": "基本功啊基本功，当年看的时候不懂，现在懂了一点，感觉压力好大", "marks": "力荐"}
{"content": "好书，算法入门\r\n适合大二到大三，有了2w左右代码量，作为算法入门用。\r\n", "marks": "力荐"}
{"content": "将工程计算之美讲解的比较生动，强力推荐", "marks": "力荐"}
{"content": "真是一本好书，现在才读有点晚了.花了几天时间快速看了一遍全书，翻译的质量不高。所以决定买原版的细读", "marks": "推荐"}
{"content": "中文翻译太烂", "marks": "还行"}
{"content": "本书写的还算不错，里面的例子被很多公司扩展，并当作面试题，对于搞OI和ACM的人来说，里面的算法过于简单，对于一般的程序员来说，里面的内容还可以，总之能启发你进行思考。", "marks": "推荐"}
{"content": "那个站着会出错坐着不会出错的可怜程序真是太搞笑了。而且作者的跋里的精分流的写作风格更搞笑，第二版跋还煞有介事的搞了句名言然后继续精分。。此书作为睡前读物非常合适，每个段子都不长，睡前来一发，思考思考，然后就着了。。", "marks": "推荐"}
{"content": "写题", "marks": "力荐"}
{"content": "珠玑虽多，略显陈旧。", "marks": "推荐"}
{"content": "考虑重读它。", "marks": "力荐"}
{"content": "翻译不太好，理念很有启发意义", "marks": "推荐"}
{"content": "一本不是看一遍就可以束之高阁的书，即使这一遍是很‘深入’的", "marks": "推荐"}
{"content": "翻译太烂了。", "marks": "还行"}
{"content": "本书覆盖的内容不太多，主要有排序、抽样、查找、堆、字符串及一些编程原则和优化技术等，有时简短几句话就让我对一些问题有了新的认识，只觉以前写的程序太屎了", "marks": "力荐"}
{"content": "建议阅读原版", "marks": "力荐"}
{"content": "讲解的比较有趣！", "marks": "力荐"}
{"content": "几年后再看第二次吧  太菜了", "marks": "力荐"}
{"content": "一星给翻译。", "marks": "很差"}
{"content": "原版是好书 但是翻译极烂", "marks": "很差"}
{"content": "字字珠玑", "marks": "力荐"}
{"content": "此书当然是经典中的经典，但是中国电力出版社这一版的翻译实在太次了吧？！拿google翻译都比你强", "marks": "推荐"}
{"content": "马马虎虎", "marks": "还行"}
{"content": "能看出往日的光辉，但是内容确实陈旧了。引用 Knuth：那时候的很多想法，现在都写成 API 了。ps. 这本书讲的是高层次算法设计，跟 CLRS 并非同一类", "marks": "推荐"}
{"content": "已购.", "marks": "力荐"}
{"content": "写的挺好的，有的复杂的未看懂，温习了一些知识", "marks": "力荐"}
{"content": "只记得读过，但很惭愧，已经完全记不清书写的是啥内容了", "marks": "推荐"}
{"content": "@_@", "marks": "推荐"}
{"content": "面霸十足必备武器", "marks": "力荐"}
{"content": "分析问题相当不错，还有很多的题，应该属于培训编程思维的一本书。当然不能马上受益，觉得有些章节有些难。\n\n买了很多年了，没有读完过，现在印象最深的是“封底计算”（估算）那部分内容。", "marks": "推荐"}
{"content": "这本书是……名符其实的面试宝典。然而书中的许多知识确实如珠玑一样宝贵，这是一本能够提高一个程序能力的书，但它却这么薄！", "marks": "力荐"}
{"content": "最爱此类轻薄书籍, 我蹲厕所时爱看这本. :)", "marks": "力荐"}
{"content": "相当不错", "marks": "力荐"}
{"content": "二十年的锤炼，编程可以是一辈子的活，因为源自编程的快乐无穷无尽。", "marks": "力荐"}
{"content": "虽然读了很少一部分不过就算读过吧，因为再也不会读这本书的译本了——翻译得太烂了，烂到无以复加", "marks": "很差"}
{"content": "算法实践，真实的程序员而非算法的罗列。", "marks": "力荐"}
{"content": "以前看过的，不过现在又得重新去看了。", "marks": "力荐"}
{"content": "面试宝典", "marks": "推荐"}
{"content": "给4星，另外翻译的差了些。", "marks": "推荐"}
{"content": "值得反复细读，多思考", "marks": "力荐"}
{"content": "关于算法和程序设计的论文集，翻译的有一些问题，很多术语没有保留，看的时候要猜英语原句，比较费力", "marks": "还行"}
{"content": "最有价值的是程序正确性证明一章，而且该种手法贯穿全书，熟练过后，对提高个人代码质量有很大帮助。另一个可以参考的是，数据驱动的单元测试", "marks": "力荐"}
{"content": "记得很早就已经听说过这本书，一直以为只是纯粹的算法书。曾经试着读过，觉得有点难度，后来也就不了了之。\n\n之后读过了算法导论，最近重新尝试看这本书。发现这本薄薄的书讲的不完全是算法，而是一些实用的编程经验。怪不得书名叫编程珠玑。再次看这本书，并没有以前或者是其他人觉得那么难。相反，以前看算法导论的时候，讲的都是纯粹的算法，就算在解答数学题。而这本书通过大量的实践例子，来讲解如何去分析一个问题，运用合适的算法、数据结构来设计出解决方案。一题多解，深入浅出的方法让读者仿佛在一位经验丰富的导师一步一步的带领下，领悟算法中的美。\n\n由于本书比较简洁，如果是刚入门的同学就先放一放，建议是学了一些算法基础后再接触，效果会更好。", "marks": "力荐"}
{"content": "相当经典，区区几乎向所有的朋友推荐此书", "marks": "力荐"}
{"content": "看不出有多好", "marks": "还行"}
{"content": "好书啊,面试必备.呵呵", "marks": "力荐"}
{"content": "又是一本相见恨晚的书啊~ 哇哈！一本字字珠玑的册子！", "marks": "力荐"}
{"content": "值得一读。", "marks": "力荐"}
{"content": "薄，结合实际。\n不想传统的数据结构的教科书那样按部就班的传授。\n我个人更喜欢这种从实际入手，再向深入讲述的方格。", "marks": "力荐"}
{"content": "还不错 看过会有启发 但是没有那种眼前一亮的巨作感", "marks": "推荐"}
{"content": "适合算法入门，很有启发性。\n作者博学多识，其中引用的许多书籍也多非常有名。\n中国人很悲剧的一件事情，就是一开始就啃国人出版的书，花了那么多的时间，读得却不是最好的。。\n外国有很多算法书，写得都非常不错。。", "marks": "力荐"}
{"content": "书看得不够明白吧。觉得有些东西很简单，有些东西很经典。", "marks": "推荐"}
{"content": "很好的书，编程必看", "marks": "力荐"}
{"content": "珠玉在前，而自出机杼！", "marks": "力荐"}
{"content": "有意思的编程故事", "marks": "推荐"}
{"content": "一些通用的指导意见，思想可以借鉴，例子和程序有些比较古老，有些放到现在可能没有意义。可以一看的书，10分能给7分左右吧", "marks": "还行"}
{"content": "窃以为不太适合在还没了解各种标准库之前阅读此书。了解其中的思想比谨记其中的原则要重要的多。", "marks": "推荐"}
{"content": "简洁、精练的算法学习经典书籍", "marks": "力荐"}
{"content": "都说大道至简，这本书主要关注程序的效率，而且有很强的扩展性，要多复习", "marks": "推荐"}
{"content": "讲解算法的一本好书", "marks": "推荐"}
{"content": "必读", "marks": "力荐"}
{"content": "应该多看几遍。 可惜还得早。", "marks": "力荐"}
{"content": "很短，但是作者确实提供了一个很棒的思维方式，虽然据说英文版更好看", "marks": "推荐"}
{"content": "这本书最棒的地方是时刻提醒程序员最基本的东西才是最重要的", "marks": "力荐"}
{"content": "找工作那段时间看的，写的挺好，比较薄，容易看，讲了一些思想细节", "marks": "推荐"}
{"content": "好书，不过没有读完", "marks": "力荐"}
{"content": "短小精悍的算法书，缺点是时代稍久远，有些过时，但不失经典", "marks": "推荐"}
{"content": "可能中文版不太好，总之名不太符实", "marks": "推荐"}
{"content": "大学的时候看的。比较难啊。。", "marks": "力荐"}
{"content": "真的看不懂~~~呜呜", "marks": "力荐"}
{"content": "很多的小技巧", "marks": "力荐"}
{"content": "学了程序设计方法学才觉得这本书是写的如此的浅显易懂。", "marks": "推荐"}
{"content": "再也不编码了", "marks": "推荐"}
{"content": "还不错，想研究算法的可以仔细研究下", "marks": "推荐"}
{"content": "平时多思考吧！", "marks": "推荐"}
{"content": "珠玑", "marks": "推荐"}
{"content": "马马乎乎", "marks": "还行"}
{"content": "经典的计算机数据啊", "marks": "力荐"}
{"content": "看过1次，有收获。注意第二版与第一版的内容是不一样的 : )", "marks": "力荐"}
{"content": "很古老的一本书。", "marks": "推荐"}
{"content": "挺好！", "marks": "力荐"}
{"content": "追求算法高效的可以看", "marks": "推荐"}
{"content": "授之以渔的好书，可惜引进得太晚。", "marks": "力荐"}
{"content": "好多看不懂", "marks": "推荐"}
{"content": "可借不卖", "marks": "还行"}
{"content": "这本书根本不需要评论。。。极力推荐+看3遍", "marks": "力荐"}
{"content": "短小，精炼，没有更精妙的程序了。", "marks": "推荐"}
{"content": "内容的确不错，值得在空闲时间好好研究一下。未必有确定的解决方案，但确能提供很多有些的想法。", "marks": "力荐"}
{"content": "内容很精彩，可惜这翻译，哎", "marks": "推荐"}
{"content": "不知道是不是功力不到，很多读者说的醍醐灌顶的感觉并没有在我身上出现，就此书来说，并没有什么深奥的算法，作为一个转行学渣我也能看懂，二分法感觉也没有作者说的那么难以实现，各位也不要指望一本书就能提升内力。", "marks": "推荐"}
{"content": "这两颗星是给翻译的", "marks": "较差"}
{"content": "入门书", "marks": "推荐"}
{"content": "学习java大数据架构可以加QQ群460570824，向群主索取学习视频资料", "marks": "推荐"}
{"content": "内容略老，还是以state code来跟踪缓存授取的，对动态页面不受用，这种书应该与时俱进啊", "marks": "还行"}
{"content": "粗略的浏览了一些感兴趣的章节，不是我关注的主题。", "marks": "还行"}
{"content": "其实我想给三星半", "marks": "推荐"}
{"content": "非常全面的介绍web cache的书，作者本身是squid的作者之一。", "marks": "力荐"}
{"content": "经典教材...", "marks": "推荐"}
{"content": "不错的教材", "marks": "推荐"}
{"content": "= =||| 我看的时候很头大", "marks": "还行"}
{"content": "中文翻译去死...", "marks": "还行"}
{"content": "相对生涩一些，比较死板一点，不适合自学。", "marks": "还行"}
{"content": "比较概念性，和书名很贴切", "marks": "还行"}
{"content": "翻译书。。", "marks": "还行"}
{"content": "看了前面一部分", "marks": "较差"}
{"content": "翻译烂到史无前例! 等我看完, 要是有所改观我会改评分的= =", "marks": "很差"}
{"content": "入门好书，有时间还可以看看", "marks": "推荐"}
{"content": "说是概念，但这本书读起来还是有点小费劲的~~早就读了，今天想起来就把它给勾上吧~~", "marks": "推荐"}
{"content": "通俗移动，用于入门的。", "marks": "推荐"}
{"content": "虽说翻译不咋地，至少能领会其精神", "marks": "推荐"}
{"content": "浙大考研指定的书", "marks": "还行"}
{"content": "教材", "marks": "推荐"}
{"content": "翻译有些地方比较雷人。比如在讲进程生命周期时new可以翻译成“新的”怎么都感觉怪怪的。", "marks": "推荐"}
{"content": "课本", "marks": "推荐"}
{"content": "真的全是概念啊。。。", "marks": "推荐"}
{"content": "大学本科教材，搬家的时候收拾看到，就感兴趣的章节翻了一把，发现在有一定基础后去阅读这本书，真是言简意赅！总结得好，入门就比较羞涩难懂", "marks": "推荐"}
{"content": "翻译通病", "marks": "推荐"}
{"content": "大三读的，忘差不多了，只记得是一本挺厚的书。", "marks": "还行"}
{"content": "这是从大一看到现在的书啊，经典是该重复看的", "marks": "推荐"}
{"content": "个人觉得讲解的非常好，不过文中有些有着明显的错误，不过不妨碍阅读。", "marks": "力荐"}
{"content": "一般", "marks": "还行"}
{"content": "一般般 废话多 翻译差", "marks": "还行"}
{"content": "挺好的，虽然看起来有点累，但知识点还是很全的。都是概念性的东西。", "marks": "还行"}
{"content": "高等教育出版社...翻译成这样..去你奶奶个嘴吧!", "marks": "很差"}
{"content": "其实挺奇怪这本书在豆瓣上的评分比我想象的要低。一个半月前想要学操作系统苦于不得入门时，借来了图书馆所有和操作系统相关的书籍，大概都翻了一下后发现还是这本书讲的最为详尽清晰。两个星期看了500+/741页左右，有些章节跳过去了，打算以后把自己的OS Kernal写完以后再来刷一波操作系统，相信理解会更深入一些。", "marks": "推荐"}
{"content": "翻译很烂", "marks": "很差"}
{"content": "一些让项目管理更高效的观念，不过如果你在一家nb的公司，茶余饭后大家时不时就会聊的时候带点这些东西，耳濡目染也早知道了，随便翻翻，这类书可以看，但是用时超过40min就不划算了。。", "marks": "还行"}
{"content": "生活是如此重要，所以不必太认真，因为无论问题最初看起来怎样，它始终是人的问题。 ", "marks": "力荐"}
{"content": "我不得不说，这本书中的很多法则，我并没有看到其普遍性及意义。另外，翻译够烂，以至于也许很多精髓我并没有正确获得所以得出了以上结论……", "marks": "还行"}
{"content": "无论问题最初看起来怎么样，它始终是人的问题", "marks": "推荐"}
{"content": "充满智慧的书，更可贵在具有操作性", "marks": "力荐"}
{"content": "正确的废话+行业潜规则吐槽", "marks": "较差"}
{"content": "作者写起来虽然有时候会让人觉得他只是在搞笑，不过这些反直觉的东西，正是作者30年咨询工作经验血泪史的总结。如果有可能，最好不要再犯一遍同样的错。", "marks": "推荐"}
{"content": "很多道理换种方式说出来而已", "marks": "推荐"}
{"content": "我不知道是温伯格个人写作问题还是翻译问题，反正我是受不了", "marks": "较差"}
{"content": "温大师长于以故事说理，从生活和别人身上取经；知识技巧比较现实但是对我来说缺少应用背景和系统性……", "marks": "推荐"}
{"content": "读过不后悔", "marks": "力荐"}
{"content": "比较抽象。翻译不佳。", "marks": "较差"}
{"content": "相当多的，可以直接应用的可操作模型。需要买一本常放枕边。", "marks": "力荐"}
{"content": "学到两条有用的", "marks": "还行"}
{"content": "2004年7月17日", "marks": "还行"}
{"content": "咨询是应别人要求而影响他们的艺术。", "marks": "还行"}
{"content": "杰拉德先生很喜欢用比喻，不过看起来有些泛滥", "marks": "还行"}
{"content": "很不错,需要多看几遍,细品其中的道理.", "marks": "力荐"}
{"content": "很多道理讲的挺好", "marks": "推荐"}
{"content": "这是本史上最差的书，写的东西需要用几十年的经历去理解。", "marks": "力荐"}
{"content": "咨询的心理写的不错，值得一看", "marks": "推荐"}
{"content": "内容非常犀利坦诚，败在了翻译上", "marks": "力荐"}
{"content": "翻了翻原版……", "marks": "还行"}
{"content": "慢慢读，细细悟", "marks": "力荐"}
{"content": "很多道理让人耳目一新，即使不准备从事咨询行业，也对自己的生活有一定的指导性。", "marks": "推荐"}
{"content": "曾经一度想从事咨询的职业。", "marks": "还行"}
{"content": "第一次读的时候是两年前，现在又放到床前准备再读一遍", "marks": "推荐"}
{"content": "益智", "marks": "推荐"}
{"content": "见人说人话，见鬼说鬼话", "marks": "推荐"}
{"content": "书干货挺多，但翻译的挺差的。", "marks": "力荐"}
{"content": "神级书，分析很多观点与我不谋而合，实践篇看来真需要实践", "marks": "力荐"}
{"content": "很多时候思路很重要，而这本书且且为我提供了一个不同的思路。", "marks": "力荐"}
{"content": "不是要帮别人解决问题。而是帮助别人在以后的日子里如何自己解决问题。要让客户认识到咨询师有多么了不起。就等于让客户知道他们有多失败。", "marks": "推荐"}
{"content": "一个一个的法则，一个一个的小故事，支离破碎。看完不到一半果断弃", "marks": "较差"}
{"content": "the secret of consulting, and not only consulting", "marks": "力荐"}
{"content": "缺点是都是思路比较散的小故事，不成系统；好处是小故事吸收起来块，有同感", "marks": "还行"}
{"content": "入门", "marks": "推荐"}
{"content": "咨询必读", "marks": "力荐"}
{"content": "世故睿智的可爱老头写的一本很有趣的书。", "marks": "力荐"}
{"content": "写作风格很不适应，不知道是不是读原文能有所缓解。有些法则值得仔细琢磨，用于辅助的有些故事倒是感觉可有可无。", "marks": "还行"}
{"content": "这本书写出了咨询行业的潜规则。", "marks": "推荐"}
{"content": "……", "marks": "推荐"}
{"content": "外部咨詢師的作用就是晃動器", "marks": "力荐"}
{"content": "忘完了", "marks": "还行"}
{"content": "温伯格的书永远是那么有趣、富有价值", "marks": "力荐"}
{"content": "难得遇到选中的书坚持读还是读不下去的情况。觉得组织得非常零散，沉冗。虽然里面偶有比较好的东西。", "marks": "较差"}
{"content": "咨询行业定律规律的精妙总结。微言大义，非常值得反复把玩，在许多其他领域也有借鉴作用。", "marks": "力荐"}
{"content": "本书是关于如何更好的给别人建议或接受别人建议的。作者通过对自己25年专业经验的总结和提炼，精辟地归纳出了各种规则、定律和原理，其中包括如何在竞争激烈的咨询市场中脱颖而出、如何为咨询服务定价和拓展市场、如何衡量咨询服务的有效性，以及如何处理咨询人员与客户的关系等等。", "marks": "力荐"}
{"content": "看的是电子版，质量不是很好，找不到卖的…………", "marks": "力荐"}
{"content": "很多观点说的很浅显，但不是很好懂，如果真的入了这行，后头看看应该很有感觉。", "marks": "推荐"}
{"content": "本文从更实际真实的角度剖析了广义的“咨询”本质，彻底打破了对于人们心目中咨询的神秘，让人感到这份行业的不容易，记得里面有段话大致说，如果你想找个清闲悠哉的职业，还是别考虑咨询这个工作。里面涉及到的各个咨询原则对于思考、交流以及决策都有很好的参考意义。", "marks": "推荐"}
{"content": "购买", "marks": "力荐"}
{"content": "“你的客户为你付钱越多，他们就越爱你。”我会一辈子记住这句话。", "marks": "还行"}
{"content": "内容很棒，可惜翻译把这本书糟蹋了。前面读起来晦涩难懂，但是好歹能懂，中间的读起来已经不知道在说什么了。──这是翻译毁掉一本书的经典案例。", "marks": "还行"}
{"content": "did not meet my expectation out of the book name", "marks": "还行"}
{"content": "理和法。", "marks": "推荐"}
{"content": "一些好玩的思路", "marks": "还行"}
{"content": "还是有收获的，这货是方法论，不是具体知识。", "marks": "推荐"}
{"content": "一本奇书，可以不断翻读", "marks": "力荐"}
{"content": "充满幽默和人文关怀，虽然在中国有些法则行不通", "marks": "力荐"}
{"content": "神一般的温伯格", "marks": "力荐"}
{"content": "拨云见日啊", "marks": "力荐"}
{"content": "永远站在他人角度考虑他人感受", "marks": "推荐"}
{"content": "只看到50页，全是法则及其事例，看看人家总结的法则就行了。", "marks": "较差"}
{"content": "改善替代完美。了解状况并帮助他们避免问题。帮助别人的最好办法就是帮助自己。行外人读来大有裨益。不建议从前往后读，书末有法则列表，先看一遍，挑感兴趣的看，效率高吸收好。", "marks": "力荐"}
{"content": "图书馆里面有", "marks": "还行"}
{"content": "无论企业（问题）看起来怎么样，它始终是人的问题。\n", "marks": "较差"}
{"content": "这个翻译啊，太恶心了。", "marks": "较差"}
{"content": "不仅仅适合咨询人士看，里边的内容质量很不错！", "marks": "推荐"}
{"content": "看第二遍的时候 说不定五分呢\n", "marks": "推荐"}
{"content": "2017第62本，某个领域总是存在宏大问题或者关键问题，专门的行业书好不好，要看是否做到主线综述+更贴近核心的提问+解决问题的假设与案例，这本书明显没有做到这些。可取的两个知识点：1、接纳需求的同时提出相等代价的费用 2、给自己留出空余时间随时迎接新的挑战。", "marks": "较差"}
{"content": "温伯格的名著，咨询界的圣经之一。感觉管咨询领域是出大师、名家的地方，德鲁克、科特和温伯格都是典型代表，原因可能是但凡从事这一行业，都会阅历丰富、见多识广，读万卷书、行万里路、阅人无数，有积淀，所以能厚积勃发。本书文字流畅，诙谐幽默皆文章，寓洞见于嬉笑之间，具有极强的可读性！", "marks": "力荐"}
{"content": "一本需要时习时新的书. ", "marks": "推荐"}
{"content": "书是好书，书中的很多观点给我眼前一亮的感觉。但是不得不说，读早了，很多内容在工作中没有类似经验，无法深刻领会作者的意思。", "marks": "还行"}
{"content": "倒是挺像人生顾问而不是商业顾问。作者把顾问说的倒像是个骗子哦：不要给客户解决10%以上的问题；顾客不求你，决不要主动提供帮助；无为，就像90%的病是不治而愈的，医生的作用就是让病人不会吃药吃坏了；沉默是让会议快点结束的最佳办法；顾客给你的钱越多就越爱你，给你的钱越少就越不尊重（放在爱情里也一样吧）；无论你多努力，大多数时候还是什么都不会改变；缺点不能改正就让它变成特色，变不成特色就粉饰，反而言之一旦发现被粉饰的东西，说明肯定不对劲啦；失去的最佳方法就是拼命想要抓住；人们通常购买的是标签而不是商品；潘多拉的盒子里最致命的是——希望，一次次希望会有改变，最后还是无疾而终；泰坦尼克效应：失败通常发生在被认为最不可能失败的地方；对某地越适应，可改变性就越弱。p.s 作者列出太多的法则，打断读书思路", "marks": "还行"}
{"content": "所谓咨询，就是应人们的要求去影响他们的艺术！其实，每个人都是咨询师。咨询第一法则，无论客户和你说什么，问题始终存在。第二法则，无论问题最初看起来怎样，它始终是人的问题。第三法则。。。想知道的话，你应该去读一下。", "marks": "力荐"}
{"content": "好到我都舍不得分享了。", "marks": "力荐"}
{"content": "咨询原来是这样的", "marks": "力荐"}
{"content": "Lovely book with quite insightful tips, for work and for life. Shortcoming is the way of storytelling, a bit trivial, not systematically. Need to sum up by readers...", "marks": "推荐"}
{"content": "比较玄乎, 感觉离自己还是有点远. 或许管理咨询和技术咨询还是有很多本质的区别的.", "marks": "还行"}
{"content": "真的好棒，咨询从业50年的老顾问，写的东西深入浅出，用最易理解的描述讲出了深刻的规律和道理。KINDLE一刷，纸质版二刷。", "marks": "力荐"}
{"content": "不过说实在话，太多的法则如潮水般向你涌来。", "marks": "推荐"}
{"content": "寓言式的故事太多，都得细品。。这年头骂译者已经成为时尚，只要没说它好，默认值都是烂额。", "marks": "推荐"}
{"content": "不能只关注如何解决技术问题，还要关注合作者的感受。", "marks": "力荐"}
{"content": "与其叫咨询的奥秘，不如叫人生的奥秘，无聊乏味，不知道是不是翻译的问题，更多想一个在咨询写作经济圈都混得风生水起的人灌输自己的人生观。", "marks": "较差"}
{"content": "一堆定律光记名字就晕了，这种让人读了觉得很对但是又由于记不住等原因而最终没什么用的手法，也是咨询的一大法宝啊", "marks": "推荐"}
{"content": "有点心灵鸡汤的感觉", "marks": "推荐"}
{"content": "he really a thinker! and it's talented ways not only in advicing, but in life. ", "marks": "力荐"}
{"content": "没什么实质性的解决方案", "marks": "还行"}
{"content": "看了淘宝上的复印版", "marks": "推荐"}
{"content": "大师作品，将你知道的以理论的方式讲出来，将你不知道的以深入浅出的方式让你明白，没打五星是因为翻译。", "marks": "推荐"}
{"content": "点子汇总 没有方法论  有些可以借鉴", "marks": "还行"}
{"content": "看多了\"工匠精神\"，看多了对GEEK的，对初心的赞美，再看看这咨询业的狡黠，真是妙极！", "marks": "力荐"}
{"content": "好书不多说了", "marks": "力荐"}
{"content": "解决问题： 先处理情绪（10%法则），再处理问题  or  证明自己？", "marks": "力荐"}
{"content": "据说是一本咨询界的经典，正对咨询发生兴趣，需要好好看看了", "marks": "还行"}
{"content": "电子版看的着实很费劲，不过受益匪浅.... ", "marks": "力荐"}
{"content": "很有意思", "marks": "力荐"}
{"content": "我以为会有什么咨询技术类的技巧", "marks": "较差"}
{"content": "个人2005年最喜欢的一本书。该书不光为计算机从业者提供了指导思想，还影响了我的处事则学。\n\n最早的读书笔记本上还手抄了目录。没有思考的东西不会属于自己。现在能回忆起有：橙汁测试，每次优化不超过10%，叫客户切换方法-真是因为现有方法不凑效，才会寻求咨询服务等。值得重读.", "marks": "力荐"}
{"content": "没什么可说的, 想说的都在书里了", "marks": "推荐"}
{"content": "不管是不是打算引入咨询的企业，还是咨询师本人，在这本书里都会找到你想要的。", "marks": "力荐"}
{"content": "第一遍看着有些小郁闷，有机会重读一遍", "marks": "还行"}
{"content": "居然真的有这本书。", "marks": "推荐"}
{"content": "黑色幽默", "marks": "力荐"}
{"content": "易懂，需再读", "marks": "推荐"}
{"content": "不想多说，牛到爆的一本书", "marks": "力荐"}
{"content": "温伯格说的对 所有的问题都不是简单的问题 而是人与人之间的问题   心理学真的很重要 ", "marks": "推荐"}
{"content": "有趣、富有价值 ", "marks": "力荐"}
{"content": "绝对好书，读得不下五遍。但是难求一本珍藏啊。", "marks": "力荐"}
{"content": "通俗易懂，尤其是在学完HPO后，读起来体会更多。以后不从事咨询行业的人也是可以读读的，会领悟到很多沟通的技巧和原则。推荐", "marks": "推荐"}
{"content": "觉得很不错^^", "marks": "力荐"}
{"content": "干货还是有的 就是翻译太差读起来很累", "marks": "还行"}
{"content": "好书", "marks": "力荐"}
{"content": "不管是有问题要解决，还是帮助别人解决问题，里面的思维方式都可以借鉴。", "marks": "力荐"}
{"content": "变量定义在C/C++都会与位，地址连接，所以都和硬件结合；python函数定义和参数结合，函数调用和变量结合", "marks": "力荐"}
{"content": "本书优点是生动有趣，适于入门者阅读。但平心而论在 Python 和 CS 方面都不够深入，不少地方没有引导读者思考而是过早给出代码，而且结构稍显混乱。不过考虑到本书给我的帮助，还是给出四星的评分吧。", "marks": "推荐"}
{"content": "可以免费下载的～   地址在简介里有～", "marks": "推荐"}
{"content": "涉及的内容不多，但写得挺适合新手入门。但不理解为什么要把类的介绍之类的放在所谓的附录里，而且分量很少。\n相比之下还是觉得Guido老大的tutorial更好点。", "marks": "推荐"}
{"content": "python 入门讲解。也很适合学英文。", "marks": "还行"}
{"content": "大概翻了一下，是一本介绍python语法的书，适合入门？不知道呢=.=", "marks": "还行"}
{"content": "這是美國的高中教材。差距就是這麼一點一點形成的。", "marks": "推荐"}
{"content": "MIT的教材，目前已用于南方科大的CS课程中", "marks": "力荐"}
{"content": "这书讲Python的部分注重细节而有节制，后面讲了好多数据结构的知识，用来入门很不错。但这本书不适合作为语法参考，也不适合无编程经验的人入门。另外我都入门这么久了，该可以写点东西了……", "marks": "力荐"}
{"content": "在高三那个暑假就是这本书带我走进了Python‘s Wonderland。", "marks": "力荐"}
{"content": "实例很好很丰富，不过看的有些枯燥", "marks": "还行"}
{"content": "太基础，和think无关！", "marks": "还行"}
{"content": "真的把什么都给你讲清楚了。还短。", "marks": "力荐"}
{"content": "Python入门书，还不错", "marks": "力荐"}
{"content": "MIT一个比较简单的课程的入门书。。没事看着玩撒", "marks": "推荐"}
{"content": "很浅显, 适合入门..副标题有点大了.", "marks": "推荐"}
{"content": "很基础，但却是很好的入门书。", "marks": "推荐"}
{"content": "真的很不错，是我目前接触到的教材中最好的！", "marks": "力荐"}
{"content": "简洁明了，初学者入门经典。", "marks": "推荐"}
{"content": "直接读Appendix就好了.", "marks": "还行"}
{"content": "目前为止最喜欢的风格。。很喜欢 _(:3」∠)_", "marks": "力荐"}
{"content": "入门介绍", "marks": "还行"}
{"content": "将复杂问题讲得简单，非常好，最印象深刻的是“算法”的定义。不过我最后的数据结构部分没怎么认真看", "marks": "力荐"}
{"content": "用作入门还OK，读了一半，给中学生写的，简单易懂。MIT 6.00\n推荐用书", "marks": "推荐"}
{"content": "居然真有GNU License的书，无意发现Python入门的好书～～～～ 没有“喧嚣”的市场推广，没有深奥的数据结构分析，20章都是很\"入门“的，还有单词又简单嘻嘻～～～～", "marks": "推荐"}
{"content": "适合入门", "marks": "推荐"}
{"content": "EdX上某门课的参考教材，如果把这本书当成python入门书，会觉得写得太浅。但正如题目所表明的，这本书的真实价值在于引导读者建立正确的思维方式。重读书中自己已经学习过的概念，依然会有新的收获和启发。第12-16章非常适合为OOP打基本功。", "marks": "力荐"}
{"content": "入門", "marks": "推荐"}
{"content": "面向对象如果是刚接触CS或者编程的学生的话，是本很不错的教材，教人怎样从computer scientist的角度来分析问题，解决问题。有一些简单的练习，但对python的语法、标准库讲得不是很深，毕竟侧重点在how to think like a computer scientist，python只是how to think的工具。", "marks": "推荐"}
{"content": "一本相当不错的程序设计入门书籍", "marks": "推荐"}
{"content": "喜欢这个系列的书, 浅显易懂, 适合打发时间.", "marks": "推荐"}
{"content": "。。。不到三百页。。居然看了两周多。。。", "marks": "还行"}
{"content": "很清晰的入门书", "marks": "力荐"}
{"content": "Data Encapsulation:\nThis example suggests a development plan for designing objects and methods:\n1. Start by writing functions that read and write global variables (when necessary).\n2. Once you get the program working, look for associations between global variables\nand the functions that use them.\nEncapsulate related variables as attributes of ", "marks": "力荐"}
{"content": "CS101的教材", "marks": "力荐"}
{"content": "挺好的.就是太简单了.适合初学.所以只是简单的浏览了一遍.", "marks": "力荐"}
{"content": "入门书籍", "marks": "还行"}
{"content": "应用型的理论\n", "marks": "力荐"}
{"content": "很一般，空洞乏味", "marks": "较差"}
{"content": "一本基础的不能再基础的专业书。即使毫无软件工程基础的人也能读懂的书。非常适合入门级的产品经理去了解", "marks": "力荐"}
{"content": "翻译太糟糕", "marks": "还行"}
{"content": "当初自学计算机的时候，最先看的几本书。其实挺启发兴趣，以及科普知识的。", "marks": "推荐"}
{"content": "数学味重", "marks": "推荐"}
{"content": "本来在5分档次的，可惜印刷错误太多了。瑕不掩瑜。", "marks": "推荐"}
{"content": "在算法书中，这本可以算是蛮差的了。要恶心自己的话，可以认真读一读", "marks": "较差"}
{"content": "非常不错的一本书。呵呵，又读了一次。", "marks": "力荐"}
{"content": "不错的教程", "marks": "还行"}
{"content": "帮助我弄明白了很多似是而非的概念，清晰透彻。别被标题误导，内容很全面。", "marks": "力荐"}
{"content": "新浪面试前突击看过前几章，还是有点用的", "marks": "力荐"}
{"content": "我不太理解这本书为什么在豆瓣评分这么高，它始终让我有一种标题党的感觉。大多数是基础知识，指针的复杂用法又寥寥数笔，基础知识不够讨巧，高级应用又不深。", "marks": "还行"}
{"content": "全面细致\n", "marks": "力荐"}
{"content": "还行吧，比0基础的稍微好一点。非常适合我这种想快速重拾c语言的人。", "marks": "推荐"}
{"content": "完美的你的第2本介绍C语言的书籍，我有点相见恨晚的感觉，为何我大一的时候没发现这本书呢。", "marks": "力荐"}
{"content": "我认为这本书是最全面详尽的C语言教程。如果说关于C语言只推荐2本书，那无疑是K&R和这本", "marks": "力荐"}
{"content": "想把指针真正看明白就看这本书", "marks": "力荐"}
{"content": "入门+进阶", "marks": "力荐"}
{"content": "const*", "marks": "推荐"}
{"content": "好吧，把标题理解成全讲指针的了，其实是C的全面介绍，语文老师泪流满面", "marks": "力荐"}
{"content": "对于讲的比较透彻，可能译者的原因会使读者的理解有所偏差，但相信原作所表达的意思是到位的。", "marks": "力荐"}
{"content": "要多实践才能理解里面的意思", "marks": "力荐"}
{"content": "其实这也并非指针的专著，但是关于指针的用法确实是最清晰深入的", "marks": "推荐"}
{"content": "C程序员必读", "marks": "力荐"}
{"content": "经典之作。", "marks": "力荐"}
{"content": "经典的c语言教程。", "marks": "力荐"}
{"content": "必看！", "marks": "力荐"}
{"content": "经典之作。", "marks": "力荐"}
{"content": "to master C - the simple and free language", "marks": "力荐"}
{"content": "这本书要特别说一下，因为是我看过谭浩强后的第二本C教材，真正的入门书，前者只能让我踩在门槛上。\n现在看来，还有很多好书适合入门，比方说《C Primer》。这本书的好处在于最适合做第二本。第二本书也是入门阶段，但是对于有志于编程的初学者来说，将入门分为两个阶段是有必要的，因为从学习曲线上说，C语言的学习相对其他语言在前期是不容易见成效的，如果没有长远的分阶段的计划，是容易挫伤积极性的。类似于《C Primer》这样的书，可以看做是第一本和第二本的合集。", "marks": "推荐"}
{"content": "很棒的一本书", "marks": "力荐"}
{"content": "适合有一点基础的，更深入了解C语言", "marks": "推荐"}
{"content": "因为要从.net转为c，可是大学学了c后就玩过了，就选了这本书作为语法书，写的很详细的且易懂，建议作为入门参考书", "marks": "力荐"}
{"content": "同样是在mp3上读完的。c入门不可不读", "marks": "力荐"}
{"content": "大三的时候才看这本书的.相当透彻.", "marks": "力荐"}
{"content": "推荐，除开几处排版失误。", "marks": "推荐"}
{"content": "6页记录，经历过c后作为一定的经验总结来看，不错；后半段，编译环境，输入输出没有完全看懂，先放着，需要实际操作后再去阅读。", "marks": "力荐"}
{"content": "温故一下 还是有好多收获", "marks": "还行"}
{"content": "系统的阐述了C的灵魂——指针的用法。达到了艺术的高度。如果你想深入灵魂的了解C的内涵。这本书是你的不二选择。", "marks": "力荐"}
{"content": "扫去了多少旮旯角落的阴霾", "marks": "力荐"}
{"content": "love that book! still reading it sometimes.", "marks": "力荐"}
{"content": "不错哈", "marks": "推荐"}
{"content": "没有读完，感觉不错。不过，重点不够突出。", "marks": "推荐"}
{"content": "好像好早读过这本书啊，具体不记得了，里面的章节也模糊了，但是还记得当时读完的感觉，C指针很强大而且比你想象的灵活，但危险要注意安全！写C代码包含指针时候，你需要多留些心眼。", "marks": "推荐"}
{"content": "比起C programming language，我更喜欢这本，尤其更喜欢数组那章", "marks": "推荐"}
{"content": "c程序员当然必读的一本书。  也需要经常回头看看", "marks": "力荐"}
{"content": "几年前看过，记得还是不错的", "marks": "力荐"}
{"content": "非常适合学C的同学中等进阶。。。", "marks": "力荐"}
{"content": "不光是讲指针的，其实可以当做c语言的入门书", "marks": "推荐"}
{"content": "确实是一本适合C语言入门的好书", "marks": "推荐"}
{"content": "很适合初学者。", "marks": "推荐"}
{"content": "语言这种东西，老不用就忘了，再读一遍也还是有收获", "marks": "推荐"}
{"content": "讲解的不错，不过我还是作为参考书看看", "marks": "力荐"}
{"content": "与其说叫C和指针，不如叫做C语言进阶，里面讲的很多确实是以前没有见过的，个人感觉读此书比读C 专家编程 更有意义", "marks": "力荐"}
{"content": "程序员。。。", "marks": "力荐"}
{"content": "c语言的入门书籍。", "marks": "力荐"}
{"content": "这本书对指针的用法讲的非常详细，但是学好计算机基础才是程序设计的基石，过多的关注这些操作是没太大意义的。", "marks": "推荐"}
{"content": "这本书有难度，里面的例子感觉与教学不匹配。内容真心好", "marks": "还行"}
{"content": "书是不错，适合有点基础的初学者看；就是翻译的不好。", "marks": "还行"}
{"content": "程序的形式复杂性并不必然意味着真诚的信服。", "marks": "推荐"}
{"content": "浅显。不过还是很诚恳的一本页数较少的书。", "marks": "推荐"}
{"content": "这本书不错，写作技巧上有独特之处，看似娓娓道来，其实转折之处却一针见血。另外，内容也不错，有的地方深入浅出的阐述着程序的理念观点。偶有看似疯狂之处，也能让意见不同的读者自动忽略。总之，我觉得还不错。", "marks": "力荐"}
{"content": "拜拜垠神的老板之一。。。", "marks": "力荐"}
{"content": "这不是程序语言，这是纯智力游戏。", "marks": "推荐"}
{"content": "刚下了一本，159页？但是却标明第４版啊", "marks": "推荐"}
{"content": "第9章的Y combinator可以参考http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html 和 http://cuipengfei.me/blog/2013/04/09/make-y/", "marks": "力荐"}
{"content": "以前窝mm跟窝说，要改当码农挣大钱养我。然后就教了她老scheme，再后来好像也没有变成码农挣大钱，具体怎么回事忘了。LISP好，大家一定要多学LISP。", "marks": "力荐"}
{"content": "Felleisen: study hard and enjoy", "marks": "力荐"}
{"content": "第八章凶起来了……continuation和 Y combinator还需要时间理一理，还有那个解释器", "marks": "力荐"}
{"content": "所有讲程序设计语言的书里最神奇的存在。", "marks": "力荐"}
{"content": "好基础额", "marks": "还行"}
{"content": "前面七章是可以快速扫过的铺垫 最后三章才是重点 Lambda/Y Combinator的介绍 如果不是用LISP 去掉一些阻碍人类阅读的多余括号的话 应该不会那么难懂(看) ...", "marks": "推荐"}
{"content": "言簡意賅的表達了scheme的設計思想 最後兩個Chapter講Y combinator和interpretor真的講的很精彩", "marks": "力荐"}
{"content": "由于从小接受苏联式课本教育，遇到这类循循善诱的讲授方法便很不适应。但无论如何，学习一门新语言，就像去异邦旅行。不得不说这个地方很新奇。", "marks": "还行"}
{"content": "这个风格实在是太适合做教材了，自问自答、精辟到位，而且知识点是系统化组织起来的。建议软院爱尔兰班FP课程采纳。", "marks": "力荐"}
{"content": "学习S表达式最好的入门书籍，强烈推荐所有对编程感兴趣的人阅读，而且这本书的写作形式与内容高度统一，必须说是神作。", "marks": "力荐"}
{"content": "短小精悍，学习scheme入门最佳书籍。", "marks": "力荐"}
{"content": "Comupter Scienist，都是心理学家其实，随和亲切，春风化雨，simple is best// 8.9.10三章，太棒了", "marks": "力荐"}
{"content": "看这本书期间，我梦到自己递归递归...直到醒时才找到出口", "marks": "推荐"}
{"content": "函数编程和递归入门，问答形式新颖易读。Y Combinator现在还没彻底明白。需要再读。", "marks": "力荐"}
{"content": "read it in an hour during flight from boston to dallas... kind of smart and tricky ways to describe the lisp=)", "marks": "力荐"}
{"content": "非常喜欢这种书，非常多的练习，循序渐进的引导....lisp语法很简单，但语言的表现力却让人着迷不已....授人以鱼，不如授人以渔，谢谢作者Daniel 让我深切的体会到主动的思考和不断练习的好处...要看seasoned版了，宝盒里面究竟藏着什么东西呢", "marks": "力荐"}
{"content": "learn scheme in hard way", "marks": "推荐"}
{"content": "这算是哲学书吗？", "marks": "力荐"}
{"content": "健脑，防止老年痴呆要从青年抓起。", "marks": "力荐"}
{"content": "前面还觉得有点啰嗦，从倒数第三章末尾开始：continuation，停机问题证明，y combinator，scheme解释器的一个非常简洁的实现。Wow", "marks": "推荐"}
{"content": "理解递归。", "marks": "力荐"}
{"content": "非常有意思的书。", "marks": "力荐"}
{"content": "形式新颖，举重若轻", "marks": "推荐"}
{"content": "这文体真是坑爹啊..", "marks": "还行"}
{"content": "适合6岁以上儿童阅读~", "marks": "力荐"}
{"content": "clear and lovely part of Scheme.\nbefore you touch the real world complex Scheme", "marks": "推荐"}
{"content": "Scheme语言的入门神作。", "marks": "力荐"}
{"content": "奇妙的方式講解了遞迴的本質、Scheme 直譯器，一本很好的腦力練習書。", "marks": "力荐"}
{"content": "其实还差最后三章，已经忍不住要给它打分了", "marks": "力荐"}
{"content": "Functional Programming + Recursion 正确启蒙方式", "marks": "力荐"}
{"content": "1到7章很简单，后三章却是另一个难度。第8章让你意犹未尽，这是一种很有意思的技巧，却不知道它具体是怎么运作的。还好看过Y算子，不然第9章就完全如坠雾中了。最好去找找第10章的完整代码，否则就会陷入无尽的代码片段中。总的来说，内容很给人启迪，回味无穷，仿佛自己能给出更精彩的诠释，可实践过却发现真的很难，更感叹作者的不易。", "marks": "推荐"}
{"content": "Amazing enlightenment!", "marks": "力荐"}
{"content": "不太适应这种一问一答的写作风格", "marks": "力荐"}
{"content": "教学真不错。", "marks": "力荐"}
{"content": "这本书对我的价值不大。。\n不喜欢这种写作方式。。", "marks": "还行"}
{"content": "小书才能读完...", "marks": "推荐"}
{"content": "很好玩很好读⋯⋯两个小时读完吧如果有一点点程序基础", "marks": "力荐"}
{"content": "第九章applicative-order Y combinator好懵好懵好懵 救命啊", "marks": "力荐"}
{"content": "javascript 的根在scheme上", "marks": "力荐"}
{"content": "一问一答的形式组成了正本书。很有特色，写得也很好。", "marks": "推荐"}
{"content": "看了几章。得出了如果不是入门就看SICP的评价。", "marks": "还行"}
{"content": "太有爱的", "marks": "力荐"}
{"content": "前七章都是虚的，后三章才是正经。好吧，我是第一次见应用序的 y 组合子，之前只推导过正则序的", "marks": "力荐"}
{"content": "关于LISP，最佳入门书籍", "marks": "力荐"}
{"content": "好书，以前居然以为简单没看下去......不是简单，是基础。第一本从头看到尾的英文书。", "marks": "力荐"}
{"content": "第一次读问答式类的书，比较细节", "marks": "推荐"}
{"content": "幽默风趣的对话式讲解风格，作者相信读者能自己顿悟的递归思想，广度涵盖的也不错，深度稍有欠缺，但不是有SICP总结了吗？，呵呵", "marks": "力荐"}
{"content": "基本上花四五个钟头就能读完了。前半部分主要介绍了Scheme里的一些概念，十分简单。书的精华主要在后半部分，包括currying、continuation。然后推导了一下Y Combinator。最后实现了一个Scheme的解释器。", "marks": "力荐"}
{"content": "经典好书。", "marks": "力荐"}
{"content": "虽然号称是入门书， 看懂却不容易。", "marks": "力荐"}
{"content": "在 google books 上有电子版的，不过缺少 chapter 6 Shadow", "marks": "推荐"}
{"content": "比较容易的一本书。一是题目难度小，边看边写把大部分题都做了；二是不需要英文水平。比起sicp第一章就做数学运算，这本书更适合入门。", "marks": "力荐"}
{"content": "很棒的书。作者也是略鬼才了，各种奇葩例子绕你。然后很轻松的又抖落出一些重点。", "marks": "力荐"}
{"content": "很洗脑", "marks": "推荐"}
{"content": "第九章读不进啊读不进，第十章找不到啊找不到", "marks": "力荐"}
{"content": "打印了整本书，搞得我一个墨盒快用完来。以后再也不打印了。正本书循序渐进，中间介绍了Scheme中的重要概念和编程习惯。我是第一次接处觉得，在语法和概念上都需要跟深入的学习。作者也说了本书只是一个介绍（introduction)", "marks": "推荐"}
{"content": "入门，对lisp的基本元素有一个大概的了解。虽然是schemer，但是跟common lisp差不多", "marks": "力荐"}
{"content": "努力读！", "marks": "力荐"}
{"content": "short and inspiring", "marks": "推荐"}
{"content": "Y combinator彻底服了，附录一堆逻辑学的书，以及第三版还是有习题的，最后一章讲parser，续作估计就接着进一步实现和讲一些过程抽象吧，不想再看了= =。。。这书读着累，还是SICP顺手。。。", "marks": "力荐"}
{"content": "两百页都不到，停机问题和Y combinator都写了，抵啊。", "marks": "力荐"}
{"content": "清晰.简洁.比htdp写得好.", "marks": "力荐"}
{"content": "funtional programming, recursion, lambda calculi, ycombinator\n2015.1 又敲了一遍 大道无形啊", "marks": "力荐"}
{"content": "9,10章难度远大于前面。", "marks": "力荐"}
{"content": "虽是入门后面五章很值得深究【thank you", "marks": "力荐"}
{"content": "以前看过R5RS报告，所以只是快速抽了几个讲解的例子看了一下，发现语法都知道了，于是粗粗扫过。而函数结构那部分有其他教材学过，所以也直接扫过。", "marks": "推荐"}
{"content": "很有爱的写作方式。。。", "marks": "力荐"}
{"content": "一问一答还讨厌而且啰嗦死了", "marks": "力荐"}
{"content": "介绍Applicative Y Combinator和Continuation (as collector)的部分很有启发性", "marks": "力荐"}
{"content": "看到最后一章实在看不懂了，话说要适应作者写书的方式还是困难啊。", "marks": "还行"}
{"content": "看看", "marks": "推荐"}
{"content": "垠神助我快乐成长", "marks": "力荐"}
{"content": "每一章都不能跳过，上一章没吃透一定不要看下一章！！你会看到符号推导的美感。", "marks": "力荐"}
{"content": "作为教科书的地位可能不会有sicp高~毕竟是一本小册子嘛~但确实是一本深入浅出的好书~", "marks": "力荐"}
{"content": "一般的教材，往往一开始接触的都是一堆全新的概念，让人难以消化。必须通过后续不断的接触，回头来看时才能恍然大悟。这是因为作者没有站在初学者的角度，理所当然的把概念先陈述，而不是像自己一开始思考的过程那样来讲述。这一点在刘未鹏老师的博客中很好的解释了，而这本书，由清一色的问题组成，由浅到深，没有太多概念，更多的是例子，以苏格拉底式的教学法逐步将scheme的知识教给我们。作为入门书实在是一流。更深入的学习则需要看SICP了", "marks": "力荐"}
{"content": "commandments非常受用", "marks": "力荐"}
{"content": "recursion", "marks": "力荐"}
{"content": "可入选“中学生必读丛书”，全书只在传达“递归”这个概念，行文轻松愉快，采用对话形式，reader-friendly。唯一的缺点是，函数命名不符合现在的常见约定，是为了缩短函数名？函数名长一点真的无所谓，最好能一眼看出来是干什么的。", "marks": "力荐"}
{"content": "【差最后两章没看】王垠非常推荐的一本学习函数式编程思想的书。本书由浅入深、系统描绘了如何使用递归思考编程问题的全过程（在书的最后两章还给出了Y combinator的推导）。非常推荐，安丰春同学很早就看这本书了。", "marks": "力荐"}
{"content": "竟然看完了", "marks": "力荐"}
{"content": "原来一直习惯自顶向下的方法论，本书介绍了另外一种需要更高要求的方法论：Bottom up", "marks": "推荐"}
{"content": "适合与SICP一起看", "marks": "力荐"}
{"content": "第9章cool:   define \"length\" function without \"define\"", "marks": "推荐"}
{"content": "以问答方式组织，思路很有新意，但全篇都这么搞，就太极端了，非常不利与找到要点，几乎逼着从头到尾follow他的每一个例子。尤其可恶的是，他的很多recursion都有重复之嫌，讲得真心罗嗦。果断1星", "marks": "很差"}
{"content": "作者你是在玩吗?", "marks": "力荐"}
{"content": "这个也是：）", "marks": "力荐"}
{"content": "最后三章太精彩了，需要二周目", "marks": "力荐"}
{"content": "嗯，入门书，循循善诱吧", "marks": "力荐"}
{"content": "学而时习之，不亦悦乎", "marks": "力荐"}
{"content": "小白Lisp及函数式编程入门的绝佳好书~", "marks": "推荐"}
{"content": "非常不同的风格，我不认同王垠对Friedman过分高的评价，但我不得不说他是一个鬼才。", "marks": "力荐"}
{"content": "A very enlightening experience about recurring guided by the author.", "marks": "力荐"}
{"content": "可以更好的理解递归，就爱读这种言简意赅的技术书。", "marks": "推荐"}
{"content": "最后几章有点意思", "marks": "力荐"}
{"content": "经典! 写了一篇相关的文章：http://martin-liu.github.io/#!/article/6", "marks": "力荐"}
{"content": "相见恨晚", "marks": "力荐"}
{"content": "不要以为书里画满了大象和小象就很简单，最后三章分别讲了csp、y组合子和closure，讲的那叫一个啰嗦啊……窃以为y组合子讲的不如我在知乎上700多字的回答容易懂，哈哈", "marks": "力荐"}
{"content": "看这本书的缘由，说起来不好意思的。主要看scip看着头痛，看到第二章的时候，做里面的习题做着头疼脑热的，看看能否对scheme语言有一个简要的介绍就在网上看到此书，有人评论此书可以做为scip的基础书，我读后感受是最好在读完scip的第一章和第二章中关于list的概念之后就可以阅读了。毕竟这本书一上来就是各种lambda表达式、以及scheme中内置的函数。\n\n本来想花一周的时间将此书看完，不厚也就200多页。但是期间加班比较严重，后面自己玩游戏也比较多，导致拖到今天才看完。\n\n作者在自问自答的方式中介绍5条原则和10条告诫。这些都是通过一个个实例进行论证说明的。总之，此书值得一读，喜欢这种自问自答的方式，感觉是对一个个知识点不断采掘。", "marks": "推荐"}
{"content": "让我深入理解了lambda演算的本质，就是递归. 如果你想理解计算的本质，那来读这本书吧，今年读过的最好的书", "marks": "力荐"}
{"content": "没什么必要看，直接上SICP吧", "marks": "还行"}
{"content": "通过简单的例子，教会你思考什么是递归、如何递归。", "marks": "推荐"}
{"content": "great fun", "marks": "力荐"}
{"content": "看完评论，再回去看才发现第八章是讲的CPS", "marks": "力荐"}
{"content": "最后三章值得反复看", "marks": "力荐"}
{"content": "最后两章似懂非懂，离运用自如还很远。", "marks": "力荐"}
{"content": "(((((((((((((((((((((((((((((((((((!)))))))))))))))))))))))))))))))))))", "marks": "力荐"}
{"content": "大师能把复杂的问题简化。", "marks": "力荐"}
{"content": "看到8章，用nu操练有点感觉了", "marks": "推荐"}
{"content": "初次翻开时看到问答形式的内容还以为是引言，渐渐才发现通篇都是这般腔调，确实是引导思考的不错方式。FPer必读，半天时间可以看完。", "marks": "力荐"}
{"content": "作为入门非常好，最好先看下lambda calculs", "marks": "力荐"}
{"content": "这本书最精彩的就是8，9，10三章了，分别讲CPS，Y Cmobinator 和解释器，很值得一读，很好的一本书，5星推荐。 ", "marks": "力荐"}
{"content": "还得多刷几遍才行…", "marks": "力荐"}
{"content": "牛逼到爆炸，为自己的短见自惭形愧。", "marks": "力荐"}
{"content": "真的很愉快的阅读过程。", "marks": "力荐"}
{"content": "详细展示了每个函数的流程，不是scheme的每个方面都讲，只讲透一个点，递归。如果读完SICP前三章，读这个很轻松，当然最后两章稍稍有点复杂，多在纸上操作几次应该就可以理解了", "marks": "推荐"}
{"content": "知其然,不知其所以然", "marks": "推荐"}
{"content": "内容由浅入深，适合程序员看，也适合不从事编程工作的普通人看，极有效的训练人的思维能力，将读者引入神奇的计算机世界。", "marks": "力荐"}
{"content": "我见过的最好的入门书，应当是没有之一的。", "marks": "力荐"}
{"content": "战斗书, 入门函数式必读的书.", "marks": "力荐"}
{"content": "2013年前差点就看完这本小册子了，可惜第九章扫描出问题了，悲剧。whatever，新年快乐。", "marks": "力荐"}
{"content": "enlighten you", "marks": "力荐"}
{"content": "小人书也有难度。", "marks": "力荐"}
{"content": "也许是刚看完开头，写得太简单。对于刚刚学习编程的新手来说，也许开始的几章难度正好，但对于我，感觉前面写的太简单了。希望后面会有更深刻的理解。", "marks": "还行"}
{"content": "感觉还是没太理解continuation 😕", "marks": "力荐"}
{"content": "深入浅出。使用 Scheme 介绍计算理论。更像是讲义，如果有好的老师指导效果会更好。", "marks": "推荐"}
{"content": "虽然lnw就是张学文定义的c，只不过整合了不同的名词，但是本书的结构臻于完美。", "marks": "力荐"}
{"content": "原创", "marks": "推荐"}
{"content": "作者的视角和想法都很独特。使我看完后，更加认为，世界由能量的振动而同时产生时间、空间、物质、狭义能量。由完全禁止的虚无，瞬间创造一切并延续！", "marks": "力荐"}
{"content": "决策学意义上的渐进理性。中国社会的庇护（clientele）关系理论。语境论场域化中探讨司法独立改革问题。没想象的那么难读下去，可以看出初期的中规中矩，堪当论文入门标准范式。", "marks": "推荐"}
