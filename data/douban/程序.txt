{"content": "并没觉得很好。短，讲的不全，真正的零基础er（如我，掩面）要查很多东西。后面从  写测试  开始看不懂。", "marks": "还行"}
{"content": "我感觉自己被调戏了。", "marks": "力荐"}
{"content": "感谢作者和译者，很好的手把手的一个新手编程体验书，消除编程物质恐惧感，在线看的liam huang翻译的版，不确定看的是第几版，有一些加分题没有做，第五十题黑手党外星人飞船做起来有点压力，准备转去codeacademy / think python和a byte of python在进行一些学习和practice，之前看了一个半月的C++第五版，转过来看Python以后只想说Python真是小天使般的好上手……", "marks": "推荐"}
{"content": "非常好的Python入门书，作者的写作风格我很喜欢。", "marks": "推荐"}
{"content": "很好的入门书。只是代码有挺多错误的，网上的原版就没有错，应该是编辑时出的问题。", "marks": "推荐"}
{"content": "入门首选", "marks": "推荐"}
{"content": "when you get stucked，you should get more information。按照习题模式来引导编程", "marks": "力荐"}
{"content": "花了一周的时间看完，在以前的基础上零零碎碎学了一些新的东西，还算是有所收获，但是前面讲的很基础很简单，到ex40之后突然难度增加不是很懂在讲些什么。", "marks": "力荐"}
{"content": "入门确实很好。但是第二周作业开始GUI了，这本没有讲到呢。换下一本。", "marks": "推荐"}
{"content": "最后一个游戏那里就做不下去了……差太远", "marks": "还行"}
{"content": "学习笔记： https://github.com/hairuo/LPTHW", "marks": "推荐"}
{"content": "在 learn python the hard way官网上有下载 也可以在线看 ^ ^ ", "marks": "推荐"}
{"content": "每天敲一两节练习，历时 41 天，敲练与记录心得同时完成，再花一天修订，刚刚是 42 天。我正按此书为蓝本写《笨方法学写作》，地址是　https://cnfeat.gitbooks.io/learnwritingthehardway/content/", "marks": "力荐"}
{"content": "太基础了.", "marks": "还行"}
{"content": "我已经有了一定的C#基础再来学PYTHON，在我看来这样对着敲代码而不从编程思维去解决问题的学习方式真的不适合我。", "marks": "较差"}
{"content": "相当基础的入门教程", "marks": "还行"}
{"content": "这才是真正的零基础入门书", "marks": "推荐"}
{"content": "跟着全做了遍，有了个大概", "marks": "推荐"}
{"content": "几乎快一年了，算是读完了，其实习题根本都没做几道，很多内容看到最后，前面的就忘的差不多了。程序猿的世界博大精深，就连一本入门书读起来都这么艰难。\n不过编程更重要的是练习，光看书是不行的，要自己多动手做东西。", "marks": "力荐"}
{"content": "其中的代码有几处错误，坑爹呀。", "marks": "推荐"}
{"content": "一个小时就能看完了…… 基础到不能在基础…… 还好木有买", "marks": "还行"}
{"content": "就是为入门准备的，靠自律几天就能搞定。", "marks": "推荐"}
{"content": "挺好的，把全书的52个习题全部实现了一遍，不知道是不是中文版的问题，后面的错误还蛮多的，散列和列表基本都错了，不过内容还是蛮好的。#书籍阅读计划", "marks": "推荐"}
{"content": "直接在http://learnpythonthehardway.org/book/ 这个链接上看就好啦，及时更新，花了比想象多的时间来看这本书，编程任务也没有完全完成，感觉在编程思维方面离作者差很远。本书的好处是留了很多学习空间给读者自行努力，其实学会那些解决问题的方法才是最重要的。不急于求成，耐心完成任务，能学会很多。就像<How to read a book>讲的，真正的好书不只是教会你知识，更能提升你的理解力。", "marks": "力荐"}
{"content": "还行，很有作者个人色彩，但是对一些概念的解释并不清晰", "marks": "还行"}
{"content": "作为入门书还是可以的。不过我好歹学过C和Matlab，看到作者教函数真值表的时候很无语……大概40章以后才有意思起来。", "marks": "还行"}
{"content": "作为一本“笨办法”教学书，硬伤还是太多了，知识中括号和大括号要分分清吧。。", "marks": "还行"}
{"content": "我的python入门书", "marks": "力荐"}
{"content": "入门还是不错的。书后附录的命令行速成更是好用。\n每一题都完成了。直到ex51，ex52老是出错，就算了。还是去学flask，也用不着书中的web.py了。", "marks": "力荐"}
{"content": "凑单买的，偶尔查个语法，Orz，又翻了翻", "marks": "还行"}
{"content": "纯概念教程", "marks": "推荐"}
{"content": "学编程的基本方法", "marks": "力荐"}
{"content": "比流畅的pythin简单多了，真的是入门书，但还是有很多不知道的。", "marks": "推荐"}
{"content": "死在了习题46……", "marks": "推荐"}
{"content": "基础", "marks": "还行"}
{"content": "不仅是Python的入门教程，更是教了一套学习编程的方法-->阅读文档&动手写", "marks": "力荐"}
{"content": "就这样吧", "marks": "推荐"}
{"content": "零基础Python2编程入门。吐槽比正文还有价值。", "marks": "推荐"}
{"content": "要是有深入版就好了", "marks": "推荐"}
{"content": "错别字还是挺多的，我觉得我需要深入一点学习了", "marks": "还行"}
{"content": "你会编程。他们不会。这真他妈的酷。", "marks": "推荐"}
{"content": "书不错，适合无基础入门，不够深入，讲的也不是很细。", "marks": "推荐"}
{"content": "挺好的，", "marks": "力荐"}
{"content": "入门好书.", "marks": "力荐"}
{"content": "适合新手入门，不过不少地方没讲清楚，知识点不全。有经验的同学直接在线看就可以了。盛名之下，看个热闹吧", "marks": "还行"}
{"content": "212页这段太牛b了", "marks": "还行"}
{"content": "抛开一切,敲起来。告诉你,编程的正确姿势。", "marks": "力荐"}
{"content": "入门不错 后面坑太大 先入个小坑吧", "marks": "推荐"}
{"content": "原以为它会很浅显入理，但看来并不是这样而是机械的操作和无聊的跟随，没有突出应有的编程思维优势", "marks": "较差"}
{"content": "挺适合零基础的我学习Python，感受下Python大法。", "marks": "推荐"}
{"content": "人生苦短", "marks": "推荐"}
{"content": "有一些基础的会觉得这本书太入门了，另外其实还是英文版好一点。", "marks": "推荐"}
{"content": "终于读完了，手写复制了大部分代码，对于高手来说可能不是什么好书，但是对于我这种菜鸟来说，还是收获不少的。", "marks": "力荐"}
{"content": "I hate it when a textbook tells me to ignore some important underlying mechanisms and just to follow instructions. However, this textbook encourages readers themselves to search for deeper and wider knowledge about Python, which is a good thing but somehow reflects the author's \"laziness\". It leaves many things unexplained!!!!", "marks": "还行"}
{"content": "比较好的入门书，可以引起兴趣，动手实践确实是最好的学习方法", "marks": "力荐"}
{"content": "不错的一本书。", "marks": "推荐"}
{"content": "断断续续刷完了。。。对于最后的搭建项目还是有点一知半解。。。看别人都说这是超级基础的入门书。。我对自己的智商有些忧虑了。。这本书最好是连续一段时间刷完。。毕竟是初学。断了之后再看可能就没感觉了。总之能有所了解。。其实可以看英文版的。。因为用的单词都很简单。", "marks": "推荐"}
{"content": "Learn Python the hard way", "marks": "力荐"}
{"content": "在看网页版（https://learnpythonthehardway.org/book/）。出python3的教程了。", "marks": "推荐"}
{"content": "喜欢这种书，直击客户的需求。", "marks": "推荐"}
{"content": "那游戏好无聊……", "marks": "推荐"}
{"content": "啰嗦", "marks": "还行"}
{"content": "前期通过简单习题让你熟悉语法，后期就不太好了。", "marks": "推荐"}
{"content": "python/R/Matlab 我的技能就在这个暑假get了", "marks": "推荐"}
{"content": "前面很通俗易懂，到后面十来个章节还挺难的，需要多次翻看练习", "marks": "推荐"}
{"content": "说是笨办法，其实讲的还挺浅显的，属于入门书籍。附赠的光盘实在不知所云：现在有几台笔记本带光驱的？", "marks": "还行"}
{"content": "比入门教程难，比高级教程简单，两边不讨好。最有启发的是作者对于编程这事的态度。", "marks": "还行"}
{"content": "作为初学者入门读物可以，行文打破正统编程教材的体例，对话式的内容编排。", "marks": "推荐"}
{"content": "非常友善，有助于树立信心。但有些地方讲的并不清楚详细。", "marks": "推荐"}
{"content": "没有一门语言能坚持学下去，连皮毛都没搞懂就不想搞了。而且，实际上，读这本书最困难的地方在于不会用我积了两年灰的Mac！", "marks": "还行"}
{"content": "不知道为啥知乎上很多大牛推荐这本书，我觉得很不适合初学者啊，只讲语法是没有用的，况且这语法还讲得不清不楚。还是廖雪峰的网站教程清晰明了，强烈推荐。", "marks": "还行"}
{"content": "类与模块的对比，多态继承与合成的对比，都有恍然大悟之感，值得再翻一次读书笔记，入门好书", "marks": "推荐"}
{"content": "找时间继续学", "marks": "力荐"}
{"content": "买了一本父与子和这本 互为对照查阅不懂得知识点 进步很快 这本书简单又有趣 入门级最佳教学书！", "marks": "推荐"}
{"content": "-真正的python零基础书。短小精悍，幽默风趣。推荐！\n-一个初级程序员需要知道的三种最基本的技能：读写代码，注意细节，分辨力。", "marks": "力荐"}
{"content": "3.5/5", "marks": "还行"}
{"content": "面向对象一节讲得不清楚，可以参考廖雪峰的教程。我更喜欢作者最后的自白，“编程20年，兴趣已无，语言不重要的，解决问题才是，如果为了赚钱，开家快餐店更直接。”", "marks": "推荐"}
{"content": "Review", "marks": "推荐"}
{"content": "很基础很基础，学了notepad和powershell写python。不过为什么不用集成写呢，也很方便啊。算是入门了吧，继续学习", "marks": "推荐"}
{"content": ":（ 没读完，没时间hard way了", "marks": "还行"}
{"content": "作者说如果不喜欢这本书的话他推荐think python 和 a byte of python , 我就三本一起读的 这本的教学方法非常独特 对小白算是极端友好了 ", "marks": "力荐"}
{"content": "入门", "marks": "还行"}
{"content": "垃圾到要死的书", "marks": "很差"}
{"content": "太基础，翻翻就没了", "marks": "还行"}
{"content": "还是不太适合没有编程基础的同学。", "marks": "力荐"}
{"content": "全书充满了笑点,基本看了一遍，实现到提交表单，session由于在最后游戏项目里就忽略了。", "marks": "推荐"}
{"content": "还是蛮简单的，如果当初好好跟着学就好了╮(￣▽￣)╭拖了一年半的书终于搞完了🤔最后两个实例没做😂还有面向对象编程，在情人节看太煎熬了🤔这就是我没有对象的原因啊", "marks": "推荐"}
{"content": "没用，太浅", "marks": "较差"}
{"content": "first python course", "marks": "推荐"}
{"content": "所谓笨办法并不是真的笨，浅显易懂并且直接要害。没有任何程序开发基础的人都可以看懂。解决了我多年一看见程序开发的书就害怕、啃不动的问题。这一次彻底解决多年来未曾弄懂的“面向对象”。对于非程序员、但要使用程序解决实际小问题的人非常有帮助。至少能看懂别人的代码，稍加修改为己所用。", "marks": "力荐"}
{"content": "往后还是需要一定的基础，主题思想是对的，鼓励自学、上网查知识、多练习。对新手应该有帮助", "marks": "力荐"}
{"content": "从面对对象这一章开始看得有点困难。个人觉得，作为入门书，这本还是很不错的。", "marks": "推荐"}
{"content": "书不错，学完，算是有个基本感觉了吧！", "marks": "推荐"}
{"content": "还行，算是基础的东西", "marks": "还行"}
{"content": "我觉得后面的越看越模糊，撸一遍估计不够。 ", "marks": "推荐"}
{"content": "这个译本有些问题，不过受制于英语水平啃不动原版，对照着看还是不错的。", "marks": "还行"}
{"content": "201605大概读完。本来想很强迫症地读完全部再来写评价，现在看何必呢？应该构建的是以自己为中心的学习体系和方法，而非以某一材料为中心。对于某一材料，实在撸不下去的地方就先放下好了，但是要always learning sth new。\n回过来说这本书，书的好处是短平快迅速上手，作者时不时逗你一下放松点继续搬砖；不足之处是有时语言鸡血风我不太喜欢，以及某些地方跳跃过大不踏实。综合来看完全从外围入门拿来作为参考书之一也好，特别是对代码有恐惧的人。", "marks": "还行"}
{"content": "编程这东西真是看完书对编程序并无任何帮助。。。不过还是挺好的", "marks": "推荐"}
{"content": "1个月的时间搞定了这本书，不得不说，这种方法学习编程不枯燥又有趣。\n", "marks": "推荐"}
{"content": "挺基础，说解易懂，翻译欠佳。", "marks": "推荐"}
{"content": "停在了第41节，做不下去了，不会做", "marks": "还行"}
{"content": "适合一点编辑基础都没有的人入门,可以学到一些写代码和读代码的技巧", "marks": "力荐"}
{"content": "前面讲的不错，最后几章看的云里雾里的", "marks": "还行"}
{"content": "确实是一本很好的Python入门书", "marks": "力荐"}
{"content": "都怪我在买书之前没有好好关注此书是不是适合我。。。这本书是完全面对没编过程序的人的。。。", "marks": "还行"}
{"content": "非常适合初学者，没有过多的概念和理论，读起来不枯燥，赞！", "marks": "力荐"}
{"content": "挺好", "marks": "推荐"}
{"content": "入门必备", "marks": "力荐"}
{"content": "我認真的把裡面的代碼都敲了一邊~", "marks": "推荐"}
{"content": "一般，不适合作为入门书", "marks": "还行"}
{"content": "入门不错哎", "marks": "推荐"}
{"content": "写得很好，很适合入门学习\n喜欢Zed的风格", "marks": "力荐"}
{"content": "内容简短，实际例子简单上手，入门级别书籍", "marks": "推荐"}
{"content": "不错、不过后面的有点进度过快", "marks": "推荐"}
{"content": "除了是用Python2写的代码，这本书真是本好书！", "marks": "推荐"}
{"content": "真心不错的基础入门教程", "marks": "推荐"}
{"content": "很简单的入门教程", "marks": "力荐"}
{"content": "Practice make perfect", "marks": "推荐"}
{"content": "变量参数（arv），OOP都没有将清楚。拿来上手很不错，但是千万别当参考书。作者假定你得自己去网上查，但是自己讲什么class却扯半天讲不透彻。", "marks": "较差"}
{"content": "只要会用就OK", "marks": "力荐"}
{"content": "Python入门书籍", "marks": "力荐"}
{"content": "怎么说呢其实还好吧 但是学完了以后你也不算会了Python 还有许多要学的\n", "marks": "还行"}
{"content": "这本书，真是基础的不能再基础了，买错了，不过很适合没有任何基础的人来看", "marks": "力荐"}
{"content": "附录的命令行快速入门不错（之前都不会用，新技能get），习题做到中间部分就看不大懂了，解释也不大清楚，感觉不太适合零基础（好像每本书对零基础的定义都不一样）果断转《父与子编程》，以后再回来看吧", "marks": "推荐"}
{"content": "笨笨的，确实是0基础入门", "marks": "推荐"}
{"content": "初学者最好别用这个", "marks": "很差"}
{"content": "内容不多，主要是大量重复的机械性练习。没有推荐啥乱七八糟的IDE，强制用命令行，这点比较好。", "marks": "推荐"}
{"content": "入门很不错", "marks": "力荐"}
{"content": "通过书内的一些小练习，熟悉python的基础语法和内部机制，python入门的不错之选\n", "marks": "推荐"}
{"content": "第一本Python书籍，内容比较简单，大一上看的，零基础的可当做第一本编程书，有基础的可不看。", "marks": "推荐"}
{"content": "总的来说不是很系统，但撸这些代码还是可以，可以激发你学习兴趣吧\n英语渣的我伤不起哦，最后八个习题草草看了一下。", "marks": "还行"}
{"content": "不适合完全零基础的人去读，我是先看了简明python教程有了基础之后再来看这本书的，书中很多地方讲得并不细，想要完全读懂还要自己查资料，不过用来入门和培养编程兴趣挺好的", "marks": "推荐"}
{"content": "前面的40题太简单，各种基础不怎么讲，让初学者自己去查，习题答案也没有（网上也没有），请问不会怎么办？做完怎么对答案？41题开始，直接各种函数，超长代码炸死你，难度一下子突增，这本书不适合入门！", "marks": "很差"}
{"content": "用来复习挺有用的，从零开始学到有难度", "marks": "推荐"}
{"content": "很抱歉，这本书其实是对初学者并不友好的，很多东西都没有讲明白，需要自己上网查，问题是我自己网上可以搜到很多东西，为什么要去看你这本书，而且很多地方作者讲的并不明白，不够细致，其实这本书对零基础并不友好。", "marks": "较差"}
{"content": "用来做入门还是不错的，但后面的ex感觉有点吃力。。。还需要配合其他python入门书练习", "marks": "推荐"}
{"content": "一定先搞懂 命令行", "marks": "力荐"}
{"content": "搞笑幽默。不过到最后为了搞笑而搞笑。", "marks": "还行"}
{"content": "不推荐，表面上看对小白很友好但其实到后期是跨度很大的，有Java基础的学起来都费劲，更别说对没有任何编程基础的人了。\n看完本书之后还得看别的书系统的学习，这本书只是让读者了解基本的python编程模式。", "marks": "还行"}
{"content": "建议入门第一本", "marks": "还行"}
{"content": "要是没基础就别看了", "marks": "还行"}
{"content": "很基础，入门必备", "marks": "推荐"}
{"content": "这本书不适合学习过其他编程语言的程序员，内容不深，蜻蜓点水，适合编程小白无痛入门Python，但是40章之后的高级话题对于小白来说会难以理解，可以忽略这些内容。想要真正用Python工作仅仅阅读这本书显然是不够的，建议小白阅读其他书籍深入理解Python。", "marks": "推荐"}
{"content": "完全的案例入门式，做完全书的案例，你的编程水平将得到巨大的提升，可惜我还是没坚持下来", "marks": "推荐"}
{"content": "为了rush一个ios app出来...", "marks": "推荐"}
{"content": "略过一遍", "marks": "还行"}
{"content": "非常全 适合放手边当手册看 不过这类书还不如看官方的programming language", "marks": "还行"}
{"content": "生编硬凑出来的东西，讲的太浅，如蜻蜓点水。", "marks": "较差"}
{"content": "看着书实在忍不了来豆瓣吐槽评论，怀疑各大网站对这本书的评分都是刷出来的。作为写了7年程序的看都觉得讲的不清楚，错误多，真不知道刚上手学的人怎么学这本书，实在太烂了", "marks": "很差"}
{"content": "有一些错误，最新编译不过的地方。但是看得出来作者比较用心，和其他的国产书不一样。", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "说真的，这本书的作者真不行，语言表达十分有问题，这无形中加重了学习的难度。对了，我还去看了他的教学视频，真的毫无结构感，想到哪儿就说到哪儿。对于初学者不推荐这本书。", "marks": "较差"}
{"content": "入门好书？我表示超垃圾", "marks": "很差"}
{"content": "基本不发评论，实在忍不住了，必须找个地方吐槽。这本书实在是太烂了，讲的乱七八糟，完全没有逻辑。为什么豆瓣评分最低分只能是1分？", "marks": "很差"}
{"content": "入门好书", "marks": "力荐"}
{"content": "结合实例用到工作上实践，效果尤佳", "marks": "推荐"}
{"content": "各种理论工具（机器学习算法、python、scikit-learn、nltk、numpy）过了一遍之后，看这本书的实际应用，指导思路，非常舒心。因为这本书既不讲理论算法，也不系统介绍工具应用，就是讲怎么用工具、算法一系列的武器去解决问题，解决问题过程中碰到问题，再怎么思考变换方法，力求达到解决问题的效果。所以感觉起来，不是用来入个门的书，而是在一定基础之后，将各个板块（算法、工具）串一串，了解解决问题的思路。", "marks": "力荐"}
{"content": "翻译有点扯,入门必备", "marks": "还行"}
{"content": "非常in action，适合做工具缩影，摸清楚理论还是算了吧。", "marks": "推荐"}
{"content": "偏重讲述算法之外而又关键的细节，从目标出发，包括特征选择，模型间对比等，和实战篇互补学习刚刚好", "marks": "力荐"}
{"content": "写得过于简略，不如机器学习实践+gensim资料来得实用。这些书真是越来越水。", "marks": "还行"}
{"content": "比较偏向算法的思路与实现，具体代码不多", "marks": "推荐"}
{"content": "hands-on, entry-level", "marks": "还行"}
{"content": "简单过了一遍，主要是了解有哪些纬度和实现了什么效果。\n\n这本书没有涉及任何理论行的东西，如果不是照着例子来实验的话，价值不大。\n\n关键问题之一：了解每种方法的适用场景、效果、优点和缺点", "marks": "还行"}
{"content": "例子设计的很好，但是对照书本和代码看有些乱", "marks": "还行"}
{"content": "一个case都没有动手去实现的我最后还是忍不住mark一个已读…", "marks": "推荐"}
{"content": "回归介绍的全是线性回归…", "marks": "还行"}
{"content": "学之前最好把numpy,scipy和sklearn看懂，否则学的比较困难", "marks": "还行"}
{"content": "本来以为这本书是边干边学性质的，在学习第一章、第二章的时候有这种错觉，觉得自己能跟得上。后来发现，后面的章节升级曲线非常扯淡，一会儿特别难，一些地方又简单的，作者真的指望读者看他后面的代码能熟练掌握、灵活运用么？有些简单的部分直接是抄的sklearn官方的包库讲解。所以，虽然我很差，但这本书这样写的话，也很不负责任啦", "marks": "较差"}
{"content": "主要依赖scikit-learn、numpy、scipy、matplotlib这些库，分类的评估写的比较细致", "marks": "推荐"}
{"content": "hands on的书，实践派， 基本无理论，适合enable。", "marks": "推荐"}
{"content": "实践第一的书，挺不错，若想提高理论的话，还是去啃PRML和ESL吧~", "marks": "力荐"}
{"content": "很薄，给我打开了机器学习世界的一条缝，看了很多也没理解，还是得看的更多吗，做得更多，这样互相验证理解，就能变成能力了", "marks": "推荐"}
{"content": "主要通过第三方的库来实现程序，而没有从底层算法开始实现，这是不给5星的原因。但是可能这样更贴近工程吧。 ", "marks": "推荐"}
{"content": "看到很多评论说这本书写得太浅，看书名就知道，人家定位在趣味读物，何必那么较真。", "marks": "还行"}
{"content": "就是约瑟夫环那个还可以其他的都是高中小学数学。不深入。。。。。。", "marks": "还行"}
{"content": "骗钱的", "marks": "很差"}
{"content": "门槛低 浅显  适合非专业的入门  内容都是编程的基本组成部分", "marks": "还行"}
{"content": "不错的一本书，很浅显易懂，真的是很浅显。。。", "marks": "推荐"}
{"content": "是一本很好的数学科普书籍，简明又不失精要之意", "marks": "力荐"}
{"content": "其实这里面的东西比奥数什么的实用多了，而且涉及到的也就是一些相对简单的数学知识。", "marks": "还行"}
{"content": "其实断断续续看了好久 coding中总会有思维盲区的时候  偶尔一个小章节就解了你的惑  可以 ", "marks": "推荐"}
{"content": "很入门的读物，可以帮你重拾编码的勇气，作者在一些数学思维的可视化上做得比较好，值得学习。", "marks": "还行"}
{"content": "入门知识 一点启发都没", "marks": "很差"}
{"content": "可以做为具体数学的导读读物", "marks": "还行"}
{"content": "中小学生读物，确实”简单易懂，门槛很低“。有看这个的时间，中小学生可以去看看十万个为什么，数学和计算机专业的学生可以去看看具体数学和算法导论，不浪费时间。", "marks": "较差"}
{"content": "论我过年在家是有多么的无聊......不知道什么时候买的，为了刷掉kindle里的书断断续续边聊天打岔边搞定了.....", "marks": "很差"}
{"content": "递归部分很好", "marks": "推荐"}
{"content": "太浅", "marks": "还行"}
{"content": "太费脑细胞，程序员都是有一些数学基础的，很多基础知识我觉得就没必要写了。而且还发现几个错误。", "marks": "较差"}
{"content": "浅显易懂 还是有收获的", "marks": "还行"}
{"content": "没什么内容的一本书", "marks": "很差"}
{"content": "粗略看了一遍，内容不够深入。", "marks": "较差"}
{"content": "数学绝对是自然科学之本", "marks": "力荐"}
{"content": "讲的很简单，适合想学编程或者初学编程的人。\n", "marks": "还行"}
{"content": "完全是高中课本的知识，内容还是比较浅显的，虽然高中毕业已经六年了，但是看起来还是毫无压力。书中所实现的算法也是比较的简单。高中生无聊的时候可以看看，说不定可以培养自己对编程的兴趣。", "marks": "还行"}
{"content": "全是一些小学，初中知识，连高中知识都没有，作为程序员入门书籍都太简单了", "marks": "较差"}
{"content": "过于简单，不适合coder看。", "marks": "还行"}
{"content": "适合初中生", "marks": "很差"}
{"content": "基础理论知识，但更偏向实践。\n读一遍，可以补漏。", "marks": "还行"}
{"content": "后半部分实在太水了！", "marks": "较差"}
{"content": "感觉并不趣味啊。。。", "marks": "推荐"}
{"content": "当专业书用讲的太浅，当课余读物又太枯燥。这年头怎么什么人都来调侃程序猿。", "marks": "还行"}
{"content": "印象中这本书好像是给中学生看的。", "marks": "很差"}
{"content": "太浅。", "marks": "较差"}
{"content": "不推荐，远不如回去翻一下自己当年的教科书", "marks": "较差"}
{"content": "现在看来小学时的数学竞赛还是很难的，老师不能怪我没获奖。里面有一些知识点到现在才了解，作者解释得很清楚，还不乏幽默。大部分内容可以直接跳过，适合高中生和低年级本科生阅读。", "marks": "推荐"}
{"content": "单位图书馆刚进了这本书，今天借来随便翻了几页，没有继续看下去的打算；实在太过浅显，书名“修炼”简直大言不惭，国内作者写的技术书籍真心没法看。毫不夸张地说，《具体数学》、《编程珠玑》、《算法导论》这些书随便找出5页的内容都比这整本书来得更有启发性，程序员看这本书纯属浪费时间。", "marks": "较差"}
{"content": "内容浅显，还不如看wiki百科。", "marks": "很差"}
{"content": "可以做为具体数学的导读读物", "marks": "还行"}
{"content": "也是地铁上看的，拓展思维，还行", "marks": "还行"}
{"content": "唯一有印象的是，学会了一个魔术🤔", "marks": "较差"}
{"content": "MC语法字典工具书~把这本书翻烂了，程序化交易功底会达到一个不错的境界~", "marks": "力荐"}
{"content": "工具书，语法手册，略读一遍，用到再翻。", "marks": "力荐"}
{"content": "官方用书，发行量太少了。", "marks": "推荐"}
{"content": "一本工具书，需要的时候可以翻阅。赞的地方是由于书是中国代理商写的，所以和软件功能比较一致，不会出现不一样的情况", "marks": "力荐"}
{"content": "挺不错的手册", "marks": "力荐"}
{"content": "美国谭浩强。每次都是浅尝辄止。", "marks": "还行"}
{"content": "一本大杂烩，什么都讲，什么都讲不深，既然想谈程序设计，并没有提供一些有价值的python /oo的设计哲学，基本的type,decriptor,mro都不说，更不用提设计模式，我很怀疑封底说的该作者写java教材大学使用率最高这一说法，这本书更像小白看的，看了能怎样呢，也只是会用tk画几个演示图，对工程应用并卵。 不如The Hacker's Guide to Python", "marks": "较差"}
{"content": "梁教授虽然早就不搞科研了，但编写基础教材还是可以的。", "marks": "推荐"}
{"content": "书名说了是introduction,真的是introduction！虽然看完这本书现在在看廖雪峰的教程也是一脸蒙逼，但是对于初学者来说这本书真的还不错。", "marks": "推荐"}
{"content": "例子比较多，对于gui 讲解比较好...\n对我这种动手低分学生估计很适合.......", "marks": "力荐"}
{"content": "通俗易懂", "marks": "力荐"}
{"content": "哈哈哈 在豆瓣分享编程书心得的估计是少之又少了吧 但是这本书实在是太赞 ", "marks": "力荐"}
{"content": "没话说的入门书! 就是排版太过华丽了,经常走神看照片 ;-)", "marks": "力荐"}
{"content": "这本书一些用的是python 3，很一般。多出来那颗星给后面涉及的google app engine，我根据这个做了个应用。FUCK GFW!", "marks": "推荐"}
{"content": "面向任务的学习方法。。。", "marks": "力荐"}
{"content": "看到第7章“集成开发”的时候用到了html代码，而且后面对我来说有点难了，暂停。", "marks": "力荐"}
{"content": "这个系列真的很适合入门，读起来很快很流畅，爽", "marks": "推荐"}
{"content": "作为入门不推荐，讲的东西太杂", "marks": "较差"}
{"content": "着看了有涉及的1-6章。非入门。", "marks": "推荐"}
{"content": "入门首选无疑，简洁", "marks": "力荐"}
{"content": "Python 要学 py3.x。", "marks": "推荐"}
{"content": "好乱，不习惯这样。", "marks": "还行"}
{"content": "0823这几天刷这本书//0824刷了150多页了前6章都很基础。后面开搞web了", "marks": "还行"}
{"content": "你的样子，你的轮廓。实际没有这句话这么有诗意啦。\n看了个大概，概览即可，插图莫名其妙，起不到影响情绪的作用，没有论坛表情有趣-_-个别小贴士还不错。\nHead First系列教材如雷贯耳，口碑一直很好。\n当然这个入门，是带你了解python的轮廓，语法什么的还得找另外的书深入学习。", "marks": "还行"}
{"content": "第一次看Head First系列，我是蛮喜欢图很多的书的，但这书也太那个了，讲注册pypi，邮件确认都要配张图……所以说，四百多页的书，python里很多东西都没讲", "marks": "还行"}
{"content": "非常不错，但是感觉不太适合初学者，建议有一定基础后一定要读一读这本，能学到很多实用的技巧", "marks": "推荐"}
{"content": "这才是入门读物应有的教学方式，如果numpy,pandas之类的第三方库也有head first就好了。", "marks": "推荐"}
{"content": "详略得当", "marks": "力荐"}
{"content": "要先了解一下python再看这本书，书里直接就开始讲例子了，很实用的一本书，甚至都教你如何做个Android应用，太牛了。", "marks": "推荐"}
{"content": "2013.1.1读完\nHeadFirst系列还是一如既往的给力\n是新技术学习的不二之选~~\n这本书提到的网络编程和android开发，gae部署也起了个领进门的作用\n不过对于Python来讲，貌似语言本身讲的不多，光看这本还不够\n接下来准备看《Learn Python the Hard Way》", "marks": "力荐"}
{"content": "废话太多，适合本来没啥兴趣的人激发兴趣式学习", "marks": "还行"}
{"content": "后三章有关在移动平台的应用暂时留着没看", "marks": "力荐"}
{"content": "偶尔当速查手册，基本没鸟用，知识密度过低", "marks": "还行"}
{"content": "看到Web处。Head First系列都是入门好助手。", "marks": "推荐"}
{"content": "python2.x和3.x都有。个人觉得对初学者不太友好。", "marks": "推荐"}
{"content": "我真读不下去了。。。", "marks": "推荐"}
{"content": "很适合初学者（什么编程基础都没接触过的），在kindle大概看了下英文版", "marks": "还行"}
{"content": "入门好书，比较清晰，和所有head first系列的书一样，很好读", "marks": "推荐"}
{"content": "跟着例子学习。效果不错，Python初步预览。", "marks": "推荐"}
{"content": "这书太一般了，只是让你认识了一下python，并没感觉多有趣。", "marks": "还行"}
{"content": "这本书的作用不是带你入门，而是让你对python产生兴趣", "marks": "推荐"}
{"content": "准备写个新手机程序，发现这里有python移动开发内容，HF的书都很棒", "marks": "力荐"}
{"content": "好书！", "marks": "力荐"}
{"content": "4月21号晚，22：30到02：40，阅读了234页。行云流水般。", "marks": "推荐"}
{"content": "适合非专业人士入门，点到即止。不过，咱是有Java基础的人了，太简单了。。。", "marks": "还行"}
{"content": "python 3，熟悉python 2之后再学", "marks": "推荐"}
{"content": "比起<A Byte of Python>和<Learn Python The Hard Way>，这本书让你不至过早地埋首在Python的语法细节而不知如何应用，通过一系列有实际效用的案例最基本的知识要点一条条带出来，真正做到深入浅出。功德无量的入门好书。", "marks": "力荐"}
{"content": "20131110 作为了解和入门还是比较合适的，轻松", "marks": "推荐"}
{"content": "新手好书", "marks": "力荐"}
{"content": "内容简单易懂，适合入门，中文版也不能说翻译的不好，反正看起来怪怪的……", "marks": "推荐"}
{"content": "用来入门很不错，想深入学习就得看其他书了。", "marks": "推荐"}
{"content": "project导向的书比死板地介绍数组对象方法等有趣，可惜我的工作暂时还不需开发web app等，后半本流水一般看过。", "marks": "推荐"}
{"content": "Head first 系列的书都值得一读.", "marks": "力荐"}
{"content": "花了2天读完了（自己都感觉惊讶）。循序渐进的内容对我后面的编程非常有帮助，值得再读一遍", "marks": "推荐"}
{"content": "也许刚出的时候不错，但对2016来说，已经过时了。", "marks": "还行"}
{"content": "啰是啰嗦了点，适合快速过一遍入门", "marks": "力荐"}
{"content": "内容有点旧了。", "marks": "还行"}
{"content": "还没入门，Head First中内容比较丰富的一本～～～～", "marks": "推荐"}
{"content": "读这本书，总感觉是在蜻蜓点水的学python，而且书的顺序也比较乱", "marks": "还行"}
{"content": "废话多，图片多又没太多用", "marks": "还行"}
{"content": "大致浏览了下，太简单，适合没有任何编程经验的高中生", "marks": "还行"}
{"content": "带着你从最简单的程序渐渐优化，渐渐改进，很不错的方式。\n就是到后面的WEB开发，被墙了。", "marks": "推荐"}
{"content": "学python的第一本书，很快就学会了", "marks": "推荐"}
{"content": "内容比较少，感觉后面的内容对初学者不是很有用", "marks": "还行"}
{"content": "节奏不错！适合给会其他编程语言的人用来入门！", "marks": "推荐"}
{"content": "一直以为我python没入门，看完这本书才发现，我特么想多了😂😂😂 不过作为入门书记还是比那本python基础编程来的轻松愉快的！", "marks": "推荐"}
{"content": "很好的入门读物", "marks": "力荐"}
{"content": "利用開會的空隙把書刷了一遍，信息密度太低。舉的例子反正我是覺得超無聊，加入Android和GAE的內容雖然有一定吸引力（這部分內容還有些outdated），但個人覺得不適合初學者。", "marks": "较差"}
{"content": "入门 prthon", "marks": "力荐"}
{"content": "入门很不错，深入学习还得看其他的书了……", "marks": "推荐"}
{"content": "好混乱的书，毁人不倦。", "marks": "较差"}
{"content": "5.18开始，6.5今天终于花了个周末搞定了。真的挺基础的很入门，但总觉得少了点啥，不过不能否认是很不错的入门书。不过书里使用的环境是python3，我还在用的2.7对我来说有点蛋疼", "marks": "推荐"}
{"content": "很好的入门书", "marks": "力荐"}
{"content": "浪费纸张式排版、尴尬噩梦式对话，此书大坑，小心避开。忍着翻了1/5，弃之。", "marks": "很差"}
{"content": "还没有看完， 这个结构和传统的先讲数据结构，再讲基本语法的框架很不同，倒是蛮特别的，等看完再补一篇完整的书评", "marks": "推荐"}
{"content": "Best for Beginners.", "marks": "推荐"}
{"content": "作为入门书籍，前6章简单又实用，值得一看。后面的WEB开发用不到的可以先不用看。", "marks": "还行"}
{"content": "形式其实还不错，都是一些实例，穿插着习题，每章后面还有总结。但是既不够系统，也不够实用", "marks": "还行"}
{"content": "学习很流畅，浅显易懂。内容上感觉还是太少了些", "marks": "推荐"}
{"content": "一本有趣的入门图书，通过几个案例的完成逐步学习python的一些特性；看过之后还需要找本工具书看一下", "marks": "推荐"}
{"content": "确实适合入门，用例子不断拓展讲述，不过个人认为异常处理什么的讲的实在是太容易让人绕进去了，可能是为了深入浅出吧，但我觉得略罗嗦。另，后面部分没看，因为web应用部分目前用不上", "marks": "推荐"}
{"content": "思路很清晰，例子也循序渐进，但是入门直接看这个感觉不合适。", "marks": "推荐"}
{"content": "深入浅出，适合刚开始学习编程的人员，已经编程多年的人还是到官网学习吧", "marks": "推荐"}
{"content": "这本书应该是非常适合对计算机编程没有太多了解的初学者的，但是对没有接触过Python的朋友来说也是不错的一个选择，例子还是很生动的，但是这样的学习效率相较之下就偏慢了。这本书就读到了第六章，后面与web，app相关的就没有太多的涉猎了。2017/3/12", "marks": "推荐"}
{"content": "很好的入门书籍,不罗嗦,以实例项目为导向步步深入", "marks": "力荐"}
{"content": "算是入门的书，内容浅显范围挺广的却不一定好懂，也许他也并不一定叫你明白，只是展示python的各个方面，不过有些东西已经落后了", "marks": "还行"}
{"content": "内容组织得比较杂乱，粗略的浏览了此书第二版的英文版，内容组织方面更加合理。还有一个问题就是太啰嗦，对于初学者来说可以，但是对于有经验的程序员来说节奏太慢，书太厚了。", "marks": "还行"}
{"content": "Hello World都没有，能做入门？感觉只能做Python科普，敲代码可不行。", "marks": "还行"}
{"content": "不错", "marks": "推荐"}
{"content": "看到130页了。感觉很不错，学习起来轻松又愉快~ 它常常告诉你编程中一个问题的两种解决办法（都是我们经常遇到的），然后逐一让你动手做，最后告诉你用那种方案更好（例如对于文件打开是应该用os.path.exist('filename.txt')检查，还是使用try..except捕获异常等等）。\n恩恩，就这些。继续学下去……\np142: 3处代码之间的空格竟然丢了 明显的错误", "marks": "力荐"}
{"content": "写的通俗易懂", "marks": "力荐"}
{"content": "啰嗦, 重点不突出, 废话连篇, 广度不足, 深度没有. 安卓手机App部分真是太扯了...", "marks": "还行"}
{"content": "先学了ruby，觉得python好像也就这样，亮点不多，麻烦不少。", "marks": "推荐"}
{"content": "打开我Python大门", "marks": "推荐"}
{"content": "First is short, writing code", "marks": "还行"}
{"content": "head first系列一贯水准，入门简单，生动有趣。一周目完成，最后四章看得很略；后面的安卓，谷歌云部分比较陈旧了；已经有第二版，只是没有汉化，和第一版除了封面之外，几乎没有相同；", "marks": "推荐"}
{"content": "head first每章一个小故事的风格很适合初学python，对python有基本的认识，但想入门还要看更专业的知识", "marks": "还行"}
{"content": "书的讲解非常好~就是讲的太浅了。。。用于快速入门还行", "marks": "推荐"}
{"content": "最后两章未读完", "marks": "推荐"}
{"content": "特别特别基础，有编程经验的，几个小时就能看完。适合作为第一本书。", "marks": "力荐"}
{"content": "看了相关的1-6,11章，很适合我这种懒人，易读性高", "marks": "推荐"}
{"content": "适合初学者迅速拿起Python", "marks": "力荐"}
{"content": "一本很傻逼的书，技术手册硬是被做成了连环画。", "marks": "很差"}
{"content": "太简单了吧，纯粹入门", "marks": "还行"}
{"content": "这是一本有一定基础的同学又不知道如何完成一个完整项目的图书，看完并测试完代码后，觉得动手能力有所提升。", "marks": "推荐"}
{"content": "很好的入门书，轻松诙谐", "marks": "推荐"}
{"content": "入门书籍  对有程序语言基础的来说用处不是特别大", "marks": "较差"}
{"content": "除了内存没讲", "marks": "推荐"}
{"content": "入门，不过还是学了一部分东西。", "marks": "推荐"}
{"content": "适合入门后阅读，找个下午，快速熟悉下一些特定领域的用法，入门看可能略厚，也太慢，还是推荐python基础教程。适合编程入门。", "marks": "推荐"}
{"content": "第一次看到这样的编程入门书籍，真是太赞了", "marks": "力荐"}
{"content": "骨灰级入门书", "marks": "还行"}
{"content": "Head First的一贯风格，简单易懂，生动有趣。", "marks": "力荐"}
{"content": "一贯的head first。喜欢Python。", "marks": "推荐"}
{"content": "太初级，内容太少", "marks": "还行"}
{"content": "再一次自己重新学python", "marks": "力荐"}
{"content": "不系统，对于学习来说还是有点。。。。", "marks": "还行"}
{"content": "循循渐进，但对于完全零基础的来说，还是不适合", "marks": "推荐"}
{"content": "入门好书", "marks": "推荐"}
{"content": "内容简单细致，图文并茂，书中提到的一些设计思路也很值得编程初学者学习，是一本很好的python入门书籍。", "marks": "推荐"}
{"content": "可能是因为python本来很简单的缘故，这本书感觉过于啰嗦", "marks": "还行"}
{"content": "至今我见到过的排版最好的计算机类书籍。内容也十分的使用易懂", "marks": "推荐"}
{"content": "前半部分对于初学者很不错，后半部分难度上升的有点快", "marks": "推荐"}
{"content": "由一些例子作为引导，由浅入深", "marks": "推荐"}
{"content": "能够将编程写成这样也是醉了，就像在读故事一样最好是动手跟他一起做（实现故事）", "marks": "力荐"}
{"content": "基础入门很不错，至少不会觉得枯燥，有兴趣往下学", "marks": "推荐"}
{"content": "看书不累", "marks": "推荐"}
{"content": "作为Python入门书籍，后面却涉及了很多html sql android方面的内容，对于新手来说不太适合。", "marks": "还行"}
{"content": "好玩，但是代码部分用手写体看起来实在是费劲啊", "marks": "推荐"}
{"content": "内容不太适合初学者，更适合需要发布程序的入门级程序猿", "marks": "较差"}
{"content": "看过一点这个书的pdf版本，惨不忍睹，结果图书馆借到的名字居然是Head first Programming，东南大学出版社的版本，翻译的很不错。\n该书适合初学者一边实践一边学习，才看了1/5，目前觉得挺有意思。", "marks": "推荐"}
{"content": "我竟然把这本书看完了&代码全部敲过一遍。总体来说适合于零基础入门，能够对python有个大体的认识。但是有些内容太过跳跃，直接就塞给你一个函数告诉你就该这么用。移动端开发例子是android2.2,虽然说只是举个例子，但也未免有点太old school了吧。", "marks": "还行"}
{"content": "http://mp.weixin.qq.com/s/dGihaPdywX6tFOS1HY_0QA 写了全书的读书笔记", "marks": "推荐"}
{"content": "新手入门用书...后面的移动开发章节蛮特别...", "marks": "推荐"}
{"content": "基本的都看了1遍，就剩后面2章。不过内容不错，就是简单了些。", "marks": "推荐"}
{"content": "超级通俗易懂。完全可以取个书名叫：一天学会python", "marks": "力荐"}
{"content": "大三下学期看的，那时候整天背着这本和think python一起看，实话说，不太喜欢这本，内容比较乱，而且也不深入，有些知识点只是带过，没说原理，说的好像就该那样一样", "marks": "还行"}
{"content": "和适合初学者，简单易懂", "marks": "推荐"}
{"content": "读过一遍，感觉读的时候也挺认真的，可是还是对这个技术掌握的不太好。感觉这本书有点名不符实了。", "marks": "推荐"}
{"content": "层层递进，通过对上一阶段解决问题的不足之处引出新的概念，有其他语言基础可以一口气看下来。", "marks": "推荐"}
{"content": "一直很喜欢 Head First一贯的经典风格，简单生动。但是这一本却不太合我胃口，可能这本书实在太基础了吧，里面也会讲写编程思想、Android开发，web编程，GAE，SQLite等内容。如果已经有了一点点python基础，这本书可能对你来说干货不多。而看着那么多无用的插图时，有时还觉得心疼钱（花了这么多钱，居然看不到干货！）。因此，如果是零基础、对编程陌生的建议这本书开始；如果有点基础的，想多点干货、知识更全面些的推荐其他书吧，比如《\nPython学习手册》", "marks": "还行"}
{"content": " 只能说适合新手入门吧。东西比较杂，却并不精细。", "marks": "推荐"}
{"content": "学到Andriod那里做不下去，配置不好模拟器，基础知识的话前面的内容应该就差不多了，打算之后读读官方文档，实际做些小项目", "marks": "推荐"}
{"content": "从实际的例子出发学python 最好读之前先看一下python语法", "marks": "推荐"}
{"content": "乱七八糟布局，还没廖老师写的好", "marks": "很差"}
{"content": "基础，入门可以，深入就得另找其他书了", "marks": "还行"}
{"content": "不一样的Programming，不一样的感觉~本来想写书评，想想Head First系列的风格大家应该已经知道了，罢了。很可惜后面的安卓应用开发并没有很好的看，不过自己写了点python脚本，算是入门了。这本书也只适合入门的看，要好好深入学习的话，得看其他书了。", "marks": "推荐"}
{"content": "Head First系列一如既往的风格。", "marks": "力荐"}
{"content": "head fisrt系列中规中矩的一本，涉及到实际的应用很多，比如PyPI、Python for Android、Google App Engine。建议再读读《learning python》", "marks": "推荐"}
{"content": "很不错的python入门书~", "marks": "推荐"}
{"content": "因为喜欢head first系列买了这本，看了让人心情好的书", "marks": "推荐"}
{"content": "我自己给点建议吧 我是个初三刚毕业的学妹 无编程基础 这书非常有趣 但是对于毫无基础的人而言前面写的太简单（比如如何根据电脑多少位下载，环境变量怎么调）而且网上大多用的Python2，这本书用3，所以建议五基础的双管齐下 从网上找找资源", "marks": "推荐"}
{"content": "非常适合入门！", "marks": "推荐"}
{"content": "没学会什么", "marks": "还行"}
{"content": "俺的入门书，风格十分的headfirst", "marks": "推荐"}
{"content": "初级", "marks": "推荐"}
{"content": "个人觉得这本书不太适合真心喜欢并且打算系统学习 Python 的人，玩玩的话，也可以读一读。", "marks": "还行"}
{"content": "对于编程荒废了多年的人来说。。还蛮好的。。", "marks": "推荐"}
{"content": "很久以前读的，没有读完，太过入门。好多python的入门书籍最后总要扯一点web或者应用开发，这些问题都可以单独出本书的，这样讲都只是浅尝辄止，反而带来更多疑惑，真正想做的自然会去了解，有这点篇幅不如再讲些基础的东西。不过初学可能就照着做，做出东西也有成就感。", "marks": "还行"}
{"content": "前面还认真看了一下，后面基本就是浏览过去了，非常基础，适合没有Python基础的人入门使用，但是真正用到实践中来这些知识完全不够，需要自己再找其他的有深度的书看，不过对于培养Python的使用习惯还是有点帮助的", "marks": "还行"}
{"content": "这本没有head first html&css和c语言那两本质量好，讲的东西太少，后面的python构建web app其实对入门学习的人来说根本没必要，占地方，7分吧", "marks": "推荐"}
{"content": "太简单不买", "marks": "很差"}
{"content": "不错，按照书上的内容，实践下来，可以学好多东西。", "marks": "推荐"}
{"content": "快速入门不错", "marks": "推荐"}
{"content": "蜻蜓点水 只能作为了解而已 写得不是很好", "marks": "较差"}
{"content": "用惯了各种jQuery插件，来看看它们都是怎么写出来的吧， 如何从学javascript做出动态的网页，这本书从functionality功能性角度给了你手段和方法！ 老外的书，不错的", "marks": "推荐"}
{"content": "是函数式的框架，不过了解一下javascript的各种应用还是不错的。", "marks": "推荐"}
{"content": "没什么意思", "marks": "较差"}
{"content": "天朝特色内核思想-主奴机制...", "marks": "还行"}
{"content": "它在世界范围内首次提出并阐述了操作系统设计的核心指导思想——主奴机制，这是所有操作系统研究者的一笔宝贵财富 蛋疼啊，从没听说过", "marks": "很差"}
{"content": "主奴机制？？？这个翻译/名词真的是太恶心了", "marks": "还行"}
{"content": "一版和二版变动很大。数据结构描述了单个数据间的逻辑关系。数据结构规定了数据的组织、访问方法、关联程度、和信息的选择处理。数据设计：将模型转换成数据结构的定义。", "marks": "力荐"}
{"content": "难得找到一本比较薄的内核书，对于不准备写操作系统而只是想深入了解linux基本原理的人来说不错。", "marks": "力荐"}
{"content": "大量的篇幅十分详细的描述了启动过程 然后就基本上结束了", "marks": "推荐"}
{"content": "不知道是不是物有所值~等", "marks": "较差"}
{"content": "作为一本系统讲解0.11内核设计的书，也算是差强人意，首先书是由很多人写得，水平不一，有人对于内核理解还不够深刻，还有写错的地方。不过作为国内对于内核讲解的书，值得肯定。我个人是作为内核剖析的参考书来看的，对于理解有帮助。书里最自以为豪的图解部分，有些没有什么用，总体来说值得肯定", "marks": "推荐"}
{"content": "陪ln去过几次图书馆，每次都是刚翻这本书几页就被催着了。文字风格不像是技术书，倒像是职场书。技术书是为了解惑，它是越看越糊涂，感觉作者不是技术专家，倒像是技术大忽悠，除了觉得作者NB，得不到多少知识，挺薄的一本，一翻定价，70元，要疯啊。结论，教授带着研究生写的书不能看啊。", "marks": "较差"}
{"content": "只看了两章。。。", "marks": "较差"}
{"content": "你是世界级，我就是宇宙无敌了。", "marks": "推荐"}
{"content": "我觉得吧，没深度，可以作为入门的资料书。", "marks": "较差"}
{"content": "RAM和ROM会专门解释下，一堆汇编，段偏移寻址倒好像读者都懂的样子……各种夸张的语句说这是标志性的，那个很巧妙，但看了半天也没有啥恍然大悟的感觉。不得不说作者太沉浸在自己的世界中了是不是根本没读过优秀的技术著作啊", "marks": "较差"}
{"content": "感觉还可以", "marks": "推荐"}
{"content": "豆瓣的书评好像都在痛骂。。不过我觉得还行，虽然比不上dr.赵炯的那个，不过最后一章写的还是能令人对操作原理有一个初步理解的。。（只不过这个本自己发明了太多概念了）。。", "marks": "推荐"}
{"content": "别叫这个名字我还能给个3星。起名叫《逐行阅读Linux0.11代码》还差不多。", "marks": "很差"}
{"content": "把linux0.11的启动过程中涉及到的每一步都说到了，注意只是说道了，但是说的很不明了，还得自己理解；anyway，也算有点帮助的。", "marks": "还行"}
{"content": "0.11? 考古吗", "marks": "较差"}
{"content": "看了两章看不下去了，写得太乱了，跟赵博士的《Linux内核完全注释》不是一个级别。", "marks": "很差"}
{"content": "内容不错，只是实际性略低", "marks": "推荐"}
{"content": "虽然书有不少的瑕疵，但我认为作者们还是比较用心的，就是自我感觉可能比较良好", "marks": "还行"}
{"content": "看看这本用图的形式讲解和赵博士的《linux内核完全注释》有什么不一样的地方。看了前言和简介，书中图挺多的，先给4个星。", "marks": "推荐"}
{"content": "我觉得我可以给作者当老师。 ", "marks": "很差"}
{"content": "linux 0.11 kernel的实验和分析。吹牛的话让人反感。", "marks": "还行"}
{"content": "实在是看不下去了，买这本书是被忽悠了，一堆作者几乎是在做无用功啊（除了赚到稿费）。", "marks": "较差"}
{"content": "略水，说好的图片呢，还不如完全注释的图片多，而且附图没啥信息量\n", "marks": "较差"}
{"content": "花了5天时间一口气读完，写的很过瘾！可以说是做到了细节和宏观的平衡，国内的书籍很好这么写的，作者团队应该是很用心，总之，看懂0.11是一个非常好的基础，虽然对于现在的内核它很渺小", "marks": "力荐"}
{"content": "【2017.11.21】完全是 Linux 0.11 内核的代码注释。。。还有意译的『主奴机制』似乎是要比『主从好听』。", "marks": "推荐"}
{"content": "第一遍没看完，感觉比较难懂，实用性不强", "marks": "还行"}
{"content": "图蛮多的。", "marks": "还行"}
{"content": "配合赵博士的linux内核完全注释一起读，两都各有优点", "marks": "力荐"}
{"content": "书的讲述形式还是很有新意的，不过感觉有些地方稍有繁冗。最后第八章似乎是全书的总结文字，但是所谓的主奴机制我觉得似乎有些牵强。我理解系统的核心就是分层机制和硬件特权级实现，用“主奴关系”定义似乎没有太大必要。", "marks": "还行"}
{"content": "呃，书托太多，真接给个差算了，年轻人们，不要搞的这么明显么", "marks": "很差"}
{"content": "排版很烂尤其是本书中贴出的代码，基本对对齐、缩进都没做好，这是国产it书籍的一个通病。随便拿一本英文版的it书籍看看就知道差距了。", "marks": "还行"}
{"content": "看亚马逊上评分高，豆瓣说全是水军……看完还是相信咱豆瓣！", "marks": "还行"}
{"content": "很精干，看起来完全没有负担；文字很幽默，说法很有新意；估计谁看了，心底都会滋生——真有启发——的想法！", "marks": "力荐"}
{"content": "很薄的一本书，很多地方都点到为止，感觉收获一般。但作者毕竟是参与了Java语言核心的设计，看问题能站在更高的角度。例如对RMI和其他RPC的对比，我就从来没这么想过。", "marks": "还行"}
{"content": "棒球队的例子完全看不下去.", "marks": "推荐"}
{"content": "Orelly出的书底线是4星", "marks": "推荐"}
{"content": "内容过于单薄了", "marks": "还行"}
{"content": "三等书下流无耻", "marks": "还行"}
{"content": "对于C++转Java人员，这本书可以叫：Java相比C++改进并添加了哪些特性···", "marks": "推荐"}
{"content": "没有蝴蝶书好懂啊..我还是不搞Java好了=.=", "marks": "推荐"}
{"content": "以Sun实验室Java项目Coder的身份讲了一些内幕，已经把一些常见的功能拿出来讲，最大的收货是 “坏设计”其实很大程度上是那个时代的结果。历史证明愚蠢。", "marks": "还行"}
{"content": "首先，都说了是讲“语言精粹”，就不要当高级编程来说。描述了各种设计的意图，才能更好的理解用法。所以，先端正看书的态度。", "marks": "力荐"}
{"content": "java 到底哪里好", "marks": "推荐"}
{"content": "精要介绍Java的主要部分，细节了解需要参照其它书", "marks": "推荐"}
{"content": "读完了这本书，虽然很薄，但是很多精华。把java各个方面的精华都讲了出来，非常好的书。", "marks": "推荐"}
{"content": "难得的一本有干货的书。", "marks": "力荐"}
{"content": "掌握iPhone & iPad开发核心技术，让普通开发者创造财富神话", "marks": "力荐"}
{"content": "全书很多例子都是抄的，但是抄的很全面", "marks": "还行"}
{"content": "跟其他ios的书比起来属于一般的，不过有一些地方也值得参考下", "marks": "还行"}
{"content": "国人写的书，比较符合国内开发的现状。各部分虽然都不太长，但是取舍比较到位，至少我找到了我所需要的。", "marks": "推荐"}
{"content": "书写的不是很深，有表达清楚", "marks": "还行"}
{"content": "要这么贵", "marks": "很差"}
{"content": "队友买的书，最后丢给我看，里面有些建模的实际例子，粗糙的套在我的模型上还是比较实用的，只是到了更高层次的比赛应该精读全书是前提了吧，现在是会改编会利用，以后应该是掌握思想会编程。", "marks": "推荐"}
{"content": "就是解题指南类型的书，代码详细，适合作参考", "marks": "还行"}
{"content": "和案例分析一个类型～", "marks": "还行"}
{"content": "看完上篇想打5分 但是看完下篇发现部分代码缺少交代 尤其是连决策变量的数据结构都不讲清楚 未免有点不合适", "marks": "推荐"}
{"content": "书如其名，大篇幅的matlab代码，对于算法本身只是介绍了大概，而且没有框架可言，比较乱。但粗粗的扫一下，基本可以了解各个算法的思想。", "marks": "还行"}
{"content": "建模入门书还不错", "marks": "推荐"}
{"content": "PSO部分的程序代码给的比较全 有点帮助", "marks": "推荐"}
{"content": "其实一般般啦", "marks": "还行"}
{"content": "讲解细致到位", "marks": "力荐"}
{"content": "大都是竞赛题分析，数学建模思想在matlab上实现，可惜的是对机械的建模没有", "marks": "推荐"}
{"content": "今天下雨了，今天男神和我讲话了，都是好征兆！但愿我近期唯一看过的建模书能保佑我明天不跪~~", "marks": "推荐"}
{"content": "通用的一些算法及代码，对于思路是一个很好的拓展，而且实际价值很大", "marks": "力荐"}
{"content": "快餐类书籍应该普遍上调一星才对，因为我完全无法否认它对竞赛，论文和项目起了巨大的帮助....", "marks": "推荐"}
{"content": "里面的几个例子不错", "marks": "推荐"}
{"content": "强推这本书 在我建模生涯了 基本上跟圣经一样指引我前进", "marks": "力荐"}
{"content": "我觉得很一般，讲的反正我是没懂。等我去看看别的书，如果还没懂那是我自己的问题，如果懂了那就是这本书讲的差或者不适合我喽，先差评吧", "marks": "较差"}
{"content": "比较适合数学建模入门，其中的灰色预测可以作为入门matlab的经典程序", "marks": "力荐"}
{"content": "都是为了论文……", "marks": "还行"}
{"content": "比赛的利器啊", "marks": "推荐"}
{"content": "个人觉得写得一般~", "marks": "还行"}
{"content": "matlab入门好书，最后数模省一...不推国家奖...无奈", "marks": "力荐"}
{"content": "恩。。我看的第一本建模的书，感谢作者", "marks": "推荐"}
{"content": "内容不系统，很杂。认真阅读过神经网络部分，觉得要点讲到了但是细节还是需要参考其他书籍。总体而言适合大致了解各种模型，不适合深入研究。", "marks": "还行"}
{"content": "建模居家必备不解释", "marks": "力荐"}
{"content": "几年不用一次MATLAB的我，还是很怀念那些编程写算法的日子。", "marks": "推荐"}
{"content": "有代码，很方便。当作工具书用了.....", "marks": "推荐"}
{"content": "最有实战价值的一本书", "marks": "力荐"}
{"content": "适合参加数学建模竞赛的同学，有些例子和算法值得借鉴和参考", "marks": "推荐"}
{"content": "大型系统的设计过程简介", "marks": "推荐"}
{"content": "读这本书要善于从字里行间发现作者想说但又没有明说的话。", "marks": "推荐"}
{"content": "比较理论化的书籍 对于开阔见识有好处 ", "marks": "力荐"}
{"content": "看了约1/4就不知道丢哪里去了", "marks": "较差"}
{"content": "说句实在话程序员真的是一期不如一期了，连合订本也是。", "marks": "推荐"}
{"content": "56", "marks": "还行"}
{"content": "没原来好了", "marks": "还行"}
{"content": "现在出这种书的目的是什么?", "marks": "很差"}
{"content": "是C语言尤其是嵌入式领域多年开发丰富经验的积累，值得在计划去面试之前临时借来和自己的认识水平进行快速印证。但是部分经验实际上可能是有争议的或者片面的，比如代码风格哪种更好、指针应该怎么比较等。另外我还是不爽国内作者爱旁征博引、好打比方的写作风格，讲课或者讲幻灯片普及的话还ok，但写到尤其是以“深度”为名的书里总觉得别扭。", "marks": "还行"}
{"content": "比较细致的一本书，适用于巩固C语言的一些细节。总之，花一两天读读还是有一些帮助的。", "marks": "推荐"}
{"content": "解开了我这些天笔试里的对很多题的困惑", "marks": "力荐"}
{"content": "不少c语言里边边边角角的东西，有点钻牛角尖的意思，是否在项目中有实用价值未知", "marks": "还行"}
{"content": "读过电子版，对面试的确帮了大忙", "marks": "推荐"}
{"content": "很不错~", "marks": "力荐"}
{"content": "it's ok, some errors, but for me, it's enough stuff to learn. :)", "marks": "推荐"}
{"content": "对于我这个没有读过经典原著的人来说很有帮助。印象最深刻的是作者对细节不断探求的精神", "marks": "力荐"}
{"content": "国内介绍C的最佳，秒杀谭浩强版", "marks": "力荐"}
{"content": "看到C专家编程里面的东西了，不过如果是为了面试，看两天倒也很不错", "marks": "还行"}
{"content": "一般吧，就是题目写的有点大", "marks": "还行"}
{"content": "读的网上的，貌似错误比较多~~还得再看看", "marks": "还行"}
{"content": "面试用书", "marks": "还行"}
{"content": "很早以前刚看完几本c语言书之后看的，当时明白了很多东西", "marks": "推荐"}
{"content": "精炼、有见地的一本书，对于C的深入理解绝对有帮助。\n已经看第五遍了。", "marks": "力荐"}
{"content": "当小品读吧，注意纠错。", "marks": "还行"}
{"content": "对嵌入式或单片机作用较大，涉及知识面不太广", "marks": "还行"}
{"content": "把基础概念讲的比较透彻，仔细读一遍很受益。", "marks": "推荐"}
{"content": "太多无聊的东西了，恐怕有一半也只有在考试中才会用到", "marks": "推荐"}
{"content": "国内写的难得的一本好书", "marks": "推荐"}
{"content": "一般般", "marks": "还行"}
{"content": "很好的一本书。", "marks": "力荐"}
{"content": "适合我这样的小白，学过C,但没怎么编过程的。。。扫盲贴", "marks": "还行"}
{"content": "中规中矩", "marks": "还行"}
{"content": "还可以，至少我学到了不少东西", "marks": "推荐"}
{"content": "一本很精辟的C语言书籍", "marks": "力荐"}
{"content": "C语言复习的时候看的。用的是VC++6.0。有一些小错误，不过提到的东西确实是经常遇到和容易犯错的点，适合C语言入门的朋友阅读来深入理解，不过例子最好自己编一编", "marks": "推荐"}
{"content": "以前同事写的书，第一份工作就是作者面试的。想起当初陈sir跟我说在校招的时候曾怀疑我做面试题时作弊了，最后一面是还挺有料，哈哈。工作培训的时候，陈sir代讲了一次课，超级棒，信手捏来啊。顶一下。", "marks": "推荐"}
{"content": "讲解很深入，浅显易懂，非常适合用于提高C语言的能力。缺点就是有些地方显得有些啰嗦。", "marks": "推荐"}
{"content": "对有些基础的理解很有帮助", "marks": "还行"}
{"content": "非常好，幽默，", "marks": "力荐"}
{"content": "还是去读国外经典著作吧。这本书连鸡肋都算不上，错误百出。概念混乱。逻辑错误。", "marks": "很差"}
{"content": "在国内的同类书籍可以算得上精品了", "marks": "力荐"}
{"content": "讲的很透彻，不过可能不够全面", "marks": "推荐"}
{"content": "  如果你是初學軟件開發那麽這本書四星，如果是一個有相當經驗的程序員我覺得這書只能給個三星半了。\n  這本書講什麽？這本書主要通過一個CD租賃商店的例子帶你走完一個軟件開發的完整流程，並在這個流程上介紹一些軟件開發的樸素原則，不得不說這些原則的穿插還是很好的。很適合一個將要編寫一個系統但是不知道怎麽著手的人。\n  預構是什麽?預構是相對重搆來説的，它在軟件開發的初始階段通過前人的經驗也就是一些原則來指導軟件開發。\n  名字有什麽問題？首先這個名字多少有點虛張聲勢，誰在開始一項工作前都會從現有的成果出發，這點是毫無疑問的。既然作者要提出\"預構\"這個很學術化的詞，那麽書中的内容只有一個大的例子是不夠的，需要很多總結過的内容來支撐他的學術體系，内容應該從“預構”這個詞開始更學術化一點，重點應該放在“預構”的難點上，比如一開始需要多大的規模，抽象的層次，選擇什麽樣的工具或者語言等等，總之重點應該放在系統一開始的權衡的難點上。現在只不過通過一個例子來介紹軟件開發的樸素原則顯然很多書都做了，雖然他做的挺好。這點美國亞馬遜上的書評也是如此，都覺得作者這種内容起一個虛張聲勢的名字很不妥，國内書名更是加上“藝術”二字以提高身價更是錯上加錯。", "marks": "还行"}
{"content": "讲述了很多软件需求到设计的技巧，预构这个名字起的挺好，可惜很难像重构那样形成工具，正如书中所说，该工作目前仍然是一门艺术", "marks": "推荐"}
{"content": "没有想象中的有用。对\"预构\"也没能了解的太多", "marks": "还行"}
{"content": "对书中的例子边看边实现会有更多的收获", "marks": "推荐"}
{"content": "通过一个项目从头到位的过程，来说明软件开发中的设计演变过程，表述了如何应用预构技术，应用设计模式和一些敏捷开发的实践如测试驱动开发等，来进行软件设计和开发。内容比较简单易懂，适合学习敏捷开发，设计模式的时候，同时观看，会对整体的软件设计有一个概念。", "marks": "推荐"}
{"content": "用一个例子来贯穿设计过程，对于初学者很好", "marks": "力荐"}
{"content": "更加偏重工程运算。而非商业。", "marks": "还行"}
{"content": "没看后面的实例。只看前半部分的优化，还算有点干货", "marks": "推荐"}
{"content": "还不错的书，总结了了使用MATLAB编程是关乎效率的常见误区以及相对的建议。", "marks": "还行"}
{"content": "码农必备", "marks": "力荐"}
{"content": "ruby", "marks": "还行"}
{"content": "编程语言创始人访谈录。", "marks": "推荐"}
{"content": "译的有点小问题，不是译者水平不行，是这死宅书太难译了……", "marks": "推荐"}
{"content": "浏览了一番python, perl, java……这群人真厉害。不过我比较想看他们是怎样对编程产生兴趣的。以后想了解perl和PHP。", "marks": "还行"}
{"content": "内容很赞，翻译太烂了", "marks": "推荐"}
{"content": "还好吧，不过大师们有些不羁，所以什么都说，看得到奔流的思想，也看得到信马由缰。", "marks": "推荐"}
{"content": "咳咳 翻译太悲催了 （那你看什么啊喂！", "marks": "推荐"}
{"content": "很早读过", "marks": "推荐"}
{"content": "我对这本书保持敬畏，汗", "marks": "还行"}
{"content": "豆瓣电脑组里总有一个人在炫耀自己会30门编程语言～    虽然知道这不太好     但具体怎么不好也讲不上来，   多问自己几次到后来连各个编程语言存在的意义也不晓得了～    还是说我不该深究这些问题？       还是先看看这本书再说吧 ///  读完一抬头   感觉世界是全新的……", "marks": "推荐"}
{"content": "比较适合对编程语言本身有兴趣的同学读。", "marks": "推荐"}
{"content": "不同的语言设计者不同的理念。", "marks": "推荐"}
{"content": "很好的想法，很差的执行，一票货真价实的大师，对一堆彼此不相干的问题，给出了几百页之多难以理解的自说自话，另外，翻译差极了！", "marks": "较差"}
{"content": "翻译一般般。如果是要做大数据分析，果然还是python靠谱啊//另，C++和O-C貌似是更优秀的OOP语言。JAVA又被吐槽了", "marks": "还行"}
{"content": "看得比较吃力，没扯什么技术的内容，可能就像别人说的翻译存在很大的问题吧。都是简单的表述，但是总有一种看不下去的感觉。\nPS 有的章节页脚部分的标题都会写错，明显是不认真的结果", "marks": "较差"}
{"content": "各位编程之父采访录，大师言论。计算机语言成千上万，大浪淘沙，剩下的多是精华之作。尤其书中涉及到的C++，C#，JAVA等都是此中的杰作，然而通过和设计者的对话，我们也可以知道其实这些语言也是危机四伏的，他们总是在不断的革新之中，否则很有可能被另外的语言所取代，这就使我们更加敬佩这些语言的设计者，开创者和杰出使用者，他们使的各自的语言社区丰富并且强大，带动了世界计算机语言的发展，使得不同领域的不同的人能够各取所需，实现自己的工程，科研等种种任务。这些设计师都是值得我们称颂，尊敬的，也希望他们能够给世界带来更多的精彩。", "marks": "力荐"}
{"content": "  對我這樣一個C#使用者來説，拿到書以後第一件事情就是看完Anders的訪談，翻譯的還算能看懂，不過也可能是因爲我之前已經看過兩篇同樣是採訪Anders的文章的緣故。“它強烈不願意中斷通知語言決定的代碼”反正這句話我是沒看懂，雖然看了後面稍微有點了解意思。各語言的使用者還是因該看一看以了解語言設計的者的原始想法。新學某种語言之前也應該看看該語言設計者的思路。總之非常有啓發性的讀物，但不是每一篇你都要去讀。", "marks": "推荐"}
{"content": "python,java,uml...", "marks": "推荐"}
{"content": "对我这种门外汉文科生来说，有点难。。。翻译也太差了。", "marks": "还行"}
{"content": "精彩的主要是那些内在的思想……", "marks": "力荐"}
{"content": "有点乱", "marks": "推荐"}
{"content": "也就一般吧……仅仅是一般！", "marks": "还行"}
{"content": "不好看，题材太散", "marks": "还行"}
{"content": "看了没多少收获，要么是完全不了解的语言，要么是创始人在吹牛=，=", "marks": "还行"}
{"content": "和想象中完全不同", "marks": "推荐"}
{"content": "好好看了比较熟悉的c++pythonsqlumlluaperljava 2p与uml好评 某些气场 java已经够可怜了你们不要欺负它 果然我还是不要纯搞it 语言嘛大概以后要专注于2p+r了", "marks": "推荐"}
{"content": "比较晦涩，语言太杂导致很多都看不懂", "marks": "较差"}
{"content": "简单浏览", "marks": "力荐"}
{"content": "TP311.1/2730\n草草翻完：1.翻译烂爆，能把word（数据单位中的\"字\"）翻译成“词”、把syntactic sugar翻译成“语法甜头”、把cast（类型转换）翻译成“造型”的，除了外行我想不到其它可能；2.如果对所谈论的语言基本不了解的话，从相关章节很难读出什么收获。", "marks": "还行"}
{"content": "很多大牛，想向他们看齐。", "marks": "推荐"}
{"content": "开阔眼界。", "marks": "推荐"}
{"content": "好书全让这叫人骂娘的翻译毁了! 直接看原版!", "marks": "还行"}
{"content": "翻译的不太好", "marks": "还行"}
{"content": "这本书更像本箴言集，比较难以理解，如果自己没有接触过很多的话。其实我就看了Python，C#，C++", "marks": "还行"}
{"content": "不负责任的出版社和编辑们，这样下去会让我对中译技术书更加敬而远之", "marks": "较差"}
{"content": "设计每一种语言的背后的故事", "marks": "推荐"}
{"content": "History became legend and legend became myth… ", "marks": "推荐"}
{"content": "因为有各种编程语言，所以只选了自己熟悉的python，顺便看了看c++和objective—c", "marks": "推荐"}
{"content": "大多数人都对问题避而不谈，只有Lua的一个设计师认真地回答，所以只推荐那一章看看", "marks": "推荐"}
{"content": "先看了Guido那部分，很实在啊", "marks": "推荐"}
{"content": "在图书大厦看了该书的简介，感觉不错啊 ", "marks": "推荐"}
{"content": "forth的传奇是真的", "marks": "推荐"}
{"content": "远比我想象中的差，感觉很生搬硬套", "marks": "较差"}
{"content": "大致翻了一下，没有太多关于编程技巧的东西，主要是语言作者对于自己语言设计的一点看法，有点情绪化，哈哈", "marks": "还行"}
{"content": "翻译水平很有限。。。很多翻译错误很初级", "marks": "还行"}
{"content": "知识有限，看不懂。。只能翻一翻了。", "marks": "推荐"}
{"content": "填补一些类似8卦的空缺。“应该尽可能的简单，而不是更简单”，这句话是真理。", "marks": "力荐"}
{"content": "对一群“狂热”的人的采访", "marks": "推荐"}
{"content": "简单的读过自己想了解的几门语言大师...剩余的没耐心看了...mark，今后再读", "marks": "推荐"}
{"content": "很多语言都没用过，感觉还不是很能看懂里面的一些思想，很多年后再读读或许会更有感觉~", "marks": "还行"}
{"content": "看过用过的语言作者的访谈，还是很有启发的", "marks": "还行"}
{"content": "挑了一些和自己相关的东西看，了解了一些基本知识。", "marks": "还行"}
{"content": "都是大神。", "marks": "推荐"}
{"content": "似乎翻译确实不好。我只看了Python那一章。", "marks": "还行"}
{"content": "发展都是在巨人的肩膀上", "marks": "力荐"}
{"content": "神书不解释", "marks": "力荐"}
{"content": "了解一下各种语言发明人对计算机科学和技术发展的看法还是很不错的=。=", "marks": "推荐"}
{"content": "挺有意思的，不过很难说学到了什么", "marks": "还行"}
{"content": "形式和<<编程人生>>差不多，都是采访性质的，可快速浏览,开卷有益", "marks": "还行"}
{"content": "虽然有些语言我没有学过甚至都没有听过,但是我从这里面获得很多的启发.真的很不错.", "marks": "推荐"}
{"content": "各编程语言大师的一些思想,观点很有价值", "marks": "推荐"}
{"content": "翻译ungeiliable", "marks": "还行"}
{"content": "语言创始人的访谈，不少观点比较激进一些，但是依然发人深思。", "marks": "推荐"}
{"content": "看了多半，没什么收获", "marks": "还行"}
{"content": "还可以吧", "marks": "还行"}
{"content": "各种编程之X。。\n内容还行，翻译得还差那么一点。。", "marks": "还行"}
{"content": "讲解大师在设计语言时的考量。动态语言v.s.静态语言，各自都有各自的优势。从中的得出的一个结论，任何一个事，在beta版本时，你可以大修，大改，获得性能，API甚至完全颠覆的更新；但是一旦稳定以后，兼容性是必须要保证的一点。", "marks": "推荐"}
{"content": "和想象中完全不同（如果现在在看一遍，可能还是写和想象中不同，因为已经完全忘了写的啥了= =）", "marks": "推荐"}
{"content": "不算喜欢的一本书。也可能是曲高和寡吧。", "marks": "还行"}
{"content": "翻译的不好,不过翻译这样的书也的确难度太大.世界顶级的大拿们讨论编程的各个方面,很多话题都很抽象.我只看了和发明python awk perl的这五位创始人的对话.看不大明白.若干年后再看吧.", "marks": "还行"}
{"content": "内容非常好，不过翻译质量和一些排版细节上需要提高。\n\n比如 Reflection 业内普遍的说法是“反射”而不是“反映”。再比如“20个词”这里的词原文为 words，显然“字”或者不翻译也是业内普遍能够接受的一种说法。再比如波形括号不如大括号或者花括号来得直接了……", "marks": "推荐"}
{"content": "看到了真的有爱不释手的感觉，句句是黄金啊", "marks": "力荐"}
{"content": "错误多到可怕 编辑校对去死吧", "marks": "还行"}
{"content": "Ruby初学者入门书籍。", "marks": "还行"}
{"content": "说得不清楚，消磨了我的兴趣", "marks": "较差"}
{"content": "日本人写一本非常流畅的Ruby教程，写给会其他语言的人，没啥废话，讲的也挺清楚。可惜就是中文版印刷错误实在太多。翻译的还可以了，至少不影响理解。因为印刷错误给四分吧。", "marks": "推荐"}
{"content": "错误太多了，几乎没有几段示例代码是可以跑的", "marks": "较差"}
{"content": "写的简洁，不适合入门。。小错误很多！！！什么编辑。。", "marks": "较差"}
{"content": "早读完了，实在是提纲性质，不过ruby很强大。", "marks": "推荐"}
{"content": "比Fitzgerald写的《学习Ruby》要详细很多。", "marks": "推荐"}
{"content": "好简略啊……", "marks": "还行"}
{"content": "写的 太容易了", "marks": "还行"}
{"content": "适合编程新手，其实完全可以看网上的教程了解这些内容", "marks": "很差"}
{"content": "讲的的很另类\n", "marks": "较差"}
{"content": "我擦，逗我呢，这翻译...", "marks": "较差"}
{"content": "代码有错误", "marks": "还行"}
{"content": "Hajimeteno ruby", "marks": "力荐"}
{"content": "这本书的标题是Hajimeteno Ruby。心想红宝书也没有这个单词啊……原来是日语", "marks": "还行"}
{"content": "书的内容不错，是非常适合有编程经验的人进入ruby世界的敲门砖。不过正如书名所说，这本书仅够入门，想要进步还需继续学习。另外书的印刷错误实在太多，不知道出版社的校对在做什么。", "marks": "推荐"}
{"content": "非常好的入门书，适合有些基础的同学看", "marks": "力荐"}
{"content": "Ruby，很短...是入门的读物...", "marks": "推荐"}
{"content": "迷人的Ruby，这是在看完前两章之后的一个感慨，与当时学习Python的感觉有点类似。然而Python的学习没能坚持下去，这次因为Berkeley的SaaS课程而再次来学习这个，希望以后能派上用场。", "marks": "推荐"}
{"content": "书是好书，被翻译坑了。", "marks": "较差"}
{"content": "比较入门阿", "marks": "还行"}
{"content": "入门还可以，难度适中", "marks": "推荐"}
{"content": "简单的Ruby入门书籍。", "marks": "力荐"}
{"content": "错字太多，看着费劲", "marks": "较差"}
{"content": "感觉作者思路有点乱，再就是翻译很不负责任，很多地方都有明显的错误。不知道原书是否如此...", "marks": "较差"}
{"content": "快速入门了....", "marks": "推荐"}
{"content": "虽然书里面有一些细节错误，但还是满不错的一本书，但是在条理性上和Learning Perl相比差了点", "marks": "还行"}
{"content": "学习", "marks": "推荐"}
{"content": "这本书确实一般般，就当入门时候fast reading看吧，别花太多精力", "marks": "还行"}
{"content": "这种垃圾内容， 这种垃圾翻译也敢出来卖钱。 全书的例子有用的几乎没有，对的没有几个", "marks": "很差"}
{"content": "请想要购买此书的同学注意：第一，这本书仅适合非常了解其他语言，而想要快速学习Ruby的读者。第二，书中打印错误良多，大概每8页一个。请慎重选择。", "marks": "很差"}
{"content": "凑合吧。此书的定位是初学者入门提高书籍，但是书中的内容又很尴尬。很多内容浅尝辄止，对于高手而言，会的依然会，找不到有营养的知识；对于刚刚入门c和linux的新手而言，你让它去记什么bss、data段，你不告诉他APUE却让它去理解mmap、你不讲解线程的概念却去罗嗦一大堆pthread的用法和禁忌，你不去讲解连接和加载就去剖析hello world，总之会很尴尬。\n\n另外，此书中某些代码的排版实在让我无法恭维。还有，书评中五毛泛滥，非常明显。\n\n对我而言，比较有价值的部分是第6章，用c来实现容器、迭代器和算法、动态绑定；第8.3节内存管理器、8.5节调试手段和原理；第10.1节文本处理。\n\n编程是没有捷径的，指望这么一本书就能成长为“系统程序员”是不靠谱的，还得去啃CSAPP、SICP。\n\n", "marks": "还行"}
{"content": "面向对象设计、数据结构、系统编程和一些软件工程知识的大杂烩，作为科普书还不错。可惜有点虎头蛇尾，后面几章除了大篇幅贴代码就是复述维基百科和软件界名著。总体评价是“值得一看”", "marks": "还行"}
{"content": "成功学有很多 成长计划也有很多 但这本是专门针对程序员的 = = ", "marks": "推荐"}
{"content": "感觉一般。讨厌这个书名。。。", "marks": "还行"}
{"content": "李先静很实在", "marks": "还行"}
{"content": "很难想象薄薄的一本书竟然可以讲到如此多的方面，但这本书不仅做到了，而且做得很好。\n类似于基础版的《深入理解计算机系统》，更加平易近人且不失深度。\n一点瑕疵是书中部分代码格式有些错乱。", "marks": "力荐"}
{"content": "不得不感叹，Java程序员既是幸福的，也是痛苦的，幸福的是可以不用学习太多就写出较好的程序，而C程序员基本是必须学习的比较多才能写出较好的程序，痛苦的是对于Java程序员而言，要写出很好的程序，就必须比C程序员学习的更多。\n\n本书完全符合书中所列的目标人群，对于C程序的初级人员而言，是非常值得一看的。", "marks": "推荐"}
{"content": "一直希望豆瓣能出分类四叫做“弃读”... 说读过或想读或在读都不合适啊...", "marks": "推荐"}
{"content": "很不错~", "marks": "力荐"}
{"content": "初入行时作闲书参考不错。不能算是一本技术书。不过一些技术之外的问题，在这里会找到成长的门径。", "marks": "推荐"}
{"content": "这本书有好的出发点：经验之谈。但是从中途开始失控：半清不楚的设计模式+面向对象。", "marks": "较差"}
{"content": "看了很多讲编程风格和提高编程素养的书，还是这本书讲的实在实用。非常适合初出茅庐的人学习，编程菜鸟看完了真是提高很大。以前我知道全局变量不好，但是具体怎么改？这本书给了很好的解释。很多书都是给结论但是不说明为什么，这本书这点做的非常好！", "marks": "力荐"}
{"content": "是一本可以随时翻看的好书", "marks": "力荐"}
{"content": "讲得还不错，对于初学者很有帮助，很多是思想上的，值得一看。", "marks": "推荐"}
{"content": "感觉一般，没什么特色。", "marks": "还行"}
{"content": "和系统没几毛钱关系", "marks": "还行"}
{"content": "汗，选错书了，这种入门的书。", "marks": "还行"}
{"content": "还是有些收获的，主要是一些技巧和启发", "marks": "推荐"}
{"content": "困倦中扫了一遍。", "marks": "还行"}
{"content": "给个5星。不过是国内书籍的5星，离国外5星还有差距。用一句话来总结本书，可以是，C语言实现面向对象编程。", "marks": "力荐"}
{"content": "非常不错！还有很多小技巧。", "marks": "力荐"}
{"content": "理解了许多以前疑问的地方，学到了很多实用的编程方法，以后还有再看看。", "marks": "力荐"}
{"content": "这本书没有读完，但是内容确实相当的实用，很高兴国内的计算机书籍质量越来越高了。", "marks": "推荐"}
{"content": "如果要我来写这样一本书，写的未必比他差，of course，是指销量，如果说内容，不知要甩出它几条街。这本书倒是很适合还未走出campus的三岁小孩子拜读。", "marks": "很差"}
{"content": "非常适合初级程序员（像我这样还没毕业的研究生）阅读，里面的设计思想都很有用，作者的十多年的经验总结的很好。", "marks": "力荐"}
{"content": "不知所云。", "marks": "还行"}
{"content": "有所帮助，不过远没有字字珠玑之感", "marks": "还行"}
{"content": "估计是已经过了读这种书的年龄了，对自己来说内容太泛而不精", "marks": "还行"}
{"content": "物是人非，重新审视后觉得其实不靠谱..", "marks": "还行"}
{"content": "作为软件开发入门无道的新人，值得细看", "marks": "力荐"}
{"content": "好书", "marks": "力荐"}
{"content": "很不错的书，可以用来看看自己有多少漏洞。。。", "marks": "力荐"}
{"content": "此书淋漓畅快，用降低复杂度的思想将数据结构，算法，设计模式，操作系统基础原理和测试方法贯穿起来，醍醐灌顶，受益匪浅，力荐。ps： 我还需要多读几遍，好好学习。。。仅是概览，已经深为所动", "marks": "力荐"}
{"content": "许多设计，代码可以直接用上。", "marks": "推荐"}
{"content": "2010年9月15日 Amazon|自费 通读", "marks": "还行"}
{"content": "我应该算是系统程序员成长划的第一个受益者与实践者，一路成长，在这里说声，谢谢", "marks": "力荐"}
{"content": "没啥用。最终还是在游泳中学会的游泳。", "marks": "还行"}
{"content": "标上鼓励自己……没看过的章节的当字典查吧……", "marks": "推荐"}
{"content": "baba的。要拿来拜一拜。", "marks": "力荐"}
{"content": "额。不是我的菜", "marks": "还行"}
{"content": "baba的书哇~~~要膜拜的·", "marks": "力荐"}
{"content": "每日一仰慕\n", "marks": "力荐"}
{"content": "后面看不懂，我原以为自己有成为宅男geek的潜质，后来发觉自己其实只是宅男。", "marks": "推荐"}
{"content": "很不错，适合各种入门", "marks": "推荐"}
{"content": "基本功要扎实才行", "marks": "推荐"}
{"content": "听说打五星可以得到作者的BG？", "marks": "力荐"}
{"content": "大篇幅的GUI操作让我找到了（蜜汁）自信 (｡ì _ í｡) ", "marks": "推荐"}
{"content": "了解linux，值得一看", "marks": "推荐"}
{"content": "入门的好材料，早应该看这种书了，而不是乱七八糟没有系统性的零散教程。", "marks": "力荐"}
{"content": "刘坝的书，必须顶！", "marks": "力荐"}
{"content": "适合对Linux基础初学者，面铺的很广，辅导手法属于手把手式的（带图，有步骤），对于初学者不易犯错。后面几章大概翻一下即可，无需细看。", "marks": "推荐"}
{"content": "非常适合linux的初学者，linux基础都有讲，点到为止", "marks": "推荐"}
{"content": "适合入门", "marks": "推荐"}
{"content": "比较认真的一本书，但现在有点跟不上时代了。", "marks": "推荐"}
{"content": "入门还行", "marks": "推荐"}
{"content": "非常好。我看此书入门的。", "marks": "力荐"}
{"content": "\"应该用肌肉，而不是头脑去记忆这些命令和选项。\"", "marks": "力荐"}
{"content": "适合新手了解Linux，以及一些基本的操作。", "marks": "推荐"}
{"content": "不管是语言本身，还是书，都比 2.x版本的思路清晰很多。字符串讲的很棒。", "marks": "推荐"}
{"content": "字符串讲的很棒！", "marks": "力荐"}
{"content": "举重若轻", "marks": "力荐"}
{"content": "作者喜欢开玩笑。。。。", "marks": "推荐"}
{"content": "FURTHER READING和排版是亮点。", "marks": "力荐"}
{"content": "有不少能感受到Pythonic的段子，也提供了很多扩展阅读，比参考手册风格的书好多了。", "marks": "推荐"}
{"content": "great for introduction", "marks": "推荐"}
{"content": "第一遍刷完. ", "marks": "力荐"}
{"content": "还是入门书", "marks": "推荐"}
{"content": "如果这么思路清晰的书不能得5星，那5星的要求就有点过高了。", "marks": "力荐"}
{"content": "看了中文版= =", "marks": "力荐"}
{"content": "读得中文版，不过还是云里雾里的", "marks": "推荐"}
{"content": "断断续续算是读完了。。1.书很好，写作风格尤其友好。2.只有我一个人觉得programming的书看电子版好折磨嘛orz@MaoHaierX  。。3.回头一看自己写出来的东西还是浓浓的C\\C++风格啊还有没有救啦【zen of python", "marks": "力荐"}
{"content": "有趣。", "marks": "力荐"}
{"content": "对照《简明Python教程》。", "marks": "推荐"}
{"content": "很好", "marks": "力荐"}
{"content": "http://getpython3.com/diveintopython3 http://woodpecker.org.cn/diveintopython3", "marks": "推荐"}
{"content": "感觉太乱了，不适合新手看！", "marks": "还行"}
{"content": "快速上手", "marks": "力荐"}
{"content": "还不错", "marks": "力荐"}
{"content": "适合有一定Python语法基础的阅读，适合有一定Python基础的同学", "marks": "推荐"}
{"content": "读完后我和Swaroop一样的评价：超棒！深入浅出的好书。唯独不喜欢《闭合与生成器》一章——把简单的概念解释的太过复杂。其他的部分都很好理解。", "marks": "力荐"}
{"content": "不太简明。", "marks": "还行"}
{"content": "读的是中文版pdf，不过是我读过的最适合程序员看的python入门书", "marks": "力荐"}
{"content": "重新翻看这本书，我真的认为它不是一个很好的入门选择，但是本入门后值得读的书。", "marks": "力荐"}
{"content": "详简得当，字字中的", "marks": "力荐"}
{"content": "花了3个小时瞄完了，全书只有最后的附录有价值", "marks": "还行"}
{"content": "Computer Science 61A... 作者很有意思 info-suicide很有意思...", "marks": "力荐"}
{"content": "给老鸟的Python入门书", "marks": "力荐"}
{"content": "万物皆对象", "marks": "力荐"}
{"content": "很好的 python 进阶读物。", "marks": "力荐"}
{"content": "我觉得有点浅，还是python标准库参考更适合我", "marks": "推荐"}
{"content": "chapter 9 unittesting 用一个罗马数字和阿拉伯数字转换的实例来说明unit testing的用法 实际应用来说 我不用python3 也不用unittesting啊...", "marks": "推荐"}
{"content": "最早是写XML处理脚本时找到了这本书的在线版（http://www.diveintopython3.net/），最近做json序列化时又翻到了相关内容，索性就抽空把整本书都读了。Mark Pilgrim大神的文字和代码一样思路清晰，简洁明了，不废话——偶尔卖个萌的不算哈——特别对码农胃口。", "marks": "力荐"}
{"content": "good intro", "marks": "推荐"}
{"content": "概念清楚，例子也不错。要是覆盖面再广一点就完美了。", "marks": "力荐"}
{"content": "从菜鸟到高手都可以读这本书，开卷有益，各得其所。而且，有电子版（免费，正版），有英文版，还有中文版。不看是你的损失。", "marks": "推荐"}
{"content": "了解一些别的语言里面的特性的话，读起来还是很轻松的。\nps:读的时候潜意识经常会拿ruby、C#过来对比。。", "marks": "推荐"}
{"content": "一本不一样的编程书，不再从Hello World开始", "marks": "推荐"}
{"content": "有面向对象经验的程序员的书籍", "marks": "推荐"}
{"content": "过一遍还是挺好的，可以对Py3的一些新特性有基本的了解。网上有电子书，每一章都很短，读起来并不费力，由于之前不了解，对产生器generator那一章记忆较为深刻。", "marks": "还行"}
{"content": "没什么感觉，主要没细看。。。for beginners", "marks": "还行"}
{"content": "近年来读过的最有意思的技术书，经典当然是经典，但是我感受最深的还是书中随处都有的冷不丁的小幽默；看原版最大的好处就是能感受到作者对技术的热情。", "marks": "力荐"}
{"content": "不明觉厉.....这么说，这几天想写个小脚本用用，非常急切上网找现成结果果然——似乎完全看不懂，虽然我也基本看不懂这本书的高端货，不过回头我勉强能看懂和我的需求相关的代码了，最重要的是很快就能把这本书看完。", "marks": "推荐"}
{"content": "对python的各项知识点结合实例娓娓道来，是一本很不错的python书籍，适合有一定编程基础的人阅读。", "marks": "推荐"}
{"content": "英文原版书写得真不错，如果哪家出版社想发行找我翻译咋样啊。。。", "marks": "推荐"}
{"content": "读完的第一本英文技术书，写的很不错。很有帮助", "marks": "推荐"}
{"content": "讲的很细，并且是免费的。", "marks": "推荐"}
{"content": "在网上看的电子版，排版相当赞，没有看完所有章节，很多知识点讲的很精彩，代码和文字对照很好。", "marks": "推荐"}
{"content": "月末，开始有些凌乱，好书，不错，可是没了心情，另有计划得提前提上议程，哎。。。只得不舍的草草浏览最后几章的内容，，是为结束，", "marks": "力荐"}
{"content": "简单实用，除了 python 的知识，还可以学到一些常识，像 罗马数字 的规则", "marks": "推荐"}
{"content": "虽然网上普遍都是2.x的代码和模块，虽然2.x和3.x的差别让人头疼，但是从新的开始学总没错", "marks": "推荐"}
{"content": "good book to start with", "marks": "推荐"}
{"content": "真的不错的一本Python书，作者很风趣幽默，写作风格是用实战例子来引入概念，感觉概念讲的比Hetland那本详细不少，推荐~", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "看了官方网络版，新浪爱问的却字符集看不了，代码非常实用简洁，人性化的解释也一目了然。http://wiki.woodpecker.org.cn/moin/ObpLovelyPython", "marks": "力荐"}
{"content": "入门书.哈哈", "marks": "推荐"}
{"content": "一般般，没有显出python的可爱", "marks": "还行"}
{"content": "适合入门，有趣，丰富的示例及扩展，内容稍显陈旧，不过从原理上去了解是不为过的~", "marks": "力荐"}
{"content": "给新人看这书，人家回来就问我zope怎么配。", "marks": "很差"}
{"content": "作为入门书挺好的～谁说要学python都推荐他先看这个了", "marks": "推荐"}
{"content": "集体创作的书，质量我个人觉得差强人意。", "marks": "较差"}
{"content": "方式很好，也深入浅出，但大量均匀分布的感叹号和北方土话是怎样", "marks": "还行"}
{"content": "怪了吧唧的 cday和kday挺好玩 不过对于我这样的苦手来说老要去svn看答案不是什么好的体验 到作弊条部分又变得和ref似的了(哪有那么厚的作弊条啊) 感觉像在看一个喜欢发转帖的博客", "marks": "较差"}
{"content": "只是浏览，回家细读", "marks": "力荐"}
{"content": "这书不像是给小白看的", "marks": "推荐"}
{"content": "\"下酒的老醋花生，解酒的胡辣汤，下饭的榨菜\"，的确如此，挺好", "marks": "推荐"}
{"content": "很带感，看了之后应该才算有一定了解python，简单地说，这本书必看~", "marks": "力荐"}
{"content": "it's not easy for me", "marks": "还行"}
{"content": "书的名字和封面设计可能误导新人认为这本书是入门书籍，可事实并非如此，没有一定的Python或其它语言的基础的话可能会觉得比较吃力。至于本书的后半本看上去类似cookbook，适合快速浏览以便有个大概的了解或需要时的查阅。", "marks": "推荐"}
{"content": "很好哈哈", "marks": "推荐"}
{"content": "像Cookbook类，手把手教学、现实中可用（介绍实际常用模块）、足够广度，但内容较凌乱不系统。不太适合入门，适合在有基本语法基础上阅读。", "marks": "还行"}
{"content": "封面看起来一点都不像程序书，整体风格很是新颖。但是对于初学者来说，经常会看得有些莫名。还是有一定基础以后再来看看作为巩固好了。", "marks": "推荐"}
{"content": "很不错的小菜啊....", "marks": "推荐"}
{"content": "Python社区的无比的优越感彻底把我击倒.", "marks": "较差"}
{"content": "不错的Python入门书", "marks": "力荐"}
{"content": "前两个例子实践，后面介绍python，然后介绍常用模块以及实践常用技巧。非常非常深入浅出的一本书！力荐...", "marks": "力荐"}
{"content": "作弊条应该有些用处。", "marks": "推荐"}
{"content": "一本为Python世界的新人准备的导学性质的书，概括的介绍了Python的各种概念，工具，框架，不深入，但是挺全面，也挺有趣的，社区称它是可以送MM的书（送MM？确定不是在陷害宅男们？）", "marks": "推荐"}
{"content": "一小时在上海书城翻完，怎么现在计算机的书都流行写成小说呢？", "marks": "还行"}
{"content": "对于快速入门并没有什么用", "marks": "还行"}
{"content": "家庭主妇读物！", "marks": "推荐"}
{"content": "深入还需多动手！", "marks": "力荐"}
{"content": "对我不实用。", "marks": "较差"}
{"content": "讲得东西通用性不强，还有装B的目录实在很难忍受", "marks": "还行"}
{"content": "入门之后，读读不错。", "marks": "推荐"}
{"content": "没那么容易诶", "marks": "还行"}
{"content": "应该是不错的，但是自己当初读的时候不知道为什么，总感觉有些不上不下的……", "marks": "还行"}
{"content": "只给三颗星，因为排版是在有问题，边边空一大部分的，代码字体看着不舒服。麻烦下版参考一下原版的英文技术书籍。", "marks": "还行"}
{"content": "初学的人强烈不建议，在我看来这本书的组织形式太过松散了。", "marks": "还行"}
{"content": "真的很适合入门？", "marks": "还行"}
{"content": "我几乎忘了当年在东晖老师的建议下，还看过这个。。。", "marks": "推荐"}
{"content": "国产的难得好书，但实用性没说的那么好。", "marks": "推荐"}
{"content": "一半是技术，一般是科普。", "marks": "还行"}
{"content": "哲思的书，不错；\n编程是一种乐趣；", "marks": "力荐"}
{"content": "比较有意思的书，应该是看的第一本Python书", "marks": "推荐"}
{"content": "满怀着期望和好评之后，相当失望，举的第一个实例从头到尾都让人麻烦，第一个实例是关于~cdrom光盘里的文件信息~多少人用光驱了现在......", "marks": "还行"}
{"content": "又是一本cookbook", "marks": "还行"}
{"content": "一本很有特色的编程书，不过它的受众面还是比较狭窄，只适合熟悉其它某种OO语言的人去了解Python。后半本书的内容比较鸡肋。", "marks": "还行"}
{"content": "废话较多", "marks": "还行"}
{"content": "这书讲解方式蛮不错的...除了实际应用.没有更好的方式学编程了...", "marks": "推荐"}
{"content": "不算是入门书，书中信息量相当大。", "marks": "还行"}
{"content": "没读过，也读不懂。\n我就是来给组长大人打分的。哈哈哈", "marks": "力荐"}
{"content": "定位有些尴尬的Python教材，新手可能会觉得不够系统和全面，进阶的话又略显浅显，而且其中一些库的应用多少有些过时！", "marks": "还行"}
{"content": "早已看完，标注。", "marks": "推荐"}
{"content": "python社区真是实用主义至上的社区啊！行者们的价值观充斥整本书中。。。", "marks": "力荐"}
{"content": "只适合初学者，不然会很失望", "marks": "还行"}
{"content": "章节安排不太合理", "marks": "还行"}
{"content": "小白和社区之间的故事真是振奋人心啊。觉得要做一个技术员，混技术论坛简直是必须且有效的～本书设计思路很好，先是通过故事，再细讲语法，再有reference～民众的力量是强大的", "marks": "力荐"}
{"content": "我的Python入门", "marks": "力荐"}
{"content": "前两章入门的还可以", "marks": "推荐"}
{"content": "内容也算是选序渐进。大多内容还是点到为止，书中重点讲解的框架版本较旧。不太适合新版本。\n总体来说还行，适合有其它程序编程经验的读者阅读。", "marks": "还行"}
{"content": "作为Python入门书，还是不错的，一天就可以读，", "marks": "推荐"}
{"content": "看完后感觉就像一本洗脑书，一味赞美 Python 多么好，但看完之后根本不知它说什么，还是不会用 Python，总之不适合初学者。", "marks": "很差"}
{"content": "初学看看还凑合....", "marks": "还行"}
{"content": "有点难的python入门书。", "marks": "还行"}
{"content": "  简单有趣，但是很有阅读性，实践性，入门可以", "marks": "推荐"}
{"content": "见过作者之一的ZQ老大，这本真的值得推荐", "marks": "推荐"}
{"content": "比较偏重实践，介绍了很多框架", "marks": "推荐"}
{"content": "过时了。", "marks": "很差"}
{"content": "说实话我还是没办法习惯这样没头没绪地学，给我教科书吧，系统地从基层开始。", "marks": "推荐"}
{"content": "例子很不错，从简单功能入手，慢慢优化", "marks": "推荐"}
{"content": "社区出的书不错，算是我的入门书了", "marks": "还行"}
{"content": "杂乱无章，不实用", "marks": "较差"}
{"content": "Python 的入门书, 简单翻了一些. 内容还行吧.\n适合刚入门的初学者.", "marks": "还行"}
{"content": "翻过", "marks": "还行"}
{"content": "这个是面向初学者，个人还是喜欢实战系列。。", "marks": "推荐"}
{"content": "python入门的好书", "marks": "推荐"}
{"content": "说实话有点晕乎，里面的例子太特殊了。", "marks": "还行"}
{"content": "还不错，不过不适合0基础入门。看过py简明之后提高一下还是不错的。", "marks": "较差"}
{"content": "很多实用的介绍", "marks": "力荐"}
{"content": "入门加工具书。现只跟着做了“光盘故事”，亦然能发现python的语言之美，在函数式编程方面比较有意思。", "marks": "推荐"}
{"content": "对于初学者来说可能难了一点儿，但是熟悉之后再看绝对是一本好书~~~", "marks": "力荐"}
{"content": "内容已经严重过时了。", "marks": "较差"}
{"content": "洪强宁介绍 Quixote 的小节是全书唯一的亮点.", "marks": "很差"}
{"content": "入门读物", "marks": "推荐"}
{"content": "风格真诡异", "marks": "还行"}
{"content": "定位和风格是不错的，可惜估计是初尝试，没把握好度，有些进退失据。纯初学者会看不明白，有经验的人又会嫌讲的不够清楚。前面的示例引导很多地方粗糙了点，至少涉及的具体技术点还是要讲清楚。后面的很多地方又过于简略了。python内容确实很多，也许这么点篇幅还要分半部示例出来，要讲清楚太勉强了点。", "marks": "还行"}
{"content": "建议先看《简明pyhon教程》,然后再把这本书敲一遍！", "marks": "力荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "并不适合Python入门", "marks": "还行"}
{"content": "很有趣。但实际上一般。", "marks": "还行"}
{"content": "CDay挺不错，KDay枯燥了点，框架篇里面的几个介绍和对比很赞，还有封面很卡哇伊", "marks": "推荐"}
{"content": "引用前言——如果以厨艺来作比喻的话:  \"Lovely Python\" 就是下酒的老醋花生,解酒的胡辣汤,下饭的泡菜！ \n\n一本很有爱的Python介绍书箱，了解的不仅仅是一门语言，还有更多Coding、Open Source、Hacker的思想。难得的“小白”指南啊！", "marks": "推荐"}
{"content": "比较轻松愉快的书，适合入门，尤其是后面半本书的cheating sheet", "marks": "推荐"}
{"content": "同意网友的看法，书是好书，但入门的人读起来肯定一头雾水：Python 这也能干，那也能搞，到底从哪开始入手捏？", "marks": "力荐"}
{"content": "感觉这本书不好，不是我的口味，而且选择的web框架也太。。。其实不推荐。", "marks": "还行"}
{"content": "不错的入门书籍，和一般的语言介绍类书比起来要更讲究实用性，而且我认为是国内人写的非常不错的技术类书", "marks": "推荐"}
{"content": "粗略的看完了python tutorial、head first python、dive into python后，才达到书中“小白”的水平。。。。", "marks": "推荐"}
{"content": "来自邮件列表的一本书。入门很好。结构很新颖。", "marks": "推荐"}
{"content": "至今为止看到的有关python的最好的书了。", "marks": "力荐"}
{"content": "实在不是一本适合用来入门的书，感觉过于杂乱了", "marks": "还行"}
{"content": "风格挺好的，不过每个都写得不深入，入门书籍？！", "marks": "还行"}
{"content": "没事看看别人怎么写故事吧～", "marks": "较差"}
{"content": "三次去书城..站了一个角落中看完此书....让我大体对python有了个整体的概念...不错...", "marks": "还行"}
{"content": "比较适合入门的Python教程", "marks": "还行"}
{"content": "a quick glance of python. good!", "marks": "力荐"}
{"content": "大学时在图书馆看的入门书", "marks": "推荐"}
{"content": "写给非Python程序员的程序员的入门书，但是，我，没，看，懂。", "marks": "还行"}
{"content": "可爱", "marks": "还行"}
{"content": "卖萌是可耻的", "marks": "还行"}
{"content": "开始读的时候，觉得python不是想的那么容易，但是认真，艰难的读过了前160页后，发现后面近300全是对前面的补充，顿时有一种豁然开朗的感觉，“轻舟已过万重山”。这本书本身就进行绝佳的学习语言方法的传授现在是凌晨00：34，我刚刚读完这本书，非常激动。很感谢这本书做为我了解python的第一本书，我也越来越喜欢开源世界里思想的自由和激情！！强烈推荐，以此书作为python的入门第一本书。", "marks": "力荐"}
{"content": "真单纯啊。", "marks": "推荐"}
{"content": "不建议读，太罗嗦，还不如直接看手册。。", "marks": "还行"}
{"content": "说实话，很喜欢这样的风格。", "marks": "推荐"}
{"content": "让我学到了很多。", "marks": "推荐"}
{"content": "一般般吧，翻着玩~", "marks": "还行"}
{"content": "喜欢这种不正经的书，虽然后面有些框架说得不太清楚，不过可以通过此书稍作了解之后，直接看官方文档。这书很不错，交给新手学习方法。", "marks": "力荐"}
{"content": "风格挺清新，而且我很佩服是社区完成的。内容还涉及了web框架等高级主题，开了眼界。不过确实不是本入门书……", "marks": "还行"}
{"content": "后面的东西太浪费纸了吧", "marks": "还行"}
{"content": "在电脑上看完的全书，总结一下的话，觉得一般吧，就是前面的故事实例算是比较有新意的，后面的就是简单的各个库的介绍了，介绍的不是很深入。", "marks": "还行"}
{"content": "Python可爱，可爱的python不怎么可爱", "marks": "还行"}
{"content": "算是编程书籍中很标新立异的一本", "marks": "推荐"}
{"content": "这书太初级了，基本上什么都学不到，后来买了Python核心编程才发现python的乐趣", "marks": "很差"}
{"content": "风格挺“卡瓦一”的", "marks": "推荐"}
{"content": "本书谈不上什么好与不好的，但是对于想入门的，还是可以看看。", "marks": "还行"}
{"content": "python", "marks": "推荐"}
{"content": "短小精干，一个例子主导，对初学者来说不错。\n学到了chardet和dict4ini，不知道是不是有更好的包替代，比较python发展很快", "marks": "还行"}
{"content": "说实话，觉得拿这本儿书上手还是太难了...定位还不如初步提高更贴切一些", "marks": "推荐"}
{"content": "对了解美国司法而言本书应该是不错的选择，但翻译和校对都非常糟糕。", "marks": "还行"}
{"content": "翻译的逻辑还行，但是校对就是渣。", "marks": "还行"}
{"content": "内容很有参考价值，但拼音输入法的同音错字太多，翻译太硬，基本是按照英文的句子结构一个词一个词蹦出来的，没有调整成中文的语言习惯，本来内容就不平易，这下消化吸收更费劲了", "marks": "推荐"}
{"content": "亨利·J·亚伯拉罕写了一本好书，泮伟江、韩阳、宦盛奎则是我读过的最狗屎的社科著作翻译者；从头到尾都是磕牙的被动语态、乱七八糟的译名和语法，北京大学出版社的编辑也特么太饭桶了~", "marks": "很差"}
{"content": "本科不是学法律的，通过这本书学到很多。", "marks": "力荐"}
{"content": "虽然形式化了一些，但还是相当简明，对论文很有帮助呵", "marks": "推荐"}
{"content": "拿来熟悉VS很不错，不过也只是入门了真的写程序还是远远不够，MSDN才是最好用的……", "marks": "推荐"}
{"content": "实用性蛮强 书店里发现最薄的C#教科书 不过就是贵了点 心疼啊", "marks": "推荐"}
{"content": "初学教程，一步步示例，很详细。", "marks": "力荐"}
{"content": "过于基础。。", "marks": "还行"}
{"content": "解释多核CPU的局限时提到“就比如一个女人可以花10个月生出一个孩子，但是10个女人并不能在一个月就生出一个孩子一样。”", "marks": "推荐"}
{"content": "我是觉得csapp如果你真的吸收了，这本就没必要看了。。", "marks": "还行"}
{"content": "CSAPP 后就该读一读！终于搞懂了困扰我好多年的、该死的 C/C++ 编译模型", "marks": "力荐"}
{"content": "就国内出版的书而言中上吧，如果有系统编程相关经验的话内容其实也只能算是扫盲级别的。书中错误其实还是蛮多的，严重的原则性错误大概有那么一两处，不碍事的小瑕疵基本散布在各个章节（后面重复出现EBP加加减减傻傻分不清楚我都快orz了...），还好基本不妨碍阅读所以也懒得写到笔记上，自己看的时候注意下就好了....", "marks": "推荐"}
{"content": "总算扫完了. 这本书还是当作工具书来用吧. 对操作系统和程序之间的层面有了一点基本的概念了.", "marks": "还行"}
{"content": "好书", "marks": "力荐"}
{"content": "了解二进制平台的耦合方式有好处。", "marks": "还行"}
{"content": "学os的时候顺便买了本， 非常好的书， 讲的很到位，没有累赘", "marks": "力荐"}
{"content": "萝卜 & 石教主\n===============\n看完了~~ 非常有意思的书，了解了许多好玩的东西。\n\n=============\n没读完，目前对这方面太 detail 的东西兴趣不是很大，看来只有作为手册当作 future reference 了。", "marks": "力荐"}
{"content": "翻完。", "marks": "力荐"}
{"content": "很实在的一本书，对于WINDOWS 与 LINUX 的对比很好。真希望多一点这样的书。", "marks": "推荐"}
{"content": "悲催的暴龙，刚好买了一本有缺页和重页的书。", "marks": "推荐"}
{"content": "读前言感觉是《深入理解计算机系统》国内版，读到一二三章感觉侧重点不同，并且条理清晰且实用。", "marks": "力荐"}
{"content": "啰嗦得很", "marks": "还行"}
{"content": "代码视角的计算机", "marks": "推荐"}
{"content": "强烈推荐，市面上这么详细介绍elf,链接(静态，动态），系统调用的书很少。唯此一本娓娓道来。", "marks": "力荐"}
{"content": "通读了一遍，没有想象中的晦涩，作者的功底可见一斑。书名还是有些大。\n“这本书一步步的剖析了一个程序的前世今生，从代码的编译，到链接，到运行时虚拟空间物理空间的映射，到内存的分配，无不一一展开，还原一个程序本来的面目。 ”", "marks": "推荐"}
{"content": "真心没懂主题与内容的关系", "marks": "力荐"}
{"content": "这本书是知识的罗列。\n很多东西都是成其他书上或者是网上搬过来的。", "marks": "还行"}
{"content": "分了两阶段读完，第一段读到第九章，隔了两三个月去读其他书了，第二次缓过神读完了剩余的。", "marks": "推荐"}
{"content": "这本书的水平相当不错", "marks": "力荐"}
{"content": "其实是讲链接与链接器。。。", "marks": "推荐"}
{"content": "你不是程序员，你永远不会懂，编码是一件多么艺术而又文艺的事情！", "marks": "力荐"}
{"content": "告诉我们程序员写的应用程序是如何在系上运行，编译完后的程序是怎么样的。", "marks": "推荐"}
{"content": "经过漫长的学习，终于搞明白了 应用程序 编译器 链接器 操作系统 运行库 系统调用之间的关系！这本书是一个很好的起点。当你知道printf(\"Hello World!\");是如何变成二进制代码、如何在操作系统上运行的时候。这种感觉就像亲手用集合构造出实数一样。Now world is sane!", "marks": "力荐"}
{"content": "标题有点唬人，部分概念解释得并不准确，但能把这么多小知识点串起来已经很不容易了～", "marks": "力荐"}
{"content": "五星图书，少给一星是因为标题党，主副换一下即完美", "marks": "推荐"}
{"content": "盛名之下。", "marks": "还行"}
{"content": "了解链接器、装载器和CRT运行时库的好书；增长见识，但是要运用到实际的项目中，需要很长的时间。", "marks": "力荐"}
{"content": "其实只细读了前面关于编译的部分，后面的正题部分——链接、装载与库就简单翻了下，留下来当工具书备查挺好", "marks": "力荐"}
{"content": "蛮不错的一本书,对于很多沉迷于\"技术\"的人来说是本好书.", "marks": "推荐"}
{"content": "快速翻翻，补下基础", "marks": "力荐"}
{"content": "将C/C++的编译、链接、装载、运行过程娓娓道来，从底层了解，省却了无数高层诡异复杂现象的记忆。", "marks": "力荐"}
{"content": "书名乖张，内容实在。C和C++程序员得知道编译链接操作系统才算爱过。", "marks": "力荐"}
{"content": "各种笔误", "marks": "推荐"}
{"content": "了解编译、连接、装载和库.......", "marks": "推荐"}
{"content": "副标题比较靠谱，正标题太哗众取宠了", "marks": "推荐"}
{"content": "比较实用，可以买一本参考。", "marks": "推荐"}
{"content": "除了前面有个原子操作和锁的地方讲错之外还是挺好的.", "marks": "推荐"}
{"content": "关于链接、装载和库的一本不错的参考。", "marks": "推荐"}
{"content": "浑沦吞枣似地扫了一遍，，，讲解的很好，如果想要理解计算机的底层链接装载包括main之前系统干了些什么事儿，这本书真的很不错。", "marks": "力荐"}
{"content": "链接 装载 库", "marks": "推荐"}
{"content": "这本书确实有读第二遍的必要，作者的思路就是东奔西跑，第二遍顺下来才感觉脉络清晰", "marks": "推荐"}
{"content": "结合内核和glibc讲得非常好~", "marks": "力荐"}
{"content": "3天翻了一遍，写得比较流畅，难度适中", "marks": "推荐"}
{"content": "补了操作系统一些知识", "marks": "还行"}
{"content": "代码是编译之后是如何链接，装载以及运行的，程序员的高级读本", "marks": "力荐"}
{"content": "还是有些没看懂", "marks": "力荐"}
{"content": "虽然有部分笔误，但是可以看到作者写得很用心：）内容对我很有用，非常感谢。", "marks": "力荐"}
{"content": "适合专研底层细节的人去学习！", "marks": "推荐"}
{"content": "人家作者读研的时候都在写书了！赞！", "marks": "推荐"}
{"content": "可能并不那么“实用”。", "marks": "推荐"}
{"content": "编译过程原理分析与解释，哈哈~", "marks": "力荐"}
{"content": "时隔2年多，再看一遍。", "marks": "力荐"}
{"content": "先看了前三章，等到需要用的时候再看吧= =的确感觉很难用到", "marks": "推荐"}
{"content": "链接、装载与库", "marks": "力荐"}
{"content": "链接、装载、ABI方面难得的一本书，通俗易懂", "marks": "力荐"}
{"content": "TP311.1/8261\n国人原创技术书籍中难得一见的精品。", "marks": "力荐"}
{"content": "断断续续花了3年半时间读完", "marks": "推荐"}
{"content": "神作，以目前的内力只能修炼半部，尽量每隔一段时间重新研究", "marks": "力荐"}
{"content": "温故 与 知新", "marks": "力荐"}
{"content": "主要还是把第二三部分静态链接相关的看了一遍，自定义链接脚本、程序装载、动态库（尤其是windows下的dll、com）这些短时间也看不进去。先歇一段时间碰到问题了再回来看吧。附录1里面Big-endian和little-endian把起源剥鸡蛋从大头还是小头先剥这个事情关联起来后好记多了。", "marks": "力荐"}
{"content": "决定读完此书是在给linux系统配置各种环境的时候，那时遇到了各种链接和库的问题，相当头疼，同时也参加了小Q机器人比赛，windows编程下也遇到了各种链接问题。此书对我的帮助很大，让我对程序从编译，链接，装载到执行的整个过程有了一个更加清晰的认识，相信以后能更好地分析此类问题。", "marks": "力荐"}
{"content": "像书中说的那样，读完基本了解了你程序的每一个byte代表了什么……正版书错误实在不少……第二遍又花了基本一个月时间更细致地把书中里面每个细节争取搞清楚，内功增力不少，不过在面对一个比较大的程序的时候还略显naive", "marks": "推荐"}
{"content": "粗读过一遍，现在开始精读。知道你们会吐槽这个书名，不过书的确是好书。", "marks": "力荐"}
{"content": "难得一见的国产好书，鞭辟入里，对系统和语言有兴趣必读", "marks": "力荐"}
{"content": "#旧书重读", "marks": "力荐"}
{"content": "程序的故事", "marks": "力荐"}
{"content": "没有读完，只拣静态链接库部分看了，凭心而论，写得还不错", "marks": "推荐"}
{"content": "不错的一本书，对我来说！", "marks": "力荐"}
{"content": "尤其读了Linux/gcc相关部分的。合格的程序员都应该读同类型的书、文档，或者懂书中讲的啥。", "marks": "力荐"}
{"content": "很好的一本书！有部分章节没看，等遇到具体问题时在深入阅读！", "marks": "力荐"}
{"content": "有些不够深入，可以作为入门之作。", "marks": "还行"}
{"content": "为了搞懂程序的链接买来看。", "marks": "力荐"}
{"content": "师兄的书", "marks": "力荐"}
{"content": "明白了不少底层知识。", "marks": "推荐"}
{"content": "讲述按下Build按钮之后的故事——编程语言和操作系统之间", "marks": "力荐"}
{"content": "做毕设得时候翻过，略底层。发现现在越来越没耐心看那些底层的东西，看来是我越来越肤浅了。。", "marks": "推荐"}
{"content": "深入浅出. 过一段时间再看,估计又会有新的体会.", "marks": "力荐"}
{"content": "详细地描述了库是如何被加载到内存中，涉及内存管理、库格式。可作为喜欢刨根究底的程序员的阅读材料。", "marks": "推荐"}
{"content": "非常细致入微地介绍程序运行的各种要素，副标题非常准确，匆匆读了一遍，必要时可以再翻翻。", "marks": "推荐"}
{"content": "提高5点护甲，还可以合成高级装备！", "marks": "力荐"}
{"content": "对我来说，是一本很不错的书，所说的内容恰好是我知识结构中了解不多了解不深的部分。有些章节得回头重新温习才行~~~  建议所有的程序员都阅读", "marks": "推荐"}
{"content": "补", "marks": "力荐"}
{"content": "看书名不知所云，但确实帮我扫了一顿盲。", "marks": "推荐"}
{"content": "难得一见的国人编写的书.对elf,exe文件等分析得很细,非常值得一读.", "marks": "推荐"}
{"content": "推荐对计算机编程底层的细节感兴趣的朋友购买！", "marks": "力荐"}
{"content": "当年读过这本还没出书的稿件。记得当时还没有主标题，只有副标题。。", "marks": "推荐"}
{"content": "这是看着比小说还要吸引人的书，逻辑条理非常清楚，看完对代码-可执行程序-进程这整个过程有了更深的认识，也许早点看，云计算三面就过了", "marks": "力荐"}
{"content": "很好", "marks": "力荐"}
{"content": "一直安利的一本书，国内原创技术书籍的翘楚。研一的时候，李博士用这本书做大纲，讲了一学期的课。后来自己又读了两遍。从二〇一三年邯郸学步式的入门，到现在竟然也在科技公司做起了算法工程师。时间啊时间2333333333", "marks": "力荐"}
{"content": "演员的自我修养，哈哈。莫筑高台于浮沙之上。", "marks": "推荐"}
{"content": "这是一本绝对值得读上两遍三遍n遍的好书", "marks": "力荐"}
{"content": "动态库和静态库的讲解非常之详细", "marks": "力荐"}
{"content": "C++进阶必读书籍。这本书将大大提升对C++程序编译和链接过程的理解，虽然看似这些知识没什么用，但是将来某天一定会用到的。讲得很深也很细节，里面某些章节，反复看了几次，每次看都有新的收获。", "marks": "力荐"}
{"content": "这本书最牛逼之处，就是给国内自以为是，以为不需要建立底层概览大图景的大学生看的！这些人是码农中的精英。已经碰到过不少这样的人了，他们经常会鄙视我跟他们讲底层知识。这些人上技校再合适不过了。", "marks": "力荐"}
{"content": "我有时不得不佩服李加凯了，这的确是一本培养程序员软实力的真经，在笔试面试中你可能不直接用着，但是之于你理解和深入程序的其他知识，绝对是如虎添翼、事半功倍。", "marks": "力荐"}
{"content": "对于一个应用程序在Windows/Linux操作系统下编译、链接和运行时所发生的各种事项有大概的了解。较详细的介绍了链接（静态链接和动态链接）、装载，对于Windows的PE和Linux的ELF的结构也有比较详细的分析。", "marks": "推荐"}
{"content": "又往后走了一步，世界新鲜了好多", "marks": "力荐"}
{"content": "太底层了\n大概过了一遍，理解不深刻", "marks": "推荐"}
{"content": "不错，感觉国产技术书很多年没有这么沉稳的了。elf 结构那几张草草看过，我的感觉竟然是 c++真他妈复杂 .... ", "marks": "推荐"}
{"content": "认真重读第2遍...", "marks": "推荐"}
{"content": "豁然开朗", "marks": "力荐"}
{"content": "讲的不错，将硬件与系统、机器层与实现层整合了起来，有了一个很清晰的视角。", "marks": "力荐"}
{"content": "有些地方跳过了，不过这对于想理解编译器和程序的前因后果的人来说，必看", "marks": "力荐"}
{"content": "四年前买的书，今天才浏览完，以前没接触Linux，觉得这书不怎么样，讲windows的篇幅太少，它对PE文件讲解跟汇编书籍、加解密书籍相比，太过简单。现在觉得，这块也已经足够了，这只是一本科普书籍，让读者知道有这些东西。Linux部分的讲解，让我了解到了很多底层知识。还有一些跟系统无关的经验。翻一翻，偶尔能觉察自己的知识盲点，譬如：memory barrier。", "marks": "推荐"}
{"content": "很好很全面，一口气看完了", "marks": "力荐"}
{"content": "作为程序猿, 了解这些概念还是很有必要的", "marks": "推荐"}
{"content": "庖丁解牛之感", "marks": "力荐"}
{"content": "这本书大学老师推荐的，当年看了一些，没有继续看，上个月底拿起来继续看的。看完后能对底层有更深的了解，一个简单的hello world的c程序从编译到运行发生了什么？背后包括了编译、转载、链接还有运行库等，如果你那个地方不明白，这本书值得一看。", "marks": "推荐"}
{"content": "国人的书 读着就是亲切", "marks": "力荐"}
{"content": "左右脑并行使用，R是森林 L是树木 后面和deepwork差不多了……", "marks": "推荐"}
{"content": "从编译，链接到运行，程序员应该了解自己所写的代码最终是怎么成为程序，又怎样在计算机上运行起来的。另不得不对作者能在硕士期间就能写出此书感到佩服。", "marks": "推荐"}
{"content": "第一遍～", "marks": "力荐"}
{"content": "大体了解了一些，汇编的内容看不懂", "marks": "推荐"}
{"content": "书如其名，花了很久读完，收获颇多", "marks": "力荐"}
{"content": "仅仅大致浏览了一遍，因为涉及的层面是计算机的底层，开发当中很少用到", "marks": "力荐"}
{"content": "草草的翻完了，只是中途突然想起来小学四五年级的时候，梦想是“以后自己要自己写个windows”。然后好多年过去，我的梦想又变成什么样了？", "marks": "还行"}
{"content": "很有趣的一本书，虽然部分地方依然有罗列资料之嫌，但是依然非常非常的有趣。讲了编译器弄出来的映像文件是什么样子的（大量的表格）；分段及分段属性；静态与动态链接；动态链接的地址无关和地址重定向；库的初始化代码和终止代码完成的工作（io初始化，堆初始化等）；以及库的一些内容等。值得一观", "marks": "推荐"}
{"content": "觉得挺不错的，还得再多看几遍消化", "marks": "推荐"}
{"content": "很好的书，动态链接部分是全书的精华部分， 看了让人大呼过瘾！ 唯一不足的是 把Windows和Linux下都顾及到了，但在两者的个别方面却又不够深入，这本书可以出个第二版，把windows和linux分开，呵呵", "marks": "力荐"}
{"content": "收获不小", "marks": "推荐"}
{"content": "整体感觉不错，针对的话题比CSAPP细节很多，大量的实际案例，打基础很好，虽然可能会略有点难读。", "marks": "力荐"}
{"content": "计算机底层的知识，读完之后彻底清楚了磁盘上的一个文件时如何被cpu运行的，运行时库完成什么功能，是不可多得的好书。不过本文通篇的“必需”、“须要”之类的错字，不能容忍。。。", "marks": "推荐"}
{"content": "买的电子书。读了这本书，有一点点贯通的感觉了：静态链接，动态链接，elf文件，虚拟内存，进程空间，运行库glibc，换页。。内核空间、用户空间、系统调用还有程序启动的一些知识。涉及汇编细节和windows的内容基本没看。", "marks": "推荐"}
{"content": "不错，基础的读物，引入系统编程。", "marks": "推荐"}
{"content": "很赞，虽然不少地方有点深", "marks": "力荐"}
{"content": "是两个学生写的，深入浅出，但文笔稍差。", "marks": "推荐"}
{"content": "因为写这方面的书太少，所以选择不多；其实自己写一个hello world之后看二进制代码更有效；至少我已经看了object file，一个上午的时间而已。", "marks": "推荐"}
{"content": "很喜欢这种写作风格 比起各种所谓大家的抄袭之作要好得多 。 学这本书 最好跟编译实习、操作系统实习一起学", "marks": "力荐"}
{"content": "看的很过瘾, 这种书只看一遍是不行的. 书里面的代码已经很多都过时了.该修订新版了. ", "marks": "推荐"}
{"content": "让我对计算机程序的执行方式有了初步认识", "marks": "推荐"}
{"content": "此书重在帮你构建隐藏在代码背后的系统机理。写得不错。美中不足的是没有给处一些相关资料的引用。同时文中编写也有若干错误，希望在下一版能够更正。", "marks": "推荐"}
{"content": "相比下，后面几章有点脱力了。", "marks": "推荐"}
{"content": "书内容不错。但是在知识结构的组织和讲解上有点僵，略枯燥。", "marks": "还行"}
{"content": "很底层，但是对我来说有一些内容过于细节", "marks": "推荐"}
{"content": "废话微多，微贵", "marks": "还行"}
{"content": "绝逼好书，对链接，库的原理不清楚的同学，值得一阅", "marks": "力荐"}
{"content": "虽然没有多少原创，但还是值得一读的", "marks": "推荐"}
{"content": "看完了觉得满足之前很多的好奇欲，在coding到runtime之间有这么大一块空白终于被填补起来，很有成就感。", "marks": "推荐"}
{"content": "读完了第一遍，很多东西讲得过细，看书的话看个框架，需要的时候再回来查吧。\n这书总体不错，值得一看。", "marks": "推荐"}
{"content": "很不错，如果能放下windows，对linux下的编译和链接做更多的阐述就更好了", "marks": "力荐"}
{"content": "最后一章实践没有看，还不错", "marks": "推荐"}
{"content": "刚从图书馆借回来，就被同学掠走。", "marks": "力荐"}
{"content": "入门", "marks": "推荐"}
{"content": "看原版吧，我一口气读完了，翻译的太差了，真的，从未读过如此差劲的翻译书籍，但不可回避的是，英文原版还是比较有技术含量的~", "marks": "还行"}
{"content": "了解tomcat 架构, 但是书中介绍的大多数基于JNI和JAVAEE的介绍有些过时", "marks": "还行"}
{"content": "最终看完了，娃依然不能好好睡觉", "marks": "推荐"}
{"content": "again 纯属感兴趣没准备生崽子谢谢 以及这本和西尔斯的亲密育儿法相比 打从心里更能接收本书的理论 亲密育儿法强调孩子就那么孩子几年 在你是他的世界的时候 给他无尽的依赖吧 实用程序法更倾向于 没有人能够不受限制不遵循规则的存在 你的孩子也一样 所以让他从小就接收一定的限制吧 为了大家都能更好", "marks": "力荐"}
{"content": "关于新生儿养育最好的一本书，今天无意中搜了一下作者Tracy Hogg，发现她2004年45岁就过世了，好可惜，R.I.P", "marks": "力荐"}
{"content": "解决了吃饭问题以后，又是睡觉问题，嘘拍法，抱起放下法，打通婴儿床法，法伯法，提前叫醒法，装睡陪伴法通通试过，所有的方法都是奏效一次以后就失灵，儿子有着极强的反侦察能力。轮换着来吧，哭哭。", "marks": "力荐"}
{"content": "但是真正实施的话需要全家人的支持和配合，适合全职妈妈", "marks": "推荐"}
{"content": "建立E.A.S.Y.并不easy。", "marks": "力荐"}
{"content": "操作性差。", "marks": "还行"}
{"content": "如果真的从小执行，肯定是极好的！但是如果没有从小执行，需要一个过程，我实在看不了小家伙的委屈眼神儿，就让我们继续奶睡，其他的交给时间吧。。。", "marks": "推荐"}
{"content": "鉴于娃晚上的睡眠开始一小时一醒，我开始研究老婆一直遵守的程序育儿这本书。发现网上流传的很多抱起放下的实践版本，都是混入了哭免法的变种。而这本书倡导的，应该是通过陪伴培养信任，进而让娃可以自主入睡和自己玩的理念。", "marks": "推荐"}
{"content": "至少在帮助孩子入睡方面，经自己尝试，切实可行", "marks": "力荐"}
{"content": "也许这套方法是有效的，但是需要家里人手充裕，且这些人都有相同的理念。意思就是放我这儿搞不起来，并且在前6周面对一个因为胀气哭闹不止的婴儿妄图给她实行吃玩睡的规律循环，结果就是把自己搞得无比焦虑。差评！", "marks": "推荐"}
{"content": "有些观念确实不太适合国情。而且呢，哭声免疫法的争论实在是太大了。不是睡眠障碍的宝宝不太推荐看这本书", "marks": "还行"}
{"content": "有种读过就像没读过的感觉", "marks": "推荐"}
{"content": "造成没经验麻麻好几天的焦虑。里面讲到做父母要耐心、清醒， 以及关于睡眠分析的内容还不错，but I don't believe in \"training\" your baby. ", "marks": "推荐"}
{"content": "这本书是今年认识的一位妈妈推荐的，读完之后受益匪浅。作者所强调的做PC父母、EASY程序对于新手妈妈来说非常实用，概括的程序有助于在带孩子时不断出现的各种意外情况下，保持一以贯之的态度。对于育儿的一些常见问题，比如哭闹、腹痛等，书里的说法都很受益。", "marks": "推荐"}
{"content": "仍然是特别有道理，心向往之。怀孕时看了很有信心。。", "marks": "推荐"}
{"content": "特雷西霍格和小土大橙子一起看，可以拯救新妈妈！有些观点很好，但有些见仁见智。实测梦中喂食对我家这位无效，坚持了一个月夜夜醒三次，逐步取消后反而一夜只醒一次了。因此，我认为梦中喂食容易干扰婴儿的睡眠周期。", "marks": "力荐"}
{"content": "宝宝两个月那天开始晚上七点一觉睡到早晨四点。推荐给同学之后她宝宝三个月不到晚上只醒一次！本来夜醒无数次 😂", "marks": "力荐"}
{"content": "对我和小马而言，这书上的东西，其实并没有什么益处。实用程序，也只是一个指导性的方向，让宝宝建立固定的作息，但你很难控制什么时候睡，什么时候吃，太过相信这本书，也会新手妈妈很焦虑。", "marks": "还行"}
{"content": "不错哦", "marks": "力荐"}
{"content": "就我自己来讲 这本书实在是好用实用到无法形容", "marks": "力荐"}
{"content": "看了“抱起放下训练法”，真是一本神书。“了解”才是对付熊孩子最强有力的武器。", "marks": "推荐"}
{"content": "此书坚决反对哭声免疫法，实行EASY程序和抱起-放下法，还教了宝宝的情感,教育，训练排便等问题，值得购买", "marks": "推荐"}
{"content": "相比前一本，这本的操作性和阶段性更强。打算拿来做总指导书籍。", "marks": "力荐"}
{"content": "吃玩睡，嘘拍法。。。果然实用", "marks": "推荐"}
{"content": "理论指导实践的理论储备", "marks": "推荐"}
{"content": "理论储备ing～等到我娃出生实践过书中所说的养育方式技巧之后再来添加评论哦", "marks": "推荐"}
{"content": "看了一半没看完，记不住啊。。。等快卸货了再复习一下吧。。。", "marks": "推荐"}
{"content": "这本书走的是技术派，有很多小窍门和行之有效的方法，但是育儿并不是只有一种方法可走。所以可以借鉴，但是不要照搬。", "marks": "推荐"}
{"content": "原计划是百天之内亲密育儿，百天后程序育儿，今天加班认真把书学一遍后才发现有点晚，一些习惯现需付出更多时间和泪水去纠正。理念实用，但排版不敢恭维。", "marks": "推荐"}
{"content": "看得有点晚了，对于20个月的宝宝而言。很多表格可以参考，但是从过来人经验看，其实完全可以自己琢磨出来的，无需刻意，也不用特别担心。", "marks": "还行"}
{"content": "算是很实用的参考吧，不过作者坚持的0-3个月的婴儿一定要裹襁褓这点对我家娃不适用啊……", "marks": "力荐"}
{"content": "目前正在实施书中的办法，虽然没有百分百采用，但精神是不错的，而且很有成效。", "marks": "力荐"}
{"content": "很棒！让焦虑的我坚定信念", "marks": "力荐"}
{"content": "关键词是耐心和清醒，其他看起来都很都很费劲，抱起放下法具体怎么做还是没看懂。很奇怪怎么会有人说这书好。", "marks": "较差"}
{"content": "一直狠不下心来实行睡眠训练。", "marks": "还行"}
{"content": "简直是育儿界的Bible!", "marks": "力荐"}
{"content": "早点读可以做参考。", "marks": "还行"}
{"content": "现在读这个书略早，但是总比晚了好。科学喂养如何和自己的宝宝建立亲密联系，受益良多。", "marks": "力荐"}
{"content": "ISBN：9787550251038", "marks": "力荐"}
{"content": "初读概读\n", "marks": "推荐"}
{"content": "已写书评", "marks": "力荐"}
{"content": "试了一晚，看了陈晓舒的微博后果断放弃。此种方法只能借鉴，至于是否适合就不可强求了。但是此书并没有明确此方法是否经过科学的验证，作者仅仅凭借经验就认为适合所有婴儿，实在是过了。", "marks": "很差"}
{"content": "虽然说尽信书不如无书……然而真的可以照这本书养娃", "marks": "力荐"}
{"content": "知易行难。之前知道要吃-玩-睡规律作息。", "marks": "还行"}
{"content": "没有一张插图，一点不是水书。内容编排严谨，交叉引用方便查找，理论有依据，有实务，好理解。非常有帮助，当天就用渐进程序帮助宝宝安然入睡。", "marks": "力荐"}
{"content": "坐月子期间买的这本书，现在女儿六个月了，作息时间非常规律。", "marks": "推荐"}
{"content": "非常详细", "marks": "推荐"}
{"content": "绝对实用的好书，很多育儿公众号的基本知识都来源于此，E.A.S.Y的循环很有用。但必须要说的是编辑的编校太不仔细了，扣一星也是因为此，例如第227页的图表，第二列、第三列都有明显的错误，麻烦修订时再仔细对对原稿好么。", "marks": "推荐"}
{"content": "可预测的流程", "marks": "力荐"}
{"content": "买这本书有点晚了，小伙砸的睡觉问题是搞不好了，真要执行强烈建议孕期就读读这本书，而且家庭成员也必须有这个概念，通常家里长辈就是执行一套做法的最大阻力。。中途才开始改善的话可能没多少人坚持的下来（比如我…吃这块目前来看还不错（可能天生就是个吃货…（。其他继续借鉴努力吧", "marks": "推荐"}
{"content": "真的很实用，在刚开始什么都不懂的时候提供了了解小宝宝的新思路。", "marks": "力荐"}
{"content": "觉得也就参考一下吧，书中的方法不能生搬硬套，得结合自己宝宝的实际来，大体上顺其自然，适当干涉形成规律就好了", "marks": "还行"}
{"content": "养二宝前又重温了一遍，太管用。2017.3.18", "marks": "力荐"}
{"content": "挺好的，买了一本送朋友。", "marks": "力荐"}
{"content": "这本书提到的EASY法，像manual，教导一步步怎样去实现。对于不用太研究理论的话题，这样的manual实用性很高。阿宝出生了我打算这么训练他，希望能让我们双方都轻松。", "marks": "推荐"}
{"content": "真的很实用，确实也帮到我了。如果你和我一样是新手妈妈，值得一看。", "marks": "力荐"}
{"content": "有点啰嗦，但适合忐忑容易忧虑的妈妈", "marks": "推荐"}
{"content": "好习惯终生受益，E.A.S.Y.模式提供的思路是父母从婴儿期开始就帮助孩子建立有规律的饮食、活动、睡眠的作息，并且在养育孩子和父母自我的时间找到平衡。孩子不会说话，但是它自有她的“表达”，父母要善于观察，并且尊重宝宝，和宝宝沟通。育儿书很多，但是像这样具备实操性的参考不多。", "marks": "推荐"}
{"content": "很不错的书，怀孕时看就好了。但图书有排版问题（索引页数翻译中文未调整，字体大小不一致）。", "marks": "推荐"}
{"content": "育儿观念太多，只能以后通过实践来辨别最适合自己的。书中很多观念还是挺赞同的。", "marks": "推荐"}
{"content": "阅读时间：2009年4月\n遵循E.A.S.Y.常规程序是让你和宝宝顺利度过每一天的好方法", "marks": "推荐"}
{"content": "毁誉参半的一本书。爱它的人很爱，不屑的人很不屑，我还在观察中", "marks": "还行"}
{"content": "很有实际指导性、 可操作性的育儿书，作者似乎可以一直处于冷静清醒状态，对于新手爸妈还是很难的。", "marks": "推荐"}
{"content": "育儿圈享有盛名的书 特别是睡眠训练部分 就书本身而言，翻译不佳干货偏少", "marks": "推荐"}
{"content": "很实用，但是要辩证的灵活的用！力荐之～～～", "marks": "力荐"}
{"content": "还不错 操作性强", "marks": "推荐"}
{"content": "一般般。。看着很有道理，实际很难执行", "marks": "还行"}
{"content": "让我了解了三个小时的规律", "marks": "推荐"}
{"content": "教会我最多的- 1. 宝宝也有规律可循；2. 家长需要坚持；3. 是一个相互磨合的过程", "marks": "推荐"}
{"content": "看完之后还是不知道该怎么做.....觉得实施起来非常不容易～", "marks": "还行"}
{"content": "五星宝典。不过刚开始运用时，宝宝太小，自己也不熟练，宝宝不想睡或者一放下就醒是常态，搞得自己也很疲惫。刚出生2个月都不用太纠结，慢慢自然就好了", "marks": "力荐"}
{"content": "有点啰嗦，不过还是有很多干货的", "marks": "推荐"}
{"content": "看过部分内容，如果不是照书搬还是比较有用的。", "marks": "推荐"}
{"content": "感觉写得也太神乎其神了，还没有应用过", "marks": "还行"}
{"content": "大土小橙推荐的睡眠书，虽然还没有实战不过了解了一些婴幼儿的基本知识，不至于到时候措手不及，我觉得书里有些方法可以借鉴，但是不能教条。每个孩子出生都是自带属性的，需要因地施教，具体孩子具体分析。", "marks": "还行"}
{"content": "第一次接触到EASY的概念。希望实际操作中能有效。", "marks": "推荐"}
{"content": "有启发，但是过于理想化", "marks": "还行"}
{"content": "睡训派，有参考价值", "marks": "推荐"}
{"content": "西尔斯教会了我概念，这本书教会了我操作，不过某些观念还是要试一试才知道适不适合自己和孩子（比如梦喂）", "marks": "力荐"}
{"content": "初看时候觉得遇到救星, 然而实施起来太困难. 尤其是我家敏感的宝宝, 无法按照里面的方法自己入睡, 试了好几天反而把她搞的不睡觉了, 最后还是按照自己的本能亲密育儿才好起来.  不过作者关于睡眠的很多观点对我还是很有帮助的, 有关吃零嘴的部分也解救了我, 每天喂奶次数从14次降到9次, 应该有利于培养更好的饮食和睡眠习惯, 总之,不失为一本好书.\n", "marks": "推荐"}
{"content": "准备参考这种方式育儿试试效果", "marks": "力荐"}
{"content": "有理论有实践指导又有案例佐证。开篇介绍了EASY模式，接下来分别介绍饮食、睡眠、活动在各个阶段的培养方法以及出现问题后的解决方案。在读完《宝宝主导育儿法》后，我清楚要观察、倾听宝宝，并回应。可是如何观察、倾听，又怎样回应，其实是混沌的。这本书有效的回答了这个问题，并且步骤看起来可行。这对于新手妈妈无疑增强了信心。已经听到太多新手妈妈抱怨说孩子频繁醒导致自己睡眠质量很差或有其他饮食问题等等。看完这本书，感觉其实是有解决办法的，可以做一个P.C父母，既有耐心又有觉知。这本书可以放在手边，从婴儿出院后就建立EASY 模式，记录日志，并在照顾之余针对问题重点学习。其他的感想：将照顾婴儿的方法也能提炼出架构，真是太牛了；我们现在还有月嫂帮忙，又会省掉很多事情呢。", "marks": "力荐"}
{"content": "希望有用", "marks": "推荐"}
{"content": "有娃的必备", "marks": "力荐"}
{"content": "实操性强，而且也不用让娃哭的方式学习自主入睡。每一本育儿书都是绝望妈妈的静心丸，豆瓣最可怕的时候晚上一个小时醒一次，白天只肯在小床睡半小时，醒的时候脾气暴躁，我也近乎失去全部的耐心。关键部分一遍一遍的看，知道问题所在，才能找对方法。养娃就像打游戏，要通关，攻略也要好好学的撒～", "marks": "力荐"}
{"content": "救星", "marks": "力荐"}
{"content": "略读了一下，从宝宝的角度思考问题是个很好的启发，E.A.S.Y.模式值得好好实践。", "marks": "推荐"}
{"content": "让我明白主导孩子的生活，使她规律生活，是多么有助于我们读懂自己孩子的需求。实施几天程序育儿法后，孩子的饮食和睡眠都有了改善。感谢特雷西霍格。", "marks": "力荐"}
{"content": "还没有实际实践来评判实用性，正如“1000个妈妈1000个方法”，这本书作为guideline，里面有很多对EAT和SLEEP可操行方法，希望能有帮助。大多数都很认同，只是对于如厕训练的开始时间稍微有些疑惑，不是一岁半之后才是“肛欲期”吗？", "marks": "推荐"}
{"content": "科学育儿，发现规律，好书", "marks": "力荐"}
{"content": "养育孩子真是辛苦的事情，没有任何程序和规章可寻，因为每个孩子都是独一无二的，唯有父母亲自观察慢慢摸索，用爱和耐心去寻找，才能找到真正适合自己宝宝的育儿法。TRACY的方法我试过，有收获却也有很多负面效果，最终还是放弃。我想说，很多东西，不是表面能看到结果的，表面上的东西只是浅表的变化，更多的再宝宝的内心。任何方法都要慎重。", "marks": "还行"}
{"content": "基本上符合儿童心理发展的中心思想，跟我的想法也符合，有所获益。看了大部分后简直信心满满，恨不得夜晚快点到来，让我试验。", "marks": "力荐"}
{"content": "这本书的作息安排跟clb类似，但clb没有给出作息安排理由，这本书作了讲解。如果是头胎宝宝这本书有不少可以借鉴的知识，如果是二胎，也没有太大的睡眠问题，读这本书意义不大", "marks": "还行"}
{"content": "没有办法完全照搬，但里面提到的一些方法和思路，值得借鉴。", "marks": "还行"}
{"content": "对婴儿睡眠斤斤计较的时候读过 长大之后发现一切都是顺其自然", "marks": "还行"}
{"content": "这本书是我的育儿圣经，比西尔斯亲密育儿法实用100倍，对于新手妈妈和新生儿宝宝，你无法分辨宝宝的需求，所以按需喂养就是bullshit，两个月的“按需”喂养养成了宝宝吃零食奶的坏习惯，通过EASY模式慢慢养成规律作息。但书中有些点没有展开详述，于是很苦恼，如果特雷西还在世，或中国有这样的baby whisper就好了！", "marks": "力荐"}
{"content": "育儿宝典，看着容易，做起来难。", "marks": "推荐"}
{"content": "育儿第三本。婴儿出生到这个世界上没有带着使用说明书，但此书是本实用型的指导手册，大部分父母在养育过程中匆忙采取的最方便的解决办法，只能是权宜之计，恰恰是无规则养育的开始…跟西尔斯亲密育儿法相比，更偏向于特蕾西的程序育儿，理性，耐心，清醒！", "marks": "力荐"}
{"content": "育儿书中的圣经", "marks": "力荐"}
{"content": "我认为形成常规程序很重要，但是不能太过冷血，允许适当的突破常规，但是要在特殊时刻。", "marks": "推荐"}
{"content": "非常值得推荐给疲惫的妈妈们，特别是当我测试“唤醒去睡”法非常成功的时候", "marks": "力荐"}
{"content": "这本书的理论就是狗屎啊！偏偏那么多粉丝！微博小土大橙子和林小暖靠这个也发了不少财坑了不少新手妈妈吧！", "marks": "很差"}
{"content": "当之无愧的五星 辛亏月子里看了这本书", "marks": "力荐"}
{"content": "婴儿作息节奏建立很好的参考，只是实践还需要更多细节。比较其他国内的睡眠书籍，操作细节和实用性已经是非常强的了。不夸张的说，如果能坚持该方式，所有的宝宝都是准天使", "marks": "力荐"}
{"content": "好友娟在我孕期送的，很实用，有理论有实践有案例，参考性很强👍，但要坚持实践。EASY，就是EAT -- ACTIVITY -- SLEEP -- YOUR。宝宝生活规律，妈妈能有自己的时间。和亲密育儿法理念不同，前者强调爱，此书强调规则。", "marks": "力荐"}
{"content": "有规则养育，建立生物钟", "marks": "推荐"}
{"content": "虽然里面介绍的方法并不一定有效，但思想还是非常让人信服的。", "marks": "还行"}
{"content": "对我目前育儿帮助最大的一本书。\n推荐新手妈妈读。\n", "marks": "力荐"}
{"content": "实用性很强，比亲密育儿容易实现很多，还在揣摩中", "marks": "力荐"}
{"content": "循序渐进的思路，不过最终没有实施成功", "marks": "还行"}
{"content": "很多地方推荐，看是匆匆看完了，又觉得很有用，又觉得看不进去", "marks": "推荐"}
{"content": "吃-玩-睡和时间安排有所借鉴，让宝宝一直哭还是舍不得~", "marks": "还行"}
{"content": "怎么办，看完了我信心爆棚了！期待我家小妞来我怀里！", "marks": "力荐"}
{"content": "大的收获是要注意从宝宝的角度思考问题，注意观察他的信号以及很多作者总结好的方法。强烈推荐此书，读起来很有启发性", "marks": "力荐"}
{"content": "7.24已经写了读书笔记", "marks": "推荐"}
{"content": "目前最大的收获是学习记录宝宝每天的吃喝拉撒睡，从中琢磨出成长规律和趋势。值得反复读的书。", "marks": "推荐"}
{"content": "和哭声免疫法类似，不推荐。", "marks": "很差"}
{"content": "每个准爸妈都应备一本，轻松、科学育儿", "marks": "推荐"}
{"content": "越看越焦虑", "marks": "推荐"}
{"content": "非常实用，通过读这本书掌握了如何帮助宝贝睡觉以及建立规律生活的重要性。", "marks": "力荐"}
{"content": "我觉得这本书不太适合我家宝宝", "marks": "推荐"}
{"content": "一定要读。拯救你的睡眠。", "marks": "力荐"}
{"content": "孕期阅读做准备、某些观点感觉正好跟亲密育儿互补。中心思想是要做个PC父母、观察孩子行为来建立EASY流程。", "marks": "推荐"}
{"content": "宝宝八个月才看到这本书，在此之前，我一直对他实施的无规则养育，导致他夜醒、奶睡、和我们睡大床、白天小睡也要陪着。看完这本书，按照书中的方法，结合我家实际情况和宝贝的性格，制定了一个适合他的4小时EASY程序时间表，一步步慢慢来，现在奶睡已经初有成效，其他还在实践中。睡眠训练是一项浩大的工程，千万急不得，否则宝宝痛苦，妈妈也痛苦，方有耐心、毅力、坚持才能成功，容许宝宝偶尔的反复，大人都有状态不好，失眠的时候，何况孩子呢！", "marks": "力荐"}
{"content": "非常厚的一本书，从宝宝的心理需求出发，来解决他们的生理上的问题。她有一套非常具体的安抚宝宝的方法，不见得对每个家庭有效。但是她对宝宝的心理，生理解析，让我对这个完全陌生的领域得到了很多了解，并学着做一位妈妈。", "marks": "力荐"}
{"content": "虽然感觉写的有点乱，但对新手妈妈来说，还是帮助不少。", "marks": "推荐"}
{"content": "对我家宝宝来说，简直是神书。出月子开始独自带娃完全手忙脚乱，亲密育儿法弄到自己跟老公都非常疲惫。7周开始照着这本书引导宝宝。现在宝宝已化身天使宝宝了，一个人全天带下来都非常轻松。超级实用有效。", "marks": "力荐"}
{"content": "觉得很棒的一本书 虽然还没有实践过书中所述的方法 但理论看起来有说服力 细看了两遍", "marks": "推荐"}
{"content": "很多方法还是不能做到呢？毕竟美国和中国不一样，中国房子没有美国那么大那么好，在深圳租个农民房放个大一点的婴儿床都很占位置，何来的分房分床睡？", "marks": "推荐"}
{"content": "我大概是书中提到的主观父母！努力客观起来！", "marks": "推荐"}
{"content": "非常好的一本书 教会孩子规律生活  对我们家小盆友特别有用", "marks": "力荐"}
{"content": "这本书对于我家情况真的是超级实用，按EASY程序调整白天睡眠后，可以排除晚上夜醒饿的原因，辅助嘘拍法和抱起放下法治疗夜间睡眠也是真好", "marks": "力荐"}
{"content": "内容具体实用. 部分内容即使不能完全照着做, 也还是很有反思的价值.", "marks": "力荐"}
{"content": "很有用的书。养老大时，基本顺其自然，养的很辛苦，如今有个二宝，不想继续糊涂着养，于是好好学习新理念新知识。书里系统讲解了婴儿到幼儿的吃饭和睡觉问题。除了养育部分，对3岁以下娃的教育内容也很不错。", "marks": "力荐"}
{"content": "实用程序育儿法 因为这真的是一本好书！如果你想教宝宝如何自己入睡 醒了之后自己再重新入睡 那么从现在开始就给宝宝安排一个有规律有弹性的生活作息表吧！其实很简单 就是按照书里的EASY 按时起床 按时吃饭 按时玩耍 按时睡觉！", "marks": "力荐"}
{"content": "若不是 沙  把书评写得那么动情，我原本打算给1*的。绝影，在我的评价体系里，算是个初级程序员。", "marks": "推荐"}
{"content": "不知道为啥 感觉共鸣略少 可能虽然在做程序 可是骨子里还是个伪程序员吧", "marks": "还行"}
{"content": "这个作者是90年代中期读大学的吧。。。码工最好找码婆，否则要被老婆嫌弃不陪她睡觉熬夜写代码。做外挂赚点钱也还真是不容易。", "marks": "还行"}
{"content": "‘疯狂的程 序员’绝对不是靠狂妄和拼命的程序员,而是能够踏实,持续努力的程序员。等你真正做到 了这两点,技术上去了,在写程序这个领域,能够限制你的只有你的想像力,到那个时候, 你才算个‘疯狂的程序员’,这种程序员啊,是能令竞争对手无比恐惧的。”", "marks": "力荐"}
{"content": "昨天和某疯狂程序员C聊天，他说我思维特程序员，于是推荐了这本书...可看完了这本书我还是继续纠结马上要决定的职业规划选择，到底该选管理路线还是专家路线......结论就是：这本书是写给男青年看的，此路在大龄女青年中行不通。", "marks": "还行"}
{"content": " 人的一生要疯狂一次，无论是为一个人，一段情，一段旅途，或一个梦想。", "marks": "推荐"}
{"content": "第一次看的时候给这本书四星，现在再看只能给一星，作者对技术的执着值得肯定，但其自闭和坐井观天的性格绝对是一个专业开发者所不可取。", "marks": "很差"}
{"content": "要技术，更要生活。", "marks": "推荐"}
{"content": "其实，在IT世界里，这也不算太疯狂吧。而且作者写书时的视野还太狭窄了，学生看还不错，等在IT行业混几年，看着很幼稚", "marks": "还行"}
{"content": "不懂IT ，我猜想疯狂的原因主要是创造性的工作让他们的生活比较happy，为什么没人写本《疯狂的土木工程师》，给你本规范看试试。RTFM!", "marks": "推荐"}
{"content": "青春热血正能量！适合刚入行的程序员看。虽然文笔很差，但是人物都好鲜活，各种感同身受。", "marks": "推荐"}
{"content": "一本写的很实在的书，作为一个学CS的人，看的时候真的很有共鸣。", "marks": "力荐"}
{"content": "大一时候看到的，印象特别深。当时就想，完了，走上码农的不归路了。", "marks": "力荐"}
{"content": "三分之一，无法接受的文笔...", "marks": "较差"}
{"content": "经历动人，文笔滞涩，不少笑话故事这些料的引用，不知是更有趣还是卖弄", "marks": "还行"}
{"content": "不够精彩,把恋爱部分删除", "marks": "较差"}
{"content": "写程序", "marks": "力荐"}
{"content": "优秀的程序员，失败的社会人——IT民工要引以为戒吖，这样找不到老婆的。", "marks": "推荐"}
{"content": "感情和感悟都有，可读性不佳。", "marks": "还行"}
{"content": "虎头蛇尾.", "marks": "推荐"}
{"content": "程序员写的自传性奋斗小说", "marks": "推荐"}
{"content": "内容还是不错的，建议做技术的人看一看，会比较坚定一些", "marks": "推荐"}
{"content": "CSDN == 低级", "marks": "较差"}
{"content": "不知道人生最重要的是不是激情和梦想。", "marks": "还行"}
{"content": "阅读之前：关于程序员的小说  很希望可以读一本   从中了解些什么。\n阅读后：一个比普通优秀一些的程序员，负责，认真，热爱技术。不过作者能够大胆正式的写出来，应该敬佩。同时作者能坚持写出一本书也是很厉害的。 \n学校的在校生如果要可以读来了解一下一个程序员的生活。", "marks": "还行"}
{"content": "对生活的幽默，对编程的热爱，对事业的激情，对感情的心酸，一本属于程序员的书", "marks": "推荐"}
{"content": "读完这书就懂得了，这辈子做程序员没希望了。。。。", "marks": "推荐"}
{"content": "一本很没劲的大流水账", "marks": "较差"}
{"content": "绝对是程序猿写的。。。从头到尾都弥漫着程序就是一切的绝望，不知道那帮家伙怎么就看出“鼓舞”和“励志”了。挺有意思。", "marks": "力荐"}
{"content": "朴实无华，但是是生活。很多程序员都是非常有学习能力的人。", "marks": "还行"}
{"content": "從小說的角度來説可能顯得相當稚嫩，但是你只要是程序員，一個負責任的對技術有追求的程序員，肯定能能夠引起強烈的共鳴吧，讀這本小説有點漸入佳境的感覺，最後的結局處理的挺好，躊躇滿志。Boss Liu这个人物我觉得不简单，技术好是难能，有颗善良的心却是可貴了。\n最後似乎也點到了那個永恒的話題，技術派和管理派乃至營銷派之爭，絕影的技術出身使得他在小説裏給出的答案也帶有明顯的傾向，這個問題沒有標準答案，但是至少絕影的成功給了那些默默無聞的程序員一個信心，一個鼓勵。\n", "marks": "推荐"}
{"content": "看完以后，很感伤，\r\n尤其是看到分手那一段，心里堵得慌，想哭，写程序的人啊，有多少能坚持自己的理想，守望自己，爱护自己。", "marks": "推荐"}
{"content": "许多年前在CSDN上追过连载。“真实”是优点，但换句话说是琐碎又乏味，像国产连续剧。看“已读”不少，评分不低，难道豆瓣上程序员这么多？", "marks": "较差"}
{"content": "屁都没学到。", "marks": "还行"}
{"content": "评价的程序员们纷纷表示，看这书的时间不如多看几本O'Reilly。", "marks": "还行"}
{"content": "程序小猿的成长之路", "marks": "推荐"}
{"content": "一本朴实无华的励志小说。小公司小人物的成长。", "marks": "推荐"}
{"content": "写的蛮好的，比学校发的计算技术有意思多了", "marks": "推荐"}
{"content": "还好，但写得比较粗糙", "marks": "推荐"}
{"content": "其实需要更早一点的励志。或许应该更早的领悟。", "marks": "推荐"}
{"content": "”‘疯狂的程序员’绝对不是靠狂妄和拼命的程序员,而是能够踏实,持续努力的程序员。等你真正做到了这两点,技术上去了,在写程序这个领域,能够限制你的只有你的想像力,到那个时候,你才算个‘疯狂的程序员’,这种程序员啊,是能令竞争对手无比恐惧的。“", "marks": "推荐"}
{"content": "挺真实的，不过结尾仓促了点", "marks": "还行"}
{"content": "为什么看的关于软件的书结局大多是悲剧的呢？很棒的一本书！！", "marks": "推荐"}
{"content": "故事仍然在继续。。", "marks": "推荐"}
{"content": "把搞技术人的生活琐事写出来，就是复杂的人生~", "marks": "力荐"}
{"content": "第一次跟的连载小说，写的很内幕。", "marks": "推荐"}
{"content": "现实魔幻恐怖程序员主题小说。看完好心酸。", "marks": "力荐"}
{"content": "文学功底是差了点嘿嘿，序员闲来无事可以读读看", "marks": "还行"}
{"content": "美好的回忆", "marks": "力荐"}
{"content": "读得时候还在大四，很是共鸣，少有写程序员的书，而且还有点意思。", "marks": "推荐"}
{"content": "我们在IT图书市场看到的要么是IT成功人士包装后的传记，要么是实打实的技术书籍。\r\n\r\n实际上在软件开发界并不缺乏有趣的人物和精彩的故事。\r\n\r\n我一直比较喜欢技术人文类的书籍，就是把技术表现得不那么硬梆梆的。\r\n\r\n很高兴在CSDN Blog上产生了这样一部真实的程序员故事，从读书到工作，从打工到创业。\r\n\r\n绝影的成长十分真实，因为真实而精彩，因为真实而有价值\r\n", "marks": "力荐"}
{"content": "贴近生活，从而略显平淡，显得罗嗦。", "marks": "较差"}
{"content": "从10%开始就看不懂了还硬是看完了，恋爱中的女人都是脑残啊……", "marks": "还行"}
{"content": "2013-2-27：一个码农的成长过程，大学、毕业与之后的工作中的摸爬滚打，还在继续中。文字随和诙谐但作为同行，也忧心。同行业调侃：干两年有点钱不如开饭店。另书中的燕儿是个好姑娘。2-28：无数前辈前仆后继证明了，人多种爱好是件好事。在可塑年纪，我要好好改造。3-2：荣升技术经理，大概是08年前写的小说，那时候程序员转型就已经是个话题。中国软件行业尴尬，是因为软件服务商业。3-4：至少是曾经是个程序猿才去看，如果想了解程序猿也不错。3-5：绝影居然辞职了！越来越有趣了。3-7：「程序员的双手是魔术师的双手」，这一句是对猿们莫大的安慰和无上的赞赏。一直期待小说最后的喜/悲剧，那种掉镜框的结局才是对小说的期待，但它没有！这不正说明，故事离终点还很远，只是它的捉刀人是我们！荐 :P", "marks": "力荐"}
{"content": "比较青涩", "marks": "推荐"}
{"content": "看着绝影这一步步走来，充满了亲切感，希望哪天也能和boss j聊几句啊，呵呵", "marks": "推荐"}
{"content": "不疯魔不成活", "marks": "还行"}
{"content": "年轻人本该有自己的热血和冲动，你应该怀揣自己的梦想...只是，要记得，技术和写程序的区别......", "marks": "推荐"}
{"content": "程序人生..受益匪浅..如果早几年看到..绝对能影响我不会进入到当前的苦逼状态..", "marks": "力荐"}
{"content": "一个普通程序员的成长历程。", "marks": "推荐"}
{"content": "1.“不用扬鞭自奋蹄”，我爸老给我说，可惜我不是绝影，没人抽我，我就欠抽。2.对一件事情有兴趣，于是把它学得精通，用得灵巧，这也算得一个小规模强大的男人了。3.咱别冠冕堂皇地说是想给燕儿幸福，于是加班加点于是疏于照顾，你的本事要是就是挣了房子失了关怀，那你在爱情里的价值也没了，有房子的人多得是，能给燕儿爱情的人才是你。", "marks": "推荐"}
{"content": "几年前，我以为只是一个博文系列，竟然出版了。一路踩着光环出来的人，毕业后就进牛企，接受系统的培训，不会体会这种心酸的。刚学计算机的时候听了几个网友的事迹，看了这本书，我以为我以后也会这样的下去，没想到还有别的出路。", "marks": "推荐"}
{"content": "有些自己的影子。说理内容很精彩，但是很突兀，不过有很多可以借鉴的地方，也有点羡慕那样的生活了", "marks": "推荐"}
{"content": "无疯狂，不程序！！！很吸引人的一本小说。", "marks": "还行"}
{"content": "不被抓就好了", "marks": "较差"}
{"content": "很有启示……", "marks": "力荐"}
{"content": "不错，作者虽然出身不好，但是确实是疯狂的coder，比我是要疯狂一些。", "marks": "力荐"}
{"content": "不错的书！ 看完有把汇编学精的冲动~", "marks": "力荐"}
{"content": "说实话小说不怎么样.....不过还是挺支持的,程序员写的小说....看还是得看看的", "marks": "还行"}
{"content": "鼓舞我走上这条不归路的小说...", "marks": "推荐"}
{"content": "程序员+疯狂=牛逼的程序员。", "marks": "力荐"}
{"content": "把程序员写的很悲壮啊", "marks": "还行"}
{"content": "可能是还没踏入社会，感触不深。\n但是，前人血淋淋的教训是十分有意义的", "marks": "还行"}
{"content": "暑期实习的时候看了一半，现在又想看了", "marks": "推荐"}
{"content": "感觉大多数程序猿都脱不出作者笔下的几个模子吧", "marks": "推荐"}
{"content": "呵，我感觉写得还行，虽然技巧不那么高，情节不那么紧凑。但是，程序员的成长、辛酸都写出来了，颇多感悟", "marks": "力荐"}
{"content": "大一时读的，算是读的第一本写程序猿的书了，开启了伦家的不归路啊~", "marks": "推荐"}
{"content": "这是个阴雨的季节，绝望着也依然充满新生的期待。。。。 稍微心酸也有熟悉的人品的影子。。遍身罗绮者，不是养蚕人！！！", "marks": "推荐"}
{"content": "喜欢", "marks": "力荐"}
{"content": "用碎片时间读完了。", "marks": "推荐"}
{"content": "身边有很多这样的人", "marks": "力荐"}
{"content": "为男主和女主感到惋惜，看完就慢慢地不想做码农了", "marks": "力荐"}
{"content": "作者貌似挨抓了⋯⋯", "marks": "推荐"}
{"content": "去年，还是前年，在南图复习，无意间在阅览室书架上发现这本夹在一堆编程教材中的小说，于是就取下翻了翻，结果就一口气看完了，让我对程序员的世界有了一个直观的认识。前几天看到一个大学同学的微博ID BugXXXXX，又想起这本小说，今天在南图阅览室发现这本书居然还在，照旧夹在一堆编程语言中，却是显旧了。", "marks": "推荐"}
{"content": "写出了很多打拼多年的普通程序生存状态", "marks": "推荐"}
{"content": "这本书的作者进局子了……", "marks": "还行"}
{"content": "有点了解了程序员的思想与生活！", "marks": "推荐"}
{"content": "非常喜欢", "marks": "力荐"}
{"content": "最初是被推荐用来了解基础的好么……读了还是各种不明觉厉好么……0.0", "marks": "推荐"}
{"content": "有些启发。", "marks": "推荐"}
{"content": "高二时候买了一本ASP的书，准备学习拖到现在也没学过ASP，推荐书单里看到这本书就去下了txt的电子版本来看。算起来已经看过2.5遍了，上学期没有看完。第一次看的时候还是2010年，三年就这么过去了，高二到大二，都已经2013亮了，回过去看看，真快。", "marks": "力荐"}
{"content": "语言很幽默，很好玩", "marks": "推荐"}
{"content": "疯狂有点牵强， 有理想还可了。", "marks": "还行"}
{"content": "同病相怜！ via KP", "marks": "力荐"}
{"content": "一个并不励志的励志故事 文笔平平胜在真实 所谓创业 技术真心不是最重要 民工被小资本家剥削 小资本家被大资本家剥削 大资本家被幕后黑手剥削 幕后黑手背负着法律 跳出一环还有一环 每个行业均如此 真心你妈忧伤 阳光的一方面 我看到的是技术路线的真实写照 粗浅的实际行动比完美的计划更重要 技术要从底层抓起 不变应万变 我都不敢放卫星 卫星有何可能飞上天！？", "marks": "力荐"}
{"content": "看过这本书之后，我开始思考自己是真的适合当程序员，我真的喜欢打豆豆吗？", "marks": "力荐"}
{"content": "以前读过，挺有意思的~", "marks": "还行"}
{"content": "绝哥…………", "marks": "还行"}
{"content": "不像是小说，文笔好像纪录片", "marks": "推荐"}
{"content": "一篇一篇跟着过来的", "marks": "力荐"}
{"content": "很真实的一本小说 适合程序员读读", "marks": "力荐"}
{"content": "我不是程序员，但也曾经在那样的公司工作过。这本书不错，更深一步了解程序员。希望那些能耐得住寂寞的家伙们心想事成。", "marks": "推荐"}
{"content": "“那时候还单纯，不知道感情怎么玩弄”", "marks": "力荐"}
{"content": "电子版\n20110503", "marks": "力荐"}
{"content": "稚嫩", "marks": "还行"}
{"content": "看得是txt文本，文笔一般。国内比较早的关于程序员的小说", "marks": "较差"}
{"content": "失恋之余又读了一遍", "marks": "力荐"}
{"content": "看完这书我的想法是自己千万不要成为下一个绝影", "marks": "还行"}
{"content": "中间的内容堪称高潮，描写的和现实中的大多数程序员很像，看了有种让人热血澎湃的感觉，书中还有很多算得上是至理名言了，说的一针见血啊。可惜结尾不尽人意。", "marks": "还行"}
{"content": "再看一次还是很爽~~", "marks": "推荐"}
{"content": "可惜结尾草草了点", "marks": "推荐"}
{"content": "读起来会让你有一种想学程序开发的念头 ", "marks": "推荐"}
{"content": "什么是疯狂的程序员，就是能踏踏实实，实实在在的静下心来做事情。", "marks": "力荐"}
{"content": "平淡才是真，很真实", "marks": "推荐"}
{"content": "很有意思，我喜欢哈哈哈。当然，对于不了解编程或者不搞计算机的人就不要看了，因为里面有很多专业术语。", "marks": "力荐"}
{"content": "去年就开卷，结果看了一半kindle丢了，直到最近才全部看完的一本。一直觉得跟代码打交道的人屌得爆爆的。平时跟公司里的程序猿聊天，他说没事儿别老想着写代码，麻痹两三年就换技术，每年都得重新学。可尼玛每回学完新技术不都特别有成就感嘛，老子就看上这成就感了", "marks": "力荐"}
{"content": "就那样把", "marks": "还行"}
{"content": "鸡肋啊~", "marks": "还行"}
{"content": "5G都快要来了。。。绝影写得真好，爱看书写文章的程序员可不多见，入狱出来后，人生经历岂不是更丰富，可以又写一本书了，技术的追求什么时候都不晚，期待绝影的第二本书啊。当初绝影的新颖的创业项目，时隔短短5年后往回看，就显得老土的不行啊", "marks": "力荐"}
{"content": "一般吧", "marks": "还行"}
{"content": "大学时候读过，读完感觉热血沸腾~", "marks": "力荐"}
{"content": "很好的小说，但不具备一般性", "marks": "推荐"}
{"content": "真正的高手，不追求招式的繁杂，只把普通的招式做到极致，以不变应万变。绝影悟性极高，能从普通的编程中悟出很多人生之道，说过的很多话看似平常，仔细一想，其实蕴含了深刻的哲理。书中反复提到的一句话“一件事，要是做不到第一，就一定要做到最好”，人生苦短，有限的时间就应该用来做最有意义的事情.......", "marks": "推荐"}
{"content": "大三地震那段日子看了绝影的连载，觉得很合胃口，不仅文笔不错，而且读起来离我们的生活很近，可是直到现在才又重新拾起将其读完。感觉绝影和Boss Liu做的东西超前了（3G流媒体），并且太过早的去创办公司和寻求投资了。", "marks": "力荐"}
{"content": "事情刚开始都是残破不全的，越想越黯淡，干着干着就完美了", "marks": "推荐"}
{"content": "这本书曾经误导了我很多", "marks": "很差"}
{"content": "写的真心很不错", "marks": "还行"}
{"content": "程序猿的心路历程啊", "marks": "推荐"}
{"content": "屌丝", "marks": "推荐"}
{"content": "看了前面就看不下了", "marks": "很差"}
{"content": "读书的孩子是值得读读这书的，比说教来得好很多。只是文笔麻，我觉得还是烂了点。", "marks": "还行"}
{"content": "有一些东西，但是废话太多", "marks": "还行"}
{"content": "贵在真实", "marks": "还行"}
{"content": "长大了，突然喜欢看小说了，喜欢看里面主角们一点点的成长，那些快乐或者痛苦，还有感悟，往往会让我会心一笑……", "marks": "推荐"}
{"content": "2009.4看完。挺幽默的，借小说让我知道了程序员的生活~果然对码代码的男生有种天然的偏爱啊~哦呵呵呵！", "marks": "力荐"}
{"content": "一代码农的工作历程～\n故事一般，读来有些伤感。", "marks": "还行"}
{"content": "他们还不够疯？…~", "marks": "推荐"}
{"content": "一下午读完了。后面写的不好", "marks": "还行"}
{"content": "又是火车上看完的！隐隐看到了自己的一些与自己类似的经历-校园经历。", "marks": "力荐"}
{"content": "曹操有马名叫绝影", "marks": "还行"}
{"content": "也是通信工程，也想写程序~", "marks": "推荐"}
{"content": "这个程序员真的有点疯", "marks": "力荐"}
{"content": "开头跟我一个朋友的轨迹很像，期待他也能像绝影一样越来越牛", "marks": "推荐"}
{"content": "湊湊合合", "marks": "较差"}
{"content": "五月没怎么看书。先猿的生活还是精彩。先猿的爱情怎么死了，明明几年长跑，这女的说走就走。", "marks": "还行"}
{"content": "诸多共鸣", "marks": "力荐"}
{"content": "故事还行，程序员是苦逼的，不是么", "marks": "推荐"}
{"content": "看完了，感受到疯狂后，一股压抑的抑郁漫了上来。唉，一群不可理喻的人。", "marks": "力荐"}
{"content": "很喜欢绝影以及他的故事", "marks": "力荐"}
{"content": "程序员写程序员自己的酸甜苦辣。读者会和作者产生共鸣，一方面因为彼此的经历相似，另一方面因为彼此属于一类人。同一类人，有相似的思维方式，处理问题也有相似的方法，同样，正因为相似，思考、做事都有局限性。由多种类型，各有所长的组成的团队才更有战斗力。屁股决定脑袋，谁都不容易。", "marks": "推荐"}
{"content": "向往绝影的绝世武功，并努力奋斗！", "marks": "力荐"}
{"content": "读完了这本书 我决定不做程序员了  大三", "marks": "力荐"}
{"content": "可以负分滚粗的东西。糟糕的叙事，通篇自以为是的说教，放论坛上取悦下没多少文化的程序员就行了，出书实在是够了。", "marks": "很差"}
{"content": "挑着看，略读完。 算不上工具书，总结的原则值得思考。", "marks": "推荐"}
{"content": "比起十年前第一次读，这次要读得懂一些了……不过，还是不太有谱怎么真的应用起来……", "marks": "推荐"}
{"content": "这才是OO正宗啊 设计的元信息 方法论 方法论", "marks": "推荐"}
{"content": "坦白说，本书的翻译差强人意。", "marks": "推荐"}
{"content": "读了一半，没什么收获\n", "marks": "还行"}
{"content": "简单翻了一下，发现我实在看不下去，应该是给比较熟悉UML的人看的", "marks": "很差"}
{"content": "同英文版，因将公司成本考虑在里面。", "marks": "推荐"}
{"content": "把东西做到极致～", "marks": "推荐"}
{"content": "虽然帮助不大，但也是有帮助的", "marks": "推荐"}
{"content": "只是些常识", "marks": "推荐"}
{"content": "B302 TP393.092/bzh990 ", "marks": "推荐"}
{"content": "不过我还是觉得，只要有几篇blog就够了吧", "marks": "推荐"}
{"content": "Yahoo! Best Practices for Speeding Up Your Web Site的扩写版http://developer.yahoo.com/performance/rules.html", "marks": "力荐"}
{"content": "翻译略搓 漏标签以及翻译不准确也不少见 好在有标英文原文习惯 书末也有名词表 内容还是十分好的 08年的书现在看还是覆盖面很全面 但是都是掠过 实在不够详细 之后要攻略进阶的 ", "marks": "推荐"}
{"content": "书是好书~看完感觉前端人在性能优化工作中责任重大~不过话说回来~书中提到的东西其实就是Yslow的那些条中的具体项目~即使真的需要的话借一本抄成笔记就好了...不必花钱买- -", "marks": "推荐"}
{"content": "当然是好书，作者是Yslow开发者，大牛。这本书使得14条优化原则几乎成为常识，于是买这本书的性价比就不怎么高了。。。我是图书馆借的，哈。给5星。", "marks": "力荐"}
{"content": "不错。。。小书值得一读", "marks": "力荐"}
{"content": "http://stevesouders.com/hpws/", "marks": "推荐"}
{"content": "了解一些前端页面开发的常识", "marks": "推荐"}
{"content": "前端优化也可以提高这么多性能，很好的一些经验和建议", "marks": "力荐"}
{"content": "非常有用", "marks": "力荐"}
{"content": "简单的好书", "marks": "推荐"}
{"content": "精、短、实用，读起来也丝毫不tough. 前端开发应知必会", "marks": "力荐"}
{"content": "YSlow 14 Rules.", "marks": "推荐"}
{"content": "教科书般的读物。", "marks": "推荐"}
{"content": "一些基本的前端技能", "marks": "推荐"}
{"content": "以前也在网上收集看过相关的优化规则，读了这书，还是比较能从原理层理解为什么用这种方法和这种方法的利弊。", "marks": "力荐"}
{"content": "无论是前端，还是程序员，都应该知道这些，可惜大家都不是很清楚！\n就算为了自己也应该读一读！", "marks": "力荐"}
{"content": "精辟，实用，嘿嘿，给多年的经历做过总结，好书一本", "marks": "推荐"}
{"content": "目前这些规则很有用...不过随着 浏览器 和 其他一些技术的进化...书中现在所提到的那些规则,可能会慢慢不实用...但书中所总结每一个规则的过程还是在很长一段的时间内有用的吧?...不要只相信片面的测试结果,比如:只在某个浏览器里测试了,或者只在某种网络条件下测试了...这些经验、教训更加有用.....", "marks": "力荐"}
{"content": "作者是个追求完美的人，里面的案例数据也很充实。不过在实际运用中，还是需要进行自己的取舍，毕竟极致的优化会带来开发和沟通的成本。", "marks": "推荐"}
{"content": "很有用，也很容易做到的一些网站优化方法", "marks": "力荐"}
{"content": "看着还是有点用的", "marks": "推荐"}
{"content": "经典前端", "marks": "力荐"}
{"content": "貌似这本书已经被别人叫成十四条前端法则了。。。", "marks": "力荐"}
{"content": "好书，推荐", "marks": "力荐"}
{"content": "总结了耳熟能详的前端优化方案", "marks": "推荐"}
{"content": "走马观花的看了。稍微基础一点。", "marks": "还行"}
{"content": "很赞的一本书！", "marks": "推荐"}
{"content": "薄薄的一本，快速的过了一遍。", "marks": "还行"}
{"content": "神书级别，买本纸质的翻翻，为什么中文版的都缺货，丫的订本E文的！", "marks": "力荐"}
{"content": "内容不多，价格挺贵", "marks": "推荐"}
{"content": "对当时来说也算是一本介绍全面的经典小作品了吧…也有对内容更细更新的增补版？…", "marks": "推荐"}
{"content": "雅虎著名的YSlow，http://developer.yahoo.com/performance/", "marks": "力荐"}
{"content": "偏重于介绍前端性能优化", "marks": "力荐"}
{"content": "146页的书证明了浓缩就是精华", "marks": "推荐"}
{"content": "读过好多oreilly的书，没想到工作2年后，觉得最庆幸的就是读了这本。许多Web基础技术都可以在实战中慢慢学习提高，只有优化的思想才是一开始就存在，能主导做更好的中心。有必要再看一次！", "marks": "力荐"}
{"content": "前端开发的基本功，简洁有力：一个富有启发的论点（网站80%的性能瓶颈在前端），十四条切实可行的规则，开发时请结合yslow和html5boilerplate，效果更佳 :)", "marks": "推荐"}
{"content": "内容来说，5颗星，但如果没有藏书癖的话，真的不需要买", "marks": "力荐"}
{"content": "Yahoo!前端性能优化14条军规", "marks": "力荐"}
{"content": "买的比较晚所以没什么感觉，要是以前读想必会收获很多。", "marks": "推荐"}
{"content": "一般般，只是些技巧常识，一些技术没有介绍详细。", "marks": "还行"}
{"content": "很不错，实用，短小精干", "marks": "力荐"}
{"content": "每个web开发人员都应该读的书", "marks": "力荐"}
{"content": "书中的大部分观点，到今天依然适用。但当中大部分例子就已经out了。", "marks": "还行"}
{"content": "前端视角下的网站性能优化", "marks": "推荐"}
{"content": "书里面说的内容很好，但有些可能要结合到实际工作上才能明白。", "marks": "推荐"}
{"content": "如果能总结成一篇文章来说就好了", "marks": "推荐"}
{"content": "经典  提高网站速度的经典十四条  ,写了mind笔记 , 欢迎移步:sunlanda", "marks": "推荐"}
{"content": "书比较老，讲的很多ie5-7的东西，略过了几章服务器端的知识，看完了，nodejs学好应该还会再看一遍，学东西有趣就在于你知道了某个知识你发现很多人居然在用，让人觉得挺神奇的", "marks": "推荐"}
{"content": "赞", "marks": "力荐"}
{"content": "读完了此书，对于网站前端优化有了全面了解，原来网站速度80%取决于前端。看完此书找到了使用google的pagespeed工具及雅虎的ylsow工具来分析网站前端性能的理论依据。非常不错的书推荐给对于网站优化有兴趣的童鞋。", "marks": "力荐"}
{"content": "出版年: 2008年。1. 内容就是雅虎军规；2. 看看今天前端框的更新速度，再看看这本书的出版年，感受一下。", "marks": "较差"}
{"content": "虽然大部分都是常识，但是作者给出了详尽的原因分析", "marks": "还行"}
{"content": "加快网站打开速度的前端优化方法", "marks": "力荐"}
{"content": "有点旧，内容还不错", "marks": "还行"}
{"content": "前端优化的十几个原则方法讲得很细，很值得一读。", "marks": "力荐"}
{"content": "书是不厚，但确实学到了不少东西，以前做的时候有些东西还真是没有细想过，以后还是应该多考虑考虑。", "marks": "推荐"}
{"content": "进修必备。", "marks": "力荐"}
{"content": "web前端优化设计必读", "marks": "推荐"}
{"content": "全面实用的网站性能分析指南。", "marks": "推荐"}
{"content": "前端开发", "marks": "推荐"}
{"content": "开始深入了解前端，方向更明确。革命尚未成功，同志仍需努力。", "marks": "力荐"}
{"content": "前端工程师必看的书，我这个后端就看个大概，缓存相关的知识蛮有用的", "marks": "推荐"}
{"content": "比较简单", "marks": "推荐"}
{"content": "14 gold rule plus analysis on several famous website.", "marks": "还行"}
{"content": "本书着重前端优化，其实也说了不少后端的技术，不知我为何要刻意区分前端与后端，这样只能限制自己的视野。有关于服务器设置那块有些陌生，因为我不了解后端吧。前端的优化技巧基本都了解一点。", "marks": "还行"}
{"content": "虽然主要是写个前端工程师的，但做后端的也应该看看，前端优化效果巨大，而且易于实现。", "marks": "力荐"}
{"content": "好书，都说到点子上了, 很薄的小册子，拿着就有信心一通读完，很具有可操作性；", "marks": "推荐"}
{"content": "近期在搞一些性能相关的工作，合并请求这点体验最深，页面加载速度快了好几个级别。", "marks": "推荐"}
{"content": "就一般般吧，作为前端新人，很多老旧的技术基本没在用过。所以，这本书里谈到的优化，已经不再适用目前前端的开发了。", "marks": "还行"}
{"content": "网站优化的经验 雅虎军规14条", "marks": "力荐"}
{"content": "不修改后台，只在前端就能大幅提升性能的各种cook技巧。喜欢cookbook系列，着本书可以改名叫做web前端优化cookbook", "marks": "力荐"}
{"content": "1.两天不到看完了，尽管有些方面有点过时了，而有些方面又并不是前端所能控制的。但开阔了眼界，受益实在匪浅。\n2.封面的选择也是个亮点。", "marks": "力荐"}
{"content": "本书介绍的技术虽然都很常见，但其中对技术产生的原因都作了很详细的分析。认真阅读此书对性能优化的细节考量会有很大收获", "marks": "力荐"}
{"content": "简单实用", "marks": "力荐"}
{"content": "虽然大多数都了解了，但还是很喜欢，经典的适合收藏，呵呵", "marks": "力荐"}
{"content": "网络果然还是慢", "marks": "推荐"}
{"content": "牢记14个规则 不过对移动互联网  还需另外分析", "marks": "推荐"}
{"content": "想读。", "marks": "推荐"}
{"content": "薄薄的一本书，但是内容挺丰富的。虽然写的不详细，但是很容易读懂理解~只是我现在刚开始学前端，可能很多东西用不上，但是还是很有用的", "marks": "推荐"}
{"content": "很早以前看过，现在看的确有些东西过时了，不过还是很经典。", "marks": "力荐"}
{"content": "非常精简的一本书，对组件并行下载，下载顺序，文件合并等内容都给出了如何优化的建议，整本书都是干货。", "marks": "力荐"}
{"content": "前端优化的14条军规", "marks": "力荐"}
{"content": "书中的很多规则现在已经被普遍应用了。前端优化的核心原则就两点：减少HTTP请求数量和减小传输数据大小。", "marks": "推荐"}
{"content": "很实用的书", "marks": "力荐"}
{"content": "写的很用心一本书，如果以后涉及前端一定要会过头看一下", "marks": "推荐"}
{"content": "13条法则～", "marks": "力荐"}
{"content": "前端性能上面的优化也是同等重要。", "marks": "力荐"}
{"content": "简单有效", "marks": "推荐"}
{"content": "不可多得的好书。", "marks": "力荐"}
{"content": "虽然14条军规已经流行，但是那些细节还是需要细读。所以，现在看能理解更多。", "marks": "力荐"}
{"content": "很精辟", "marks": "推荐"}
{"content": "前端知识", "marks": "力荐"}
{"content": "毕竟是2008年出的书，2016年读起来感觉很多东西都已经成为了标配（CSS Sprite、将脚本放在底部），可以看到前端领域这么多年的迅猛发展。最后，列举下平常都用过的规则：CSS Sprite、使用Expire过期头、减少HTTP请求、有效利用ETag、将CSS样式表放在头部、将脚本放在底部、使用gzip并精简JS代码、避免在IE中使用CSS表达式、减少重定向（本质还是为了减少HTTP请求）、使用webpack等工具来对前端资源打包和发布", "marks": "推荐"}
{"content": "阅读的第一本关于网站性能优化的书，读完查阅了一些资料，找了一些工具，收获非常大，内容很实用，没什么废话，值得推荐！", "marks": "力荐"}
{"content": "2个小时看完，收获并不太大", "marks": "还行"}
{"content": "虽然是08年的书，但在现在仍具有很强的指导意义", "marks": "力荐"}
{"content": "精简但很精辟！", "marks": "力荐"}
{"content": "steve souders经典书，最爽的是书不厚，哈哈。此书可长期回头再看，非一次性用品。:)", "marks": "力荐"}
{"content": "书很薄，但内容却是相当有价值", "marks": "力荐"}
{"content": "不错，好书。", "marks": "力荐"}
{"content": "YUI成员出品经典，结合FireFox的 Yslow分析，优化自己的网站性能。前端开发工程师必备", "marks": "力荐"}
{"content": "精华都在目录里，其实不用买书的，有点过时", "marks": "推荐"}
{"content": "对前一本的书进行了很好的扩展和深入，值得一读", "marks": "力荐"}
{"content": "这本书绝对物有所值，强烈推荐前端工程师，14条优化规则，简单可行，又有Yslow的帮助去实践。", "marks": "推荐"}
{"content": "前端开发工程师必备", "marks": "推荐"}
{"content": "比较基本的一些注意事项", "marks": "推荐"}
{"content": "好书，值得一看。", "marks": "力荐"}
{"content": "一本能从本质上提升web速度的进阶书，书中内容深入浅出，从研发、运维、编码习惯、网络等多个方面进行讲解，每一点都从运行机制到解决办法详细的讲解，不近知道了这样做，还让读者知道为什么这样做，很多约定成俗的习惯豁然开朗。", "marks": "推荐"}
{"content": "看过后才知道，之前自己有很多知识都是错误的。", "marks": "力荐"}
{"content": "登高望远", "marks": "力荐"}
{"content": "都不需要记笔记的书-.->", "marks": "力荐"}
{"content": "前端性能，前端工程师必备", "marks": "力荐"}
{"content": "还想再读", "marks": "力荐"}
{"content": "前端优化必读", "marks": "力荐"}
{"content": "通俗易懂，内容浅显，作为前端优化的入门书籍挺好的。七年前的书，有些优化方案现在已经过时，当前前端优化情况更复杂，内容介绍的也不够深入。", "marks": "还行"}
{"content": "介绍的东西不东，但是都很实用。到现在，大部分内容已为大家熟知。", "marks": "推荐"}
{"content": "如果你装了YSlow却还搞不清楚什么是什么，请看说明书。哈", "marks": "推荐"}
{"content": "前端必读书之一", "marks": "力荐"}
{"content": "不错。前半部分的内容google code 和YSlow的suggestion里面都有，后半部分很不错。", "marks": "推荐"}
{"content": "推荐网站管理人员、WEB程序开发人员阅读。当你的网络访问慢、在屁颠屁颠重构代码的时候，\r\n优化数据库之前先看看书中提到的14条优化原则，都有哪些值得改进的，保准有收获。", "marks": "推荐"}
{"content": "涉及到了编程、通信协议以及服务器配置等，需要花些时间去揣摩提炼了！\r\n", "marks": "推荐"}
{"content": "现在看感觉有点儿老。", "marks": "还行"}
{"content": "就是13条军规~直接看yslow就行了", "marks": "推荐"}
{"content": "网站前端优化很不错的书", "marks": "力荐"}
{"content": "很不错的一本关于前端设计的书，深入浅出适合技术人员巩固与提升。", "marks": "力荐"}
{"content": "web开发人员都有必要读下此书。该书深入浅出，对理解web的本质也是很有帮助的。", "marks": "力荐"}
{"content": "黄金规则14条，对于网站性能提升很有帮助！就是翻译的一般般", "marks": "力荐"}
{"content": "关注网站性能的人不可不看", "marks": "力荐"}
{"content": "前端性能优化必读！", "marks": "力荐"}
{"content": "言简意赅，绝对值得一读", "marks": "力荐"}
{"content": "核心思想：极力减少请求数", "marks": "力荐"}
{"content": "对于想了解页面性能的人是有帮助的", "marks": "力荐"}
{"content": "有些东西之前也有了解过。但是看到了一些新的特别的信息。不错。", "marks": "推荐"}
{"content": "YSlow", "marks": "推荐"}
{"content": "内容不错，但是量少且浅。", "marks": "推荐"}
{"content": "终于明白网站载入怎么那么慢了", "marks": "力荐"}
{"content": "详细的阐述了YSlow里面的几条标准，真的棒，强列推荐", "marks": "力荐"}
{"content": "感觉并没有太多实质性的内容，不是很值得看", "marks": "还行"}
{"content": "非常好的一本实践指南，看完收获很大，很多东西都是一般书中不会提到的。顺便感慨一下，现在的一些网站服务也越来越人性化，基于这本书的一些内容提供网站优化建议。", "marks": "力荐"}
{"content": "很多内容网上都有看过，算是一个总结吧。", "marks": "推荐"}
{"content": "雅虎的14的准则在这儿啊", "marks": "力荐"}
{"content": "入门级不错啊！php 至少从语义上还是都能看懂的。", "marks": "推荐"}
{"content": "专门讲网页入侵的书不多，因此此书很是难得。看过之后，发现做一个合格的黑客需要懂多少东西啊~", "marks": "力荐"}
{"content": "觉得比《浪潮之巅》有趣哈哈。基本是抛开了商业行业因素外的软件团队崩溃史。可以看到程序员是多么顽固又不得不把抽象写成诗的物种。软件就是其中灵活性而言，非常顽固，令人发指地棘手，而且常以其强硬的一面示人。构建软件系统最难的就是精确设定要做什么东西，而且，重要的是，当你好不容易构建出来了一些看似不错的，那么在软件开发过程中，这些可能", "marks": "力荐"}
{"content": "没想到原来这本书包含了如此多个计算机领域的经典人物的故事，实在让人回味无穷。", "marks": "力荐"}
{"content": "不觉得是一部项目管理书籍，倒是一部OSF漫谈，可以当作开源社区的历史书。作者并未特别批评某个人，书中提到的现象随处可见。", "marks": "推荐"}
{"content": "那些违背Linux Unix设计思想的项目的悲惨故事集锦，或者说论如何作死，从设计到项目管理的作死方法不一而足。如果看完Linux Unix设计思想没有什么感觉和概念的话，那你一定要看看这本书。", "marks": "还行"}
{"content": "“你越了解软件，就越不会去做软件”", "marks": "推荐"}
{"content": "软件工程只是偶然成功，没有可以复制成功项目的可行方法", "marks": "还行"}
{"content": "原来国外的开源是这样写的，老外程序员也没多长两只手。\n\n看完之后，更加重了我的悲观，怎么做优秀的项目，就是别做优秀的项目。", "marks": "推荐"}
{"content": "感觉一开始就是一个很混乱的项目，目标、架构、工具，统统没考虑清楚就动手了。中间泥潭里的挣扎看着也很丧气，不喜欢这本书。", "marks": "还行"}
{"content": "作者是一个既懂编程又擅长写作的人。这本书记录了一个大型的开源项目如何走向失败的过程，同时也是一部软件业的历史回忆录，书中提到好多业界大牛。", "marks": "推荐"}
{"content": "做不了这行⋯⋯", "marks": "还行"}
{"content": "让你感同身受什么叫做软件的本质复杂性.", "marks": "推荐"}
{"content": "一个软件项目的失败之旅", "marks": "推荐"}
{"content": "此等话多矣，亦无可奈何，听久便无趣。", "marks": "推荐"}
{"content": "一辆车刹车失灵，摔下悬崖，项目经历，硬件工程师和软件工程师的对话：软件工程师说了句，动手开干之前，我想应该把车推回山上，看看事故是否会重现", "marks": "力荐"}
{"content": "不给最后一颗星是因为太贵了，翻译得很好，但是真的很贵啊", "marks": "推荐"}
{"content": "什麽叫做一堆牛人作出糞作，這本書進行了很好的詮釋。", "marks": "推荐"}
{"content": "“作为人： 我们是具体化的生物；肉体物是我们的基础，肉体性也以无数种不同方式定义了我们的存在。 我们与周围环境紧密相连；在经验形成的过程中，感知环境和与环境互动具有等同的认识的作用。 情感和认知同等基础，或更加基础；强烈和细微的感觉塑造了思维的封套。 我们是有意识的存在，既能外观亦能自省；精神人格和超越自我是我们能预于其中、也是我们所具有的境界”", "marks": "推荐"}
{"content": "\"你越懂软件,越不会去做软件\"", "marks": "力荐"}
{"content": "盼了几个月终于等到了，很震撼，像读武侠小说一样手不释卷地一口气读了下来。“改变世界”是每个伟大的软件工程师的梦想，然而现实又是如此的无情。", "marks": "力荐"}
{"content": "这是一面镜子，你可以看见自己", "marks": "推荐"}
{"content": "软件开发的失败故事。\r\n", "marks": "推荐"}
{"content": "仓促翻完了，实在不应该在这个时候看，太绝望了。还是先把手头的项目做完，以后有时间慢慢看吧。", "marks": "推荐"}
{"content": "了解一个常识──传说中的人物也是人", "marks": "力荐"}
{"content": "这本书是我看过的最美的书。强烈强烈推荐。", "marks": "力荐"}
{"content": "说实话看这本书很让人沮丧，一个设想很好的项目啊，一群多么NB的团队成员啊，最后竟然饮恨而终。作者的文笔很好，翻译的也很到位，让读者如同身临其境，可是越是这样，越让同样做软件的人感到切肤之痛:(", "marks": "推荐"}
{"content": "要有少量项目开发经验，读起来才有感觉。显然，我没有，看的晕头转向的。。", "marks": "还行"}
{"content": "一部软件血泪史，软工编年史，牛牛八卦史。。。只是发散的有点厉害了。。。", "marks": "推荐"}
{"content": "依稀记得IT项目管理课上老师曾推荐过这本书，和《人月神话》书中项目例子的广度优先相比，这本书应该算是深度优先并穿插了广度的思考，从中不仅可以在广度上一窥软件(工程/项目)的发展史，还可以在深度上从文字当中亲近到一个真实具体的软件项目的开发流程，除此之外还能了解到软件发展过程中的一些著名的逸闻趣事包括一些著名项目失败的经验教训，除了个别印刷错误和哲学思考问题上的本质难懂以外，翻译总体上是相当到位的，旁注也是恰到好处，能将软件开发写成故事一般的有趣除了本书作者的写作本领炉火纯青以外，译者也是功不可没的，或许《", "marks": "力荐"}
{"content": "编程就是如此困难，没有银弹。", "marks": "推荐"}
{"content": "很糟糕的翻译", "marks": "还行"}
{"content": "自己功力还差点,看着感觉很无聊,译者连人名都给翻译了,有点画蛇添足的感觉", "marks": "还行"}
{"content": "Chandler那个工具我用过，觉得不怎么好用。", "marks": "还行"}
{"content": "站在书店里花了半个小时翻了一遍，不如期望中好，所以没有买。感觉更像是软件随想录，杂谈居多。", "marks": "推荐"}
{"content": "一起来围观一堆大牛写软件是怎样失败的。。。", "marks": "推荐"}
{"content": "避暑精品", "marks": "力荐"}
{"content": "我一直不认为软件跟工程能挂起来，软件是一个个人创造的过程，虽然会用各种办法来提升效率，但是这绝对不是工程！", "marks": "推荐"}
{"content": "一本值得反思的书，对项目管理有一定的指导意义，不知道是翻译的问题还是本身书的问题，读起来不怎么顺畅！", "marks": "推荐"}
{"content": "长太息以掩涕兮，哀软开之多艰！很舒服的翻译，看完之后多给一星。", "marks": "力荐"}
{"content": "程序开发 黑客文化", "marks": "力荐"}
{"content": "让学生从梦想回到现实的一本书。", "marks": "推荐"}
{"content": "酣畅淋漓——你对软件了解越多，就越不想做软件", "marks": "力荐"}
{"content": "这里躺着一个野心勃勃的开源项目～它是温室中的花儿 有过灿烂的梦想 还未绽放即已枯萎~在那软件的花园中 还有多少会渐次凋零呢~", "marks": "力荐"}
{"content": "一部代码的血泪史，能引起共鸣的段落，基本勉强达到4分标准。因为译者的广式风格（我极其厌恶“搞掂”，“搞得掂”etc这样风格的表述），减一分", "marks": "还行"}
{"content": "以小说的笔法记述了开源软件开发的艰难过程。本人对程序开发所知有限，而文中涉及专业的地方又总是一笔带过，以发展剧情优先，没有将程序员面对的难题全面地展现出，作为业外人士很难得到感同身受的体验。大概由于项目本身就缺乏高屋建瓴的总体规划，摸黑探索缺啥补啥，导致全书的记叙看起来也很混乱。", "marks": "还行"}
{"content": "未读完。", "marks": "还行"}
{"content": "太流水账了！", "marks": "还行"}
{"content": "Excuse me?", "marks": "还行"}
{"content": "高端牢骚。不完备的笑话。", "marks": "还行"}
{"content": "1.惊异于学计算机的人居然有那么好的译笔，译者很给力，注释相当详细。至于作者，我说你能不能按时间发展顺序有条理地说事，前几章给我很混乱的感觉，至于这本书所围绕的Chandler的开发过程，我真是无力吐槽了。如此没有计划地做事最后能达成目标吗？待我看完再评论吧。\n2.最终还是看到一半就把书还了，实在看不下去了。感觉作者只是像聊家常般地记录这整个过程，一会扯某某人的私人爱好一会说XXX的历史...以至于整篇文章有着尽是大段的废话，完全没有突出主题：如何复用代码，如何高效系统地做项目。似乎这个问题文章最后也没给出回答。\n3.Chandler最终还是失败了。对于那群开发团队，我只能说，你们做得太糟糕了！", "marks": "较差"}
{"content": "在书店里面看的中文版", "marks": "推荐"}
{"content": "那些都是为计算机做的，你打算为人类做些什么呢？", "marks": "推荐"}
{"content": "记得是大一还是大二的时候读过，没有感觉，因为没有带着问题和思考去读，打算有时间再读一遍。", "marks": "推荐"}
{"content": "虽然这个软件用这感觉不错，但是这个开发的痛苦程度估计也是空前绝后了", "marks": "推荐"}
{"content": "好", "marks": "力荐"}
{"content": "其实给这个星数挺盲目的，因为没有完全看完。和我现在做的事情还是有距离了些，所以还是之后再认真读吧。", "marks": "推荐"}
{"content": "两个晚上读完了这本书，我就是超爱这种IT八卦。翻译得真不错，完全可以当作开源社区+通俗小说版的人月神话来读。看书的时候，一阵一阵觉得迷茫，好像自己在干着什么不靠谱的工作。像过独木桥。计算机软件，还有很长的路要走。", "marks": "力荐"}
{"content": "这这这...和我的JsMath项目失败的经历如出一辙啊...", "marks": "力荐"}
{"content": "一部波澜起伏的故事，读完后你会觉得轻松一些，但依旧会带有对软件的纠结。", "marks": "推荐"}
{"content": "The latest Chandler release is  Release 1.0.3, 2009-07-30.", "marks": "还行"}
{"content": "哈哈哈哈哈哈哈哈哈哈，我居然读完了！", "marks": "推荐"}
{"content": "在讲故事中带着读者领略软件开发中的种种。更重要的是，这个故事就发生在我们身边，而且还未结束。", "marks": "力荐"}
{"content": "一群很有背景的程序员，最后的结果却不尽如人意.. 更多的从书中看一些计算机的历史，还有..", "marks": "推荐"}
{"content": "盛名之下，其实难符。花3个小时翻完这本书实在有点浪费时间，话说现在书商真会做广告。", "marks": "较差"}
{"content": "这是本好书，作者是个有心人。用一个跟踪的案例作为线索，尽力阐述了软件工程发展史和计算机思维发展史。里面那些经历非凡的牛人们，一个个地出现，一个个地闪过。留下一个关于成功的梦和一场宏大过的结局。也许是失败，也许不是错误。", "marks": "力荐"}
{"content": "路在哪里？梦又在哪里？", "marks": "推荐"}
{"content": "不错的故事，揭示了软件开发中的很多问题。有启发性", "marks": "力荐"}
{"content": "结论就一个：做软件太他妈难了，对于完美主义者尤甚", "marks": "推荐"}
{"content": "Scott Rosenberg 以一位观察者的身份跟踪了Chandler的开发过程，揭示了软件工程当中存在的问题，即使是最牛的人聚在一起也没法解决。同时还介绍了几乎整个软件工程的历史。", "marks": "推荐"}
{"content": "工作一年多后，深深知道陷入泥淖，毫无进度可言的项目多么可怕", "marks": "力荐"}
{"content": "有点啰嗦，像是写给非IT人的。", "marks": "还行"}
{"content": "可以说：每位程序员都应该读！虽然作者有很多时候扯淡扯着扯着就跑题了~~讲到软件工程啊，方法论，编程语言之类的话题去了///里面提到很多牛人，也不得不佩服作者文笔相当犀利啊！！描述里面一些牛人，各种逗，而且八卦很多~~~看到最后，我心情莫名其妙很沮丧~~挫败感挫败感啊~~", "marks": "力荐"}
{"content": "时间与金钱转化成了经验.\n(此书翻译的很好)", "marks": "力荐"}
{"content": "这就是一本给程序员看的小说..而且是让程序员看得感觉各种郁闷的小说.小说的目的就是给大家灌输一个理念,一开始就想做大软件的往往不能成功", "marks": "推荐"}
{"content": "总共花了大概8个小时读完，翻译不易读。一群大牛花了大量时间金钱写出个“无用”软件。连高德纳都说写软件要比写书“难多了”。我还是很认可软件工程的。读这本08年出的书，感叹IT业发展还是很快的。20160114", "marks": "还行"}
{"content": "内容有意思，但翻译的不行，一点儿也不流畅。", "marks": "还行"}
{"content": "看Chandler就知道，等2.0版会好些，现在...省略800字", "marks": "较差"}
{"content": "该项目失败的根本原因：野心太大、太超前？其它原因：不断加人（？），高手们意见不一？\n对我的教训：不是每个需求都值得用电子设备来实现的。\n【该书的95%是断断续续在地铁上或排队时看的。看到一半时有些不耐烦，开始忽略一些段落。】", "marks": "推荐"}
{"content": "看之前以为是讲编程的，看了几页就发现这书只不过是以Chandler项目为线索讲述软件行业的 管理 问题。看了一遍也没太多新发现，不过故事还挺有意思的。", "marks": "还行"}
{"content": "我好像在看类似于《荒野生存》这样的纪实录", "marks": "力荐"}
{"content": "当历史书或科普书看看", "marks": "推荐"}
{"content": "太贵。", "marks": "还行"}
{"content": "做软件难", "marks": "力荐"}
{"content": "开源项目的墓志铭么算是，巨多概念或思想异常清晰地渗透其间，且听作者娓娓道来。。", "marks": "推荐"}
{"content": "一个天才的软件项目，是如何陷入噩梦般的开发和跳票，最终湮没无踪的。", "marks": "还行"}
{"content": "代码不值钱，但它常告诉你下一步该怎么做！\n别陷入到无谓的争论当中去。", "marks": "推荐"}
{"content": "很真实的软件项目开发故事", "marks": "力荐"}
{"content": "原著很好，翻译很糟。", "marks": "推荐"}
{"content": "比较有趣的历史", "marks": "还行"}
{"content": "挺让人郁闷的一本书，当初看的英文版就更加郁闷，基本上是跳着看的。当然也有不少收获，里面有自己曾经犯过的错误，甚至有些错误至今还在不断的犯:P\n另外一个发现是译者是个微软控，呵呵~", "marks": "还行"}
{"content": "梦断代码，多年前看的，整理笔记，把纸质笔记转为电子的，好书。", "marks": "力荐"}
{"content": "翻译很好。学到的也很多。至少知道原来维基百科和维基解密真的是不一样的。", "marks": "推荐"}
{"content": "IT史记不可或缺的一章", "marks": "力荐"}
{"content": "无感", "marks": "还行"}
{"content": "写得好，翻的好。软件时间如流沙；细节延展往往超乎想象。协作与沟通沟壑重重；坚守初心放不下梦断一场。可惜的项目，又怎不是后人的财富？", "marks": "力荐"}
{"content": "写软件难，程序员难当。从失败的项目中能学到更多的东西。那么多望其项背的大牛，用心血浇灌的软件之花，尚未盛开就枯萎了。不要用自己不熟悉的工具开发重要的项目。", "marks": "推荐"}
{"content": "都是老生常谈的东西，一小时翻完了，软件开发就是太不可捉摸，十年，二十年后也不会有什么变化。", "marks": "还行"}
{"content": "好书！内容好，文笔好，翻译好。作者引经据典，妙笔生花。译者信手拈来，举重若轻。读至精妙处，每每为之击节。这几天一直在读，至深夜而手不释卷。 此书基本上不属于技术类书籍，但我觉得应是程序员所乐于见到的故事和文字。严重推荐给曾经是程序员或者仍是程序员的同学们。 附： 本书英文版网站：http://www.dreamingincode.com/ 中文版网站：http://www.dreamingincode.cn/ 书中主角Chandler项目网站：http://chandlerproject.org/", "marks": "推荐"}
{"content": "南图借的.\n简单翻了翻, 没有仔细看.", "marks": "较差"}
{"content": "蛋疼的程序员，除了挣扎还是挣扎", "marks": "推荐"}
{"content": "各种完美理想凑成的悲剧", "marks": "力荐"}
{"content": "像是在看自己的过去、现在、未来~", "marks": "力荐"}
{"content": "不可掌控的复杂", "marks": "推荐"}
{"content": "成者为王败者寇...", "marks": "还行"}
{"content": "陷入沼泽般的无力感", "marks": "推荐"}
{"content": "翻译非常好.", "marks": "推荐"}
{"content": "小说式的软件开发之旅", "marks": "力荐"}
{"content": "嗯，开发一款软件的艰辛历程啊...开发人员是如此的牛气哄哄，创意是这样的眼前一亮..却也没能逃脱软件开发的油坑..", "marks": "推荐"}
{"content": "软件开发总是把简单优美的愿景细细分解，分成数以百万计的实现细节、接口选择和妥协折中。\n第9章和10章很精彩。1. Smalltalk之父Alan Kay关于对象的观点：信息和需要用来解释和操作信息的代码同行同止，像细胞带着DNA封包移动一般。用轻便的细胞状对象包裹例程和数据。2. 拉尼尔的观点：我们的神经系统所了解的世界，并非基于单点测量，而是基于表面测量。基于可能性而非确定性。", "marks": "还行"}
{"content": "真实的案例总是吸引人的，无论成功还是失败的。书里有丰富的参考文献和引用，都够我再去好好看一阵。5星给原版，3星给翻译。我决定再回头去把英文版看一遍。", "marks": "推荐"}
{"content": "与其做半成品，不如做功能减半的优质品。忘记过去者，必重蹈覆辙。\n时间总会比想象中用的多。", "marks": "推荐"}
{"content": "书名应该改为一群牛人是怎么把事情办砸的.呵呵.是有不少教训要吸取的.一个是要量力而为,一个是要懂得控制.难道是自己看的电子版的原因吗,感觉比较啰嗦.", "marks": "还行"}
{"content": "一本消遣的IT读物；自己的功力读起软件工程的书，还是不太够呀", "marks": "推荐"}
{"content": "都是泪", "marks": "推荐"}
{"content": "一个应用级的项目要做多年，不管多么伟大一定会死掉。如果是底层系统还可以，上层应用唯快不破。这是互联网的荣耀，传统软件的吊唁。", "marks": "还行"}
{"content": "真难啊，大牛太多了也是一场灾难。看完之后真有“寰球同此凉热”的感觉。", "marks": "力荐"}
{"content": "权当野史读读。", "marks": "推荐"}
{"content": "其实，项目这么混乱怎么成功呢。", "marks": "推荐"}
{"content": "拿起来就放不下的感觉。一口气读完。", "marks": "推荐"}
{"content": "编年史", "marks": "力荐"}
{"content": "买来两年终于找时间把这本书看完了", "marks": "推荐"}
{"content": "软件工程一直是一个很神奇的东西，即使有《人件》、《人月神话》之类的神作。但是全能的软件开发之道始终无人发现。软件之难，只有做软件的人才知道。但对于天性乐观的程序员而言，软件之难有时也是一种乐趣。", "marks": "推荐"}
{"content": "上周从布满灰尘的书堆中无意找出这本书，发现没看过，正好《认识电影》看了一半，想换换口味，这周每晚改看这本书。看了一小半，可谓惊喜不断啊——先是发现是讲open source的，不一会看到python登场，然后是wxPython，昨天居然看到zope和ZODB都出来了。\n一个多月的时间，chandler仿佛已经变成了我亲身参与的项目，尽管书名已经昭示了最终的结局，看到最后仍不免黯然神伤。前两天上 http://chandlerproject.org/ 下载了chandler在机器上安装用了一下，就算对所有曾经的远大理想、辛勤付出的一点致敬吧。", "marks": "力荐"}
{"content": "这书的作者废话也很多...", "marks": "还行"}
{"content": "很有思考价值。另外一个我喜欢Chandler的原因是Netscape.", "marks": "力荐"}
{"content": "非常棒的一本书，一个故事，一场梦", "marks": "力荐"}
{"content": "啰哩吧嗦骗稿费，老生常谈已过时", "marks": "很差"}
{"content": "没有银弹，软件是无法解开的Gordian knot", "marks": "推荐"}
{"content": "此书是一段对chandler项目的记录，从中，作者恐怕更想通过这样一个实例，讨论软件工程亦或软件管理的方方面面。作者也没有那么高明的建设意见，它只是再次清晰的告诉大家，软件所面临的诸多困难与混乱。", "marks": "还行"}
{"content": "追随着书经历了一款软件的开发，追随着书了解了软件历史的变迁......是知识也是经验", "marks": "推荐"}
{"content": "期望有点高，读后才知本书内容并不是我自以为的样子。书中的内容让我印象深刻，久久难忘。那么多优秀的人才投入了那么多的精力和金钱，最终项目却像梦一般幻灭。即便是没有参与过开发项目的经验，通过本书也可体会到程序开发遇到的种种挫折与无奈。", "marks": "推荐"}
{"content": "什么都想做的最后是什么都做不了", "marks": "推荐"}
{"content": "chandler远不如Duke Nukem Forever来的给力，希望作者籍此写这本书的续集。", "marks": "力荐"}
{"content": "有种苍凉的感觉。。。", "marks": "力荐"}
{"content": "这个故事，有那么令人震惊么？我觉得挺正常的。", "marks": "力荐"}
{"content": "深有同感啊，为了项目的成功，大家天天疲于奔命，用户还不一定认可你的努力。很好的印证了人月神话。", "marks": "推荐"}
{"content": "当小说看也好", "marks": "推荐"}
{"content": "终于知道我的项目做一个失败一个的原因了", "marks": "力荐"}
{"content": "工程还是文学？科学还是艺术？没有答案。软件的复杂性不是一种可移除的品质，结论还是“没有银弹”。一群梦想改变世界的人，一个项目6年半时间，失败。细述那个年代那群人对软件的梦想，坚持，争辩，这部代码史让人感动的落泪。", "marks": "力荐"}
{"content": "以Chandler产品开发为叙述主线，回顾计算机技术发展史。激发软件开发是工程实践还是艺术创作的思考？人类在技术中又如何“自娱自乐”呢？", "marks": "推荐"}
{"content": "满书都是互联网的大牛！", "marks": "推荐"}
{"content": "只能感叹软件工程的复杂!", "marks": "推荐"}
{"content": "不知道是翻译的问题还是原书的写作风格就这样，总觉得不太好读", "marks": "推荐"}
{"content": "很多东西对我来说都挺有趣的。。", "marks": "推荐"}
{"content": "某日，趴在书店读完的", "marks": "推荐"}
{"content": "做一个创新的软件项目真难，风险太大。需求的优先级，技术架构的选择，决策的时效性，太过于乐观的想法，良好的项目计划，自下而上还是自上而下的计划。", "marks": "推荐"}
{"content": "http://www.gtdstudy.com/?p=617", "marks": "力荐"}
{"content": "纠结的历史", "marks": "还行"}
{"content": "也许是翻译的糟糕吧……\n也许是文化背景有差异吧……", "marks": "较差"}
{"content": "快速翻了下，讲的是一群美国牛人用了3年多时间开发邮件，任务，日历管理系统，结果还失败了。有空的话当小说看还可以，要所用的话需要读者的领悟能力。", "marks": "还行"}
{"content": "不是很好...", "marks": "较差"}
{"content": "这就是传说中的 ....不吐槽了。", "marks": "较差"}
{"content": "工具書", "marks": "推荐"}
{"content": "快速翻阅了一下，里面讲到了很多细节，由于iBatis上手是很快的，故此书可作为细节参考，目前变身为MyBatis，更简洁了", "marks": "推荐"}
{"content": "讲解了ibatis2，内容有些过时，但是从中可以了解到作者关于ibatis的一些设计理念，故多给一星。", "marks": "推荐"}
{"content": "图书馆有", "marks": "推荐"}
{"content": "这本书其实有点老了，讲的还是iBATIS 2的东西。不如直接看官方文档，现在改名叫MyBATIS了", "marks": "还行"}
{"content": "工具书，ibatis作者亲作，全面熟悉ibatis语法", "marks": "还行"}
{"content": "入个门还是不错的选择", "marks": "还行"}
{"content": "细节丰富，凡是都用程序和例子说话，难得的实践派写书风格。对语法认识细致入微，所有地方都体现出作者反复推敲的细致作风。实为我学习的榜样。", "marks": "推荐"}
{"content": "书中借 javascript 来探讨语言的本质，讨论了 js 的 OO / 函数特性 / 动态特性。难得有朴素地分析语言特性的书，可惜文字有点拖拉，内容有点琐碎。如果是学 js，我更推荐《JavaScript语言精粹》", "marks": "推荐"}
{"content": "果真是一本硬书！！！强烈推荐 @竹子的那个叶 @祥鹏U_U", "marks": "力荐"}
{"content": "javascript 的函数式编程分析的比较深入、实用。", "marks": "推荐"}
{"content": "只说一句话，这本书是目前所有javascript的书中讲的最深的，无论国内还是国外。", "marks": "推荐"}
{"content": "难得一见的有思想的国产书。", "marks": "力荐"}
{"content": "如果是菜鸟，写些例子，如果是老鸟，直接看这一本，其他的js都不用看了！", "marks": "力荐"}
{"content": "难得的原创技术书，作者在JavaScript方面功力深厚，对多种编程语言也是融会贯通，在讲解JavaScript面向对象、函数式编程、闭包等方面相当深入。\n这本书的问题是没有照顾初学者，作者自己讲的很爽，却没有考虑别人是否能听懂，读起来有些吃力。", "marks": "推荐"}
{"content": "今天还在看到有人在给javascript推初学者荐这本书，我倒觉得不合适。。。好书当然是好书", "marks": "力荐"}
{"content": "国人写的最好的javascript方面的书", "marks": "推荐"}
{"content": "值得反复阅读", "marks": "力荐"}
{"content": "这本我还吃不透", "marks": "推荐"}
{"content": "不错，但就单纯学习javascript语言而讲，没有什么比看crockford的书，听他的课更好的了，来龙去脉更清楚简单。", "marks": "推荐"}
{"content": "重点看中间的那几章内容就行了，其它部分过于啰嗦\n\n\n", "marks": "推荐"}
{"content": "写得不错", "marks": "力荐"}
{"content": "JavaScript的引擎盖下", "marks": "推荐"}
{"content": "神神叨叨，啰啰嗦嗦。", "marks": "较差"}
{"content": "当年觉得老周的这本书有点絮叨，现在在ES6和TS的翻译结果中看到了这些絮叨，发现了严格OO模型模拟的价值。", "marks": "推荐"}
{"content": "国内讲解JavaScript比较深入的一本书，最后还讲述自己设计的一个JS开源框架，推荐阅读。", "marks": "推荐"}
{"content": "感觉写的比较绕，很多例子都太复杂，想说明的东西其实不是那么深入", "marks": "还行"}
{"content": "2008年的书籍不简单！不简单的啊", "marks": "还行"}
{"content": "很不错的一本书", "marks": "力荐"}
{"content": "佩服作者如此严密，细致的分析，可惜有不少比较模糊，可能不久就忘记了，但是还是了解了很多另一范畴的知识！！", "marks": "力荐"}
{"content": "国内高手的经典。推！\n至于文字风格，见仁见智了，学到东西是王道。", "marks": "力荐"}
{"content": "看一遍不够。", "marks": "力荐"}
{"content": "国内几个非常强悍的js牛人之一.书不适合入门看.探讨的话题比较高级.但是很深入而且有独特的见解.值得细细品味.", "marks": "力荐"}
{"content": "个人觉得不够老外专业，阐述的不如HJ的深入浅出，卡在当中", "marks": "还行"}
{"content": "晦涩且毫无重点", "marks": "较差"}
{"content": "太难，这辈子不知道能不能看懂。", "marks": "力荐"}
{"content": "入门书，读完前半部分，很详细。", "marks": "推荐"}
{"content": "一位老师与一个语言的因缘，羡慕。好书，推荐。", "marks": "力荐"}
{"content": "讲的很深入，有些东西还不能完全理解，有时候要读好几遍都", "marks": "力荐"}
{"content": "因为此书而喜欢上了JavaScript", "marks": "力荐"}
{"content": "想再读一遍", "marks": "推荐"}
{"content": "javascript理论研究很透彻", "marks": "推荐"}
{"content": "infoq有迷你书", "marks": "力荐"}
{"content": "不太符合我的口味，介绍了一些语法方面的细节。", "marks": "还行"}
{"content": "总体还行，要是语言再精辟一些就好了。", "marks": "还行"}
{"content": "我觉得看这个书，还不如看看别的编程语言，结合起来理解更简单。", "marks": "还行"}
{"content": "爱民老师的大作，虽然还是有点厚，但内容绝对的干货，尤其是解了好多JavaScript的坑。", "marks": "推荐"}
{"content": "前面几章很不错，不过说实话，后面介绍那啥QOMO框架就有点二了。", "marks": "推荐"}
{"content": "道行太浅,啃的牙疼", "marks": "力荐"}
{"content": "08年出版的书，很多内容放在今天看还是比较新，包括对函数式的阐述，动态特性等。作者角度独特，深入JavaScript语言本身的设计思想。时常翻读，都能有所收获。", "marks": "力荐"}
{"content": "这是一本真正讲语法的书，作者对javascript的语法分析娓娓道来，看后豁然开朗，非常好", "marks": "力荐"}
{"content": "说实话以前很喜欢这本书,但是最近半年来,呵呵,觉得写的过于深奥了,简单的事情被写得巨复杂,不过对作者的研究热情十分佩服,听说作者去了阿里系做架构,唉...国内喜欢研究程序的都被弄去做架构了,可惜可惜!", "marks": "还行"}
{"content": "把这本书他讲历史和扯淡自己的部分去掉。某些地方讲得还不错，深入。", "marks": "推荐"}
{"content": "挺好的书，学到很多深入的东西", "marks": "推荐"}
{"content": "国内大师的书，暂时无法通懂，先收藏再说。。", "marks": "推荐"}
{"content": "不知道为什么没怎么看懂~也许太过精髓了。", "marks": "还行"}
{"content": "喜欢看资深作者对于自己领域技术的思想结晶。让我了解了他眼里的javascript函数式语言的特性。", "marks": "推荐"}
{"content": "难得的一本从语言角度而不是从如何与DOM、CSS结合讲解的好书，读完后可对JS的内部机制有个比较深刻的理解。这本书细致入微地对JS进行了剖析，解释了JS很多诡异令人迷茫的特性，其中分析比较原型继承和类继承的那一部分更是令我受益匪浅，但其他却是特色不足，尤其颇受称赞的函数式部分，我认为写得还是太浅，而且可能是作者笔力不足，很多概念绕来绕去依旧没说清楚，比如闭包一词，完全可以画一条作用域链就能解释清楚，作者却偏偏引入诸多额外的概念。如果看过SICP、EOPL，使用过一两门FP语言，或者对Interpreter有过深入了解，此节完全可以扫读过去。个人见解是，这是一本JS本质论的好书，但离大部分评论所说的”语言本质论”还有很大一段距离", "marks": "推荐"}
{"content": "对JavaScript语言的语义做了精细的分析，", "marks": "推荐"}
{"content": "比较深入的一本书，适合中高级JS开发者", "marks": "推荐"}
{"content": "只看过其中的一部分", "marks": "推荐"}
{"content": "看了很多关于js的书，感觉这本带给我的收获最多。在阐述js本质。不过在说到原型方面的知识，我个人觉得本书是有误。", "marks": "力荐"}
{"content": "透彻分析JavaScript语言的语源, 各种语言特性由来. ", "marks": "力荐"}
{"content": "讲了大量的有语言歧义的语法，虽然很Cool，但是一般的开发人员不一定用得着，但是想深入了解的话，这些知识还是必要的。", "marks": "推荐"}
{"content": "这本书太硬了，内容丰富质量殷实，扔出去都能把玻璃砸坏……", "marks": "还行"}
{"content": "很不错的一本书，第二版已经出了，力荐啊", "marks": "力荐"}
{"content": "不止告诉你是什么，还会让你知道为什么。", "marks": "推荐"}
{"content": "周末把它看完了，写的不错，把函数式编程介绍的很清楚，关键是把闭包扯的很清楚，不错，值得一看～～～", "marks": "力荐"}
{"content": "书还是不错的，把函数编程讲的比较清楚，关键是把“闭包”扯的最清楚的一本书了，建议大家也可以看看。书比较短，看着比较快的。", "marks": "力荐"}
{"content": "层次不清，条理混乱。作者想讲引擎实现，讲着讲着又讲自己的感悟，又结合什么实例，又扯到分类法则，又说其他语言，来来回回讲不清楚自己想说什么。建议是，如果想讲关于JavaScript的语言特性的，就讲语言特性，别扯实现；想讲实现，就老老实实把实现讲清楚；想讲分类和特征，就好好讲分类，时刻注意自己在讲什么。读完给我的感觉就是作者顺着自己的思维一股脑的往外倒，好想没用心梳理过一样，比之国外编写的著名书籍，诸如《You don't konw js》之类的，条理十分混乱。不建议将这本书作为什么深入的书，看这本书要做好和作者混乱的叙述做斗争的准备。", "marks": "较差"}
{"content": "如果只能看一本js的书，那么看这本书。", "marks": "力荐"}
{"content": "国内少有的佳作！cool。对理解 JavaScript 很有帮助", "marks": "力荐"}
{"content": "dangdang", "marks": "力荐"}
{"content": "并没有看懂，打算工作一年后再去看。", "marks": "推荐"}
{"content": "一本扯C语言轶事的书，可以从中领悟到你所常用的那些东西为什么被发明出来，很棒。", "marks": "力荐"}
{"content": "牛逼的书，对于指针和数组的讲解透彻（Chapter9、10）需要重读，需要通读整本书", "marks": "推荐"}
{"content": "指针那三章需要细读。", "marks": "力荐"}
{"content": "整体化的一本书：从编辑，编译，链接，运行的整个过程的细致分析", "marks": "力荐"}
{"content": "书很好. 翻译一般. 校对不负责任.", "marks": "推荐"}
{"content": "没读完，翻译扣一分", "marks": "推荐"}
{"content": "TCPL让你认识C，这本书才能让你开始了解C。", "marks": "力荐"}
{"content": "略话痨。", "marks": "推荐"}
{"content": "無愧於名號！插草標賣身推薦，值得反覆重溫。", "marks": "力荐"}
{"content": "挺有意思的。\n第四章和后面有两章，专门讲数组和指针。", "marks": "力荐"}
{"content": "作者太有趣了!!!", "marks": "力荐"}
{"content": "不知道原版怎么样，但这个中文读着很别扭……", "marks": "还行"}
{"content": "一个有意思的现象，此书中关注的问题，大多是C++的相关书籍没有关注的问题。但事实上里面的许多问题在C++中同样存在。orz", "marks": "力荐"}
{"content": "对c 本身有模糊的地方 值得一读   感觉混乱的地方 总有历史原因", "marks": "力荐"}
{"content": "看了几次终于都看完了", "marks": "力荐"}
{"content": "新版的这么贵~", "marks": "力荐"}
{"content": "翻译不通顺，内容凌乱，绝大部分内容都不会遇到。\r\n不推荐购买。", "marks": "较差"}
{"content": "翻译真挫。。。", "marks": "推荐"}
{"content": "1，各种黑历史真好看，八卦之火熊熊燃烧 2，讲了各种c的缺陷，推荐go用户好好体验，很多都在go里做了修正 3，内存跟指针那几章讲得很透彻", "marks": "力荐"}
{"content": "只是编程的手册，有用的不多", "marks": "推荐"}
{"content": "每隔一段时间可以翻出来回味一下。", "marks": "力荐"}
{"content": "不多说，好书一本", "marks": "力荐"}
{"content": "C神书之二。", "marks": "力荐"}
{"content": "技术八卦很有趣，翻译得一般", "marks": "推荐"}
{"content": "Sun系统下C专家编程", "marks": "还行"}
{"content": "是真正学C语言应该读的第三本书，非常不错的C语言进阶书\r\n看的时候，特别有当年看Effective Java的感觉，作者写得也很幽默，", "marks": "力荐"}
{"content": "其实我还不懂C语言", "marks": "力荐"}
{"content": "没有给满分是因为翻译的稍微有点差…… 比如把栈叫“堆栈”，直看得人心惊胆战…… 不过总体内容很好～", "marks": "推荐"}
{"content": "不得不说，八卦是此书的最大两点，很有爱，哈哈", "marks": "推荐"}
{"content": "用来重新掌握C很好", "marks": "力荐"}
{"content": "上好的书，值的有空反复品读。境界不够，八卦看的多，技术上还是隔了层。", "marks": "力荐"}
{"content": "美丽的文字，美丽的程序", "marks": "力荐"}
{"content": "原来是这版... \nchina-pub上买了本比旧书还挫的,居然有空白页!! - - 程序员也看不懂无字天书啊.\n不过很快的帮我换了,弥补了我这个初次购书与china-pub小小程序员的心灵...\nPS:听说翻译的有点挫,弱弱的提前不爽了...  - -\n20110918update 果然很挫… 好书被翻译和排版毁了", "marks": "还行"}
{"content": "就像书里说的：所有的C程序都做同一件事，观察一个字符，然后啥也不干。", "marks": "力荐"}
{"content": "翻译的比较差，希望后来的同学直接看英文版的", "marks": "较差"}
{"content": "怎么读声明 / 数组和指针的区别 / 还有许多小故事, 小技巧", "marks": "力荐"}
{"content": "必看的经典，书中经常谈论到几十年前的计算机领域的趣事，这些也是本书的一大亮点", "marks": "力荐"}
{"content": "非常好的c中级书，少有这个定位的书籍。值得一读", "marks": "力荐"}
{"content": "内容很丰富，介绍了很多c语言“不为人知” 的秘密和奇闻异事，可惜翻译不行。", "marks": "推荐"}
{"content": "每章后面的小故事很有意思", "marks": "推荐"}
{"content": "各种坊间传闻，不少拓展的和c无关却和计算机基础相关的内容", "marks": "推荐"}
{"content": "类容少老，但非常有价值", "marks": "力荐"}
{"content": "这两天写那么多C代码，在写之前一直看着书，主要看指针和数组，存储和链接以后再看", "marks": "推荐"}
{"content": "C语言进阶读本，应该在K&R之后读。", "marks": "推荐"}
{"content": "计算机界的八卦，这名字很是坑爹。", "marks": "推荐"}
{"content": "作者的YY能力很强大。", "marks": "推荐"}
{"content": "小故事和历史很有趣", "marks": "推荐"}
{"content": "我在阅读它的时候把它作为“补漏”，书中的绝大部分内容都已经理解得很透彻了。尽管内容有些陈旧，这是市场上极少的，对“程序设计”分析得如此到位的一本。", "marks": "力荐"}
{"content": "c专家编程", "marks": "力荐"}
{"content": "一本经验集。 重点阅读 声明 和 数组指针 的部分即可。", "marks": "推荐"}
{"content": "翻译有不少问题，建议读英文版", "marks": "力荐"}
{"content": "超有趣的一本书！准备面试和考试都不必看。程序员最佳沙发读物。", "marks": "力荐"}
{"content": "TP312/1800=2", "marks": "推荐"}
{"content": "恩，我得说这本书写的很八卦，写了很多C发展过程中的小故事，很有意思。写作风格轻松幽默，思想深远。", "marks": "力荐"}
{"content": "就像小时候听着老一辈给我们讲他们的故事一样", "marks": "力荐"}
{"content": "不可不读的一本关于C的书籍！", "marks": "力荐"}
{"content": "非常轻松 一天读完了 果然还是有经验的好 ", "marks": "力荐"}
{"content": "读完进入新境界", "marks": "力荐"}
{"content": "如此有趣的技术书......", "marks": "力荐"}
{"content": "比较有趣", "marks": "推荐"}
{"content": "C经典，饶有趣味", "marks": "推荐"}
{"content": "菜鸟快速建立c编程规避方案的好书", "marks": "力荐"}
{"content": "还不错的书，不过有少许地方过时了，C99啦。", "marks": "推荐"}
{"content": "C语言太难啦", "marks": "力荐"}
{"content": "《C陷阱与缺陷》，《C专家编程》，《你必须知道的495个C语言问题》，对我而言C语法三剑客。", "marks": "力荐"}
{"content": "看了前几章，蛮有趣的说，这是那些渴望走向孔乙己式程序员必备的宝典！", "marks": "推荐"}
{"content": "2013年12月某天读完\n5星!", "marks": "力荐"}
{"content": "C经典，深入学习用。讲得很深，第5、6、7章将到了编译连接方面的知识。每章后面的“轻松一下”，很好的八卦。“附录A 程序员工作面试”题目也很经典", "marks": "力荐"}
{"content": "据说是面试必备。指针数组和数组指针讲得不错，关于线程的内存布局虽然只有一小节，不过很到位，另外对于类型系统的理解又加深了一点~   最后，我再也不想看C语言的书了，不管如何NB！ ", "marks": "力荐"}
{"content": "其实，第一个C语言程序是外星人写的。", "marks": "力荐"}
{"content": "回味无穷的大餐", "marks": "力荐"}
{"content": "指針", "marks": "推荐"}
{"content": "最爱，听作者絮絮叨叨讲技术，有时还会出现郭德刚说相声的幻觉，有趣又有料，还能更好么", "marks": "力荐"}
{"content": "有趣，够演艺的味道，还有不少题目可以耍花式", "marks": "推荐"}
{"content": "重读！", "marks": "力荐"}
{"content": "【重读】", "marks": "力荐"}
{"content": "4M => 2 => 3\n很多值得关注的地方, 关于数组和指针,值得看一看. 但是, 一本神品, 是无法在3天内看完的. 本书算精品吧.", "marks": "力荐"}
{"content": "全书有种很傲娇的赶脚。。", "marks": "力荐"}
{"content": "读完C语言程序设计应该读的书，受益匪浅", "marks": "力荐"}
{"content": "自打跟Python好上，两年没写过C代码了……要找工作了，看看吧，据说是本神书。", "marks": "力荐"}
{"content": "对于C语言的细节处有了更深理解，很赞的书，多读", "marks": "力荐"}
{"content": "呃，很显然我没读完……", "marks": "推荐"}
{"content": "有很多实践之后再读一遍这本书能学习到更多的东西", "marks": "力荐"}
{"content": "这本书基于（最烦这两字了）ANSI C，提出了很多实用的tip和技巧，是对深入理解C++的良好铺垫。你懂得C，所以C++不在话下。", "marks": "推荐"}
{"content": "先通读一遍", "marks": "推荐"}
{"content": "最主要的是讲了指针，很透彻。\n不过没有传说中翻译的那么神吧。没有找到外文的，有些东西只看翻译还是有点模糊。\n", "marks": "推荐"}
{"content": "\"Hack\"之书，通往远古。", "marks": "力荐"}
{"content": "有趣", "marks": "推荐"}
{"content": "讲c的起源和编码方式，还有一些 c 的使用技巧，有 c 语言基础看", "marks": "力荐"}
{"content": "是不是翻译的太差啊，很多地方看不懂，但即使是看懂的部分也让我受益匪浅。", "marks": "推荐"}
{"content": "C的三本套装经典之一，必读", "marks": "力荐"}
{"content": "不停用药。", "marks": "力荐"}
{"content": "强烈推荐这本书，虽然年代有些久远了（按书中描述应该是90年左右撰写，其时Java语言还未出世）但还值得一读，需要一点系统和编译的知识，字字珠玑，受益匪浅。值得再次研读。", "marks": "力荐"}
{"content": "让我理解了很多C语言的原理", "marks": "力荐"}
{"content": "读完喘口气", "marks": "力荐"}
{"content": "八卦与技术结合 作者俏皮", "marks": "力荐"}
{"content": "看完之后有一些深入认识。", "marks": "力荐"}
{"content": "必读经典", "marks": "力荐"}
{"content": "第一遍尚不能完全理解，值得第二遍。", "marks": "推荐"}
{"content": "20年前的书，现在看来还是很nb。而且这本书中有一些有意思的吐槽，我最喜欢的一个——“人人都知道调试比第一次编写代码要难上一倍。所以如果在编写代码时把自己的聪明发挥到极致，那么在调试时又该怎么办呢”", "marks": "力荐"}
{"content": "终于明白K & R当时设计C语言时是如何纠结的～", "marks": "力荐"}
{"content": "好书，整本书写得感觉很幽默，很有启发！内容上，基本上都是我常犯的错误以及理解上的误区，所以我由衷的感谢这本书", "marks": "力荐"}
{"content": "非常精彩", "marks": "力荐"}
{"content": "幽默", "marks": "力荐"}
{"content": "很好很详细", "marks": "力荐"}
{"content": "骇客指南。", "marks": "力荐"}
{"content": "这本书再加上那本免费电子书《C faq》，那些C的小猫腻就掌握得差不多了，绝对收益匪浅。", "marks": "力荐"}
{"content": "2014-04-11", "marks": "推荐"}
{"content": "是不是c的书籍都被这个徐给翻译坏了。原版应该不错。", "marks": "推荐"}
{"content": "nice！！！\n算是TCPL的参考书了。", "marks": "力荐"}
{"content": "非常好的一本书 比如字符的贪心 受益匪浅 ", "marks": "力荐"}
{"content": "系统分析了c标准化过程中的优缺点，很多经典案例和故事，很有趣。", "marks": "力荐"}
{"content": "书有些古老了，现在的编译器已经很好地解决了书中提出的大部分陷阱和缺陷，诸如总线错误之类的BUG也被修正了，不过这些经典的思想还是值得好好拜读一下的", "marks": "力荐"}
{"content": "有料且有趣", "marks": "力荐"}
{"content": "经典必看，虽然我不喜欢C……因为指针太烦了", "marks": "还行"}
{"content": "还是不错的。就是稍微有点老了", "marks": "力荐"}
{"content": "很好的书，如果工作语言是c，可以反复看几次", "marks": "推荐"}
{"content": "受益匪浅。尤其讲声明和数组的那几章，太过瘾了。", "marks": "力荐"}
{"content": "c经典", "marks": "力荐"}
{"content": "什么时候开始第二遍？", "marks": "力荐"}
{"content": "每章最后一节“轻松一下”很有意思", "marks": "推荐"}
{"content": "很实用的书，讲了很多实际问题", "marks": "力荐"}
{"content": "一些C开发过程中得常见问题，还是比较经典的。", "marks": "推荐"}
{"content": "Tricks forever.", "marks": "推荐"}
{"content": "挺难的", "marks": "力荐"}
{"content": "我现在还没专家呢", "marks": "力荐"}
{"content": "即使看过《C陷阱与缺陷》，这本书也值得阅读。这本书更为全面地介绍了使用C语言编程时的各种常识。另外，还有很多轻松的笑话和调侃，很有意思。", "marks": "力荐"}
{"content": "有启发性", "marks": "力荐"}
{"content": "我对每一章后面的轻松一下更有兴趣，o(∩_∩)o 哈哈", "marks": "力荐"}
{"content": "作者将C语言融入工作实践中,讲述了一些有趣的故事.\n除了深入讲解指针外,还分析了C语言的声明,指针和数组的关系.也讲解了一些链接,栈等底层知识.\n\n非常有趣,能感受到活蹦乱跳的C语言 :D", "marks": "力荐"}
{"content": "不得不服，一本真正有趣的关于C语言的书，不过不只是纯粹讲语言的，还讲了计算机的一些底层知识，编译器，C语言的发展，还有一些有趣的事情。", "marks": "力荐"}
{"content": "很好的阐释了内存管理和指针的应用，每一个C语言学习者都值得读一下", "marks": "力荐"}
{"content": "有感于作者幽默灵巧的文笔，类似于C的犀利和灵活。", "marks": "推荐"}
{"content": "除了翻译的不好，这绝对是学习C 的第二本书~", "marks": "力荐"}
{"content": "M", "marks": "还行"}
{"content": "很好的一本书", "marks": "力荐"}
{"content": "好老的c", "marks": "还行"}
{"content": "很有意义并且很有趣的一本书。", "marks": "力荐"}
{"content": "写的蛮有意思，段子很多，很喜欢。", "marks": "力荐"}
{"content": "经典的书，看了两遍，还得结合实际工作，继续研究体会", "marks": "力荐"}
{"content": "可以了解c语言的前世今生。。其实是一本故事书，讲了很多故事，还有很多有趣的题目，，但我还是坚决一题也没做。。", "marks": "推荐"}
{"content": "果然是专家书籍，薄薄一册看完后收益良多。特别是对C语言复杂的声明的理解、数组与指针的区别、Interpositioning问题、Segmentation fault问题等，有了更为清晰的认识。有了一定的C语言工程经验后，极力推荐学习。", "marks": "力荐"}
{"content": "八卦和拾遗", "marks": "推荐"}
{"content": "原書很好，翻譯的是shit。", "marks": "较差"}
{"content": "一个下午不知不觉就看完了，好书值得推荐", "marks": "力荐"}
{"content": "翻译的真不好啊", "marks": "较差"}
{"content": "真的很不错", "marks": "力荐"}
{"content": "本科时候看得，不知道啥时候可以再看一遍", "marks": "力荐"}
{"content": "本书列举了很多代码细节中的各种问题，这些宝贵的经验对初学者很有用，作者居然都是用开源代码来举例，这得花多少时间去找啊。不过本书主要是针对基于C/C++的系统开发，其中的很多问题在高级语言中并不存在", "marks": "力荐"}
{"content": "翻译不行", "marks": "推荐"}
{"content": "翻阅，其中关于代码质量测量的内容非常好", "marks": "力荐"}
{"content": "有点泛", "marks": "推荐"}
{"content": "有些凌乱，感觉不如前作code reading，也可能是我功力还不到", "marks": "还行"}
{"content": "有点小意思的API  啦啦啦", "marks": "推荐"}
{"content": "老了", "marks": "还行"}
{"content": "看过maps部分，没有看earth部分。可能需要再看看。 需要了解一下COM", "marks": "推荐"}
{"content": "脑残啊 买这书。。。。", "marks": "很差"}
{"content": "introduction to google hacking", "marks": "推荐"}
{"content": "如果又专门正对源码本身的分析会更加又可读性，本书属于应用级别的", "marks": "推荐"}
{"content": "内容还可以，但是有些API调试不行", "marks": "还行"}
{"content": "绝对不适合初学者，作为工具书其实也一般，不过这本书的好处就是有些东西讲的很实质性，运作机制讲的比较清楚，拿最基础的显示对象容器和显示对象来说，就比一般的书讲的更透", "marks": "还行"}
{"content": "很实用，但是不是入门教程，部分章节需实践，慢慢消化。", "marks": "推荐"}
{"content": "想什么时候买这本书\r\n看的是PDF文件\r\n书的翻译跟出书的不是同一个人\r\n后面的十章跳着看了\r\n如果这些书跟小说一样就好了\r\n－－\r\n可是我这段时间不是很爱看小说\r\n那么什么时候去买来好了\r\n", "marks": "推荐"}
{"content": "实战作战方案工具书，类似于三十六计", "marks": "推荐"}
{"content": "现在不用了。。。需要的时候再翻吧", "marks": "推荐"}
{"content": "比较不错的AS3入门书，既然是cookbook，买一本来作为参考手册比较好。版本有点好，有些内容现在已经不一样了。", "marks": "推荐"}
{"content": "很好的as入门书籍，例子很多", "marks": "力荐"}
{"content": "我还是不适合看这种一个个例子的书", "marks": "还行"}
{"content": "快速入门，很实用的书", "marks": "推荐"}
{"content": "此书在快速入门和实战方面还行，注重快速的解决问题，不适合做进一步的技术研究，总体评价一般。", "marks": "还行"}
{"content": "什么flash间传递，gc，socket闻所未闻啊，汗颜\n我只是随便看了一下，到底算是看过还是没看过呢，真纠结！！", "marks": "还行"}
{"content": "本书的英文版是我读的第一本AS3相关书籍，O'reilly Cookbook系列的一贯优点，讲述实现而又突出原理。", "marks": "推荐"}
{"content": "内容组织形式很赞~", "marks": "推荐"}
{"content": "翻译还不错..", "marks": "力荐"}
{"content": "适合做参考书", "marks": "力荐"}
{"content": "继续标记，也是一定要看的", "marks": "推荐"}
{"content": "相当实用的一本书。无论你技术高低都有益。很多实战技术", "marks": "力荐"}
{"content": "看过所有的源代码，作为api的示例可以看看，不错的一本书。", "marks": "还行"}
{"content": "这本的翻译还是挺好的，内容还算不错", "marks": "推荐"}
{"content": "O'REILLY 一如既往的好。只有电子文档，代码大概都敲了，本说买翻翻，换了本算法概论。", "marks": "力荐"}
{"content": "推荐", "marks": "推荐"}
{"content": "对于当前的我还说需要多读书，很多内容已经不记得了，需要恶补一下，希望可能读一下这本书，谢谢", "marks": "推荐"}
{"content": "这本书最最大的谬误在于序言中说的适合本科生读！！！  要看懂的这本书，你首先得把金融学学得很好，不是期末考试前看看就能过的那种金融学，是纯数理金融学，各种数学模型；还要SAS学得很精通，不是随便只会做个方差分析就能够看明白的。。", "marks": "推荐"}
{"content": "优点： Linux的方方面面，C编程。可以当做手册来用了。。\n缺点： 缺乏一种洞察力的展现，感觉就像隔靴搔痒，很多东西没有讲清楚。而且年代稍微久远一点吧。这个也不能算作缺点，因为受众群体不定", "marks": "力荐"}
{"content": "刚入就出第四版……", "marks": "推荐"}
{"content": "初看的话，第5章可以先跳过不看", "marks": "还行"}
{"content": "比较基础，Linux的API函数名张牙舞爪的。随书附带的驱动部分的示例程序貌似……哎。", "marks": "推荐"}
{"content": "Linux", "marks": "推荐"}
{"content": "感觉每方面都介绍了些，具体操作还得有一个项目贯穿起来。而书里的项目我不是很喜欢，囧", "marks": "还行"}
{"content": "这本书介绍很全面，曾经花了几周给它全面读了一遍。获益匪浅", "marks": "力荐"}
{"content": "入门，但似乎每次翻一翻都能新收获一些？", "marks": "力荐"}
{"content": "不愧是Linux方面的大牛写的书，写得非常不错，很适合Linux程序设计入门者阅读、收藏、查阅，强烈推荐！", "marks": "力荐"}
{"content": "LinuxC经典", "marks": "力荐"}
{"content": "很好，可惜不够详尽，听说unix环境高级编程更好一些。", "marks": "力荐"}
{"content": "讲解很细致，适合入门，算是一本笼统介绍Linux编程的书，很多细节还要自己去找答案。", "marks": "推荐"}
{"content": "嵌入式C/C++--后记：把它列在读过，实在是惭愧，真希望学好又玩好。", "marks": "还行"}
{"content": "还行", "marks": "还行"}
{"content": "很不错的linuxC编程书，大容量", "marks": "推荐"}
{"content": "讲的不痛不痒，看看还可以，价值不大。", "marks": "还行"}
{"content": "内容泛而不深，初学者可以读读", "marks": "还行"}
{"content": "现在觉得还是老外写的技术书籍不错啊。基础入门专用", "marks": "力荐"}
{"content": "API大全", "marks": "推荐"}
{"content": "涵盖linux下程序设计大部分内容，当然不是所有的章节都要读的，我只是阅读部分章节，有关内存、进程的章节，手头放一本作为参考，不错的。", "marks": "推荐"}
{"content": "在hdu的时候读的吧", "marks": "还行"}
{"content": "对于Linux下C编程挺好的。", "marks": "力荐"}
{"content": "全而杂，没有什么特别突出的地方", "marks": "还行"}
{"content": "目前只读了半本，提纲的结构组织的不错，例子很多，设计Linux下程序设计的各个方面。\n不过也只是本入门书，细节讲的比较少", "marks": "推荐"}
{"content": "还不错，入门的教材，可以看到开发过程中设计的大部分工具的使用", "marks": "推荐"}
{"content": "一本非常不错的Linux编程入门书，\r\nAPUE的简化版吧", "marks": "力荐"}
{"content": "好书是好书，不过技术稍微有点过时，跟不上时代。还有，总感觉封面是一肥一瘦，一高一矮，俩老外说相声。", "marks": "推荐"}
{"content": "每章都有代码例子，条理也很清晰，通篇API介绍，读起来还是很枯燥的，但不失为一本入门级的好书", "marks": "推荐"}
{"content": "写的非常赞，想要了解linux系统编程的话，应该没有更好的入门教材了。看完了感觉收获很大。", "marks": "力荐"}
{"content": "非常好的linux程序设计指南！", "marks": "力荐"}
{"content": "通俗易懂", "marks": "推荐"}
{"content": "覆盖面还可以，但每一点也太泛泛了。", "marks": "推荐"}
{"content": "面向底层的书籍，必须要把基础打好咯！", "marks": "力荐"}
{"content": "书比起APUE不是很深 入门linux编程还是可以的", "marks": "还行"}
{"content": "Linux编程入门必读！！", "marks": "力荐"}
{"content": "刚开始接触linux编程~~看的就是这本书...   我同学说这书是linux编程入门级很好的书籍，其实我觉得大部分章节都写得很不错...每一次看都会有些许收获，通读一两边是必须的   除了入门，还能作为平时的工具书使用...    从这本书开始linux编程之旅....    ", "marks": "力荐"}
{"content": "工具书，但感觉不如APUE。", "marks": "推荐"}
{"content": "各种知识点都有所涉猎，虽然不深，但可以给你一个良好的全局认识", "marks": "推荐"}
{"content": "刚开始看不懂，后来越来越觉得是好书", "marks": "推荐"}
{"content": "我读的是英文原版的，很赞，非常适合入门。中文翻译版没看过，所以不予置评。", "marks": "推荐"}
{"content": "可能更适合初学者，面广不深。", "marks": "推荐"}
{"content": "比较适合学习的入门书。", "marks": "力荐"}
{"content": "经典，读apue前最好读读这个", "marks": "力荐"}
{"content": "介绍了 linux 编程的各个方面，文件IO, 进程，线程，socket， 界面开发等。读过后能对linux 应用程序开发有个比较好的了解。有点遗憾的就是驱动程序那章，是基于2.4.x内核。不过这不是作者的错。 ", "marks": "力荐"}
{"content": "挺适合入门的一本书，适合快速看完。深度太浅。部分知识太旧，可以跳着看。", "marks": "还行"}
{"content": "写的很仔细。", "marks": "力荐"}
{"content": "css基础，看了一半。。。感觉很多东西相对已经过时了，CssZenGarden也只是单页设计。书本身也是典型的入门书，节奏慢，代码全。现在已经看不下去了。。。", "marks": "推荐"}
{"content": "看不下去了，是我太浮躁了么。。。", "marks": "推荐"}
{"content": "超级喜欢的书 同事都说我会抱着它睡觉", "marks": "力荐"}
{"content": "不符合中国国情", "marks": "还行"}
{"content": "要是出个HTML5+CSS3版本的就更好了", "marks": "推荐"}
{"content": "偏设计方面，技术方面有点老了。。粗略地翻了下", "marks": "还行"}
{"content": "靠，做美工的实在是太丧尸了  真后悔当年没好好学画画啊", "marks": "较差"}
{"content": "终于入手了，珍藏~~", "marks": "力荐"}
{"content": "沒有想象中那么好", "marks": "还行"}
{"content": "很好读的一本书，知识性、趣味性和深度都超过了一般的手册类书籍。", "marks": "推荐"}
{"content": "美！", "marks": "力荐"}
{"content": "一开始以为是讲标准的～其实不是系统的CSS教学，主要是讲设计思路，说到点子上了，看起来挺舒服不晦涩", "marks": "力荐"}
{"content": "值得写书评的书不多，这是一本，有时间准备写一篇。", "marks": "力荐"}
{"content": "这不是一本纯粹讲技术的书，也不是一本纯粹讲设计的书。这书提倡用另一种角度或者说不同一般的灵感来设计网站，但这种方式又不适用于当前的中国网站，所以，这书对现在的我来说并不太合适。", "marks": "还行"}
{"content": "直接去http://www.csszengarden.com/看看就可以了。", "marks": "还行"}
{"content": "不一样的角度，很有意思的书。", "marks": "力荐"}
{"content": "已经买来了.", "marks": "推荐"}
{"content": "卓越推荐给我的", "marks": "推荐"}
{"content": "和名字一样，有点虚", "marks": "还行"}
{"content": "等有了一定的CSS基础,再来读,主要是写设计思路.", "marks": "还行"}
{"content": "目前看还不错~", "marks": "推荐"}
{"content": "书里提供了很棒的思想，虽然表面看起来不实用~", "marks": "推荐"}
{"content": "刚在卓越订购还没到手", "marks": "推荐"}
{"content": "读得半生不熟，还是等有点美术功底再来读", "marks": "还行"}
{"content": "内容旧了点。", "marks": "还行"}
{"content": "CSS的经典书籍，很久以前看过的了……", "marks": "力荐"}
{"content": "Inspiring.", "marks": "推荐"}
{"content": "现在看来，书里是有些过时观点的。入门级。有了一些实践经验再回头来看这本书，并没有想要的震撼。设计上的思路和技巧都与时俱进了。", "marks": "推荐"}
{"content": "zengarden...清理网络浮躁", "marks": "推荐"}
{"content": "翻阅过，我能分类为Comic么？里面的设计画面确实漂亮，看着没技术书的感觉... ", "marks": "推荐"}
{"content": "挥洒灵感", "marks": "力荐"}
{"content": "在读此书的过程中，内心一直默默感叹：“IE真是罪恶之源！”。书中的Tips虽然很好，可是那些案例也未免太Ugly了些……", "marks": "推荐"}
{"content": "无比强大的书，做web设计的都应该买回来读，绝对值得读上好几遍", "marks": "力荐"}
{"content": "web专业人士的必读书", "marks": "力荐"}
{"content": "まあまあです，不看白不看，过时归过时，但是有些还是狠有参考价值的。", "marks": "推荐"}
{"content": "想感叹三件事 1.IE太难伺候 2.css hack真是劳动人民的智慧结晶 3.单从视觉效果css写得好不如P图P得好 顺便想吐槽一下009 那是如假包换的金阁寺。。。= =【技巧可以借鉴 具体功能能不能实现还是要在浏览器上试啊", "marks": "力荐"}
{"content": "如果你是一个只能通过“集中学习”来获得东西的人，建议不要读。这本书涉及到方方面面的知识，需要有功底的人查缺补漏的，当时由于出版时间比较长，你不可能获得所有的东西，但是你能从中获得你想象不到的思路。", "marks": "力荐"}
{"content": "一直要看的，终于down到了", "marks": "推荐"}
{"content": "本书作者是世界著名的网站设计师，书中的范例来自网站设计领域最著名的网站——CSS Zen Garden（CSS禅意花园）。全书分为两个主要部分。第1章为第一部分，讨论网站“CSS禅意花同”及其最基本的主题，包含正确的标记结构和灵活性规划等。第二部分包括6章，占据了本书的大部分篇幅。\r\n　　 每章剖析“CSS禅意花园”收录的6件设计作品，这些作品围绕一个主要的设计概念展开，如文字的使用等。通过探索36件设计作品面临的挑战和解决的问题，读者将洞悉主要的Web设计原则以及它们运用的CSS布局技巧，理解CSS设计", "marks": "力荐"}
{"content": "一般，比较适合初学者。", "marks": "还行"}
{"content": "使用CSS的后花园，读书的后花园。", "marks": "还行"}
{"content": "不错。虽然俺至今还是只学会了CSS的三脚猫功夫。", "marks": "力荐"}
{"content": "不太适合作为床头读物啊:(", "marks": "推荐"}
{"content": "虽然是一本老书了，但还是应该读一读", "marks": "力荐"}
{"content": "这种书就是一扫而过的。2007年的书，7年过去了，已经显得很老旧了。不是很推荐那些为现代浏览器做WEB前端设计的开发人员细看。", "marks": "还行"}
{"content": "这时候看依然经典不过时。很多结构思维方式值得学习", "marks": "力荐"}
{"content": "翻了一遍 收获了Dave Shea和他的网站 觉得需要多多实践了以后再回头来看", "marks": "推荐"}
{"content": "设计的差距。", "marks": "力荐"}
{"content": "禅！", "marks": "力荐"}
{"content": "没必要看书..去它网站就行了", "marks": "还行"}
{"content": "就算不懂技术的人也能看看，都是图片~", "marks": "推荐"}
{"content": "它只能告诉你鱼能吃,并且很好吃.", "marks": "还行"}
{"content": "初学适用，技术点比较少，解释神马是Css和Css可以做什么的，很多案例", "marks": "推荐"}
{"content": "不是CSS的入门的书籍，不适合我等码农，还是要找本入门的看看。", "marks": "还行"}
{"content": "的确经典！", "marks": "力荐"}
{"content": "上次见面时,我刚刚知道盒模型吧...", "marks": "力荐"}
{"content": "一年后重新审读，又有新收获~", "marks": "推荐"}
{"content": "极品", "marks": "力荐"}
{"content": "很多东西很老旧了，不理解结构和表现分离的话可以看看", "marks": "还行"}
{"content": "大名鼎鼎啊", "marks": "力荐"}
{"content": "挺文艺的一本书，三上时间看的~~不错", "marks": "力荐"}
{"content": "我真是太肤浅了", "marks": "较差"}
{"content": "在各大网上书店销售平台都已经卖断货了，这次在淘宝好不容易淘到了一本，权当留着方便下次阅读", "marks": "力荐"}
{"content": "很好很强大", "marks": "力荐"}
{"content": "上午看了一遍，感觉偏设计的，同事说这书年龄都要比我大了....", "marks": "推荐"}
{"content": "看完这个我倒是有个还好的创意，电脑或者手机加装光线感应器，读取数据后修改css让页面按钮 背景 啊呈现和周围环境一致的光影特征", "marks": "还行"}
{"content": "曾经的经典，现时已不太适合了。", "marks": "还行"}
{"content": "需要点艺术功底 否则读起来会有点吃力", "marks": "推荐"}
{"content": "看完这本书我才搞明白原来网页中的 html 应该只是用作 content “内容框架”，而页面的“显示风格” style 都应该用 css 来实现。另外就是，css 很强很漂亮", "marks": "推荐"}
{"content": "css", "marks": "推荐"}
{"content": "CSS的Zen之道", "marks": "推荐"}
{"content": "看完这本书才发现原来css如此强大", "marks": "推荐"}
{"content": "可收藏并不时翻看的书", "marks": "力荐"}
{"content": "经典的同义词就是过时", "marks": "推荐"}
{"content": "很赞很有启发的一本书", "marks": "力荐"}
{"content": "更面对设计而不是开发的书", "marks": "还行"}
{"content": "要有css基础的再去看这本书，每部分都是结合例子讲的，还不错~", "marks": "推荐"}
{"content": "我的css入门书籍", "marks": "力荐"}
{"content": "网页设计必读", "marks": "力荐"}
{"content": "正如序言里所说的，每个地方都涉及一点，但每个东西都没写清楚。也许在5年前刚出版的时候还是不错的，但现在看来还真不咋样", "marks": "较差"}
{"content": "相比1年前读的感觉，如果说之前是略读+完全不懂的话，那现在的感觉是细细品味+领略CSS Design之美……", "marks": "推荐"}
{"content": "看到后半段有点累，因为这样的书不适合一下子读完。\n\n这本书我没读完，我觉得还是亲手试一下的好。", "marks": "还行"}
{"content": "虽然大概不会做网页设计了，但还是想买一本来，做欣赏。戴着镣铐起舞么，觉得，无论技术先进还是落后，设计师们的手中总是可以展现出令他们自己骄傲的东西。", "marks": "力荐"}
{"content": "以后永远不要在淘宝买书，T T", "marks": "力荐"}
{"content": "意境未到", "marks": "还行"}
{"content": "听说这本书好难哦...", "marks": "推荐"}
{"content": "还是有点笼统～～～", "marks": "还行"}
{"content": "更多注重讲设计，联合一个网站的各种实例，不乏有创意的布局，可以借鉴。", "marks": "推荐"}
{"content": "css禅意花园...网站...作品...更偏向设计", "marks": "力荐"}
{"content": "我觉得不是特别适合入门的时候读，但是内容确实很赞", "marks": "推荐"}
{"content": "色彩搭配技巧，值得学习。", "marks": "力荐"}
{"content": "理解问题才是修复问题的关键。", "marks": "推荐"}
{"content": "喜欢", "marks": "力荐"}
{"content": "感觉里面多是讲设计方面的，倒是很喜欢它的网站。", "marks": "还行"}
{"content": "太久远了，没多少参考意义", "marks": "还行"}
{"content": "重点在于设计而非代码实现。当然实现也很重要就是了~", "marks": "推荐"}
{"content": "真心感谢@ClarenceAu  推荐了这么好的书给我！很认真的全部看完了~受益匪浅啊！", "marks": "力荐"}
{"content": "看完了之后，不再认为CSS是不屑一顾的技术。。。", "marks": "力荐"}
{"content": "看不懂要写什么", "marks": "还行"}
{"content": "更偏重于设计...", "marks": "推荐"}
{"content": "给了个了解css的轮廓和思路。字体 图片 背景 布局 整体。说了些基本的法则和办法，对我的帮助还是有些的。", "marks": "推荐"}
{"content": "一本不可多得的关于css和网页设计的好书。请访问www.csszengarden.com", "marks": "力荐"}
{"content": "一个好的图标所代表的含义无需加以解释，但前提是图标是对物体本质的抽象。", "marks": "还行"}
{"content": "现在看来里面的一些布局有点过时了", "marks": "还行"}
{"content": "创意很重要", "marks": "力荐"}
{"content": "只是思想而已", "marks": "还行"}
{"content": "结构与表现一定要分离", "marks": "推荐"}
{"content": "小说型阅读,不适合实战", "marks": "力荐"}
{"content": "全面，简练", "marks": "推荐"}
{"content": "过一道就好，有些东西太老旧了。说实话，原来还蛮崇拜禅意花园的。", "marks": "还行"}
{"content": "没啥意思，噱头。CSS这个东西要日积月累的学习，不是靠几个复杂的，看上去很漂亮的例子。CSS能做的事情很多很多，绝不仅仅是复制传统杂志的排版套路", "marks": "还行"}
{"content": "一个创意十足的伟大网站，但本书的理论放在现在过于陈旧了", "marks": "还行"}
{"content": "多读几遍的书籍", "marks": "力荐"}
{"content": "这本书介绍的不是技术而是思想", "marks": "力荐"}
{"content": "完全是搞艺术的。不是搞技术的。", "marks": "还行"}
{"content": "the best ever...", "marks": "力荐"}
{"content": "以案例鉴赏为主，能三能四，也不三不四。", "marks": "还行"}
{"content": "神奇的CSS。", "marks": "推荐"}
{"content": "接触CSS的第一本书~", "marks": "推荐"}
{"content": "不仅仅是css", "marks": "力荐"}
{"content": "nice。", "marks": "推荐"}
{"content": "挺好的，从设计的各个方面用实例讲解。", "marks": "力荐"}
{"content": "粗看了遍，算是一本设计荟萃吧", "marks": "推荐"}
{"content": "略旧的书了。", "marks": "较差"}
{"content": "我是纯当画册看了。。。感觉挺老的书了。", "marks": "推荐"}
{"content": "那时候", "marks": "力荐"}
{"content": "写意 大过 写技术。\r\n欣赏之~", "marks": "还行"}
{"content": "绝对好的一本科技书", "marks": "力荐"}
{"content": "禅字用的好", "marks": "力荐"}
{"content": "是因为我所处时代太新了没赶上web2.0革命么～总觉得帮助不大～很多书里当时倡导的先锋级的理论现在已几乎成为业界标准，其划时代的意义也体现的不是很明显了", "marks": "还行"}
{"content": "全书以视觉设计师的角度展开，配合CSS在web上尽可能的实现传统的视觉设计，同时又展现web的特性，切图技巧和实现效率书等实用方法中都有提到，很多抛砖引玉的概念。没有先学CSS，边读书边查资料，示例也可以理解。学完，可以切图，再html+css编码实践。", "marks": "推荐"}
{"content": "好看，好设计", "marks": "力荐"}
{"content": "只是一些理论，虽然很精彩，但是不够透彻", "marks": "推荐"}
{"content": "应该算是神作了，这么多年了，适合完全所有人群，不管是否从事前端，都会喜欢这本书吧", "marks": "力荐"}
{"content": "技术类的书，写成这样太艺术了", "marks": "力荐"}
{"content": "挺老了，不过在当时看来很棒", "marks": "力荐"}
{"content": "书的内容太老了  不值得看", "marks": "还行"}
{"content": "Inspiring.", "marks": "力荐"}
{"content": "例子很好\n创意很多", "marks": "力荐"}
{"content": "和美术书差不多，很适合搞设计的人！", "marks": "还行"}
{"content": "一本让整了几年没懂CSS的人能写CSS代码的书", "marks": "力荐"}
{"content": "简洁的语句富含韵味与知识,不知不觉间被书陶醉了", "marks": "力荐"}
{"content": "C#（ver 2.0）最佳实践的集合。", "marks": "力荐"}
{"content": "竟然啃过英文版", "marks": "推荐"}
{"content": "非常好，我很喜欢", "marks": "力荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "一些 C# 开发的经验", "marks": "力荐"}
{"content": "看得很模糊，感觉翻译不是很好", "marks": "还行"}
{"content": "李建忠译的很好", "marks": "推荐"}
{"content": "Effective 系列", "marks": "推荐"}
{"content": "在办公室间断的读完的，书中所涉及到的主题都很不错，总体来说本书还是值得推荐的。在基础知识已经了解过之后可以用于提高，更重要的是用于反思。", "marks": "推荐"}
{"content": "每一节都至少要看过一遍 时不时的还要再翻一翻 直到看到标题就能想到如何去做以及为什么这样做", "marks": "力荐"}
{"content": "跟Effective c++感觉还是有差距。\n不过我还没有读完。", "marks": "推荐"}
{"content": "C#很好的进阶书，Effective系列都好书，值得多次阅读", "marks": "推荐"}
{"content": "虽然是以前看过的，但重新翻阅仍然很有收获。", "marks": "力荐"}
{"content": "很赞的书。", "marks": "推荐"}
{"content": "C# 进阶书籍，不错，可读却不认为是必读书籍", "marks": "推荐"}
{"content": "很有借鉴价值的书", "marks": "推荐"}
{"content": "相比Scott Meyers的effective系列，还是欠缺说服力；也或许是C#不像C++让程序员那样的“操心”，毕竟MS给了我们太多的“溺爱”", "marks": "还行"}
{"content": "怎么说呢，还行，但是读完你只知道How不知道Why，只是单纯的累计，无法质变", "marks": "还行"}
{"content": "看完有种拨云见日的感觉，编程时候手边一直放着她。。。", "marks": "力荐"}
{"content": "还不错，不过实战性的东西不多，还是应该选一些开源软件多加练习\nhttp://c.jinhusns.com/cms/c-3256/?type=f ", "marks": "还行"}
{"content": "还行吧", "marks": "推荐"}
{"content": "2类，看的时候快睡着了，大概不能怪书，是感冒吃药没喝茶的缘故。", "marks": "还行"}
{"content": "当年c++启蒙教材", "marks": "力荐"}
{"content": "学rails的过程中顺带学了ruby，比python难，至少对我来说是这样。手边放了几本参考书，看下来这本最好，深入浅出。", "marks": "力荐"}
{"content": "中文看着太绕，直接看第三版得了", "marks": "力荐"}
{"content": "读完第一部分", "marks": "推荐"}
{"content": "我的编程书还真不少~", "marks": "推荐"}
{"content": "读过ruby，这本书入门书和手册的感觉，很多程序员是用面向对象很久了，但是看完这本书，他会让你引发一些思索，是否要改变一些原来的设计和引入ruby的一些好的方法和机制，是值得考虑的，本书最大的价值是带领你进入了ruby的世界。", "marks": "力荐"}
{"content": "必备\n", "marks": "力荐"}
{"content": "重读了下《Programming Ruby》，依旧酣畅淋漓。每次阅读总有一些新发现。", "marks": "力荐"}
{"content": "Ruby的确简洁，不知道ROR的性能和Python相比怎么样。", "marks": "推荐"}
{"content": "书很厚，但写的很一般。有Google的年代似乎没有必要罗列几百页的API文档，何况还有ri的存在。前面的介绍虽然简洁，但个人认为并不适合初学者入门，因为ruby的很多特性是参考其他语言的，所以如果没有对这些特性的初步理解，想“一个下午”学会ruby是不可能的。综上，工具书一本。", "marks": "还行"}
{"content": "我更推荐Ruby Programming Language那本", "marks": "还行"}
{"content": "看到後面個人理解能力有限hold唔住了...", "marks": "力荐"}
{"content": "相对来说写得更加容易入门一些,也是我的第一本Ruby入门书.", "marks": "推荐"}
{"content": "2013-05-14  Ruby系Q1 \n\n2013-6 完整重读了一遍 第27、28章挺好 感觉没有《Ruby编程语言》一气呵成的感觉 。嗯，还是matz把ruby讲得顺、毕竟是自己的东西:)  ", "marks": "还行"}
{"content": "一颗星扣在翻译上，我个人认为此书弄个电子版配合英文版看看即可，越看越觉得翻译的不好。一星扣在版本上。现在ruby1.9了都，此书才1.8。英文版的章节已经和此版部分不一样，而且内容也有改动。", "marks": "还行"}
{"content": "书里的组织结构很好", "marks": "力荐"}
{"content": "喜欢用ruby写小程序，喜欢这本好书。", "marks": "推荐"}
{"content": "ruby开发者案头必备", "marks": "力荐"}
{"content": "很多地方豁然开朗，过一阵子要第二遍", "marks": "力荐"}
{"content": "镐头书~", "marks": "力荐"}
{"content": "最喜欢24章", "marks": "推荐"}
{"content": "也是公司里仅有的一本Ruby书籍，个人感觉学ruby还有更好的书可以胜任。", "marks": "还行"}
{"content": "这是本不错的参考书. 但是不是用来学习的. Ruby的很多奇异的语法糖塞给入门者是浪费时间的.", "marks": "还行"}
{"content": "@end", "marks": "推荐"}
{"content": "之前翻过前几章后几章，写过些东西。半年后，最近这几个无聊的午后，都拿来翻翻，不知不觉竟又从尾到头翻了一遍。感觉收获颇丰。真是一本好书。", "marks": "力荐"}
{"content": "书不错 ， 这本书 是带我进阶ruby的一本书， 推荐。。", "marks": "力荐"}
{"content": "我喜欢larry，喜欢perl，相比python，我更喜欢ruby。", "marks": "推荐"}
{"content": "这些年ruby语法基本没有大变，语言入门书", "marks": "推荐"}
{"content": "ruby入门第一本书", "marks": "力荐"}
{"content": "16年刷了第一遍镐头书，其实跳过了很多部分...", "marks": "推荐"}
{"content": "最近开始用上ruby了，写写工具程序", "marks": "力荐"}
{"content": "好像也一般～～～", "marks": "还行"}
{"content": "想了解的Ruby的信息在本书中基本都能找到。断断续续地看了两遍，跳着看，可以放在书桌旁边作为手册使用。", "marks": "力荐"}
{"content": "还给书的主人了 话说只看了一部分 动态语言还是很不错的 ", "marks": "推荐"}
{"content": "ruby 经典", "marks": "推荐"}
{"content": "一本REF", "marks": "推荐"}
{"content": "版本稍微有点老了，和1。9版本的对比看 改了一些东西", "marks": "推荐"}
{"content": "一大半是API文档，不值", "marks": "还行"}
{"content": "为了更加系统的学习Ruby，所以快速看了一遍。很多内容已经知道，所以就没特别细看了，但还是收获不少。感觉这本书还是挺适合入门的，当然，最后那很长documents就没必要看了，用的时候直接查ruby-doc就好了。", "marks": "推荐"}
{"content": "适合入门，前面讲完之后，有一部分对前面的内容做了个简单的结果，很实用。", "marks": "推荐"}
{"content": "用来入门比较不错", "marks": "力荐"}
{"content": "API 部分可以简略翻一翻，对初学者熟悉标准库有很大帮助。", "marks": "还行"}
{"content": "权威级教材,前半部分讲语法,后半部分将API,只用看前半部分就行了,后面的当帮助文档用于查阅", "marks": "力荐"}
{"content": "唔，不太习惯那种自顶而下的介绍方式。 不过后面的表格很是很详细的", "marks": "推荐"}
{"content": "书被小偷偷了，只能下个电子版", "marks": "推荐"}
{"content": "不愧是镐头书啊", "marks": "力荐"}
{"content": "厚了点，目前看了前半部。", "marks": "力荐"}
{"content": "这么好的书，居然绝版了……", "marks": "力荐"}
{"content": "和预想的有差距，Ruby最后还是没有学会。。。", "marks": "还行"}
{"content": "就是靠这本上手的 Ruby", "marks": "力荐"}
{"content": "把它作为一个学习 ruby 语言的书，看了一下语法。", "marks": "还行"}
{"content": "可以当作手册来使用", "marks": "力荐"}
{"content": "案头参考书，ruby所有的内容都有", "marks": "推荐"}
{"content": "ruby的圣经", "marks": "力荐"}
{"content": "贵啊.  手册部分占了一半", "marks": "推荐"}
{"content": "Ruby必备工具书。", "marks": "力荐"}
{"content": "一个让我饥渴的语言，想读……但不是最近！", "marks": "还行"}
{"content": "名气大，书厚，没耐心的还是换一本看。", "marks": "还行"}
{"content": "自己阅读的是pdf 版，大概浏览了下，ruby 的知识很全，算是镐头书了，学ruby 力荐", "marks": "力荐"}
{"content": "比较不错的ruby入门书", "marks": "力荐"}
{"content": "课程项目翻过，内容很多，好多看过就忘了", "marks": "推荐"}
{"content": "就是大概了解下，没有太大期待，感觉可读性不错～", "marks": "推荐"}
{"content": "五年前读的了吧，为啥在我的在读列表里😨好像那个项目之后再没用过ruby", "marks": "力荐"}
{"content": "最好的计算机编程入门书籍之一", "marks": "力荐"}
{"content": "Ruby程序入门，书比较厚实，不适宜带在身上，更适合放在办公桌上作为参考书目和基础自学", "marks": "力荐"}
{"content": "部分内容没有理解，需要结合项目再看一遍。", "marks": "推荐"}
{"content": "rubyer人手一本吧。。", "marks": "力荐"}
{"content": "还有什么比这更好的Ruby读物？", "marks": "力荐"}
{"content": "Programming Ruby + Ruby元编程 + 松本行弘的程序世界 ruby学习的豪华套餐\n", "marks": "力荐"}
{"content": "当手册看还行", "marks": "还行"}
{"content": "入门经典", "marks": "力荐"}
{"content": "写的非常细 通俗易懂", "marks": "力荐"}
{"content": "相当于一个ruby查询手册很实用的一本书 ", "marks": "力荐"}
{"content": "大学第二本学习 c++的书籍，强烈推荐并建议把课后习题全部做了。", "marks": "力荐"}
{"content": "挺好的入门书，", "marks": "推荐"}
{"content": "这本书带我进入计算机的世界", "marks": "推荐"}
{"content": "C++的书扔地上都能够砸一个坑出来啊", "marks": "较差"}
{"content": "看这本书是在学了C++多年之后重新复习准备找工作的时候。入门的时候来看这本书必定是很痛苦的，但是有一定基础后再来深入或者作为工具书确是超好的一本书！", "marks": "力荐"}
{"content": "入门书籍，讲解的非常细致和全面", "marks": "力荐"}
{"content": "写太厚了，没多大用", "marks": "较差"}
{"content": "1078页...感觉写得过细，累赘太多。——弃了。", "marks": "还行"}
{"content": "夯实基础非常不错", "marks": "力荐"}
{"content": "开始啃的砖头，后半部分啃不动了。", "marks": "力荐"}
{"content": "非常好的入门教材。编程风格，代码规范都讲得很详细和清除。觉得不好的人大概已经是高手了~~ ", "marks": "推荐"}
{"content": "实在是，太烂了。。。", "marks": "较差"}
{"content": "挺详细的", "marks": "推荐"}
{"content": "还好是英文的，否则就要考我翻译了。 绝对好书。。。只可惜不是彩色的。", "marks": "力荐"}
{"content": "C++入门推荐，就是感觉啰嗦了一点。", "marks": "推荐"}
{"content": "大一时候学面向对象语言，用这本...超厚..给我最大的帮助其实是让我坚持良好的代码风格。", "marks": "还行"}
{"content": "工具书，努力翻", "marks": "推荐"}
{"content": "很适合新手，随便看看的书", "marks": "推荐"}
{"content": "正在读第二遍", "marks": "推荐"}
{"content": "老外写的教科书赞", "marks": "力荐"}
{"content": "大一时候学编程时看的圣书…STL讲得很明白，例子很多", "marks": "力荐"}
{"content": "不算完完整整看完，85%吧。我觉得对于有一点点渣渣的编程基础的人来说看这个可以比较完整地补全C++的基本语法知识和大体框架。但是很多东西都是一笔带过，离入门还差得远呢吧。不过写得东西我可以看得下去~给个4星~", "marks": "推荐"}
{"content": "废话狂多的Deitel系列...又一本无知本科阶段一字一句读完习题做完的1000多页的血泪书....我是浪费了多少无知青春....", "marks": "力荐"}
{"content": "很厚。没看。语言什么的，用Google学就够了。", "marks": "还行"}
{"content": "相当有趣的习题", "marks": "力荐"}
{"content": "= =", "marks": "力荐"}
{"content": "外国人写书看着就是舒服 但是考试突击就很不实用", "marks": "力荐"}
{"content": "大一时的噩梦", "marks": "力荐"}
{"content": "C++极佳入门书！", "marks": "推荐"}
{"content": "实话实说。。。不咋的。。。- -", "marks": "还行"}
{"content": "大学时教材，人生第一本厚的不像话的课本，然而后面还有更多更厚的,,,,,,,", "marks": "推荐"}
{"content": "相对与本书出版的那个年代，本书还可以。但是拿到今天来说，本书中的设计理念早应该深入每个C++程序员的内心，如果你没有做到这点的话，那你就该努力了。", "marks": "还行"}
{"content": "挺实际的，适合有一定项目经验的人阅读", "marks": "还行"}
{"content": "很薄的一本书，啃了2周才粗过了一遍", "marks": "还行"}
{"content": "很多人都推荐《thinking in java》，但是对于初学者，这本书更好。因为你总得先把一个东西用顺手了才能去研究它的本质。整本书就是一个做教学管理系统的过程。从介绍开始到最后完成整个系统，要知道书里教你的这个系统比很多学校的系统都要好，你会很有成就感的。我大学里最遗憾的也是没能好好读这本书，被老师和学院牵着鼻子到处走，结果java技术一团糟，快毕业的才明白这本书的价值。", "marks": "推荐"}
{"content": "（大二上）那时的我，一行一行敲完了上面的代码", "marks": "推荐"}
{"content": "讲得非常详细，当我看ssd3的异常部分的章节，看得稀里糊涂，到这本书里找很容易看明白了,而且在很多地方是要你怎么用某项功能，而不是直接扔给你代码", "marks": "推荐"}
{"content": "好书哇", "marks": "力荐"}
{"content": "搞JAVA这么些年.还真不敢说自己多么懂OOP.这本书阐述的很好.", "marks": "力荐"}
{"content": "我大致在2004年左右买过这本书(早期版本)，让我豁然开朗进入了面向对象的世界。后来被人借去不还，一直很郁闷。现在找到了电子版重新复习一遍。", "marks": "推荐"}
{"content": "赞", "marks": "力荐"}
{"content": "强行补完java基础 本来是去图书馆找core java的没找到无意中看到这本 还不错 看得还挺过瘾的 作者很用心 不过我知道还有一些略深的东西没讲 以后不够再找进阶篇来补 有讲GUI 唉 本科时候看到这本书就好了 ", "marks": "推荐"}
{"content": "好教材啊！", "marks": "推荐"}
{"content": "刚读完这本书的时候，我感觉我的Java彻底毁了", "marks": "还行"}
{"content": "本科时候的入门书，真心不错", "marks": "力荐"}
{"content": "很好，讲解风格通俗易懂，很多图解。", "marks": "力荐"}
{"content": "本书一开始对于面向对象的概念和思路介绍得活灵活现，很好，总觉得对于多态的讲解不是很深入，也可能这只是一门入门书籍，总之是一本自学Java的好书！", "marks": "力荐"}
{"content": "就不费事儿标记了，97年看到现在，01年买到现在，15年多了吧", "marks": "力荐"}
{"content": "每年必买的书", "marks": "推荐"}
{"content": "2006年就开始读，2001-2004年的几乎都看过", "marks": "力荐"}
{"content": "高中开始啃，然后就中毒了= =", "marks": "推荐"}
{"content": "这个东西很不错的", "marks": "推荐"}
{"content": "有点用。", "marks": "还行"}
{"content": "看的第一本Head First系列书，写得不错，可惜版本太老...", "marks": "推荐"}
{"content": "自以为形象，其实言之无物。", "marks": "较差"}
{"content": "版本太老了，现在EJB3已经大行其道，但是书中还是讲的EJB2。 现在Spring框架也可以轻松实现依赖注入了。而不仅仅限于EJB。", "marks": "还行"}
{"content": "对于初学者了解EJB非常好的一本书，虽然比较罗嗦，但由浅入深容易理解，内容也讲解的比较全面", "marks": "推荐"}
{"content": "还可以，不过忘的差不多了", "marks": "推荐"}
{"content": "了解tdd，单元测试", "marks": "还行"}
{"content": "谁有这本书，二手的也行，卖我吧，Q544599787", "marks": "力荐"}
{"content": "也就把上集看完了...", "marks": "还行"}
{"content": "读了该书的引言，这本书是偏应用的，有很多源码例子，1500多页。概括了Python的四个特性：quality, productivity, portablility and integration. 最后还有the Zen of Python", "marks": "还行"}
{"content": "作为一名刀客，刀不离身。", "marks": "力荐"}
{"content": "第三版，基于Python2.5。关注系统、GUI、网络等几方面实际功能，对相应系统库+少量第三方库用法加以展开，辅以简明的例子。可以当入门，也可以当词典。与Learning Python搭配起来的确不错。", "marks": "推荐"}
{"content": "用这本书建立起一个初步的印象。本书的作者提供了很多实际应用的源码例子。但对于初学者，说得还不够细。更熟悉python后，回头看看，会更有收获。", "marks": "推荐"}
{"content": "经典入门书，详尽~", "marks": "力荐"}
{"content": "首先你需要Python这么棒的电脑语言", "marks": "力荐"}
{"content": "对于学习python的，入门还不错", "marks": "推荐"}
{"content": "sorry又没看完-_-", "marks": "还行"}
{"content": "Mark的风格就是有点罗嗦但是蛮清楚的。", "marks": "推荐"}
{"content": "内容很长很细啊，值得认真读读", "marks": "力荐"}
{"content": "有些书拿来当手册最好。", "marks": "还行"}
{"content": "我能说其实还是看网上的讲解比较好吗", "marks": "较差"}
{"content": "这是作者三个系列中的一本，我看的是第四版，外文。跟本系列的learning python一样的语言风格，废话多。看到最后，实在看不下去了。书是好书，节奏太慢，就是没太多时间。", "marks": "推荐"}
{"content": "太太太啰嗦了！！！", "marks": "较差"}
{"content": "薄薄的册子，非常有内容的好读的书，应该读一读，完全的美式法律思维。", "marks": "力荐"}
{"content": "以范式的转换为线索梳理了正当法律程序在英美尤其是美国发展的历史。但是，一方面是叙述较为简略，很多地方没有展开，案例也没有讨论；另一方面，翻译实在是不敢恭维，所以理解起来不是很顺畅。", "marks": "还行"}
{"content": "利用案例来阐述正当程序的变迁，随着阅读案例，大量的正当程序理论又在不经意间贯入脑海。本书小而精，值得一读。", "marks": "力荐"}
{"content": "作者的翻译水平令我自信大增...", "marks": "推荐"}
{"content": "还行吧", "marks": "推荐"}
{"content": "烂。。。", "marks": "较差"}
{"content": "我的第一本asp.net，按照上面一步一步做的。", "marks": "推荐"}
{"content": "一般", "marks": "还行"}
{"content": "充满真知灼见，值得一看！虽然不是新书，但观点很有用。不过外国寓言几乎看不懂。", "marks": "推荐"}
{"content": "比较一般的作品，当然还是比同类作品好很多", "marks": "推荐"}
{"content": "盗墓", "marks": "力荐"}
{"content": "原书可打5星，因为翻译质量和错别字，扣掉1星", "marks": "推荐"}
{"content": "如果一个程序员一直在成长、进步，他就不会害怕未来", "marks": "推荐"}
{"content": "美妙的故事、寓言和隐喻集，不过原书是二十多年前写的，所以能看到很多老古董术语，这也有好处，感受一下软件行业的巨大变化。", "marks": "力荐"}
{"content": "没啥意思，利嘴一张而已。。。", "marks": "还行"}
{"content": "每一篇文章都值得做一次深入学习。需要重新阅读几次。", "marks": "力荐"}
{"content": "简单快速翻阅，笔记，讨论程序员职业的短文，随笔集。代码风格、编程语言、算法、设计方面的技巧非常重要，正是这些技巧才把专业程序员和业余爱好者分开。在方法论上的提取和精炼将是一笔明智的长效投资。 职业+敬业，不断的学习。", "marks": "推荐"}
{"content": "最开始还以为是一本写给外行的书。。。。当然这书确实是写给外行的，而这个外行就是我。\n其实这本书名更应该写成“告诉你什么是专业”，书里的建议并不仅仅适用于程序员（除了涉及到内存，还有寄存器的部分）。我真心推荐读一读这本书，不厚的。", "marks": "力荐"}
{"content": "(四)TP311.1/101 科技图书借阅室", "marks": "力荐"}
{"content": "看了没啥具体收获，一直在讲一些东西，不知道想说啥，貌似说的都是一些客观事实，但是操作层面呢？ ", "marks": "较差"}
{"content": "花了一周的时间在上下班的路上重读一遍，感觉已经没有第一遍看起来的那么好了，不过也还是不错就是了。", "marks": "推荐"}
{"content": "这本书我没有完全看懂，肯定至少还需要看第二遍。", "marks": "推荐"}
{"content": "温伯格看上去是个思维很活跃的人，能把很多不同领域的东西联系起来。写的很幽默，翻译难得得好。摘两句话：\n1. “真正的幸福和成功只需要寥寥几点要则，而种种关于”个人魅力“或”成功秘诀“的建议，多数都反而遮蔽了这几点要则。”\n2. “在相对拥挤的环境中，似乎很难获得起码的尊重——这尊重本来是任何常人应有的权利。因此，我们中的很多人，都已经出离地愤怒，一味努力获取专业领域中的尊重，作为社会尊重的一种替代物。“", "marks": "推荐"}
{"content": "对程序员职业最好的注解", "marks": "力荐"}
{"content": "虽然只说码农，但是咨询思维可以推而广之。", "marks": "推荐"}
{"content": "我们提高程序员的进入门槛。起码和医生一样。但是这不可能实现。", "marks": "还行"}
{"content": "受益非浅", "marks": "力荐"}
{"content": "翻译的不太好", "marks": "还行"}
{"content": "温伯格 ", "marks": "推荐"}
{"content": "务实有趣。", "marks": "推荐"}
{"content": "当你停止学习了，也就不适合做程序员了！", "marks": "推荐"}
{"content": "20年过去了，这本书依然这么出色。", "marks": "力荐"}
{"content": "内容略老，但是值得一读", "marks": "推荐"}
{"content": "程序员职业思考的好书，有很多新颖的观点", "marks": "力荐"}
{"content": "要是早一些看到就好了！在业内混了几十年的技术咨询师，确实句句真知灼见！回答了许多令程序员困惑不解的现象。", "marks": "力荐"}
{"content": "很有启发性", "marks": "力荐"}
{"content": "我是不专业的", "marks": "推荐"}
{"content": "说了一堆大实话。", "marks": "推荐"}
{"content": "2007-3-27 20:06:27借书", "marks": "推荐"}
{"content": "又好玩又有用。很多话题都有借鉴的意义。暂且标记成读过，以后肯定会再翻开。", "marks": "推荐"}
{"content": "2008-5-13", "marks": "力荐"}
{"content": "我居然忘记我读过这本书，记得是等待看冠军杯时读的", "marks": "推荐"}
{"content": "当时看的，感觉没有啥意思", "marks": "还行"}
{"content": "一本上世纪五、六十年代写的书，里边提到的计算机语言大多已经不流行，但此书居然在2006年出版印刷了，这就说明了：这本书其实不仅仅适合程序员读！相信各行业人员都能从中读到有用的东西。", "marks": "力荐"}
{"content": "思想亮点极多，翻译得很不错。但是每一章末尾的寓言总觉得过于冷了，简直找不到什么笑点。", "marks": "推荐"}
{"content": "挺有意思的一本书，人生需要独立思考。", "marks": "还行"}
{"content": "多方位的解读专业程序员", "marks": "推荐"}
{"content": "有些谚语或者是典故， 还是不懂。", "marks": "还行"}
{"content": "身体最重要", "marks": "推荐"}
{"content": "1988年的书，恩，除了一些代码和术语有点老，思想仍然值得借鉴（软件业这20多年在干嘛？）。其实我的阅读体验并没有这么好，因为把它作为一本休闲书了，但其实很多文章需要思考和品位的。作者的睿智体现于字里行间，是本值得再读和回味的书。", "marks": "推荐"}
{"content": "好几年前读过，因为要做一个让外行人理解程序员的培训，又想起了这本书。虽然作者描述的程序员有点过于老土而不接地气了，但是对于程序员追求学习和成长的本质还是抓到了。", "marks": "还行"}
{"content": "翻译不习惯，有点咬文嚼字的感觉", "marks": "推荐"}
{"content": "你手下的是程序员，不是码农。任何技术经理，码农的管理者，都应该读一读。", "marks": "推荐"}
{"content": "温伯格关于IT民工的生活描述，比较有意思的一个只有三家公司里的跳槽现象。", "marks": "推荐"}
{"content": "大师级的经典之作，从心理学感受程序设计，满本书都是令人震撼的思考精华，使我了解专业的真正意义，坚定选择去做一个专业的程序员", "marks": "力荐"}
{"content": "IT届的散文随笔", "marks": "还行"}
{"content": "不知道是不是我过于愚钝，感觉可操作性不强，有时间了再来重读", "marks": "还行"}
{"content": "他的思维相当有跳跃性，一种和谐的睿智啊。很多都是人们看不见的危险选择。", "marks": "推荐"}
{"content": "程序员的人生就像一本书", "marks": "还行"}
{"content": "很牛的一本书，每个故事都在挨踢公司不断上演，只是演员换了一批又一批。这本书能告诉你如何把握自己的方向。", "marks": "力荐"}
{"content": "一口气读完的一本书，里面充满了许多真知灼见", "marks": "力荐"}
{"content": "基本弄明白为什么做程序员，什么时候该/可以/应该不做程序员。", "marks": "推荐"}
{"content": "作者是美国计算机殿堂级人物。让俺惊奇的是，里面的话俺可以毫不费力的读懂，而且是受益匪浅。不看封面，我会已经这本书是文学家写的。印证了“道理到更高的一个层次上都是相通的”。", "marks": "力荐"}
{"content": "一、二、三……这就是温老爹", "marks": "力荐"}
{"content": "看完这本书之后，自己后背一阵凉……不要说专业程序员，自己连标准程序员都差了八百里……好多观点的确需要慢慢去消化", "marks": "推荐"}
{"content": "对程序员的特质 & 职业规划部分说得不错。", "marks": "力荐"}
{"content": "最近这本书成了我抽烟时间的打发，修改一下原来的评价，原来我说过这本书的翻译痕迹太浓，现在看来应该是译者的细心！感谢译者，感谢温伯格。", "marks": "力荐"}
{"content": "可以，拓展下思路", "marks": "还行"}
{"content": "这是写给老总看的吧。", "marks": "推荐"}
{"content": "很久以前读的，现在差不多都忘了写什么了。", "marks": "推荐"}
{"content": "1.专业的程序员就是要帮人解决问题，而不是仅仅写代码。2.身体健康就会感到幸福，罗素。3.为了逃避老系统维护而在三家公司循环跳槽的故事，有同感。4.讲的寓言感觉好冷，看不太懂。5.感觉作者思维很散，文笔不能很好的说明一个主题，很凌乱。", "marks": "还行"}
{"content": "值得每一个程序员去品味", "marks": "力荐"}
{"content": "虽然成书时间早，但是有很多东西是没有过时的。", "marks": "推荐"}
{"content": "很有“嚼头儿”的书，读一遍肯定是不够的。", "marks": "力荐"}
{"content": "一本促进你思考的书籍。教会了哪些是计算机做的，哪些应该是程序员做的。这样才能向专业程序员迈进。", "marks": "力荐"}
{"content": "想进入计算机行业的同志，看完这本书你可以对如何做一个好程序员有一个整体的认识。这本书你看到的不是各种语言和代码，这是一本谈心般的书，从程序员的产生，到其发展，最后作者也有自己的程序员行业的预测，当中充满智慧和乐趣。", "marks": "力荐"}
{"content": "《理解专业程序员》(Understanding the Professional Programmer)——Gerald M.Weinberg(杰拉尔德 温伯格)，刘天北译——清华大学出版社——TP311.1/54——182页——观点很新颖(误诊病理学在学校中学不到东西、程序员向何处去怎样应变),但读起来就是有些别扭，温伯格将他的想法化为一种很奇特的语言，我此刻无法完全读懂他的意思，但写的确实很好，有缘的话还是要重新读一遍原版的。", "marks": "推荐"}
{"content": "很不错的一本书\r\n值得我们有所思的一本书", "marks": "力荐"}
{"content": "有点意思，但对Java一直研究得不是很深入，也就感觉一般啦。", "marks": "还行"}
{"content": "书写的很好，翻译的也很不错！", "marks": "力荐"}
{"content": "很喜欢书中的文字", "marks": "推荐"}
{"content": "为了给rr做一个动态显示的页面，只能自己学点了。哎，做后端的人完全不懂页面技术，速成了一下，还可以吧，但是感觉很多东西没有写的很清楚，不如国外的那本比较好，不过最后2天终于搞定了一个。", "marks": "较差"}
{"content": "Ajax是一支足球队，他有最牛逼的青训系统。", "marks": "还行"}
{"content": "很久没翻过了 ", "marks": "还行"}
{"content": "有一定的实践应用价值。但真正要做AJAX应用，光有案例是完全不够的，这个得创造。本书只能算是抛砖引玉吧。", "marks": "还行"}
{"content": "部分教程还是写的不错，简单易懂", "marks": "推荐"}
{"content": "扫了一遍。", "marks": "还行"}
{"content": "准备写书评！", "marks": "力荐"}
{"content": "总体一般，讲的东西都不是很难，理论上我更没学到什么。\r\n这本书读了太久了，汗。", "marks": "还行"}
{"content": "讲的很细致，也介绍了很多有用的框架，读了以后颇有收获", "marks": "力荐"}
{"content": "?", "marks": "推荐"}
{"content": "阅读中，看作者和目录就知道这本书是Ajax圣经", "marks": "力荐"}
{"content": "没有一定基础看不大明白", "marks": "还行"}
{"content": "值得推荐", "marks": "力荐"}
{"content": "从理念到实现，好！", "marks": "力荐"}
{"content": "ajax本来是个很简单的技术点，不应该神话它，但确实很有用。", "marks": "还行"}
{"content": "一本ajax的历史书，如果想用的话还要找本手册类的", "marks": "推荐"}
{"content": "架构 模式 细节 都有了\r\n四原则经典", "marks": "力荐"}
{"content": "这个书主要用来鞭策自己……", "marks": "推荐"}
{"content": "精炼的设计模式。", "marks": "较差"}
{"content": "当年的好书,现在看来泛泛了", "marks": "推荐"}
{"content": "ajax基础", "marks": "还行"}
{"content": "Ajax 技术 all_in_one 入门书籍", "marks": "推荐"}
{"content": "最早读过的一本Ajax书籍", "marks": "推荐"}
{"content": "难度大，讲设计模式和架构，有点晕", "marks": "推荐"}
{"content": "ajax不错的书。", "marks": "推荐"}
{"content": "Maning出版社in action系列", "marks": "还行"}
{"content": "ajax is wonderfull", "marks": "力荐"}
{"content": "此书很深。我没看完。呵呵", "marks": "推荐"}
{"content": "感觉一般", "marks": "推荐"}
{"content": "可读", "marks": "力荐"}
{"content": "现在看这本书，感觉有点过时了，如果现在入门，还是买一本新一点的，很多现在流行的框架，方法，思想，这本书里都没有涉及到", "marks": "还行"}
{"content": "看了一少部分.", "marks": "还行"}
{"content": "沒讀完", "marks": "还行"}
{"content": "很值得读", "marks": "力荐"}
{"content": "体系的看一下ajax~", "marks": "推荐"}
{"content": "很早就看了这本书，不过我的js功底不够，对里面的好多东西看不明白，后来在做网页时，碰到ajax的部分都是用的magicajax，确实蛮好用的，呵呵~", "marks": "推荐"}
{"content": "有很多实用的东西", "marks": "力荐"}
{"content": "简单易懂。", "marks": "推荐"}
{"content": "入门教程，至少让你明白Ajax是怎么回事。但原理方面的不如看Ajax in Action，应用方面的不如直接看框架，估计现在没人自己封装Ajax请求吧...", "marks": "还行"}
{"content": "买了，还没有读。估计应该是本不错的书。", "marks": "还行"}
{"content": "很入门", "marks": "还行"}
{"content": "只能算是入门，实践应用还差点。", "marks": "还行"}
{"content": "内容的可用性不高", "marks": "还行"}
{"content": "可以一读, 但ajax显然需要很多的是实践.", "marks": "较差"}
{"content": "站在书店看一遍就可以了", "marks": "还行"}
{"content": "实用Ajax入门", "marks": "力荐"}
{"content": "看的挺好的。", "marks": "推荐"}
{"content": "什么都没说~ ~", "marks": "还行"}
{"content": "比较基础", "marks": "还行"}
{"content": "作为入门看了前几章，短短几年，很多内容现在已经有些过时了！", "marks": "还行"}
{"content": "如题，很基础的一本书，可以作为了解读读。\n不过现在谁还会去研究Ajax呀～框架拿来直接用了，哈哈～", "marks": "推荐"}
{"content": "学习了Ajax的概念", "marks": "力荐"}
{"content": "感觉讲的不是很深，但是对不了解的人来说，可以很快了解，比较容易懂的。\n哎，AJAX并不大难，难在利用AJXA和HTML,JS,CSS做出很好的用户体验，还要继续修炼呀", "marks": "推荐"}
{"content": "不怎么样", "marks": "还行"}
{"content": "实在没什么内容，基本上只要看个基本概念，接下来可以扔了", "marks": "还行"}
{"content": "一般，作为入门可以，但是太基础了，很多代码都有兼容性问题", "marks": "还行"}
{"content": "名字没取错，对，是基础", "marks": "还行"}
{"content": "很基础，入门很好", "marks": "力荐"}
{"content": "好多烂代码", "marks": "较差"}
{"content": "这本书19块钱我都觉得买亏了。在当时也只能算是基本入门书了。没有深度。", "marks": "较差"}
{"content": "....读的06版，  内容有些老了...2个小时就翻完了", "marks": "还行"}
{"content": "不错的入门书。", "marks": "力荐"}
{"content": "浅显易懂，不错的一本书。后半部分觉得比较废。", "marks": "推荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "使用此书来入门应该没有问题,翻译稍有瑕疵", "marks": "推荐"}
{"content": "Ajax很热的时候。头脑发热买的。看是看完了，但是现在用不上。书还可以，入门", "marks": "推荐"}
{"content": "Ajax", "marks": "还行"}
{"content": "很多Ajax的例子，介绍了很多有用的工具和资源，已经一些常见的框架,例如Dojo", "marks": "推荐"}
{"content": "继续实践新发现的“马桶读书法”。", "marks": "推荐"}
{"content": "差评", "marks": "较差"}
{"content": "比较旧了，服务器端使用的语言是java，不是被我的菜", "marks": "较差"}
{"content": "基础", "marks": "还行"}
{"content": "这本好像是大学毕业设计那时出版的第一部写ajax的书。", "marks": "还行"}
{"content": "我想应该是一本AJAX入门的好书", "marks": "较差"}
{"content": "简单易懂", "marks": "力荐"}
{"content": "几乎看完了，挺不错的", "marks": "还行"}
{"content": "Ajax很火，Ajax很强大。Ajax扫盲书，有很不错的例子。", "marks": "力荐"}
{"content": "这本特别适合入门级读者，不只详细讲解了表现层基础原理，还介绍了服务端的各种实现，让读者对整个前后台的流程有了清晰的认识。只是，相同代码重复出现会让人有些不耐烦", "marks": "力荐"}
{"content": "还行吧", "marks": "还行"}
{"content": "过时了", "marks": "较差"}
{"content": "通俗易懂", "marks": "推荐"}
{"content": "每天从四楼宿舍背到五楼机房，再从五楼机房背会宿舍，减肥利器呢，不过很好用的工具书！", "marks": "力荐"}
{"content": "此书作为AJAX的入门书籍，还是很棒的", "marks": "推荐"}
{"content": "断断续续的看着，学习着", "marks": "力荐"}
{"content": "基本是混稿费的", "marks": "还行"}
{"content": "可以比较快速的入门的书，整体比较简单，可是这种简单却更好的突出了Ajax的主体，而不会让学习看书者被其它的技术给难住或者费掉过多的精力。就是一个老手也是有必要读一下的。", "marks": "推荐"}
{"content": "带我进入了Ajax的天地", "marks": "推荐"}
{"content": "最近要用到，泛泛地看了一下，算是有个粗浅的认识吧。。。", "marks": "推荐"}
{"content": "ajax入门", "marks": "推荐"}
{"content": "如果是入门，这个是很不错的一本选择", "marks": "力荐"}
{"content": "当年第一本中文ajax，其实就普及了一下知识\n现在ajax完全交给jq做了，所以读一下jq就足够了", "marks": "还行"}
{"content": "适合初学者，现在回头看，这本书还是太浅了，倒是通俗易懂", "marks": "还行"}
{"content": "国内第一本AJAX图书，不错的入门教程，不过例子中的服务器代码使用Java servlet.实验时可采用自己熟悉的代码。主要看的前3章", "marks": "还行"}
{"content": "学习AJAX的入门图书，真的很不错！！", "marks": "推荐"}
{"content": "读过好久了，只记得看javascript有一定难度。于是先看了javascript又看了jquery在看的本书。书中内容不错，学到很多知识。", "marks": "推荐"}
{"content": "后面的读不懂了！", "marks": "力荐"}
{"content": "Ajax基础", "marks": "推荐"}
{"content": "前几章还可以，循序渐进，是入门级别的", "marks": "推荐"}
{"content": "2006-5-8", "marks": "还行"}
{"content": "不错，虽然用很大的篇幅，核心的代码估计也就那么一点点，其它的都是基础，但总算把Ajax的应用表现出来了", "marks": "还行"}
{"content": "我是学设计的，这本书完全看不懂的啊", "marks": "还行"}
{"content": "做TA的时候给大家推荐过", "marks": "推荐"}
{"content": "我的编程入门书", "marks": "力荐"}
{"content": "貌似是K&R之后的又一本C好书", "marks": "力荐"}
{"content": "既适合初入门到的小子，也适合相见恨晚的匹夫", "marks": "力荐"}
{"content": "屎一样的书  看这个神马也没有看懂  没有条理", "marks": "还行"}
{"content": "最开始不知道看什么C语言书的时候，看过这本书的开头，发现还是看不懂，后来看懂了the c programming language，当然也就不用看这本了", "marks": "较差"}
{"content": "这本书比谭浩强的要深入，主要侧重的是实际的编程问题，还有很多编程的模式都很有用。最后比较系统地介绍了C标准库函数，期中与很多都是我之前不知道的所以收获很大。\n整体评价是，作为中级的C教材，真的不错。", "marks": "推荐"}
{"content": "当初看C语言书挺多的，毕业这么多年后简单扫了遍这本书，主要看了下1，4，10章，感觉和现在写代码的感觉还是很相似的，感觉是本入门好书，思想很受用。", "marks": "推荐"}
{"content": "相对新颖的写法，没有传统教科书的老套，看起来比较好懂", "marks": "推荐"}
{"content": "c深层的解释", "marks": "力荐"}
{"content": "语言平实谨慎，C语言入门的经典。", "marks": "力荐"}
{"content": "不如把时间用来看看其他经典的C语言书", "marks": "推荐"}
{"content": "当时看不觉得怎么好…想着反正是课本。。。\n后来翻了翻同类的书才发现写的相对来说还是很不错的。。。", "marks": "力荐"}
{"content": "还可以", "marks": "推荐"}
{"content": "Symbian的书买了很多，但，没用。", "marks": "还行"}
{"content": "其实我就翻翻，游戏什么的", "marks": "推荐"}
{"content": "haven't finished. ", "marks": "还行"}
{"content": "错漏百出不至于，但。。。", "marks": "还行"}
{"content": "很不错，唯一有点过时", "marks": "推荐"}
{"content": "Series 60 应用程序开发", "marks": "推荐"}
{"content": "书皮不错，可惜内容水了点", "marks": "还行"}
{"content": "前面还行，后面略烂", "marks": "还行"}
{"content": "妈妈的，浪费老子时间，操，让我感觉学习spring很痛苦", "marks": "较差"}
{"content": "一本非常不错的书，没有很多的费话，我的感觉，内容很全面，值得收藏来看，我常常把它作为工具书一样来用", "marks": "力荐"}
{"content": "讲的很细 适合初学者", "marks": "推荐"}
{"content": "最早接触jsp时读过的一本书，很不错。", "marks": "推荐"}
{"content": "内容简单基础，适合初学者", "marks": "还行"}
{"content": "支持国书", "marks": "还行"}
{"content": "我可不想被玩死 忽的想起王烁天", "marks": "还行"}
{"content": "很详细", "marks": "推荐"}
{"content": "书读起来很容易，但做起来不容易", "marks": "推荐"}
{"content": "junit3。毫无营养。", "marks": "较差"}
{"content": "感觉有点乱", "marks": "还行"}
{"content": "JUnit测试入门书籍", "marks": "推荐"}
{"content": "言简意赅，JUnit版本有些老，原则还是适用的。Mock部分讲的有些简略，实际操作的话还需要更高级的用法和书籍。", "marks": "还行"}
{"content": "JUnit非常好的入门书（JUnit 3）。。", "marks": "力荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "不错，挺实用的", "marks": "力荐"}
{"content": "old", "marks": "还行"}
{"content": "好书，简洁，使用，入门至佳", "marks": "推荐"}
{"content": "写了一大堆test-case却不知道写这些意义何在~170页的话还是看一下吧", "marks": "推荐"}
{"content": "内容有些过时了，需要更新了。", "marks": "还行"}
{"content": "介绍了单元测试的一些思想，以及JUnit的使用等等。但书里的Java代码，还是有点旧了。", "marks": "还行"}
{"content": "看完， 对java的junit的测试框架有了一个清晰地认识", "marks": "推荐"}
{"content": "快速预览模式", "marks": "推荐"}
{"content": "比较旧了，英文有新出的适用于java 8的版本，不过里面关于测试什么，对测试的定位对我很有用", "marks": "推荐"}
{"content": "Junit本来就简单,书也薄,图书馆看看就行了", "marks": "推荐"}
{"content": "我就喜欢这种薄的书", "marks": "还行"}
{"content": "基本概念", "marks": "推荐"}
{"content": "用过Pex之后总觉得JUnit、NUnit、xUnit这些都弱爆了。。", "marks": "推荐"}
{"content": "语言平实", "marks": "推荐"}
{"content": "很好的Java单元测试入门书，就是内容有点旧了", "marks": "推荐"}
{"content": "单元测试是很基础，有价值，但是做起来并不简单的事情。\n概述对其中的思想和方法做了系统化的总结。本书讲解的比较浅显，限于篇幅一些地方讲解的不够详尽，一些高级技巧阐释的不够，更多的需要读者在自己的项目中实践。", "marks": "力荐"}
{"content": "对于junit的入门启到了很好的指导作用", "marks": "推荐"}
{"content": "之后实际使用时还需翻看", "marks": "推荐"}
{"content": "概念较多，仍需靠平时消化理解", "marks": "还行"}
{"content": "只能算入门，谈不上修炼。 ", "marks": "还行"}
{"content": "书中介绍的junit版本比较老了，不过这本书主要是将思想，也就是所谓的“道”，所以影响不大", "marks": "推荐"}
{"content": "道，用在这里有点夸大其词了。", "marks": "还行"}
{"content": "2012年买了一本二手的，感觉内容有些老了，有价值的东西太少。还不如直接去 JUnit、Mockito 官方网站获取最新的信息更有价值的多。\n\n若学习 Java单元测试，建议使用 TestNG + Mockito！从代码可读性、可维护性来说，都比前者更好一层楼。", "marks": "较差"}
{"content": "Good introduction to JUnit.", "marks": "力荐"}
{"content": "单元测试的道理", "marks": "推荐"}
{"content": "内容不够充实", "marks": "还行"}
{"content": "一本迄今我看过的最薄的技术书籍，不过麻雀虽小五脏俱全。这本书不是一本过于技术的书籍，通过实际例子的方式，让我们理解如果编写高质量的代码，单元测试的意义，为什么要写单元测试。 单元测试都需要测一个java类的方法的那些方面，对于刚开始单元测试的开发者，很有效，同时介绍了如何代码重构来进行单元测试。 比较OOP的一本书。美中不足，这本书出版时间过早，没有更新，书中介绍的Junit的版本仍是Junit 3.x 不是最新的 4.x", "marks": "推荐"}
{"content": "测试用例编写大大提高代码可读性", "marks": "力荐"}
{"content": "什么是单元测试，如何做单元测试，怎样做得更好。在这里会有相应的答案。", "marks": "力荐"}
{"content": "书的内容已经过时，边界条件测试部分比较详细", "marks": "还行"}
{"content": "单元测试刚刚理论化那个时代的好书，今天看来毕竟已经过去了十几年的时间，单元测试的世界已经大为不同，所以推荐看其第二版。", "marks": "推荐"}
{"content": "启发和困惑同样.对我难度可能高了一些", "marks": "推荐"}
{"content": "我认为不怎么样！", "marks": "还行"}
{"content": "不错的书，对中国现在的法制建设有很大的指导意义。", "marks": "力荐"}
{"content": "契约的死亡和契约的再生都值得一读", "marks": "推荐"}
{"content": "90年代的文章读来一点也不过时。自然法的宗教背景衰落，程序中出权利的时代该到来。", "marks": "力荐"}
{"content": "法律程序 ", "marks": "力荐"}
{"content": "没有太看懂，但是至少懂得一个买卖和两个赠与之间的关系。", "marks": "推荐"}
{"content": "仔细做过读书笔记，曾有过想和季老师交流交流的冲动", "marks": "推荐"}
{"content": "这都搞错……豆瓣啊", "marks": "推荐"}
{"content": "这篇论文和封面完全不对，信息提供错误。", "marks": "推荐"}
{"content": "很好的一本书", "marks": "力荐"}
{"content": "终于看完了，绝对的好书。第一本硬是让我一字一句读下来的英文书，完全不觉得枯燥无味。主要分析linux平台x86处理器的汇编，从底层到高层，讲的很透彻。", "marks": "力荐"}
{"content": "很好的书", "marks": "力荐"}
{"content": "下面的东西", "marks": "力荐"}
{"content": "以我现在的基础来学这个 感觉很浅 不过好在他用实例把linux上用gas开发串了一下 我自己也能按照意愿开发些简单小应用了  所以还是很有用的 下一步有两个方向 1,实现个forth2,实现个小操作系统", "marks": "推荐"}
{"content": "gas相关的书籍不多,这本是奇好的一本.\n不过内容还是少了点,如果再加点linker script方面的东西就更好了.", "marks": "力荐"}
{"content": "唉。", "marks": "力荐"}
{"content": "几年前看的时候觉得很好，现在看看觉得好浅...", "marks": "力荐"}
{"content": "找AT&T汇编找到的一本启蒙书，挺好看的。赞一下书里面给的一些链接和书单", "marks": "力荐"}
{"content": "linux平台汇编入门最佳教材！", "marks": "推荐"}
{"content": "nice~", "marks": "力荐"}
{"content": "200页不到，建议直接pdf，http://savannah.nongnu.org/projects/pgubook/。", "marks": "推荐"}
{"content": "很好的编程入门书，从底层的汇编讲起，涉及到程序设计的各个方面。最后一章还推荐了一些继续深入学习的书籍。", "marks": "推荐"}
{"content": "没有不好理解的地方，都是程序员的自我修养", "marks": "推荐"}
{"content": "简明易懂的AT&T汇编入门书籍，将各种程序概念讲的通俗易懂，最后的推荐书单非常经典。英语CET4水平即可读懂英文版，中文版为《深入理解程序设计》", "marks": "力荐"}
{"content": "GAS 汇编简易教程。", "marks": "推荐"}
{"content": "绝对值得一读的好书", "marks": "力荐"}
{"content": "从C语言到Linux系统开发的教程", "marks": "力荐"}
{"content": "比较适合汇编入门，面向的对象是完全不懂汇编的人。值得阅读的章节是2-6和第9章，中间谈到作者对coding的建议，觉得价值不算很大", "marks": "推荐"}
{"content": "此书讲AT&T风格的32位汇编语言，内容简练充实，视角高瞻远瞩，亦附带适当练习，实为不可多得之编程好书。然错字不少，仍有改善余地。", "marks": "推荐"}
{"content": "抛弃，没发现多少有用的  顺便某基友在我Kindle上看到这本书之后喷了半天这本书…… ", "marks": "推荐"}
{"content": "高级例子+爱蛋逼的作者仔细讲解就是经典书啦 3里又新加了爱乱引歌词的毛病", "marks": "力荐"}
{"content": "not worth reading at all", "marks": "还行"}
{"content": "本书有灌水之嫌", "marks": "还行"}
{"content": "must read for python newbie", "marks": "力荐"}
{"content": "看过电子版，因为它我的python学习推迟了一年", "marks": "还行"}
{"content": "浏览过官方的library，python的书都差不多，多读多写吧", "marks": "还行"}
{"content": "据说是神书，然后我稀里糊涂就读完了", "marks": "推荐"}
{"content": "深入python编程   每次都是遇到问题才来翻这本书……", "marks": "力荐"}
{"content": "初学者读一读比较有用。。。", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "用的python版本有点老，思想学到就好了", "marks": "推荐"}
{"content": "初学Python时读的，后来也推荐给想学的人。但好像后来读官方Tutorial才了解什么叫Pythonic", "marks": "推荐"}
{"content": "great complement for \"learn python the hard way\"", "marks": "力荐"}
{"content": "还可以吧，适合有编程基础的人看", "marks": "推荐"}
{"content": "Basic Python Book 周末突击", "marks": "力荐"}
{"content": "python入门书籍", "marks": "推荐"}
{"content": "不错的入门书籍", "marks": "推荐"}
{"content": "好像这本书是GPL 公开的", "marks": "推荐"}
{"content": "里面透出的知识还是挺多的，不过示例代码不怎么样。有人说\"Dive into python must die...\"呀", "marks": "还行"}
{"content": "感觉这种从例子出发写法比较适合写“快速入门指南”，写长了之后会有点缺乏结构性。然而这本书的内容还是挺多的，前几章觉得很爽，但后来就觉得有点乱，而且因为结构性不好，也不太能快速翻一遍来复习。", "marks": "推荐"}
{"content": "适合有经验的程序员python入门", "marks": "力荐"}
{"content": "推荐这里http://www.openbookproject.net/thinkcs/python/english2e/index.html", "marks": "推荐"}
{"content": "不错的。。", "marks": "力荐"}
{"content": "Sounds like a little easy. So I want to read it through.", "marks": "力荐"}
{"content": "断断续续读过。很好的入门书，难度适中，实例丰富。适合有一定编程经验的程序员。", "marks": "推荐"}
{"content": "我就是用这本书学习python的。对每个知识点结合例子讲得很清楚。", "marks": "力荐"}
{"content": "每章开头亮出一片代码，然后讲解缘由。写作风格别具一格，形散神不散的，将神秘又简单的py讲的清清楚楚。（神秘是说__getItem__等special method,简单是说：Everything is an object).", "marks": "还行"}
{"content": "入门Python的好书", "marks": "力荐"}
{"content": "学习python，尤其想入门，推荐这本书！", "marks": "力荐"}
{"content": "书不错，啄木鸟社区的翻译也很不错。", "marks": "推荐"}
{"content": "版本太早", "marks": "较差"}
{"content": "前半段入门不错，后半段把握的不好，想覆盖的东西太多", "marks": "推荐"}
{"content": "翻译名为《钻进灵蛇的肚子》/《如何成为蟒蛇3肚里的蛔虫》.....几种语言搞来搞去还是python美TAT纯python就更美了TT__TT", "marks": "推荐"}
{"content": "为有经验的非Python程序员写的入门书籍", "marks": "力荐"}
{"content": "有一个时间原因，这本书最新的是2004年更新，相比2010年的Python发展已经完全落伍了。内容也有些混乱，不适合入门。", "marks": "较差"}
{"content": "3.x 的好很多，思路清晰多了。2.x 对http/字符编码等，处理的太混乱了。", "marks": "还行"}
{"content": "据说已经过时，还是读 Python Tutorial 实在。", "marks": "还行"}
{"content": "很好的上手书，都是例子，看例子总是比看文本要快要容易接受，至少对于我是", "marks": "力荐"}
{"content": "I love this book.", "marks": "力荐"}
{"content": "swaoop.C.H推荐的，并且很好", "marks": "推荐"}
{"content": "python is so cool ^_^", "marks": "推荐"}
{"content": "用两个星期的晨间读完的。用Python不多。以后用的时候，可能会不时的倒回来看。", "marks": "推荐"}
{"content": "内容太多，夹生读了一遍", "marks": "推荐"}
{"content": "看完了再配合着赖勇浩的吐槽文看 http://blog.csdn.net/lanphaday/article/category/454256", "marks": "还行"}
{"content": "DIP", "marks": "推荐"}
{"content": "看的是社区翻译的中文版，看了很久（每周不到两个小时，看了半年多。。。），很受启发", "marks": "力荐"}
{"content": "断断续续读了几个月才读完\n可以先看赖永浩的《为什么不推荐dive into python》，再读更有意思些", "marks": "力荐"}
{"content": "看的是啄木鸟社区翻译的\r\n不错的入门书\r\n先大体看了看，简单复习了一下", "marks": "推荐"}
{"content": "趣味十足", "marks": "力荐"}
{"content": "A good book for reference", "marks": "推荐"}
{"content": "浏览了一遍", "marks": "还行"}
{"content": "有电子书, 不错.", "marks": "推荐"}
{"content": "原来我以前写的都不是python 代码，成为pythonic pythoner 路还很遥远，但是python的魅力就是能带给你惊奇，解决身边的小问题，python是最好的工具。", "marks": "推荐"}
{"content": "不深不浅的Python书,确实适合有一点点python经验的程序员看。", "marks": "力荐"}
{"content": "编程小白还是不要读", "marks": "推荐"}
{"content": "看时不错,看完都忘了", "marks": "推荐"}
{"content": "风格与Thinking in C++类似，例子也不错，适合做tips一类的读物，不适合做tutorial", "marks": "推荐"}
{"content": "unit testing is not easy", "marks": "推荐"}
{"content": "不错，但不适合入门。“自省的威力”，领略了 python 的风采。", "marks": "力荐"}
{"content": "啄木鸟社区看的翻译版，对于有编程基础的绝对是上上之选。非常好的一本书python入门！", "marks": "力荐"}
{"content": "很初级啊..", "marks": "推荐"}
{"content": "虽然比较古老，但是例子和讲解都很清楚", "marks": "推荐"}
{"content": "潜入后，再也没沉上来", "marks": "推荐"}
{"content": "好书一本。\n内容略过时。", "marks": "推荐"}
{"content": "例子很全面，对例子的解释很到位，提到的各种技巧也比较实用", "marks": "还行"}
{"content": "对于学过编程的我来说，入门还是很好的。", "marks": "力荐"}
{"content": "一目十行扫完。还是要靠写才行吧。", "marks": "推荐"}
{"content": "篇幅不长，讲了许多例子，感觉读完这本看再长的代码也不会觉得心烦看不下去了，缺点是略旧，没有覆盖numpy等包", "marks": "推荐"}
{"content": "标记是以前看过，但我几无印象，所以IT还真是干出来的...另外现在看书，期望看有深入见解（直到本质）的cheatsheet式", "marks": "推荐"}
{"content": "4m => 2 => 3", "marks": "推荐"}
{"content": "最近 有很多群友问道这本书怎么样。一个mm居然买了此书的英文版来拜读。但是个人认为，初学Python的同学们（或压根也没学过其他编程语言的）建议不要阅读此书了。", "marks": "推荐"}
{"content": "这本书的风格很诡异, 每个例子都用的一堆看不懂的未来若干节的内容, 不太喜欢这个风格", "marks": "推荐"}
{"content": "看不下去了。Python代码巨丑，没有各种括弧，光秃秃的。为啥这么多人觉着漂亮？如果只有c/c++基础，看这书入门绝对是个错误", "marks": "较差"}
{"content": "This book is kind of outdated. Many of the examples in the book are hard to apply to the latest Python 3. We better, therefore, turn to the new version which was published in 2009.", "marks": "推荐"}
{"content": "配合着手册互补", "marks": "力荐"}
{"content": "看的是《Dive into Python 3》，给力……\n", "marks": "力荐"}
{"content": "所见最佳入门书", "marks": "力荐"}
{"content": "python2.4的，例子对我来讲也不是特别实用，不过免费书籍里算不错的", "marks": "推荐"}
{"content": "好书", "marks": "推荐"}
{"content": "python入门经典，最后有其他语言基础", "marks": "推荐"}
{"content": "在网站读的，非常好，适合进阶.", "marks": "推荐"}
{"content": "粗读过，感觉更喜欢Ruby的纯面向对象", "marks": "推荐"}
{"content": "在网上读的，读到 exception handling ，后面的太细了，需要再说。里面有不少经验，建议配合 code like a pythonista", "marks": "力荐"}
{"content": "Python又一本经典。入门必读。", "marks": "力荐"}
{"content": "好书 \n好例子\n适合初学者", "marks": "推荐"}
{"content": "因为想做machine learning＋写个爬虫而突击看的书。不过依然还只是看了最基本的概念。感觉这种“以讲解完整代码来介绍知识点”的方式还不错，其实更像我们平时工作的方式－接到一个任务、发现不懂的地方、去学习相关的知识点、最后完成任务。", "marks": "推荐"}
{"content": "我是看着不推荐的人的评论，对这部书感兴趣的。\n想起Joel说的快速开发的最好结果就是可以快速进行测试，评论的人可能没有明白这个吧！！\n\n此书果然是我喜欢的类型，细读，精读之范畴", "marks": "推荐"}
{"content": "排版好奇怪的一本书，没有细看，经验更多一点再看第二遍", "marks": "还行"}
{"content": "很好的一本书，书中的例子发人深思", "marks": "力荐"}
{"content": "入门好书", "marks": "推荐"}
{"content": "本科时候入门时候看的，其实也就看了前7章，后面html，xml和单元测试部分没怎么看", "marks": "还行"}
{"content": "还真没发现into到哪去", "marks": "还行"}
{"content": "讲述方式很奇特，有些消化不良", "marks": "推荐"}
{"content": "好书！适合有其他语言经验的人入门python", "marks": "力荐"}
{"content": "python入门不错", "marks": "推荐"}
{"content": "原来这个有实体书的...", "marks": "推荐"}
{"content": "赞用实际有用的程序的讲解语言这种方式，就是书太旧了。", "marks": "还行"}
{"content": "看到第七章，觉得Python入门了。接下去可以研究和C的Integration了", "marks": "力荐"}
{"content": "有其他语言编程经验者的python 快速入门书", "marks": "推荐"}
{"content": "很久没看技术书，隔了两年多，终于把这本书看完了。之前看到单元测试就没往下看，这几天利用空余时间把后6章过了一遍。虽然我学python是从这本书开始的，但是这本书并不适合作为学python的入门书。", "marks": "推荐"}
{"content": "入門", "marks": "推荐"}
{"content": "案例与解析一样精彩", "marks": "推荐"}
{"content": "才知道function可以当variable用", "marks": "推荐"}
{"content": "深入浅出，而且中文版翻译的不错，强烈推荐。", "marks": "力荐"}
{"content": "作者是个爱跑步的印度人。", "marks": "力荐"}
{"content": "读的中文版，一周时间读完，并且对部分章节的代码手动敲了一遍。适合入门", "marks": "力荐"}
{"content": "比可爱的Python可爱多了！", "marks": "力荐"}
{"content": "深入浅出呵呵~~\n每一章开头的例子都挺实用的，而且覆盖了挺多方面~", "marks": "力荐"}
{"content": "欲罢不能", "marks": "推荐"}
{"content": "补充一下,此书不适合做教程,我一般用来做参考.推荐 http://blog.csdn.net/lanphaday/archive/2008/08/28/2845258.aspx 的评论", "marks": "还行"}
{"content": "比较实用", "marks": "推荐"}
{"content": "只能说python漂亮", "marks": "力荐"}
{"content": "好书，但是内容太老。", "marks": "还行"}
{"content": "入门不错，不过章节关联性太强，得按顺序看，想直奔主题反而找不着北~~", "marks": "推荐"}
{"content": "不错的python书  特别是有其他语言功底 非入门  入门书请看learning python", "marks": "推荐"}
{"content": "好", "marks": "推荐"}
{"content": "入门", "marks": "力荐"}
{"content": ":（ 没读完", "marks": "推荐"}
{"content": "从没用过Pathon，这本算是接触的第一本Python的书。例子和语言特性结合的很好，还有好多程序设计的思想，学到了很多啊。竟然还学会了罗马数字。。。", "marks": "力荐"}
{"content": "一般般，对不起这价格。", "marks": "较差"}
{"content": "一本没法买到原版的书,在啄木鸟社区找到的中文翻译版本,入门的好教材.但是没有<Learning Python>完善,当然也没它废话那么多.", "marks": "推荐"}
{"content": "中文电子版", "marks": "推荐"}
{"content": "前七章很赞，xml html soap部分有点画蛇添足的感觉，总体来说非常好。", "marks": "力荐"}
{"content": "Not for beginner", "marks": "推荐"}
{"content": "例子不好懂，选材不着边际，该讲的没讲。", "marks": "较差"}
{"content": "几年前看过的中文版电子书", "marks": "推荐"}
{"content": "实用的参考书", "marks": "推荐"}
{"content": "练手书", "marks": "还行"}
{"content": "书是好书，2年前读过，以后也许再也不会读了", "marks": "推荐"}
{"content": "需要学习，评分较高\n", "marks": "推荐"}
{"content": "还在读，里面讲解测试，test driven还是不错的。", "marks": "还行"}
{"content": "内容和实例都很好，就是版本很久没更新，很多代码需要修改才能支持Python 3", "marks": "推荐"}
{"content": "有点脚本基础的看看挺好", "marks": "力荐"}
{"content": "python 进阶书籍，版本有点低，内容有点老， 建议看看新版本是不是好点。", "marks": "力荐"}
{"content": "简单易懂。", "marks": "推荐"}
{"content": "看了一半。太老了，can't catch up with the python fashions，直接看会走弯路。", "marks": "还行"}
{"content": "有其他语言编程经验的python书籍", "marks": "推荐"}
{"content": "半个月读完，第一次学着用一个笔记本记录过程中的问题和解决技巧，以后都这样看技术书。", "marks": "力荐"}
{"content": "读过的算是比较好的一部python书", "marks": "推荐"}
{"content": "先给示例程序,再逐句剖析的模式,所有看的时候不会漫无目的.好书,正在看", "marks": "力荐"}
{"content": "入门好书", "marks": "力荐"}
{"content": "讲述.Net平台知识的一本不可多得的好书！！", "marks": "力荐"}
{"content": "很经典", "marks": "力荐"}
{"content": "翻译的还算不错", "marks": "推荐"}
{"content": "应该叫《位运算之美》", "marks": "推荐"}
{"content": "换个名字就是C的奇技淫巧。主要是算法，关键是指令之间的联系，软硬联系，基本的整数和位串关系改变了过去循环和选择的长长的序列，仅仅用加法操作成为一个非常强大的数据处理操作。希尔伯特曲线是皮亚诺曲线的变形：映射表到状态转移表", "marks": "力荐"}
{"content": "增长见闻，激发自己做技术的热爱。", "marks": "还行"}
{"content": "适合查阅，想要逐个搞懂你会疯的～\n", "marks": "推荐"}
{"content": "数学奇书。事实上，沦为了算法手册", "marks": "力荐"}
{"content": "有意思是挺有意思的，但也仅仅是有意思。", "marks": "还行"}
{"content": "很有难度的一本书，花了我不少精力", "marks": "力荐"}
{"content": "一本书的各种位运算的奇技淫巧……", "marks": "推荐"}
{"content": "这本书不适合通读，适合放在手边当参考手册，另外一般的程序员用不到本书的只是，本书是写给程序库设计者的，尤其是要求高性能的程序库。里面的算法非常高效，要是读者理解汇编，阅读本书效果更佳。", "marks": "力荐"}
{"content": "2012-04-25 ", "marks": "推荐"}
{"content": "以后再碰到把咬脚脖子当黑客的无知小青年，我就推荐他去读这本书。\r\n写读过真是不好意思，我也没读懂多少，也就看过一遍。", "marks": "推荐"}
{"content": "刚简单的看了一下,现在有英文电子版的，\r\n考虑买一本仔细研读……", "marks": "力荐"}
{"content": "很多都是指令集的位运算优化，似乎不是算法级的优化？？。喜欢位运算的值得一看。奇淫巧计。", "marks": "推荐"}
{"content": "原来是编码的奥秘啊。讲述计算机程序的由来。", "marks": "还行"}
{"content": "相当猎奇的一本书嘛", "marks": "推荐"}
{"content": "上古时代的程序员为了提高程序性能挖空心思去创造『黑魔法』，在这之中，屠龙之技恐怕就是各种神乎其技的位操作了。果你要编写最优化编译器或者高性能的代码，就必须阅读这本书。", "marks": "推荐"}
{"content": "在这本书上学到了很多位运算的技巧，比如计算整数的二进制表示中1的个数，等等。其中有个高低位交换的算法今天刚讲FFT，逆序那一步就得用到。老师说用高级语言实现太麻烦了，其实就是那么几句嘛。", "marks": "推荐"}
{"content": "位运算技巧大全！！！", "marks": "力荐"}
{"content": "看的时候枯燥，用的时候绚丽。", "marks": "推荐"}
{"content": "这本书很酷, 很酷的位运算 :)", "marks": "推荐"}
{"content": "各种二进制Tricks; 不过, 除非是使用C语言进行底层编程, 大多数人应该没有机会使用书中的技巧", "marks": "推荐"}
{"content": "前面很有趣", "marks": "力荐"}
{"content": "说实话，这本书有点过于艰深了，我其实是没怎么看懂的", "marks": "推荐"}
{"content": "要求数学还是比较多", "marks": "推荐"}
{"content": "对一些要求极其高效的程序设计时非常有用", "marks": "推荐"}
{"content": "全是工具的使用、、、虽然也学到一点点工具", "marks": "较差"}
{"content": "05年看的这本书，之所以买这本书，是想体验一下入侵别人电脑的感觉，记得当时还找过几个“肉鸡”做实验，仅是实验，没做什么坏事，呵呵。\n虽然很快我就对黑客技术失去兴趣，但这本书增强了我的防毒防马和防入侵能力，降低了我对杀软和防火墙的依赖，杀毒软件搞不掂的病毒(木马)，能手工清除，甚至还自制过一些病毒(木马)防疫的土方法，防疫效果明显。", "marks": "还行"}
{"content": "miracle", "marks": "力荐"}
{"content": "帮助你了解一些开发中可能会被忽视的问题", "marks": "还行"}
{"content": "分析一类人，so cool", "marks": "力荐"}
{"content": "经验不足, 无法参透.", "marks": "推荐"}
{"content": "04年购于南京", "marks": "还行"}
{"content": "开了先河，但内容比较散。有点敏捷开发的影子", "marks": "力荐"}
{"content": "不是我想象中的内容，不过还是有些意思~", "marks": "还行"}
{"content": "有些内容浅显易懂，有些内容比较高深，很好的分析了软件开发中人的因素，可惜我没有看完。", "marks": "推荐"}
{"content": "This book has only one major purpose--to trigger the beginning of a new field of study: computer programming as a human activity, or, in short, the psychology of computer programming.", "marks": "推荐"}
{"content": "大学时读过。", "marks": "推荐"}
{"content": "没有传说的那么奇。", "marks": "还行"}
{"content": "没事可以看看", "marks": "还行"}
{"content": "温伯格的书，一定要看", "marks": "力荐"}
{"content": "看完了，很多地方不明白。有时间再看", "marks": "推荐"}
{"content": "很好的一本书,从不同角度去分析问题.\r\n希望有时间再读一次.", "marks": "力荐"}
{"content": "第二次看，上次是05-06年看的，6年后有何不同", "marks": "推荐"}
{"content": "每个程序都有其复杂与细微的级别，专业程序员的专业之处就在于可以准确地写出相当级别的程序，而不是一味求全、求精、求快。", "marks": "力荐"}
{"content": "有收获。", "marks": "推荐"}
{"content": "感觉书的年代有点老了", "marks": "还行"}
{"content": "对举的例子不是很熟...从程序开发到开发团队到程序员个体到程序语言本身再到程序开发....", "marks": "推荐"}
{"content": "有30年的老书了，在15年前读过，菜鸟程序员的自己很有感触。", "marks": "推荐"}
{"content": "温伯格的重要著作。不能错过，不仅仅是程序开发上的问题，同时温老也在心理上抽丝剥茧。\n不过，看温老的书需要沉淀和思考，更需要对生活和工作的观察和思考。", "marks": "推荐"}
{"content": "引用另一个人的评价：“每个程序员的上司都该有一本，应当认真读读， 用心去记， 按其中的训诫行事； 放在办公桌上供其程序员去偷。 但他仍要继续再放一本， 直到没人拿为止。”有些章节没有读，或者没有细读，但我认为程序猿也应该读，书中很多问题也需要程序猿来思考。", "marks": "推荐"}
{"content": "俯首参拜温伯格", "marks": "推荐"}
{"content": "刚读一半，但已经认为是5星图书了", "marks": "力荐"}
{"content": "本书会用作者多年的经历告诉我们，真正决定程序开发过程的，其实是人内心里与行业无关的本性，软件的问题，终归是人的问题。如果这本书与曼昆的《经济学原理--微观经济学分册》一同读，理解起来会更加容易", "marks": "力荐"}
{"content": "发现许多敏捷中的理论那么多年前就有了，不过又没有看完", "marks": "推荐"}
{"content": "虽然过时但很经典", "marks": "推荐"}
{"content": "大师经典", "marks": "推荐"}
{"content": "这本书很酷。", "marks": "推荐"}
{"content": "还是温伯格的。", "marks": "还行"}
{"content": "我觉得对于国内大部分软件公司，书中的思想只是一种摆设", "marks": "推荐"}
{"content": "本科上软件测试课用的课本", "marks": "推荐"}
{"content": "翻译太差……", "marks": "较差"}
{"content": "此书是经典，我个人意见啊！\n测试的离散数据基础，已经使用原则的原因讲的非常详细，一直认为测试对象，无论黑盒白盒灰盒没有本质的区别，此书正好说明了此想法。\n\nsed:单缺陷猜测与多缺陷猜测的基础可以准备写一篇论文了 list一下", "marks": "力荐"}
{"content": "比较理论的一本书，没有读完。", "marks": "还行"}
{"content": "考试前三天看完了，可是考得基本都是概念", "marks": "还行"}
{"content": "概要性的了解一些基本的测试技术", "marks": "推荐"}
{"content": "需要比较扎实的数学功底。这是一本专业性及技术性很强的书，不建议初学者看", "marks": "还行"}
{"content": "软件测试在软件构建活动中究竟应该是什么角色，目前还没有定论。这本书倒是给出了很多值得借鉴的实践活动", "marks": "推荐"}
{"content": "理论性比较强，入门者看懂不太容易", "marks": "推荐"}
{"content": "这本书对于深入了解一下windows网络编程还是有点帮助的\n前面三章很不错，比较详细，\n后面的ftp,email.不能实现。\n串行通信那么一点，讲不清楚。", "marks": "还行"}
{"content": "曾经拼命啃过第一卷后再也啃不动了。", "marks": "力荐"}
{"content": "很多人说好，只是一直没有时间去读", "marks": "力荐"}
{"content": "高爷爷的书,真不敢说自己看过,恩,真的.也就只是看过而已.", "marks": "力荐"}
{"content": "圣经啊~~~~", "marks": "力荐"}
{"content": "只是MMIX有点不好看, 不若描述性的语言更明了", "marks": "力荐"}
{"content": "NBSL", "marks": "力荐"}
{"content": "略读，好深...", "marks": "力荐"}
{"content": "未求甚解；没做习题。", "marks": "力荐"}
{"content": "木有读完", "marks": "力荐"}
{"content": "其实一点也没看懂啊", "marks": "推荐"}
{"content": "第一卷看了一半看不下去...写的太无趣了", "marks": "还行"}
{"content": "这也算是需要 一辈子用心来读 的一本书吧！~", "marks": "力荐"}
{"content": "看到第二部分 没再看下去 因为后面在说机器码 毕竟不是计算机专业 不够耐性 前面说得不错 特别是中间对算法的形式化定义很美妙 以及算法分析复杂度的部分 很详细。 ", "marks": "力荐"}
{"content": "刚翻看就被排版吸引住了，排版太漂亮了！Knuth十年磨一剑的排版系统果然非同凡响。看着比中文版舒服，建议直接看英文版", "marks": "力荐"}
{"content": "毋庸多说，神作！Knuth不仅仅有鼻祖级别的学问，更有旷世大师的气概！祝他老人家身体健康，完成他的心愿！", "marks": "力荐"}
{"content": "神书，但是我智力太捉急了。。。感觉有点像沉思录神经这种书啊。就是Nb的人可以从里面引一段话，然后让大家觉得哇好Nb。但是搓的人比如我自己去看，就是WTF is this的赶脚。。。", "marks": "力荐"}
{"content": "此生不敢说读懂了这套书", "marks": "力荐"}
{"content": "惭愧", "marks": "推荐"}
{"content": "第一卷读完了，基本上成了我的数学课本，第二卷死活度不下去，55555555555", "marks": "力荐"}
{"content": "hey 有生之年一定看完你", "marks": "力荐"}
{"content": "很花时间，需要勇气去读，算法这个大学问的根在里头。", "marks": "力荐"}
{"content": "COOOOOL~~", "marks": "力荐"}
{"content": "编程艺术", "marks": "推荐"}
{"content": "显然,我没读完.", "marks": "力荐"}
{"content": "看到mix  我想发疯，卷3, 4都没有太多mix了  我打算不看mix  这本书讲的都是基础  老东西了  ", "marks": "推荐"}
{"content": "成为Programming bible不为过", "marks": "力荐"}
{"content": "喜欢", "marks": "推荐"}
{"content": "Knuth 神作", "marks": "力荐"}
{"content": "看完第一卷就看不下去了，感觉明明简单的事情，用mix搞的真复杂，还不如用伪代码呢。", "marks": "还行"}
{"content": "有些晦涩 读起来有些难", "marks": "力荐"}
{"content": "难！", "marks": "力荐"}
{"content": "那谁，我儿子觉得这科学不明白，给我把这门科目撤了吧！看着心烦，眼不见为净！", "marks": "较差"}
{"content": "我该怎么说呢。。。诸如此类这确实是我觉得最没用的东西。这本书算是工具书吧。还是老的工具书。", "marks": "推荐"}
{"content": "【把复杂的东西说简单才腻害，好书！】", "marks": "力荐"}
{"content": "大一时以为MFC就是windows编程的全部 钻研呀热血呀梦想呀 所有所有的回忆呀 随我飘洋过海 今天要在此分别啦 >_<...", "marks": "还行"}
{"content": "幫老師捧場唄~~~", "marks": "推荐"}
{"content": "MFC在当年还是不错的，后悔在学校的时候没好好读", "marks": "还行"}
{"content": "这本书看的不是API，是他对于一般的windows api用面向对象的思维抽象的。。。很出色。。。", "marks": "力荐"}
{"content": "没看出哪点好。+ =+", "marks": "还行"}
{"content": "当年看这本书的时候，真的感觉看到了MFC精髓所在，现在想想，MFC的体系真的有点。。。", "marks": "推荐"}
{"content": "1、主要看第二章 C++的重要性质,了解C++的多态是怎么实现的。\n2、力荐的原因除了里面的图表让我了解的多态怎么通过vtable实现之外，还有作者写书的风格，这一章里面出现了\"让我替你问一个问题\"、\"得到这些结论后，看看什么事情会困扰我们\"、\"你一定很想知道虚函数是怎么做出来的，对不对?\"等引导性的句子，这么好处除了引导，给出作者的思路，还有读起来不会枯燥。\n", "marks": "力荐"}
{"content": "2013-9-8: 今天我又看了一遍, 虽然好久没有碰了, 但依托之前的训练还能想起很多, 好书肯定不只让你读一遍而已. 我觉得配套孙鑫的视频更好, 两样学习下来, 可以很有把握了.", "marks": "力荐"}
{"content": "已经有点过时了。", "marks": "推荐"}
{"content": "勿在浮砂筑高台", "marks": "力荐"}
{"content": "MFC最好的读物", "marks": "推荐"}
{"content": "侯捷的这本书确实做到了深入浅出，我以为很好", "marks": "力荐"}
{"content": "勿在浮沙筑高台。后悔没有早点看到。", "marks": "力荐"}
{"content": "如果你在windows下用vc编写用户介面程序，那就必看", "marks": "推荐"}
{"content": "看得出它带着一种高级情感", "marks": "力荐"}
{"content": "完了再读一遍", "marks": "力荐"}
{"content": "现在又不得不看电子版的了。真后悔把这本书贱价卖给学弟。经典就是应该反复多看几遍，争取榨干作者的各种思想", "marks": "力荐"}
{"content": "CPP系Q1", "marks": "力荐"}
{"content": "只有知全貌 才能够驾驭", "marks": "力荐"}
{"content": "对MFC封装细节进行条分缕析，jjhou 经典之作", "marks": "推荐"}
{"content": "刚工作的时候大概翻了一遍，思路非常好。", "marks": "力荐"}
{"content": "很久很久之前....\n虽然很不正规。但自己是通过这本书学习C++的，比之Primer、thinking系列，我倒觉得侯捷先生这本书适合入门。\n后面的MFC框架设计剖析真的很用心，至少之后再没有看到有如此\"用心\"的书籍。\n不管现在的人怎么说,Linux或者什么MFC过时之类的话，我只能表示，这本书仔细看过了、领悟一遍了，绝对不会后悔。", "marks": "力荐"}
{"content": "经典！入门MFC的必选", "marks": "力荐"}
{"content": "MFC圣经级教材", "marks": "力荐"}
{"content": "用VC必读的一本好书", "marks": "力荐"}
{"content": "好啊", "marks": "力荐"}
{"content": "了解MFC内部机制的好书~", "marks": "力荐"}
{"content": "这本书还在书架放着。。最终我还是没学会MFC", "marks": "推荐"}
{"content": "MFC框架很丑陋", "marks": "力荐"}
{"content": "我UI的入门书，啥都不说了", "marks": "推荐"}
{"content": "唉，看得很晕，自己基础太差了", "marks": "推荐"}
{"content": "现在想想。这书不咋地。后面的书评还不错", "marks": "还行"}
{"content": "只是读了前边几个章节，MFC的解决方法太不优雅了，定义各种宏去实现封装，为了目的不择手段啊。觉得没有必要读下去了。", "marks": "较差"}
{"content": "弄明白了消息映射等，颇有收获，后面的实例部分浏览了一下，以后需要的时候在细读(希望这一天永远都不要来，哈哈哈，多文档模式做程序太蛋疼了)", "marks": "推荐"}
{"content": "当年还是很喜欢读技术书的😳", "marks": "推荐"}
{"content": "虽说有些老 但是还是很有参考价值", "marks": "力荐"}
{"content": "好书，自己买了，也推荐了很多同学也买了", "marks": "力荐"}
{"content": "本书最大的价值在于对windows界面编程的启发！其次是对MFC的剖析对于理解其他类似的东西很有帮助！", "marks": "推荐"}
{"content": "书好，就像在看小说，MFC的朋友必看的吧。我用不上荒废了。", "marks": "力荐"}
{"content": "当年真有毅力，竟然读完了，可惜读完了好像没写过MFC，现在也忘得差不多了，浪费了，记得当年还是非常有快感的", "marks": "力荐"}
{"content": "学习MFC必看。主要讲解了MFC中消息的路由机制和单文档多文档的内部原理，看着本书要先对WinSDK编程有一定的了解（不要问是不是应该先学C/C++了，不懂这两门语言那还是文盲）。", "marks": "力荐"}
{"content": "不愧为大师啊  相见恨晚之感。。", "marks": "力荐"}
{"content": "Coding 入门很好的书", "marks": "力荐"}
{"content": "粗略看过。理解MFC机制的一本好书，侯捷老师的讲解很清楚，同时又有大量的图示。从中可以看到MFC的内部的流程是什么样的。", "marks": "力荐"}
{"content": "名气很大的一本书，不过老实说，我没有从这本书里面学到很多....", "marks": "还行"}
{"content": "第一遍，还是有很多疑惑。。。", "marks": "推荐"}
{"content": "真屌丝，不mfc", "marks": "力荐"}
{"content": "学生时代读的，也没有太搞懂。但仍然记得某位同学的一句话，“这本书毁了一代人”", "marks": "还行"}
{"content": "MFC, N年前看的，重要的几个宏讲的很好！", "marks": "推荐"}
{"content": "侯捷老师的名著。", "marks": "推荐"}
{"content": "侯捷的书一向雷声大雨点小，，前三章有价值，后面的就有点水了。。", "marks": "还行"}
{"content": "MFC大势已去", "marks": "还行"}
{"content": "这是相当的经典", "marks": "力荐"}
{"content": "绝对的好书，MFCer必看。", "marks": "力荐"}
{"content": "神书", "marks": "力荐"}
{"content": "侯俊杰的经典之作", "marks": "力荐"}
{"content": "早年看过的技术书", "marks": "力荐"}
{"content": "前几章，对MFC的模拟，实在是经典", "marks": "力荐"}
{"content": "第一章介绍C++特性, 非常简单但透彻", "marks": "力荐"}
{"content": "豆瓣疯了吗..为神马最近推荐给我的全是编程的....要督促我学习吗...", "marks": "力荐"}
{"content": "也是粗略看一篇，没时间细读（理解一部分），今后有时间，需要相关知识，好有个印象。第三章，六大关键模拟技术和第六章，MFC的生命周期，写得很不错。", "marks": "推荐"}
{"content": "超烂啊，学的没用，闲着无聊啊。", "marks": "很差"}
{"content": "但我讨厌MFC", "marks": "推荐"}
{"content": "说句实话，不喜欢这本书，并不是写的不好，而是读完过一段时间，基本上没有在我的脑海里留下很多有用的东西，有可能我本身不太做界面方面的工作。当然作为一种专研去剖析代码值得学习，如果不是搞这方面工作的人读这本书帮助不大，更推荐同自己平时工作相关的类库源码分析，例如：Stl源码分析、Python源码分析等。", "marks": "还行"}
{"content": "我的技术启蒙书籍。", "marks": "力荐"}
{"content": "我都记不得上次用MFC是什么时候了 这本书倒是有印象 额 适合没基础没想法的人照葫芦画瓢吧", "marks": "还行"}
{"content": "这个曾经真的试图看过。貌似太难的样子，不太懂。基础不好的不推荐读", "marks": "推荐"}
{"content": "聊备一格，推荐MFC Internals", "marks": "还行"}
{"content": "前3章写的蛮好的，介绍c++，windows编程，MFC技术仿真，隆重推荐。第4章，有点水，自己操作一下IDE，看看教学视频效果更好。第5-7章，进一步介绍MFC，有点和1-3章重复，如果前面没理解好，这里就值得再仔细看看，否则有点罗嗦了。第8-11章，介绍一些应用层面上的东西，", "marks": "还行"}
{"content": "重点看了前面c++基础特性的。mfc后面都忘得差不多了，就记得好多宏。。。", "marks": "推荐"}
{"content": "MFC必读。虽然我一辈子也不想再用MFC了...", "marks": "力荐"}
{"content": "前边不错，后边就是api了，当时应该是本好书", "marks": "还行"}
{"content": "不可多得的有关mfc设计的书籍，对于mfc的框架及其实现讲解的很明了。我觉得，最主要的不是说了解这个框架，而在于我们自己究竟是否找到了抽象的手段和解决问题的方法。", "marks": "力荐"}
{"content": "这本书好早就读过了,感觉现在再研究MFC的话有点太高手了.呵呵.", "marks": "推荐"}
{"content": "难得一见的技术好书", "marks": "力荐"}
{"content": "喜欢前面的关于C++的知识的一些描述，和对MFC framework的描述,不喜欢MFC的宏以及JJH对这些宏的解说", "marks": "推荐"}
{"content": "MFC，很老的书了，新的MFC结构也不太一样，不过必须从老结构开始才能学到内容。", "marks": "推荐"}
{"content": "读了两遍 MFC基本上手了", "marks": "力荐"}
{"content": "侯捷深入浅出的一部, 看了太久, 后来也很少做MFC的工作, 已经基本忘了, 但是印象中没有STL那本好, 那本的很多东西, 不知道是不是用C++还比较多的原因, 一直印象深刻.", "marks": "推荐"}
{"content": "半個月读完的，為了上手項目....\n消息机制的原理说得比较清楚", "marks": "推荐"}
{"content": "想当年在公司搞监控软件的时候，就是靠这本书和VC技术内幕吃饭的。", "marks": "力荐"}
{"content": "简单的读过这本书，没有深入了解", "marks": "推荐"}
{"content": "对于看不懂微软恶心的C++风格，又必须看懂的人极力推荐！", "marks": "力荐"}
{"content": "看过一部分", "marks": "推荐"}
{"content": "六年前读完的，那时候MFC已走向没落，现在更没有读的意义了吧。不过平心而论，这本书还是比较经典的，只是此一时彼一时而已。", "marks": "推荐"}
{"content": "看了这本书最大的收获不是MFC的知识，而是C++基础和framework的知识。", "marks": "力荐"}
{"content": "~", "marks": "推荐"}
{"content": "classic", "marks": "力荐"}
{"content": "读不懂", "marks": "很差"}
{"content": "虽然现在mfc没啥用了，但这本书确实是深入浅出的，只是需要耐心去读。", "marks": "推荐"}
{"content": "理解mfc框架的经典的书", "marks": "力荐"}
{"content": "深入剖析了MFC的脉络", "marks": "推荐"}
{"content": "从学c++到mfc 是个痛苦的挣扎的过程\n\n当初为了拿计算机学位\n\n现在想来\n\n实际就是能独立些程序的过程\n\n还好 这本书帮了我不少\n\n我是个读书 喜欢寻根问底的人 ；\n\n现在mfc相对过时。\n\n这本书  可以说是我对我那个时代的一种纪念。。。。", "marks": "力荐"}
{"content": "侯老师的书写得很好！很多年前读的，不知道现在是不是已经过时了？\n如果要学MFC编程推荐阅读。", "marks": "推荐"}
{"content": "MFC必看", "marks": "推荐"}
{"content": "虽然说读完了以后也没怎么用过mfc，但是对一个这么流行的框架的机制原理进行了学习，再学习其他的框架就容易了许多，自己在设计框架的时候也知道了该保留什么，该废除什么，怎么更加易用。", "marks": "推荐"}
{"content": "翻来覆去就是那几个宏，也许这本书可以变得更薄许多", "marks": "力荐"}
{"content": "没有读完过。", "marks": "推荐"}
{"content": "不多说了，MFC入门精通必备", "marks": "力荐"}
{"content": "阐述详细，解释清楚。\n但夸大问题本身解决的困难程度。或使读者勇气不够。\n另行文方式太过罗嗦，描述用语不够专业，导致需用文字大片描述而不得点。\n\n依旧好评，适合初学者。", "marks": "还行"}
{"content": "侯捷\n翻译大家，但从这本书来看，他同时也是著述立说的大师！！", "marks": "推荐"}
{"content": "老生常谈", "marks": "力荐"}
{"content": "本书的质量和用心是毋庸置疑的。但是 MFC，属于一个典型过度设计的不良案例。所以，你没有必要使用它，但是作为一种近乎 windows 平台的“通用交流语言”，你知道要懂和了解它，可以比较容易的使用其他人使用 MFC 开发的代码基础，不困难的融为己用。这是一个基本要求。", "marks": "推荐"}
{"content": "10年TEC-ED上听过侯老师的一堂课，其对技术的认真和细节的钻研态度对我触动很大。。这本可以说是侯老师的经典之作吧，虽然MFC现在。。。在这本书里你还可以见到其他书里没有的图表描述方式。。", "marks": "推荐"}
{"content": "语言太难懂了", "marks": "还行"}
{"content": "讲的很细，很基础", "marks": "推荐"}
{"content": "2011.01.24", "marks": "推荐"}
{"content": "如果不想读《mfc internal》那种漫天源码的书，建议读一读这本，深入浅出，书中第二三章并没有传说那么难。", "marks": "力荐"}
{"content": "学习VC编程必备", "marks": "力荐"}
{"content": "几好的一本书", "marks": "力荐"}
{"content": "虽然写的都是较为深入的\n但是看着带劲\n对MFC理解非常有帮助，呵呵", "marks": "力荐"}
{"content": "这本书写得真好，是我当初进入IT行业的第一本厚书，当时完全看不懂，硬着头皮，啃了一个暑假，终于读完，真佩服自己当时的毅力。", "marks": "推荐"}
{"content": "读了快一个月，非常非常赞的一本书。", "marks": "力荐"}
{"content": "如果每个电气电子专业的孩子都能听听硬件黑客们的故事，也许他们中的某些就不会翘那些电路课，而最终成为前端工程师了。这本书遗憾之处是鲜有时间上的提示，结果看的时候很难找出一条大的时间线索，而且由于缺少可以对应上的历史背景而觉得不够尽兴（比如被从头喷到尾，却不知道到底做了什么的ibm）。另外对游戏无感所以第三代黑客的部分没细看〜", "marks": "推荐"}
{"content": "great great great books// 不读这本书，你怎么可能理解SICP前言里面“We are fortunate to have been apprentice programmers at the feet of Bill Gosper and Richard Greenblatt.”这句话所体现出来的复杂情感呢？第一部分最好，真正的黑客", "marks": "推荐"}
{"content": "看不下去……那些陈年旧事对于我这样的90年代开始用计算机的人毫无吸引力，可能三四十岁的老用户才能心有戚戚焉", "marks": "还行"}
{"content": "接近神领域的异端者们，他们挑战规则，沉浸在0和1的世界中无法自拔，他们改变了整个世界，留下了数个传说，后人无法企及。Richard Stallman是史上最后一名纯粹的黑客", "marks": "推荐"}
{"content": ": \t\nTP393.08/6158", "marks": "推荐"}
{"content": "任何人都未曾达到的内部世界。", "marks": "力荐"}
{"content": "为黑客精神布道的编年史，适合爱好者，对门外的Hardcore Learner来说废话太多、不见泰山。", "marks": "还行"}
{"content": "不知道当时谁推荐的这本书，但我想说的是，天哪这是一本27年前出版的书啊！那时候我还没出生那，我才搞不懂这些老爷爷们当时在捣鼓什么呢。PS：翻译很差，真的很差！", "marks": "较差"}
{"content": "花三分之一的篇幅讲一家游戏公司未免有些太长了。", "marks": "推荐"}
{"content": "值得一看的历史书。翻译得很好，读起来很流畅。", "marks": "推荐"}
{"content": "让我定位了真正的黑客精神", "marks": "力荐"}
{"content": "充满激情的年代", "marks": "力荐"}
{"content": "高潮迭起，一星扣在版式以及文章用点而不用小标题，，看得吃力。", "marks": "推荐"}
{"content": "算是有些冗长，但值得一读二读。", "marks": "推荐"}
{"content": "我爱编程！我爱硬件！我为计算机而着迷！好的，鸡血打完了继续看闲书。", "marks": "力荐"}
{"content": "黑客伦理！这是最重要的！", "marks": "力荐"}
{"content": "今年看过的最棒的书", "marks": "力荐"}
{"content": "又一本被翻译糟蹋了的好书，第8章和第18章翻译得尤其烂。", "marks": "较差"}
{"content": "屌丝必读...", "marks": "力荐"}
{"content": "从不熟悉的年代，到熟悉的年代", "marks": "推荐"}
{"content": "黑客史诗", "marks": "力荐"}
{"content": "码农的光荣与梦想", "marks": "推荐"}
{"content": "挑战墨守成规的文化～", "marks": "推荐"}
{"content": "一部计算机发展+游戏开发编年史", "marks": "推荐"}
{"content": "很有趣的故事书。对计算机的访问应该是不受限制的，完全的，任何人都可以动手去尝试。", "marks": "推荐"}
{"content": "一本介绍黑客们发展历史的一本书籍，对黑客伦理做了细致的阐述。", "marks": "推荐"}
{"content": "计算机宗教信仰文化的奠基之作，不可不读，会影响你整个计算机的价值观和世界观，并驱使着你朝着黑客文化迈进！", "marks": "力荐"}
{"content": "黑客精神的阐述……遗憾的是，在文章的最后，作者觉得最后的黑客精神已经没落。给了我很多启发，尤其是关于计算机和互联网行业发展方面。", "marks": "力荐"}
{"content": "上古英雄志。那一群拓荒的人呀。", "marks": "力荐"}
{"content": "一群有趣的理想主义者，游戏玩家。", "marks": "力荐"}
{"content": "带我回到黑客年代的起点，欣赏那些天才与奇迹。他们的偏执、疯狂、傲慢都让我震惊不已。突然感到踌躇满志，又感到万念俱灰。", "marks": "力荐"}
{"content": "没读懂，有读懂的，这书我就送", "marks": "较差"}
{"content": "上古时期的黑客传说，如果你想知道黑客是怎么进化的，这是一本好的考古书。", "marks": "推荐"}
{"content": "从MIT的格林高斯博、尼尔森这些第一代黑客，到第二代硬件黑客再到近代的第三代商业黑客，本书构画了出了计算机技术是如何从实验室里的亚文化一步步的变成如今的巨大产业，以及在其中凭借个人之力推动其发展的黑客们 （这本书竟然是在AppleⅡ的年代写的！", "marks": "力荐"}
{"content": "读了这本书才明白，原来ThoughtWorks本质上是一家黑客伦理拥护者的公司。这也可以理解了为什么我们如此喜欢分享，对学位、年龄、种族、职位毫不在意而仅仅在乎他们的技艺与做出的贡献，已经对软件改善人类生活的根本认同。", "marks": "力荐"}
{"content": "20世纪50-80年代黑客史，TMRC技术模型铁路俱乐部-家酿俱乐部-游戏黑客-自由软件基金会！hackers will be the heroes of the next revolution, too -- Levy", "marks": "力荐"}
{"content": "历史书", "marks": "推荐"}
{"content": "關於編程思路方面內容好少 原來是本黑客歷史書啊…… 作者時不時抖個包袱 贊", "marks": "推荐"}
{"content": "从纸带时期写其，写给想了解黑客的外族人", "marks": "推荐"}
{"content": "大致了解了发展史吧，翻译还是有点生硬..", "marks": "推荐"}
{"content": "膜拜神一样的人们。", "marks": "力荐"}
{"content": "为自己的爱好全身心投入并不断发掘的人有很多，这群人只不过是投在计算机上。没那么神乎，不至于捧多么高。很多反复强调的条例其实应该是自发自觉。", "marks": "还行"}
{"content": "一星给黑客精神及书中各位大牛一星给那个时代一星给作者苦劳", "marks": "还行"}
{"content": ":《DOOM启世录》已经读完一大半了 愈发的对卡马克年轻时候看过的那本阐述了黑客精神与黑客伦理的书感兴趣了  前半部分有点历史书的味道 读到后面越来越像《DOOM启世录》了！ 增长我对计算机的爱的书籍啊\n（里面很多片段很有画面感且印象深刻， 半夜的机房，海面上遥望远方的火箭升空，好像tothemoon的某一帧啊！ 统称宏伟时刻； 还有时空对接到近年，熟悉的名字的出现与活跃，像是乔布斯等等..另一个角度的见证和间接感知的对接等等 .... 还有很重要的一些脉络，如关于一个文化的产生，以及一个社群的简历，社群的意义和衍生的能量等等）", "marks": "力荐"}
{"content": "cool~", "marks": "力荐"}
{"content": "黑客精神，人类最后的乌托邦。", "marks": "力荐"}
{"content": "文字比较无聊，不知道是不是翻译的原因", "marks": "还行"}
{"content": "从94年接触开始。算是人生中相对来说迷恋时间较长的一件事情了。", "marks": "推荐"}
{"content": "这本书内容还是比较多的，在kindle上看完了，主要痛苦的是人名，全部翻译成中文看得好累……还不如直接英文", "marks": "推荐"}
{"content": "\"我根本不想剖析我的电脑。\"", "marks": "推荐"}
{"content": "又看了一遍，书是好书，但翻译真的是糟糕。希望又机会重新译一下这本书！", "marks": "推荐"}
{"content": "故事很精彩，但翻译太烂，错别字和谬误之处太多。", "marks": "力荐"}
{"content": "文章不错，就是印刷用纸就像街边盗版书…太恶心了", "marks": "推荐"}
{"content": "讲了很多黑客的故事，信息要自由传播啊。讲游戏那部分篇幅太多了，那时候硬件很重要吧，翘课的才是神们", "marks": "还行"}
{"content": "这就是文化类书籍。。", "marks": "力荐"}
{"content": "黑客的历史，或者可以说传记。访谈纪实、历史。可能因为我不是黑客，或者因为这本书看完的时间拖的太长了，书是本好书，但我共鸣比较少。黑客文化是深入探索与信息自由。信息自由与商业社会是矛盾的，书中好几个从黑客到企业家的人似乎也经历过这种矛盾，但没有解决。信息自由阻碍商业最大化，信息不自由阻碍创造最大化，所以“创造”和“商业”矛盾？不知道，想不明白。另外黑客投入到计算机中探索而改变世界非常热血，但基本上忽略了生活。我向往像黑客一样探索一件事物甚至创造，但又不想把现实生活过的一团糟。应该有折中的生活方式吧。也许，这样极端的投入才称得上黑客？不，我想有更好的方式可以顾及生活同时投入探索创造。", "marks": "推荐"}
{"content": "从计算机诞生到八十年代苹果机风行世界的黑客历史。最让我感动的是，原来世界上真的有人和我一样过着一天28小时、一周6天的生活……", "marks": "还行"}
{"content": "真是一部波澜壮阔的历史. 早期关于MIT黑客精神产生的历史,是自己完全不知道的,读起来让自己也感觉非常的陌生. 自己完全没有办法想像,他们是怎么样通过二进制代码来实现那些匪夷所思的功能的.(虽然现在想想,那些当时很炫的东西,现在可能不值一提了,但是从另一个方向想,今天的所有这些想当然,其实不过是活在人家的框架下面而已). 接下来的关于家用电脑的部分,因为之前读过 乔不斯传,所以了解的多一些. (可能还是因为当前社会的环境吧,一直不能理解那种无条件分享的黑客精神,反到是盖茨的那封公开信,自己到是很赞同). 最后谈到的游戏黑客,让自己回想到了童年,那些玩过的游戏. 现在想想,一个人完成那么多经典的游戏,真是莫名的敬畏啊.(特别是,这些人大多是半路出家,靠兴趣自学成才啊)", "marks": "推荐"}
{"content": "所有的一切，都与MIT黑客有关。", "marks": "力荐"}
{"content": "精彩！", "marks": "力荐"}
{"content": "讲一群做出过创新成果的计算机爱好者的事迹，没有预想中的精彩，草草翻翻了事。", "marks": "还行"}
{"content": "翻译太垃圾了", "marks": "较差"}
{"content": "做个黑客", "marks": "力荐"}
{"content": "那些永远充满好奇心和创新精神，技艺高超的人", "marks": "力荐"}
{"content": "黑客故事会。", "marks": "较差"}
{"content": "本来黑客的故事应该很有趣的，但这本书读起来却很无趣。是作者文笔问题还是翻译问题？而且书用的无衬线字体又小又密，读了第一章就不想再读了。", "marks": "较差"}
{"content": "13/3/24 -   实体书@校阅览室\n\n超强的好奇心, 忘我的coding, 单纯的知识分享~ 黑客是一群可敬可爱的人.\nunprogrammable is nothing... XX不能实现的想法简直弱爆了... -_-\n语言稍逊色~", "marks": "推荐"}
{"content": "对我来说，起步太晚，书中大多数Hacker，即使到现在我都未闻或耳生。金钱主导的现在，历史又被改了样，Hacker不再是关注的焦点，风光的都是商人或是“黑客”。这书的意义就是修了20世纪的hacker史，而且是在他们都还健在的时候，保证了历史的真实和 Hacke思想的原汁原味，真的是宝贵的资料阿！", "marks": "推荐"}
{"content": "黑客，计算机革命的英雄！", "marks": "力荐"}
{"content": "很好的一本书，对计算机科学的上古时期进行了一番详细而迷人的叙述，同时也是对六十年代美国时代精神一个侧面的注解。", "marks": "力荐"}
{"content": "about wizards", "marks": "推荐"}
{"content": "从上古时代到近代的计算机产业发展史。那是个遥远的年代，大量的财富涌进这个产业带来了辉煌，也彻底毁掉了这一切产生根基，永远也回不去了", "marks": "力荐"}
{"content": "终于看完这本非常有年头的书，很多东西因为没有经历过最早期的编程时代少了点代入感，不过还是能学到很多东西的", "marks": "推荐"}
{"content": "一般吧，可能是翻译或者是语言环境的因素，感觉挺乱的", "marks": "还行"}
{"content": "刚刚读完，记一下。记录了150名黑客的事迹，叙事年代主要是上世纪60年代前后，美国发明计算机不久那个年代。书看得简略，斯托曼的翻译感觉别扭，看现在国内提起这位开源界的大神，大家都是直呼其字母缩写 RSM，不知道上面的翻译是否是通用惯例。", "marks": "推荐"}
{"content": "前两部分看了让人热血沸腾，游戏那部分感觉一般般了。", "marks": "力荐"}
{"content": "技术是思想的延伸，对于真正的黑客，纵使其貌不扬屌丝格局，并不妨碍手上创造可以优雅如艺术品。后来，cyberpunk把黑客道德进一步普及到大众文化之中，时空改变，少年老去，保持最纯正的黑客定义已无必要，每一个时代都会有闪动心中激情的浪潮出现，个中人未必自觉，只需要忘我途中便是传记", "marks": "推荐"}
{"content": "讲述黑客的历史，怀念“信息自由流通”的黑客发源时代，翻译不佳。", "marks": "推荐"}
{"content": "真正的黑客之魂", "marks": "力荐"}
{"content": "不知道为什么，看着没感觉。看浪潮之巅和黑客与画家的时候更有激情", "marks": "还行"}
{"content": "一口气读完了，令人心情澎湃的计算机革命史诗，非常棒！！！", "marks": "力荐"}
{"content": "鸡血书", "marks": "力荐"}
{"content": "25年前写的，的确是一本古老的书。现在看来，很多东西总结的很好，比如信息应该是自由的等等。", "marks": "推荐"}
{"content": "本来一段波澜壮阔, 让人看了能够热血沸腾的故事. 怎么写的那么无力呢", "marks": "推荐"}
{"content": "黑客文化而已，似乎没啥太大收获……", "marks": "还行"}
{"content": "断断续续，历时几个月看完了这关于『黑客』的『史书』。作者详实的记叙了计算机发明到二十几八十代年的发展过程中，黑客文化对行业、对社会的影响。三代黑客的分界比较清晰的展现了黑客文化的演变。对希望了解黑客文章的读者而言是很不错的读物。", "marks": "推荐"}
{"content": "黑客先从学习开锁开始。。。以前有句话说，凡是锁着的门，对于黑客来说都是一种挑衅，原来这扇门本意真的是指一扇门。。。门后都是修理计算机的工具，MIT的黑客经常会自己抄起工具，改线、硬编码、加指令、换零件。后期讲到黑客伦理与商业世界的冲撞，共融，以及象征着黑客开放精神的最后一位黑客RMS。早期黑客对计算机性能的压榨，对编码技术的精益求精，开放分享的精神，相信会透过开源社区一直延续下去", "marks": "推荐"}
{"content": "08年时读过老版。", "marks": "力荐"}
{"content": "就算是我这样的90后，甚至对于马云马化腾来说，这本书里的故事也太早了，那个时候是fortran和汇编的时代，算是计算机历史的史前时期了吧，但那个时候的，才是原汁原味的黑客精神。也是能够明白，为什么在之后的计算机原始人时期，能够催生自由软件运动和linux了。\n\n    这世上充满著等着被解决的迷人问题。\n    没有任何人必须一再的解决同一个问题。\n    无聊而单调的工作是有害的。\n    自由才好。\n    态度并非不等效于能力\n    写免费的软件。\n    帮忙test和debug免费的软件。\n    公布有用的资讯。\n    帮忙维持一些简单的工作。\n    为hacker文化而努力。\n\n", "marks": "推荐"}
{"content": "老实说，这本书很枯燥", "marks": "力荐"}
{"content": "说起早期黑客都是肉眼直读8进制的..", "marks": "力荐"}
{"content": "伴随着beyond乐队的怒吼读完此书 一时间心血澎湃 一扫伊人不得见的愁云 所谓黑客精神 自由 分享 非政治化的精英主义 是的 在这个领域 个人英雄主义发挥到了极致 技术可以单挑整个世界 拯救世界后还能功成身退 颇有道家风骨 计算机领域在精神实质上是最接近禅宗的 每一个牛逼人类的心路历程都是一部功夫熊猫真人版 战胜自己的内心 不顾一切追寻一些东西 并不理睬世人的评价标准 孤独但是强大 仅有星辉 却能照亮整个黑夜", "marks": "力荐"}
{"content": "故事实在都太长了~", "marks": "还行"}
{"content": "黑客怪咖们的故事", "marks": "推荐"}
{"content": "本来最近在看《白帽子讲web安全》，看了本书，不得不哀叹人家所说安全高手在民间，我这样半瓶子醋的还是算了吧。另书中提到“一切专制的核心都是保密”，更加加深了身在政府行业干所谓安全工作的原罪感。", "marks": "力荐"}
{"content": "看了这本书我明白了一些事情，也许以前就知道了的，而这只不过是一次验证。", "marks": "还行"}
{"content": "“苹果公司的8名员工为了参加计算机展览会也同样忙得不亦乐乎。苹果公司租用了两块10平方英尺的展位，每个展位350美元，此外还趁乱占用了接近展览大厅入口处的一处黄金位置。”", "marks": "力荐"}
{"content": "时代的荣耀和悲哀.", "marks": "力荐"}
{"content": "作为计算机早期历史读物，可以一阅，其他就算了", "marks": "还行"}
{"content": "欲望和需求推动技术发展。但是这仅仅是由少部分人驱动的，也是人类最聪明的那部分人。", "marks": "力荐"}
{"content": "内容四星，另外一星给那些巫师们。", "marks": "力荐"}
{"content": "故事写的不是很吸引人。。。", "marks": "还行"}
{"content": "印象中的黑客，一直是一群技术高超，利用技术漏洞深入到一些常人难以进入的地方搞破坏的人。后来才知道这样的人被称为「骇客」。真正的黑客是一种精神象征，提倡分权、信息的自由流通，厌恶一切阻碍他们使用计算机的东西。他们是艺术家，是诗人，是一个新时代的开创者。", "marks": "推荐"}
{"content": "算是看完了吧，前面两部分看得还挺认真的，很佩服这些人，但后面的关于游戏的部份，就兴趣不那么大了，当是翻完了吧。", "marks": "推荐"}
{"content": "翻译很一般，故事结构散乱，各种各样的人名让人头大。就是想通过本书多了解点黑客文化，本书的内容是6，70年代到80年代初，早期黑客的经历。对黑客来说，光着的门是一种挑衅，锁着的门是一种侮辱。对于一个杀手来说，感情是致命的，对于一个黑客来说，这个世界是多余的。", "marks": "还行"}
{"content": "前面三分之一看得有些枯燥，几乎想丢到一边了。到第一部分快结束时候开始有趣起来。倒不是因为内容和风格有变化，而是更多体会到了作者传达的东西。黑客对自由的追求、对技术的热爱，在计算机波澜壮阔的发展过程中依然保持着。跨越3个时代，从大型机到个人电脑，从软件到硬件再到软件，从MIT实验室到硅谷，黑客们见证和创造了计算机业的巨变。随着商业化的日益严重，理想和现实的冲突一再上演。历史总是有些相似，现在的开源浪潮不也是黑客文化的体现吗。这是一个让人兴奋的时代！", "marks": "推荐"}
{"content": "IT史必读书籍，只有和黑客一样专注，才能和黑客一样成功。这本书没读完，主要了解了一下60年代的软件黑客和70年代的硬件黑客。", "marks": "力荐"}
{"content": "像个疯子一样专注一件事。", "marks": "力荐"}
{"content": "如果能看得热血沸腾则说明有当程序员的潜质，如果看了不喜欢，说明你不适合这个行业。", "marks": "力荐"}
{"content": "不错的书， 了解了黑客的前世今生， 他们是一群可爱的人， 热情，执迷于计算机， 活的很纯粹， 黑客文化起起伏伏， 就如计算机一样， 黑客也在不断的轮换， 但是黑客不死。", "marks": "力荐"}
{"content": "好书，翻译的不错，当然读原作体会到更多幽默。不知道为什么不是很火的样子，实在是非常好的书", "marks": "力荐"}
{"content": "那是最美好的时代，那是最糟糕的时代。现在也是如此……（纸薄，字丑，错字扣一星）", "marks": "推荐"}
{"content": "很长。。。而且不是想象中的那么有意思", "marks": "较差"}
{"content": "详细介绍了黑客的起源和文化，非常吸引人，恨生不逢时逢地。", "marks": "推荐"}
{"content": "黑客史", "marks": "推荐"}
{"content": "断断续续读完以后，印象最深的是描写第一代黑客的部分和最后一位黑客，Richard Stallman.", "marks": "力荐"}
{"content": "怎么感觉读不太进去，以后再试试....", "marks": "还行"}
{"content": "个人电脑在黑客圈兴起的历史很有意思。一群nerd把智商都投入在这个为常人所不感兴趣的事物里，反而催生了整个行业。", "marks": "推荐"}
{"content": "流水账记录，开始很好奇，时间一长就烂尾了", "marks": "还行"}
{"content": "一种人，一种基因，一种文化，即便茶余饭后的消遣，对专业人士而言，有利于把自己看的更清楚一些，燃起些莫名的激动。", "marks": "力荐"}
{"content": "3代黑客的不同及演化，对黑客文化的弘扬", "marks": "力荐"}
{"content": "伟大的历史总令人心潮澎湃", "marks": "力荐"}
{"content": "休闲读物；那个时代走在最前沿的人。一流的内容，二流的翻译，下流的介绍。哪有扯到多少扎死伯格？", "marks": "力荐"}
{"content": "非技术出身，第一章内容看的时候有点迷糊，来到沃滋的时候，碰上熟悉的人物，开始觉得有点意思，到《巫师与公主》这一节的时候，彻底高潮，整本书后半部分基本是以雪乐山展开的，黑客文化在于分享与突破，在商业化越来越强的年代里面，分享似乎太难了，但是黑客文化在上世纪60到80年代仿佛一幅强光打在天空，让人振奋，任何年代都有它的传奇故事。", "marks": "力荐"}
{"content": "黑客简介", "marks": "还行"}
{"content": "一部黑客文化的兴衰史，看到后面的时候脑子里一阵 “滚滚江湖谁主沉浮” 一般轰隆轰隆的风雷声…… ", "marks": "力荐"}
{"content": "黑客的编年史，介绍为了计算机的发展做出的贡献，陈述事实的同时阐述黑客的理念。另，本书感觉很多翻译上/校对上的小错误。", "marks": "推荐"}
{"content": "情节引人入胜，感觉和看小说差不多，黑客的史诗~突然很向往当年那个没有那么多商业考虑的技术乌托邦年代~", "marks": "推荐"}
{"content": "这样的魂淡现在越来越少了", "marks": "还行"}
{"content": "好书，但是却读的没啥激情。。。", "marks": "推荐"}
{"content": "真正的黑客文化", "marks": "推荐"}
{"content": "有趣的题目，可是写得很无趣，不知道是翻译的问题还是原文就写得不好", "marks": "较差"}
{"content": "黑客的乌托邦时代已经过去，也许残存的还有一些精神。", "marks": "推荐"}
{"content": "虽然有点流水账的感觉，人物走马观花，但是确实是全景深入展现了这些先驱对计算机的贡献，活脱脱一部计算机发展的编年史", "marks": "推荐"}
{"content": "激情燃烧的岁月还在继续", "marks": "力荐"}
{"content": "了不起的黑客价值观。书中的人物名太难记住了，再伴随着书不是以人物为主线，而是以黑客的发展为主线，导致任务穿插介绍，增加了阅读难度", "marks": "还行"}
{"content": "一直以来自己想要拥有的精神与追求的价值，内心深处夜最亮的那一颗星！", "marks": "力荐"}
{"content": "黑客精神总能找到自己的路，偏执主义并不能代表所有的黑客精神，实用主义也一直是其一部分：比尔，马克都是代表", "marks": "推荐"}
{"content": "好奇心、热情、突破条条框框、分享和超越，这不仅仅是黑客精神的遗产，更是IT行业源源不断的驱动力。", "marks": "力荐"}
{"content": "回味那个年代的单纯", "marks": "推荐"}
{"content": "当八卦看看吧。。。", "marks": "还行"}
{"content": "黑客好厉害", "marks": "推荐"}
{"content": "扫读：与真正的黑客相比，我们虽然也喜欢折腾，但是我们太容易满足，也没有耐心，获得丝丝成就，就停滞不前...", "marks": "还行"}
{"content": "我们不仅缺乏IT工业，更缺乏文化、历史底蕴", "marks": "力荐"}
{"content": "激情的计算机发展史", "marks": "还行"}
{"content": "烂书，太平白", "marks": "很差"}
{"content": "就像是计算机史学，即便是这本旧书也可以看到互联网延伸到现在的镜像。赞美。", "marks": "力荐"}
{"content": "寒假看的，mark一下", "marks": "力荐"}
{"content": "整个就是计算机的早期成长历史呀。", "marks": "力荐"}
{"content": "略简单", "marks": "还行"}
{"content": "对于一个自称会写程序的人，不会 sql 是不是很丢脸……", "marks": "推荐"}
{"content": "复习一遍。", "marks": "推荐"}
{"content": "声明性语言--语法顺序和执行顺序不同；select操作是映射；主要的数据类型是表；join操作是集合代数；", "marks": "力荐"}
{"content": "相当实用的handbook", "marks": "推荐"}
{"content": "基本简明", "marks": "推荐"}
{"content": "入门手册，花几分钟随便翻下还成。", "marks": "还行"}
{"content": "入个门...", "marks": "推荐"}
{"content": "总算是在15年最后一天看完，温故而知新~比较全面的介绍，有条理且清晰。", "marks": "推荐"}
{"content": "果然很入门~还是继续看W3school算了- -", "marks": "还行"}
{"content": "非常实用的一本书", "marks": "力荐"}
{"content": "很详细，配合《MYSQL 必知必会》一起看，然后用navicat for mysql来写代码", "marks": "力荐"}
{"content": "相当入门级的书了，章节解释紧凑浅显，算是很好的工具书了", "marks": "力荐"}
{"content": "好简单，真的是十分钟，几年前学的数据库，现在再看有种蛋蛋的忧伤", "marks": "还行"}
{"content": "恩不错，基本都是些常用的。", "marks": "还行"}
{"content": "我觉得不错", "marks": "推荐"}
{"content": "复习一下SQL", "marks": "还行"}
{"content": "查询手册。", "marks": "推荐"}
{"content": "有人问到如何开始接触数据库编程，我找了找，发现这本小册子，给推荐了，自己也花了一两个小时看了一遍，系统而简单，还不错的入门书。", "marks": "推荐"}
{"content": "55555555  必知必会", "marks": "推荐"}
{"content": "真棒", "marks": "力荐"}
{"content": "很适合作入门的教程读, 简单易读. 当然, 也仅适合入门读.", "marks": "推荐"}
{"content": "很赞的一本书~~每次用的时候才去图书馆借~~", "marks": "力荐"}
{"content": "内容很详细，适合SQL初学者。", "marks": "推荐"}
{"content": "作为随身参考手册不错", "marks": "推荐"}
{"content": "入门的入门。。", "marks": "还行"}
{"content": "比较基础的SQL介绍和使用举例", "marks": "还行"}
{"content": "像书名一样，Teach yourself SQL in 10 minutes。", "marks": "推荐"}
{"content": "这本书太容易脱页了", "marks": "推荐"}
{"content": "讲的很浅显，非常入门的内容。适合初学者学习，恩，还适合像我这样的，虽然学了很久，但是基础不牢靠的人来增强信心使用", "marks": "力荐"}
{"content": "很好和sql学习书，200多页。很快就可以看完", "marks": "力荐"}
{"content": "数据库入门   还行", "marks": "推荐"}
{"content": "这是一本神奇的小册子", "marks": "力荐"}
{"content": "随手携带的小书  可以在地铁里看   很实用  浅显易懂  毫不浮夸   nice", "marks": "力荐"}
{"content": "这个读完了 =.=", "marks": "推荐"}
{"content": "谁能想到自己现在每天都要写sql......", "marks": "推荐"}
{"content": "简短，重点讲的是SQL语句，数据库部分需要另补。如果是零基础，可能还需要查一查相关术语，先补点数据库之类的知识。", "marks": "力荐"}
{"content": "2012.3.11 通过正则表达式必知必会检索到\n用来做SQL入门吧\n2012.4.8 10个小时看完 在MySQL下完成实验\nSQL入门好书\n感觉看了这本后没多大必要再去看《MySQL必知必会》和《SQL Server编程必知必会》了", "marks": "力荐"}
{"content": "这真是一本入门书，讲解了sql语言的大部分知识点，但都是点到为止，阅读起来非常流畅。以前上过数据库的课，但老师讲的主要是数据库的原理，对sql语言讲的很少。自己动手写项目时，为了效率也都是在使用entity framework这类ORM，对sql语言没有缺乏系统的了解，需要用时就去google，这本200页的小书也算是填补了我这方面的知识空缺。", "marks": "力荐"}
{"content": "比较简单适合入门。", "marks": "还行"}
{"content": "这其实是一个叫做自学24小时的系列中的一本书。通常我对这种名字的书都没啥兴趣，因为这些东西怎么可能24小时学会呢？可是这本却与众不同，把问题分成很多小部分，让人很容易就理解，就像head first系列一样，节约了大量记忆的时间。", "marks": "推荐"}
{"content": "创建table插入行加列什么的放在后面感觉不是很方便，没数据怎么select……", "marks": "还行"}
{"content": "还需要自己多多练习", "marks": "推荐"}
{"content": "发现越是枯燥的东西越要看老外的教材. 统计书.数学书,软件书什么的.", "marks": "力荐"}
{"content": "简明易懂，完全不需要基础", "marks": "还行"}
{"content": "经典入门，其实Sql的精髓还是在于应用。 （大概每一样实用性的东西都是这个特性吧）。 这本书的特点就在于摆脱了传统的大段理论，直接教你一些语句的写法和用法，非常有利于初学者上手", "marks": "推荐"}
{"content": "还是英文版贴切： teach yourself SQL in 10 min。 短平快的小书，入门推荐。", "marks": "推荐"}
{"content": "入门知识，简单扼要。", "marks": "还行"}
{"content": "对于初学者来说大大的够了，但是要想再高级的话就大大的不够了。。。如果我的report结果好的话我会加星的><", "marks": "力荐"}
{"content": "入门很好用", "marks": "力荐"}
{"content": "小册子实用性很强", "marks": "力荐"}
{"content": "不错的SQL入门。", "marks": "推荐"}
{"content": "最喜欢的就是这种简单的书，没有多余的废话，虽然是入门级别，但是干嘛要一口吃个胖子呢", "marks": "推荐"}
{"content": "蛮浅显的，适合入门", "marks": "推荐"}
{"content": "好书。逻辑清楚，可读性高", "marks": "力荐"}
{"content": "真的是超级小巧的一本书，作为入门读物甚好（恶补SQL中……QAQ", "marks": "推荐"}
{"content": "入门 既简单 很快看完", "marks": "力荐"}
{"content": "可作为程序员的手边书。/*现已转看第4版，第3版未完。*/", "marks": "力荐"}
{"content": "简短实用", "marks": "推荐"}
{"content": "重拾SQL", "marks": "还行"}
{"content": "只读查询语法，讲的还算清楚", "marks": "推荐"}
{"content": "工具书", "marks": "推荐"}
{"content": "太基础了些，推荐W3CSchool来得更实在些", "marks": "较差"}
{"content": "SQL基础入门书。书中最好的地方我觉得是对每一个讲解的SQL语句，在不同的DBMS上的写法差别都列出了不同的地方。", "marks": "还行"}
{"content": "浅显易懂, 入门好书", "marks": "推荐"}
{"content": "内容比较基础，梳理了一下以前学过的内容。", "marks": "推荐"}
{"content": "没有废话，直接上", "marks": "推荐"}
{"content": "实用入门", "marks": "推荐"}
{"content": "先厚的学习了一遍，再来看薄的这本，然后发现之前的一些疑问得到了解答，目前还是有一些疑问，在实践中继续摸索吧！", "marks": "推荐"}
{"content": "基础的教程，简单而又充实", "marks": "推荐"}
{"content": "笔试面试前翻一翻，加强记忆", "marks": "力荐"}
{"content": "确实是蛮简单的入门教程，比w3school要好一点", "marks": "力荐"}
{"content": "两个晚上读完，数据库实用入门神书。", "marks": "力荐"}
{"content": "零基础入门书籍~", "marks": "还行"}
{"content": "迅速掌握常见SQL语法很有用，很薄的一本书", "marks": "推荐"}
{"content": "轻巧，和算法技术手册一样", "marks": "推荐"}
{"content": "看完这本，再去hackerrank把数据库的oj刷了，数据库的基础就妥了", "marks": "力荐"}
{"content": "比较基础", "marks": "还行"}
{"content": "小册子，基础。", "marks": "推荐"}
{"content": "基础", "marks": "推荐"}
{"content": "入门书里是讲的清楚的", "marks": "推荐"}
{"content": "入门经典", "marks": "推荐"}
{"content": "赶紧出第4版，把MySQL的新的支持的都加上咯~~", "marks": "力荐"}
{"content": "还做了笔记，SQL小册子，主要还是动手操作", "marks": "力荐"}
{"content": "比较浅", "marks": "还行"}
{"content": "好久前读过，Mark下。", "marks": "推荐"}
{"content": "我还真读过...", "marks": "还行"}
{"content": "很基础的书~~每读一遍都能有所收获", "marks": "推荐"}
{"content": "sql语句简单讲解，新手工具书。", "marks": "推荐"}
{"content": "【计院图书大清理-1 的确都是实实在在的干货！】", "marks": "推荐"}
{"content": "第一本看完的技术书   马克一下\n通俗易懂", "marks": "推荐"}
{"content": "短小精悍、深入浅出，翻译也很负责。", "marks": "推荐"}
{"content": "实用型书籍，如果是突然需要运用SQL语言而没有一点基础的话用这本基本能搞定了", "marks": "推荐"}
{"content": "两天看完，有个大概印象，还帮我过了公司面试，非常好的入门书", "marks": "推荐"}
{"content": "Teach Yourself SQL in 10 Minutes. 短平快.", "marks": "还行"}
{"content": "一点也不枯燥的入门书。", "marks": "力荐"}
{"content": "哈哈，做为工具书还行，入门级的，如果能上网的话，大家就不用买了。", "marks": "推荐"}
{"content": "精炼实用，快速上手", "marks": "力荐"}
{"content": "SQL入门神书", "marks": "推荐"}
{"content": "这书是在非常经典，推荐！", "marks": "力荐"}
{"content": "很不错的参考书，入门级别。复习了一遍SQL。", "marks": "力荐"}
{"content": "快速唤起对sql的记忆", "marks": "还行"}
{"content": "入门书", "marks": "推荐"}
{"content": "太浅了，一口气可读完", "marks": "力荐"}
{"content": "对于有过sas中sql使用基础的来说略简单", "marks": "推荐"}
{"content": "迅速掌握SQL的基本语法，但仅仅只是语法而已", "marks": "还行"}
{"content": "写的没什么太复杂的，入门看看还是挺好的", "marks": "推荐"}
{"content": "很基础的，比较适合初学，基本概念", "marks": "力荐"}
{"content": "就是关键字介绍而已", "marks": "较差"}
{"content": "适合初学者，或者学过的查漏补缺  知识点挺全的 ", "marks": "推荐"}
{"content": "最喜欢这种两天看完的书了", "marks": "力荐"}
{"content": "入门书吧", "marks": "推荐"}
{"content": "SQL入门必备~", "marks": "力荐"}
{"content": "简单粗暴。。", "marks": "力荐"}
{"content": "简单实用，确实都是些必知必会的东西。", "marks": "推荐"}
{"content": "如果按照用户的实际操作顺序来写的话，就更好了。本书一上来就讲select，该语句占了半本书还多的篇幅；看了好久才有创建、插入、更新等操作，不是太符合使用上的逻辑。入门好书。", "marks": "推荐"}
{"content": "搜SQ居然把它搜出来了😂尘封的记忆，被我翻烂的一本小书，当年面试突击必备啊！全书没一句废话，实用到不能忍！从事数据库相关工作的必须人手一本😂", "marks": "力荐"}
{"content": "初学者入门SQL很好的书，也是快速重温常用SQL的书。", "marks": "推荐"}
{"content": "Sql入门可以参考的书籍，对于有一定开发经验的人来说，有点太过简单了！", "marks": "还行"}
{"content": "理论性的入门挺好的，由浅入深以及搭配使用，各个层级捋得比较清晰。\n实践的话要看是具体哪个数据库，再具体练一练才好", "marks": "还行"}
{"content": "sql语言入门书", "marks": "力荐"}
{"content": "知识点简练，作为复习和巩固，很不错", "marks": "推荐"}
{"content": "简短的sql语言入门和速查手册", "marks": "推荐"}
{"content": "很基础的数据库内容，不过条理结构清晰，让大家对SQL有个整体全面的认识。", "marks": "推荐"}
{"content": "入门，或者长时间不用快速回忆用不错", "marks": "力荐"}
{"content": "写的很棒！从头到尾练习2遍以后可以基础入门。0基础一看就会的工具书。强推！", "marks": "力荐"}
{"content": "样例表怎么下载？", "marks": "还行"}
{"content": "这本书最最大的谬误在于序言中说的适合本科生读！！！  要看懂的这本书，你首先得把金融学学得很好，不是期末考试前看看就能过的那种金融学，是纯数理金融学，各种数学模型；还要SAS学得很精通，不是随便只会做个方差分析就能够看明白的。。", "marks": "推荐"}
{"content": "凑合吧。此书的定位是初学者入门提高书籍，但是书中的内容又很尴尬。很多内容浅尝辄止，对于高手而言，会的依然会，找不到有营养的知识；对于刚刚入门c和linux的新手而言，你让它去记什么bss、data段，你不告诉他APUE却让它去理解mmap、你不讲解线程的概念却去罗嗦一大堆pthread的用法和禁忌，你不去讲解连接和加载就去剖析hello world，总之会很尴尬。\n\n另外，此书中某些代码的排版实在让我无法恭维。还有，书评中五毛泛滥，非常明显。\n\n对我而言，比较有价值的部分是第6章，用c来实现容器、迭代器和算法、动态绑定；第8.3节内存管理器、8.5节调试手段和原理；第10.1节文本处理。\n\n编程是没有捷径的，指望这么一本书就能成长为“系统程序员”是不靠谱的，还得去啃CSAPP、SICP。\n\n", "marks": "还行"}
{"content": "面向对象设计、数据结构、系统编程和一些软件工程知识的大杂烩，作为科普书还不错。可惜有点虎头蛇尾，后面几章除了大篇幅贴代码就是复述维基百科和软件界名著。总体评价是“值得一看”", "marks": "还行"}
{"content": "成功学有很多 成长计划也有很多 但这本是专门针对程序员的 = = ", "marks": "推荐"}
{"content": "感觉一般。讨厌这个书名。。。", "marks": "还行"}
{"content": "李先静很实在", "marks": "还行"}
{"content": "很难想象薄薄的一本书竟然可以讲到如此多的方面，但这本书不仅做到了，而且做得很好。\n类似于基础版的《深入理解计算机系统》，更加平易近人且不失深度。\n一点瑕疵是书中部分代码格式有些错乱。", "marks": "力荐"}
{"content": "不得不感叹，Java程序员既是幸福的，也是痛苦的，幸福的是可以不用学习太多就写出较好的程序，而C程序员基本是必须学习的比较多才能写出较好的程序，痛苦的是对于Java程序员而言，要写出很好的程序，就必须比C程序员学习的更多。\n\n本书完全符合书中所列的目标人群，对于C程序的初级人员而言，是非常值得一看的。", "marks": "推荐"}
{"content": "一直希望豆瓣能出分类四叫做“弃读”... 说读过或想读或在读都不合适啊...", "marks": "推荐"}
{"content": "很不错~", "marks": "力荐"}
{"content": "初入行时作闲书参考不错。不能算是一本技术书。不过一些技术之外的问题，在这里会找到成长的门径。", "marks": "推荐"}
{"content": "这本书有好的出发点：经验之谈。但是从中途开始失控：半清不楚的设计模式+面向对象。", "marks": "较差"}
{"content": "看了很多讲编程风格和提高编程素养的书，还是这本书讲的实在实用。非常适合初出茅庐的人学习，编程菜鸟看完了真是提高很大。以前我知道全局变量不好，但是具体怎么改？这本书给了很好的解释。很多书都是给结论但是不说明为什么，这本书这点做的非常好！", "marks": "力荐"}
{"content": "是一本可以随时翻看的好书", "marks": "力荐"}
{"content": "讲得还不错，对于初学者很有帮助，很多是思想上的，值得一看。", "marks": "推荐"}
{"content": "感觉一般，没什么特色。", "marks": "还行"}
{"content": "和系统没几毛钱关系", "marks": "还行"}
{"content": "汗，选错书了，这种入门的书。", "marks": "还行"}
{"content": "还是有些收获的，主要是一些技巧和启发", "marks": "推荐"}
{"content": "困倦中扫了一遍。", "marks": "还行"}
{"content": "给个5星。不过是国内书籍的5星，离国外5星还有差距。用一句话来总结本书，可以是，C语言实现面向对象编程。", "marks": "力荐"}
{"content": "非常不错！还有很多小技巧。", "marks": "力荐"}
{"content": "理解了许多以前疑问的地方，学到了很多实用的编程方法，以后还有再看看。", "marks": "力荐"}
{"content": "这本书没有读完，但是内容确实相当的实用，很高兴国内的计算机书籍质量越来越高了。", "marks": "推荐"}
{"content": "如果要我来写这样一本书，写的未必比他差，of course，是指销量，如果说内容，不知要甩出它几条街。这本书倒是很适合还未走出campus的三岁小孩子拜读。", "marks": "很差"}
{"content": "非常适合初级程序员（像我这样还没毕业的研究生）阅读，里面的设计思想都很有用，作者的十多年的经验总结的很好。", "marks": "力荐"}
{"content": "不知所云。", "marks": "还行"}
{"content": "有所帮助，不过远没有字字珠玑之感", "marks": "还行"}
{"content": "估计是已经过了读这种书的年龄了，对自己来说内容太泛而不精", "marks": "还行"}
{"content": "物是人非，重新审视后觉得其实不靠谱..", "marks": "还行"}
{"content": "作为软件开发入门无道的新人，值得细看", "marks": "力荐"}
{"content": "好书", "marks": "力荐"}
{"content": "很不错的书，可以用来看看自己有多少漏洞。。。", "marks": "力荐"}
{"content": "此书淋漓畅快，用降低复杂度的思想将数据结构，算法，设计模式，操作系统基础原理和测试方法贯穿起来，醍醐灌顶，受益匪浅，力荐。ps： 我还需要多读几遍，好好学习。。。仅是概览，已经深为所动", "marks": "力荐"}
{"content": "许多设计，代码可以直接用上。", "marks": "推荐"}
{"content": "2010年9月15日 Amazon|自费 通读", "marks": "还行"}
{"content": "我应该算是系统程序员成长划的第一个受益者与实践者，一路成长，在这里说声，谢谢", "marks": "力荐"}
{"content": "这书很多地方没讲明白，各位还是多看博客吧，Web服务的好资源确实太少了。", "marks": "较差"}
{"content": "2014年第一次出版，有案例片段，属于webservice较深入", "marks": "力荐"}
{"content": "内容有点旧。偏重 web programming", "marks": "还行"}
{"content": "2013-07-07：入门，不错。讲的还算详细。", "marks": "推荐"}
{"content": "可借鉴的东西真的不多，基本一个小时可以读完两章。", "marks": "还行"}
{"content": "javascript... 入门级...例子讲的比较细...但似乎不是很全...适合入门", "marks": "推荐"}
{"content": "抛弃，没发现多少有用的  顺便某基友在我Kindle上看到这本书之后喷了半天这本书…… ", "marks": "推荐"}
{"content": "高级例子+爱蛋逼的作者仔细讲解就是经典书啦 3里又新加了爱乱引歌词的毛病", "marks": "力荐"}
{"content": "not worth reading at all", "marks": "还行"}
{"content": "本书有灌水之嫌", "marks": "还行"}
{"content": "must read for python newbie", "marks": "力荐"}
{"content": "看过电子版，因为它我的python学习推迟了一年", "marks": "还行"}
{"content": "浏览过官方的library，python的书都差不多，多读多写吧", "marks": "还行"}
{"content": "据说是神书，然后我稀里糊涂就读完了", "marks": "推荐"}
{"content": "深入python编程   每次都是遇到问题才来翻这本书……", "marks": "力荐"}
{"content": "初学者读一读比较有用。。。", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "用的python版本有点老，思想学到就好了", "marks": "推荐"}
{"content": "初学Python时读的，后来也推荐给想学的人。但好像后来读官方Tutorial才了解什么叫Pythonic", "marks": "推荐"}
{"content": "great complement for \"learn python the hard way\"", "marks": "力荐"}
{"content": "还可以吧，适合有编程基础的人看", "marks": "推荐"}
{"content": "Basic Python Book 周末突击", "marks": "力荐"}
{"content": "python入门书籍", "marks": "推荐"}
{"content": "不错的入门书籍", "marks": "推荐"}
{"content": "好像这本书是GPL 公开的", "marks": "推荐"}
{"content": "里面透出的知识还是挺多的，不过示例代码不怎么样。有人说\"Dive into python must die...\"呀", "marks": "还行"}
{"content": "感觉这种从例子出发写法比较适合写“快速入门指南”，写长了之后会有点缺乏结构性。然而这本书的内容还是挺多的，前几章觉得很爽，但后来就觉得有点乱，而且因为结构性不好，也不太能快速翻一遍来复习。", "marks": "推荐"}
{"content": "适合有经验的程序员python入门", "marks": "力荐"}
{"content": "推荐这里http://www.openbookproject.net/thinkcs/python/english2e/index.html", "marks": "推荐"}
{"content": "不错的。。", "marks": "力荐"}
{"content": "Sounds like a little easy. So I want to read it through.", "marks": "力荐"}
{"content": "断断续续读过。很好的入门书，难度适中，实例丰富。适合有一定编程经验的程序员。", "marks": "推荐"}
{"content": "我就是用这本书学习python的。对每个知识点结合例子讲得很清楚。", "marks": "力荐"}
{"content": "每章开头亮出一片代码，然后讲解缘由。写作风格别具一格，形散神不散的，将神秘又简单的py讲的清清楚楚。（神秘是说__getItem__等special method,简单是说：Everything is an object).", "marks": "还行"}
{"content": "入门Python的好书", "marks": "力荐"}
{"content": "学习python，尤其想入门，推荐这本书！", "marks": "力荐"}
{"content": "书不错，啄木鸟社区的翻译也很不错。", "marks": "推荐"}
{"content": "版本太早", "marks": "较差"}
{"content": "前半段入门不错，后半段把握的不好，想覆盖的东西太多", "marks": "推荐"}
{"content": "翻译名为《钻进灵蛇的肚子》/《如何成为蟒蛇3肚里的蛔虫》.....几种语言搞来搞去还是python美TAT纯python就更美了TT__TT", "marks": "推荐"}
{"content": "为有经验的非Python程序员写的入门书籍", "marks": "力荐"}
{"content": "有一个时间原因，这本书最新的是2004年更新，相比2010年的Python发展已经完全落伍了。内容也有些混乱，不适合入门。", "marks": "较差"}
{"content": "3.x 的好很多，思路清晰多了。2.x 对http/字符编码等，处理的太混乱了。", "marks": "还行"}
{"content": "据说已经过时，还是读 Python Tutorial 实在。", "marks": "还行"}
{"content": "很好的上手书，都是例子，看例子总是比看文本要快要容易接受，至少对于我是", "marks": "力荐"}
{"content": "I love this book.", "marks": "力荐"}
{"content": "swaoop.C.H推荐的，并且很好", "marks": "推荐"}
{"content": "python is so cool ^_^", "marks": "推荐"}
{"content": "用两个星期的晨间读完的。用Python不多。以后用的时候，可能会不时的倒回来看。", "marks": "推荐"}
{"content": "内容太多，夹生读了一遍", "marks": "推荐"}
{"content": "看完了再配合着赖勇浩的吐槽文看 http://blog.csdn.net/lanphaday/article/category/454256", "marks": "还行"}
{"content": "DIP", "marks": "推荐"}
{"content": "看的是社区翻译的中文版，看了很久（每周不到两个小时，看了半年多。。。），很受启发", "marks": "力荐"}
{"content": "断断续续读了几个月才读完\n可以先看赖永浩的《为什么不推荐dive into python》，再读更有意思些", "marks": "力荐"}
{"content": "看的是啄木鸟社区翻译的\r\n不错的入门书\r\n先大体看了看，简单复习了一下", "marks": "推荐"}
{"content": "趣味十足", "marks": "力荐"}
{"content": "A good book for reference", "marks": "推荐"}
{"content": "浏览了一遍", "marks": "还行"}
{"content": "有电子书, 不错.", "marks": "推荐"}
{"content": "原来我以前写的都不是python 代码，成为pythonic pythoner 路还很遥远，但是python的魅力就是能带给你惊奇，解决身边的小问题，python是最好的工具。", "marks": "推荐"}
{"content": "不深不浅的Python书,确实适合有一点点python经验的程序员看。", "marks": "力荐"}
{"content": "编程小白还是不要读", "marks": "推荐"}
{"content": "看时不错,看完都忘了", "marks": "推荐"}
{"content": "风格与Thinking in C++类似，例子也不错，适合做tips一类的读物，不适合做tutorial", "marks": "推荐"}
{"content": "unit testing is not easy", "marks": "推荐"}
{"content": "不错，但不适合入门。“自省的威力”，领略了 python 的风采。", "marks": "力荐"}
{"content": "啄木鸟社区看的翻译版，对于有编程基础的绝对是上上之选。非常好的一本书python入门！", "marks": "力荐"}
{"content": "很初级啊..", "marks": "推荐"}
{"content": "虽然比较古老，但是例子和讲解都很清楚", "marks": "推荐"}
{"content": "潜入后，再也没沉上来", "marks": "推荐"}
{"content": "好书一本。\n内容略过时。", "marks": "推荐"}
{"content": "例子很全面，对例子的解释很到位，提到的各种技巧也比较实用", "marks": "还行"}
{"content": "对于学过编程的我来说，入门还是很好的。", "marks": "力荐"}
{"content": "一目十行扫完。还是要靠写才行吧。", "marks": "推荐"}
{"content": "篇幅不长，讲了许多例子，感觉读完这本看再长的代码也不会觉得心烦看不下去了，缺点是略旧，没有覆盖numpy等包", "marks": "推荐"}
{"content": "标记是以前看过，但我几无印象，所以IT还真是干出来的...另外现在看书，期望看有深入见解（直到本质）的cheatsheet式", "marks": "推荐"}
{"content": "4m => 2 => 3", "marks": "推荐"}
{"content": "最近 有很多群友问道这本书怎么样。一个mm居然买了此书的英文版来拜读。但是个人认为，初学Python的同学们（或压根也没学过其他编程语言的）建议不要阅读此书了。", "marks": "推荐"}
{"content": "这本书的风格很诡异, 每个例子都用的一堆看不懂的未来若干节的内容, 不太喜欢这个风格", "marks": "推荐"}
{"content": "看不下去了。Python代码巨丑，没有各种括弧，光秃秃的。为啥这么多人觉着漂亮？如果只有c/c++基础，看这书入门绝对是个错误", "marks": "较差"}
{"content": "This book is kind of outdated. Many of the examples in the book are hard to apply to the latest Python 3. We better, therefore, turn to the new version which was published in 2009.", "marks": "推荐"}
{"content": "配合着手册互补", "marks": "力荐"}
{"content": "看的是《Dive into Python 3》，给力……\n", "marks": "力荐"}
{"content": "所见最佳入门书", "marks": "力荐"}
{"content": "python2.4的，例子对我来讲也不是特别实用，不过免费书籍里算不错的", "marks": "推荐"}
{"content": "好书", "marks": "推荐"}
{"content": "python入门经典，最后有其他语言基础", "marks": "推荐"}
{"content": "在网站读的，非常好，适合进阶.", "marks": "推荐"}
{"content": "粗读过，感觉更喜欢Ruby的纯面向对象", "marks": "推荐"}
{"content": "在网上读的，读到 exception handling ，后面的太细了，需要再说。里面有不少经验，建议配合 code like a pythonista", "marks": "力荐"}
{"content": "Python又一本经典。入门必读。", "marks": "力荐"}
{"content": "好书 \n好例子\n适合初学者", "marks": "推荐"}
{"content": "因为想做machine learning＋写个爬虫而突击看的书。不过依然还只是看了最基本的概念。感觉这种“以讲解完整代码来介绍知识点”的方式还不错，其实更像我们平时工作的方式－接到一个任务、发现不懂的地方、去学习相关的知识点、最后完成任务。", "marks": "推荐"}
{"content": "我是看着不推荐的人的评论，对这部书感兴趣的。\n想起Joel说的快速开发的最好结果就是可以快速进行测试，评论的人可能没有明白这个吧！！\n\n此书果然是我喜欢的类型，细读，精读之范畴", "marks": "推荐"}
{"content": "排版好奇怪的一本书，没有细看，经验更多一点再看第二遍", "marks": "还行"}
{"content": "很好的一本书，书中的例子发人深思", "marks": "力荐"}
{"content": "入门好书", "marks": "推荐"}
{"content": "本科时候入门时候看的，其实也就看了前7章，后面html，xml和单元测试部分没怎么看", "marks": "还行"}
{"content": "还真没发现into到哪去", "marks": "还行"}
{"content": "讲述方式很奇特，有些消化不良", "marks": "推荐"}
{"content": "好书！适合有其他语言经验的人入门python", "marks": "力荐"}
{"content": "python入门不错", "marks": "推荐"}
{"content": "原来这个有实体书的...", "marks": "推荐"}
{"content": "赞用实际有用的程序的讲解语言这种方式，就是书太旧了。", "marks": "还行"}
{"content": "看到第七章，觉得Python入门了。接下去可以研究和C的Integration了", "marks": "力荐"}
{"content": "有其他语言编程经验者的python 快速入门书", "marks": "推荐"}
{"content": "很久没看技术书，隔了两年多，终于把这本书看完了。之前看到单元测试就没往下看，这几天利用空余时间把后6章过了一遍。虽然我学python是从这本书开始的，但是这本书并不适合作为学python的入门书。", "marks": "推荐"}
{"content": "入門", "marks": "推荐"}
{"content": "案例与解析一样精彩", "marks": "推荐"}
{"content": "才知道function可以当variable用", "marks": "推荐"}
{"content": "深入浅出，而且中文版翻译的不错，强烈推荐。", "marks": "力荐"}
{"content": "作者是个爱跑步的印度人。", "marks": "力荐"}
{"content": "读的中文版，一周时间读完，并且对部分章节的代码手动敲了一遍。适合入门", "marks": "力荐"}
{"content": "比可爱的Python可爱多了！", "marks": "力荐"}
{"content": "深入浅出呵呵~~\n每一章开头的例子都挺实用的，而且覆盖了挺多方面~", "marks": "力荐"}
{"content": "欲罢不能", "marks": "推荐"}
{"content": "补充一下,此书不适合做教程,我一般用来做参考.推荐 http://blog.csdn.net/lanphaday/archive/2008/08/28/2845258.aspx 的评论", "marks": "还行"}
{"content": "比较实用", "marks": "推荐"}
{"content": "只能说python漂亮", "marks": "力荐"}
{"content": "好书，但是内容太老。", "marks": "还行"}
{"content": "入门不错，不过章节关联性太强，得按顺序看，想直奔主题反而找不着北~~", "marks": "推荐"}
{"content": "不错的python书  特别是有其他语言功底 非入门  入门书请看learning python", "marks": "推荐"}
{"content": "好", "marks": "推荐"}
{"content": "入门", "marks": "力荐"}
{"content": ":（ 没读完", "marks": "推荐"}
{"content": "从没用过Pathon，这本算是接触的第一本Python的书。例子和语言特性结合的很好，还有好多程序设计的思想，学到了很多啊。竟然还学会了罗马数字。。。", "marks": "力荐"}
{"content": "一般般，对不起这价格。", "marks": "较差"}
{"content": "一本没法买到原版的书,在啄木鸟社区找到的中文翻译版本,入门的好教材.但是没有<Learning Python>完善,当然也没它废话那么多.", "marks": "推荐"}
{"content": "中文电子版", "marks": "推荐"}
{"content": "前七章很赞，xml html soap部分有点画蛇添足的感觉，总体来说非常好。", "marks": "力荐"}
{"content": "Not for beginner", "marks": "推荐"}
{"content": "例子不好懂，选材不着边际，该讲的没讲。", "marks": "较差"}
{"content": "几年前看过的中文版电子书", "marks": "推荐"}
{"content": "实用的参考书", "marks": "推荐"}
{"content": "练手书", "marks": "还行"}
{"content": "书是好书，2年前读过，以后也许再也不会读了", "marks": "推荐"}
{"content": "需要学习，评分较高\n", "marks": "推荐"}
{"content": "还在读，里面讲解测试，test driven还是不错的。", "marks": "还行"}
{"content": "内容和实例都很好，就是版本很久没更新，很多代码需要修改才能支持Python 3", "marks": "推荐"}
{"content": "有点脚本基础的看看挺好", "marks": "力荐"}
{"content": "python 进阶书籍，版本有点低，内容有点老， 建议看看新版本是不是好点。", "marks": "力荐"}
{"content": "简单易懂。", "marks": "推荐"}
{"content": "看了一半。太老了，can't catch up with the python fashions，直接看会走弯路。", "marks": "还行"}
{"content": "有其他语言编程经验的python书籍", "marks": "推荐"}
{"content": "半个月读完，第一次学着用一个笔记本记录过程中的问题和解决技巧，以后都这样看技术书。", "marks": "力荐"}
{"content": "读过的算是比较好的一部python书", "marks": "推荐"}
{"content": "先给示例程序,再逐句剖析的模式,所有看的时候不会漫无目的.好书,正在看", "marks": "力荐"}
{"content": "入门好书", "marks": "力荐"}
{"content": "入门级不错啊！php 至少从语义上还是都能看懂的。", "marks": "推荐"}
{"content": "专门讲网页入侵的书不多，因此此书很是难得。看过之后，发现做一个合格的黑客需要懂多少东西啊~", "marks": "力荐"}
{"content": "的的确确是讲的非常清楚了。最初觉得git这种工具，居然要去读一本书那么厚的东西，是否太多。读过后，非常后悔早期浪费时间读各种tutorial，其实关键是要分清楚use case，光告诉我pull用什么语法branch用什么语法，一点点用都没有。关键是 when do I use what", "marks": "力荐"}
{"content": "有需要再深究", "marks": "推荐"}
{"content": "平时就只用了add commit push pull stash 其它的一概不会完毕", "marks": "力荐"}
{"content": "看了这本书会让你忘记，git仅仅是个工具。", "marks": "力荐"}
{"content": "很简单", "marks": "力荐"}
{"content": "代码管理。很多太繁琐了，一时半会用不到。", "marks": "推荐"}
{"content": "非常好的git介绍，要点清晰，读起来不费力，非常有用。", "marks": "力荐"}
{"content": "文笔流畅易读，图更赞。internal一节也有深度。\n好书", "marks": "力荐"}
{"content": "在想为什么git的作者不写git的书呢，好像业内很多作者都不写书，他们写的都类似tutorial", "marks": "推荐"}
{"content": "对于git的描述，尤其是git中branch的图形化说明，对初学者的帮助尤其大。本书不光介绍了日常的git使用，还包括了如何设置git服务器以及如何与他人协作，最后还介绍了git内部的实现。", "marks": "推荐"}
{"content": "写得非常清晰，非常好懂。git 真是个伟大的工具！版本管理思想在项目开发中的重要性大概就如社会制度对社会发展的重要性一样。", "marks": "力荐"}
{"content": "有中文译本，可以看看", "marks": "推荐"}
{"content": "github页面的git crash course推荐的  本书的在线版 http://progit.org/  也可以免费下pdf版本……", "marks": "力荐"}
{"content": "github是最好的试练场。", "marks": "推荐"}
{"content": "如果所有的作者都像本书作者一样!", "marks": "力荐"}
{"content": "这才是真正的从简到深，从表面到底层的基学习，工具，技能一体的书籍", "marks": "力荐"}
{"content": "我很同意我的一个同事说过的一句话：要使用git，真不能拿来敲个git --help就用，你得好好看一下先。 而至于看什么，这么免费的在线书籍，绝对是不二之选，花个几个小时，把前四章过一篇（当然，要边看边练习），你就可以用git做日常工作了。我断断续续读完了真本书，不能说全掌握了，但是要是遇到什么问题，我相信可以很快的翻开这本书，找到我想要的解决方案。入门之后，就在平常的工作实践中逐步提高吧。 我本人p4和git都用的比较多，我也没有什么特别的偏好。要说git的优点，还是众所周知的那几点：一个是本地commit；一个是轻量的branch；第三个是fork+pull灵活方便的开源合作模式。至于rewrite history，我觉得这个功能太过危险，还是不要给任何人重写历史的权利比较好。", "marks": "力荐"}
{"content": "读前半本入门不错，例子什么的讲得挺细；后面的暂时用不到，读过了也感觉hold不住", "marks": "推荐"}
{"content": "chinese edition", "marks": "力荐"}
{"content": "#PDF# 积累技能", "marks": "推荐"}
{"content": "温故而知新 再读一次", "marks": "力荐"}
{"content": "10年一换代的话, 是该用git取代svn了吧. 想简单地 Up and Running 那么这本还不错.", "marks": "推荐"}
{"content": "CVCS >> DVCS ", "marks": "还行"}
{"content": "墙裂推荐。。。", "marks": "力荐"}
{"content": "可能是最好的学习git的书了", "marks": "力荐"}
{"content": "分布式版本控制", "marks": "力荐"}
{"content": "非常不错的git书籍，很多高级特性有待项目实战，书中的配图十分清晰，让人一目了然", "marks": "推荐"}
{"content": "之前太懒，不想学。静下心来看了之后发现git确实强大啊。", "marks": "还行"}
{"content": "Git入门好书，原理、应用场景、Git Branching的配图都很赞", "marks": "力荐"}
{"content": "技术书籍写到这个程度肯定是满分了. 翔实, 清晰.", "marks": "力荐"}
{"content": "git此书足已，还有中文版的。当作参考书吧。扫过。", "marks": "力荐"}
{"content": "看的是Kindle上的中文版。本书在讲述Git使用的同时，也讲述了Git的操作原理。可以看成是学习Git的中级书籍。翻译得不错！", "marks": "推荐"}
{"content": "实用性很强，推荐，可反复读", "marks": "推荐"}
{"content": "印象里看过最好的git的资料是一个PPT，可惜后来再也没找到过", "marks": "力荐"}
{"content": "用得着的全都看了一遍，有的地方看了不止一遍。好书！", "marks": "力荐"}
{"content": "Version Control 必读教程哦～", "marks": "推荐"}
{"content": "之前Martin Fowler推薦， 詳細看來還真得從svn向git遷移了。", "marks": "推荐"}
{"content": "对Git有了一个基本的了解，Git果然是个强大的工具。", "marks": "推荐"}
{"content": "看完前三章 大概够用了", "marks": "力荐"}
{"content": "分支巫术", "marks": "推荐"}
{"content": "断断续续终于读完了这本书，作为一本指南，它已经做的很好了。", "marks": "推荐"}
{"content": "还算全面", "marks": "推荐"}
{"content": "图文并茂", "marks": "力荐"}
{"content": "我现在还是在用Mercurial。这本书的思想很好。", "marks": "还行"}
{"content": "没太看懂", "marks": "推荐"}
{"content": "在线 中文版，http://progit.org/book/zh/ 感谢@chunzi\n建议再阅读：http://www.juvenxu.com/2010/11/28/a-successful-git-branching-model/ 《一个成功的Git分支模型》这篇文章", "marks": "力荐"}
{"content": "http://progit.org/book 开源book, 足够了解git的方方面面了. 5.3进行中. 2012-03-28; \n第二版已经出来了，这版估计不会再补完了。2016-03-27;", "marks": "力荐"}
{"content": "大概浏览了有中文翻译的部分，选读了部分英文篇章，成功用Github Pages搭建Jekyll。应该算是Git + Github入门了吧。", "marks": "推荐"}
{"content": "由浅入深的节奏不错，不过中程以后有些繁琐，特别是架设 git 服务器一般人估计很少会用到吧，个人感觉 git 原理这一章可以放到前面来。顺便推荐一个更显浅以及注重实用的教程 gitmagic", "marks": "推荐"}
{"content": "Git进阶必看！", "marks": "力荐"}
{"content": "讲得很细", "marks": "推荐"}
{"content": "下载的中文版。\n前面看的比较细，后面的高级内容匆匆翻过。用来入门不错。", "marks": "还行"}
{"content": "git ", "marks": "力荐"}
{"content": "基本上看完了中文版", "marks": "推荐"}
{"content": "把github那些东西搞定，看前220页足矣", "marks": "推荐"}
{"content": "大致浏览了一遍以便展开工作", "marks": "力荐"}
{"content": "explicit", "marks": "推荐"}
{"content": "scott chacon 太可爱了哈哈", "marks": "力荐"}
{"content": "精彩！", "marks": "力荐"}
{"content": "I hate Clear Case.", "marks": "推荐"}
{"content": "清楚, 深入", "marks": "力荐"}
{"content": "欠最后一章 Git Internals", "marks": "力荐"}
{"content": "又看了一遍，收益良多", "marks": "力荐"}
{"content": "打5星，文字通俗易懂，条理清晰，覆盖面广，有不失细节！", "marks": "力荐"}
{"content": "看了中文版前四章，讲的清楚。", "marks": "推荐"}
{"content": "相比《Version Control with Git》直接多了，也比较实用。后者比较注重原理。", "marks": "力荐"}
{"content": "读个这本，使用就没问题了。如果对git的设计有兴趣，再搞来《Git权威指南》~", "marks": "力荐"}
{"content": "看了网页版的 与Git Magic一起五星推荐", "marks": "力荐"}
{"content": "简洁易懂，示例丰富", "marks": "力荐"}
{"content": "nice Git,nice read.", "marks": "推荐"}
{"content": "学git，此一本书足矣~", "marks": "力荐"}
{"content": "我看的中文版，官方推荐的教程，非常清楚。有的命令可能跟不上新版本了。从入门到底层。", "marks": "力荐"}
{"content": "好好读值得花时间！讲解的非常好！图特别深刻明晰。", "marks": "力荐"}
{"content": "git相比svn的优势真是太大了，提交速度、分支控制，自己用网盘搭一个服务用来同步代码，都很方便（除了github，还有bitbullet，国内的oschina都可以用）", "marks": "力荐"}
{"content": "again", "marks": "推荐"}
{"content": "官方中文版，流畅易读：http://git-scm.com/book/zh。学习Git的同时了解Shell、版本控制、软件工程开发管理流程，值！", "marks": "力荐"}
{"content": "为了上道，挑着看了需要的章节，常用的功能和相关的原理都有涉及，不错的教材", "marks": "力荐"}
{"content": "看了zh版，gitignore等这些东西能说仔细一点就好了，不然读者只能各种请教google大神。终于稍微会用git了，不过很不熟悉", "marks": "推荐"}
{"content": "中译版请戳这里->http://git-scm.com/book/zh/. 有了服务器后更感受到Git的强大和便利。内容很实在，插图也多，一图胜千言。", "marks": "力荐"}
{"content": "最近在用github~", "marks": "推荐"}
{"content": "好书啊", "marks": "推荐"}
{"content": "由 Git 开发人员所写，真正的深入浅出，从入门到进阶，赞个！", "marks": "力荐"}
{"content": "GIT必读书籍！", "marks": "力荐"}
{"content": "读了前4章，可以开始使用了", "marks": "力荐"}
{"content": "中文电子版：http://progit.org/book/zh/\n作者是github员工\n\n不错. 不适合初学者. ", "marks": "推荐"}
{"content": "太浅了吧", "marks": "还行"}
{"content": "便利的版本控制软件，跃跃欲试呐！", "marks": "力荐"}
{"content": "想在windows的ruby装某个gem编译github上开源的ebook失败了，灰头土脸的下载了一本……", "marks": "推荐"}
{"content": "http://www.youtube.com/watch?v=ZDR433b0HJY\nhttp://git-scm.com/book", "marks": "力荐"}
{"content": "有了中文版，学起来更容易，感谢译者", "marks": "力荐"}
{"content": "只看了涉及使用的方面,管理方面没有看,实际用到再看...", "marks": "推荐"}
{"content": "买本好书的版权免费放官网是个好的推广策略。", "marks": "还行"}
{"content": "必看", "marks": "力荐"}
{"content": "大致浏览了下使用的章节", "marks": "还行"}
{"content": "git", "marks": "力荐"}
{"content": "实际搞个github一起玩吧...", "marks": "推荐"}
{"content": "git入门必读", "marks": "力荐"}
{"content": "讲了 git 原理和使用", "marks": "力荐"}
{"content": "读了前五章，后面的暂时用不上。", "marks": "力荐"}
{"content": "看了大半部分，讲得不错。不过有些地方还没看明白，感觉GIT比较适合大型开源项目，小项目用会稍微麻烦。", "marks": "力荐"}
{"content": "看过本书的《中文版》，与《Git权威指南》各有千秋，都很赞！", "marks": "力荐"}
{"content": "写得简洁明了很有条理，例子用法配图丰富，由浅到深，非常棒的书", "marks": "推荐"}
{"content": "git内部原理讲得很详细。", "marks": "力荐"}
{"content": "又重读了一遍，并在github上提交了一处中文拼写错误，也算这本书的contributor了。", "marks": "推荐"}
{"content": "好书，当年学git读的入门书", "marks": "推荐"}
{"content": "good for git beginner. 花了两天，把前两章看了一下，运行了一遍。对git 这个工具有所了解了，同时也渐渐懂得linux 命令设计时的一些小规律。恩，这书不错。", "marks": "还行"}
{"content": "工具书，字典用", "marks": "推荐"}
{"content": "用了几天git后，重读这本书才感觉真正有所领悟！", "marks": "力荐"}
{"content": "lucid", "marks": "推荐"}
{"content": "中文版http://git-scm.com/book/zh", "marks": "力荐"}
{"content": "入门、原理都有", "marks": "推荐"}
{"content": "http://progit.chunzi.me/", "marks": "力荐"}
{"content": "始终相信没有这些书做基础就一头扎进去干活只能事倍功半", "marks": "推荐"}
{"content": "当然，我看得是中文版\r\nhttp://progit.org/book/zh/", "marks": "力荐"}
{"content": "学习git非常值得一读的书.", "marks": "推荐"}
{"content": "best book for git?  http://progit.org/book/zh", "marks": "力荐"}
{"content": "git 入门", "marks": "力荐"}
{"content": "多人合作的介绍和底层原理的介绍是此书的最精彩部分。", "marks": "力荐"}
{"content": "git必备！", "marks": "力荐"}
{"content": "除了讲述其他版本控制那块，剩余的部分明了易懂，初学者不得不看...", "marks": "力荐"}
{"content": "手机电子书佳品-近期工作所需", "marks": "力荐"}
{"content": "简单实用。", "marks": "力荐"}
{"content": "实习时候在路上坐地铁时读得。讲的很清楚具体，就当复习。", "marks": "力荐"}
{"content": "基础部分读完一遍，概念+例子+图解，很赞", "marks": "力荐"}
{"content": "这是我读的第一本也是唯一一本关于Git的书。最初，为了追时髦学Git，结果只会生搬硬套svn流程（pull-commit-push）；后来，为了发挥分布式的优势，学会了branch和merge；接着，为了维护干净的历史记录，学会了squash和rebase；现在，为了维护，又学会了打tag和分层。", "marks": "推荐"}
{"content": "Git进阶书，厘清许多关键概念。", "marks": "力荐"}
{"content": "clear", "marks": "推荐"}
{"content": "适合反复学习", "marks": "力荐"}
{"content": "不错 尤其是是书中的配图", "marks": "力荐"}
{"content": "结构很清晰", "marks": "力荐"}
{"content": "这个书是开源的，意味着电子版本也是免费分发的。不错。", "marks": "还行"}
{"content": "http://progit.org/book/zh/", "marks": "推荐"}
{"content": "写的很好，还有多国语言版免费阅读和下载，赞！", "marks": "推荐"}
{"content": "可以当作快速适应Git在工作上的应用的学习书籍。", "marks": "推荐"}
{"content": "在读中文版", "marks": "力荐"}
{"content": "Git Everthing", "marks": "力荐"}
{"content": "svn转git的方法介绍的有误...", "marks": "推荐"}
{"content": "因为项目用git看了该书，比较基础，不过我还是没有完全掌握。", "marks": "力荐"}
{"content": "分支管理就是流程管理", "marks": "力荐"}
{"content": "由浅入深讲解了git的使用及工作原理，可快速掌握git用法，深入使用需要进一步学习", "marks": "推荐"}
{"content": "很好很强大", "marks": "力荐"}
{"content": "最好的git指南", "marks": "力荐"}
{"content": "超级好的书，真的超级好！", "marks": "力荐"}
{"content": "不错，有很多实际使用上的技巧。以后推荐 Git 的教程的话就它了。", "marks": "力荐"}
{"content": "看了前面几章，配得上Pro", "marks": "推荐"}
{"content": "ruby", "marks": "还行"}
{"content": "错误多到可怕 编辑校对去死吧", "marks": "还行"}
{"content": "Ruby初学者入门书籍。", "marks": "还行"}
{"content": "说得不清楚，消磨了我的兴趣", "marks": "较差"}
{"content": "日本人写一本非常流畅的Ruby教程，写给会其他语言的人，没啥废话，讲的也挺清楚。可惜就是中文版印刷错误实在太多。翻译的还可以了，至少不影响理解。因为印刷错误给四分吧。", "marks": "推荐"}
{"content": "错误太多了，几乎没有几段示例代码是可以跑的", "marks": "较差"}
{"content": "写的简洁，不适合入门。。小错误很多！！！什么编辑。。", "marks": "较差"}
{"content": "早读完了，实在是提纲性质，不过ruby很强大。", "marks": "推荐"}
{"content": "比Fitzgerald写的《学习Ruby》要详细很多。", "marks": "推荐"}
{"content": "好简略啊……", "marks": "还行"}
{"content": "写的 太容易了", "marks": "还行"}
{"content": "适合编程新手，其实完全可以看网上的教程了解这些内容", "marks": "很差"}
{"content": "讲的的很另类\n", "marks": "较差"}
{"content": "我擦，逗我呢，这翻译...", "marks": "较差"}
{"content": "代码有错误", "marks": "还行"}
{"content": "Hajimeteno ruby", "marks": "力荐"}
{"content": "这本书的标题是Hajimeteno Ruby。心想红宝书也没有这个单词啊……原来是日语", "marks": "还行"}
{"content": "书的内容不错，是非常适合有编程经验的人进入ruby世界的敲门砖。不过正如书名所说，这本书仅够入门，想要进步还需继续学习。另外书的印刷错误实在太多，不知道出版社的校对在做什么。", "marks": "推荐"}
{"content": "非常好的入门书，适合有些基础的同学看", "marks": "力荐"}
{"content": "Ruby，很短...是入门的读物...", "marks": "推荐"}
{"content": "迷人的Ruby，这是在看完前两章之后的一个感慨，与当时学习Python的感觉有点类似。然而Python的学习没能坚持下去，这次因为Berkeley的SaaS课程而再次来学习这个，希望以后能派上用场。", "marks": "推荐"}
{"content": "书是好书，被翻译坑了。", "marks": "较差"}
{"content": "比较入门阿", "marks": "还行"}
{"content": "入门还可以，难度适中", "marks": "推荐"}
{"content": "简单的Ruby入门书籍。", "marks": "力荐"}
{"content": "错字太多，看着费劲", "marks": "较差"}
{"content": "感觉作者思路有点乱，再就是翻译很不负责任，很多地方都有明显的错误。不知道原书是否如此...", "marks": "较差"}
{"content": "快速入门了....", "marks": "推荐"}
{"content": "虽然书里面有一些细节错误，但还是满不错的一本书，但是在条理性上和Learning Perl相比差了点", "marks": "还行"}
{"content": "学习", "marks": "推荐"}
{"content": "这本书确实一般般，就当入门时候fast reading看吧，别花太多精力", "marks": "还行"}
{"content": "这种垃圾内容， 这种垃圾翻译也敢出来卖钱。 全书的例子有用的几乎没有，对的没有几个", "marks": "很差"}
{"content": "请想要购买此书的同学注意：第一，这本书仅适合非常了解其他语言，而想要快速学习Ruby的读者。第二，书中打印错误良多，大概每8页一个。请慎重选择。", "marks": "很差"}
{"content": "  如果你是初學軟件開發那麽這本書四星，如果是一個有相當經驗的程序員我覺得這書只能給個三星半了。\n  這本書講什麽？這本書主要通過一個CD租賃商店的例子帶你走完一個軟件開發的完整流程，並在這個流程上介紹一些軟件開發的樸素原則，不得不說這些原則的穿插還是很好的。很適合一個將要編寫一個系統但是不知道怎麽著手的人。\n  預構是什麽?預構是相對重搆來説的，它在軟件開發的初始階段通過前人的經驗也就是一些原則來指導軟件開發。\n  名字有什麽問題？首先這個名字多少有點虛張聲勢，誰在開始一項工作前都會從現有的成果出發，這點是毫無疑問的。既然作者要提出\"預構\"這個很學術化的詞，那麽書中的内容只有一個大的例子是不夠的，需要很多總結過的内容來支撐他的學術體系，内容應該從“預構”這個詞開始更學術化一點，重點應該放在“預構”的難點上，比如一開始需要多大的規模，抽象的層次，選擇什麽樣的工具或者語言等等，總之重點應該放在系統一開始的權衡的難點上。現在只不過通過一個例子來介紹軟件開發的樸素原則顯然很多書都做了，雖然他做的挺好。這點美國亞馬遜上的書評也是如此，都覺得作者這種内容起一個虛張聲勢的名字很不妥，國内書名更是加上“藝術”二字以提高身價更是錯上加錯。", "marks": "还行"}
{"content": "讲述了很多软件需求到设计的技巧，预构这个名字起的挺好，可惜很难像重构那样形成工具，正如书中所说，该工作目前仍然是一门艺术", "marks": "推荐"}
{"content": "没有想象中的有用。对\"预构\"也没能了解的太多", "marks": "还行"}
{"content": "对书中的例子边看边实现会有更多的收获", "marks": "推荐"}
{"content": "通过一个项目从头到位的过程，来说明软件开发中的设计演变过程，表述了如何应用预构技术，应用设计模式和一些敏捷开发的实践如测试驱动开发等，来进行软件设计和开发。内容比较简单易懂，适合学习敏捷开发，设计模式的时候，同时观看，会对整体的软件设计有一个概念。", "marks": "推荐"}
{"content": "用一个例子来贯穿设计过程，对于初学者很好", "marks": "力荐"}
{"content": "绝对不适合初学者，作为工具书其实也一般，不过这本书的好处就是有些东西讲的很实质性，运作机制讲的比较清楚，拿最基础的显示对象容器和显示对象来说，就比一般的书讲的更透", "marks": "还行"}
{"content": "很实用，但是不是入门教程，部分章节需实践，慢慢消化。", "marks": "推荐"}
{"content": "想什么时候买这本书\r\n看的是PDF文件\r\n书的翻译跟出书的不是同一个人\r\n后面的十章跳着看了\r\n如果这些书跟小说一样就好了\r\n－－\r\n可是我这段时间不是很爱看小说\r\n那么什么时候去买来好了\r\n", "marks": "推荐"}
{"content": "实战作战方案工具书，类似于三十六计", "marks": "推荐"}
{"content": "现在不用了。。。需要的时候再翻吧", "marks": "推荐"}
{"content": "比较不错的AS3入门书，既然是cookbook，买一本来作为参考手册比较好。版本有点好，有些内容现在已经不一样了。", "marks": "推荐"}
{"content": "很好的as入门书籍，例子很多", "marks": "力荐"}
{"content": "我还是不适合看这种一个个例子的书", "marks": "还行"}
{"content": "快速入门，很实用的书", "marks": "推荐"}
{"content": "此书在快速入门和实战方面还行，注重快速的解决问题，不适合做进一步的技术研究，总体评价一般。", "marks": "还行"}
{"content": "什么flash间传递，gc，socket闻所未闻啊，汗颜\n我只是随便看了一下，到底算是看过还是没看过呢，真纠结！！", "marks": "还行"}
{"content": "本书的英文版是我读的第一本AS3相关书籍，O'reilly Cookbook系列的一贯优点，讲述实现而又突出原理。", "marks": "推荐"}
{"content": "内容组织形式很赞~", "marks": "推荐"}
{"content": "翻译还不错..", "marks": "力荐"}
{"content": "适合做参考书", "marks": "力荐"}
{"content": "继续标记，也是一定要看的", "marks": "推荐"}
{"content": "相当实用的一本书。无论你技术高低都有益。很多实战技术", "marks": "力荐"}
{"content": "看过所有的源代码，作为api的示例可以看看，不错的一本书。", "marks": "还行"}
{"content": "这本的翻译还是挺好的，内容还算不错", "marks": "推荐"}
{"content": "O'REILLY 一如既往的好。只有电子文档，代码大概都敲了，本说买翻翻，换了本算法概论。", "marks": "力荐"}
{"content": "推荐", "marks": "推荐"}
{"content": "对于当前的我还说需要多读书，很多内容已经不记得了，需要恶补一下，希望可能读一下这本书，谢谢", "marks": "推荐"}
{"content": "孙笑侠很有才华,如果再专注点的话...", "marks": "推荐"}
{"content": "大一时候读的一本法理入门书，大赞！！", "marks": "力荐"}
{"content": "从季卫东老师的论文上看到此书，对于程序的形成发展、意义等都有了新的认识。", "marks": "推荐"}
{"content": "写程序写得很深，但对中国古代程序评价过于片面，而且有点夸大了程序的作用，感觉倒像是唯程序论 但总体感觉是不错的", "marks": "推荐"}
{"content": "还是不错的，专门研究法律程序问题必读", "marks": "推荐"}
{"content": "孙老师的确是一个有法学理想的学者。喜欢后记中的这句话“在这个世界上，与你思考着相同或相似问题的人们给你的力量也是无穷的”。", "marks": "力荐"}
{"content": "参考书，深度一般，对程序的优点还是说得比较到位的", "marks": "推荐"}
{"content": "有点深", "marks": "还行"}
{"content": "震惊，这本书怎么评价这么低", "marks": "力荐"}
{"content": "法理分析透彻，配合诉讼法的学习，开阔眼界又有益学术研究能力的提升。", "marks": "力荐"}
{"content": "其实可以只看前3章。另外，书中有些提到的C语言缺陷现在已经不复存在了，比如C语言中是否大小写敏感的问题。", "marks": "推荐"}
{"content": "真是学到不少东西，接着要看C++了", "marks": "力荐"}
{"content": "像一部精彩的电影", "marks": "力荐"}
{"content": "几年前看过一遍。今天花2小时算是看了第二遍。这个世界上会有人告诉你这是一本进阶书，或者C程序员需要反复看的经典书。请忽略这些言论。写于ANSI规范以前。太多东西现在已经是常识了。随便翻翻当复习即可。", "marks": "还行"}
{"content": "就是有点小罗嗦。", "marks": "推荐"}
{"content": "比<C专家编程>浅一些，也没有那么多有趣的掌故，不过还是值得一看，尤其是《理解函数声明》那一节提供的方法比《C专家编程》的方法好用", "marks": "推荐"}
{"content": "提供了很多细节经验，并且例子很简单易懂，以后可以再读一次", "marks": "力荐"}
{"content": "总体不错，作为ansi c标准出台之前的一本小册子，性价比颇高。几点不足：一是本书中文版的代码排版实在很有问题。二是书上有一些代码和单词的错误。", "marks": "推荐"}
{"content": "有些笑话好冷……", "marks": "推荐"}
{"content": "一些C语言编程时的注意事项，推荐有一定代码量之后读。", "marks": "推荐"}
{"content": "一口气读完，很爽", "marks": "力荐"}
{"content": "看至P19,头一次看到将诸如(*(void(*)())0)之类的声明解释的如此通透.果然盛名之下其实难副,这薄薄的小册子值得收藏.但是排版印刷较差,是人民邮电毁的比较厉害的一系列书之一. BS...  \n---update--- 翻译的不错,较用心,诸多评注", "marks": "力荐"}
{"content": "小巧精致，有收获。", "marks": "推荐"}
{"content": "好的教材就应该是这个样子", "marks": "力荐"}
{"content": "匆匆读过，这是一本需要在大量的代码体验时刻和经验以后再反复思考的书，所以，标记上吧", "marks": "力荐"}
{"content": "排版真是太差了", "marks": "推荐"}
{"content": "越發覺著c語言不適合日常應用啊。", "marks": "推荐"}
{"content": "暑假时期 理解的不是很好 ", "marks": "力荐"}
{"content": "这么薄竟然花了我两天时间！有些地方让我换了个角度思考，感觉看这本书就像听皇城根下的出租车司机谈论中南海的内幕。", "marks": "推荐"}
{"content": "“本书所揭示的知识，至少能够帮助你减少C代码和初级C++代码中90%的Bug”，Francis Glassborow如是说。我认为，这不是夸张", "marks": "力荐"}
{"content": "出彩的地方不多，但值得一读", "marks": "还行"}
{"content": "c语言不多见的中高级图书。", "marks": "力荐"}
{"content": "讲些基础的编程注意事项,还不错", "marks": "推荐"}
{"content": "不装逼，没认真读", "marks": "推荐"}
{"content": "有些地方有点难；不过很好，帮助理解了很多东西  好书", "marks": "推荐"}
{"content": "简单的速读了一遍，语法的细节和跨平台的易见错误说的很多。以后要做C方面的工作时可以回来翻翻。书可能些的时间比较久远了。", "marks": "较差"}
{"content": "很有用，要注意的小点，看了之后就知道避免了", "marks": "力荐"}
{"content": "这是本好书 通俗易懂 有助于扫清地雷", "marks": "推荐"}
{"content": "我觉得我的C语言刚刚入门", "marks": "力荐"}
{"content": "学C必读。", "marks": "力荐"}
{"content": "这本书买了近两个月了,早上在翻论文的时间看到夹在中间的这本书，就一口气读了几章，感觉不错，书的内容不多，就决定花几个小时看完。这本书，没有太高深的内容，都是些编程小的技巧，但是很实用。之前觉得 运算符前后要留空格，仅仅是美观而已，原来还可以避免编译时词法分析中的贪心法造成的bug。", "marks": "力荐"}
{"content": "C经典", "marks": "推荐"}
{"content": "中文版的翻译有点搓的", "marks": "推荐"}
{"content": "不如专家。", "marks": "推荐"}
{"content": "好多都是常识", "marks": "推荐"}
{"content": "很多错误是你傻傻犯过才发现有人居然都总结好了！WTF,为什么不早点读到这本书！", "marks": "力荐"}
{"content": "基本想做C都必看吧。练习一定得保证，否则真没什么实际作用。", "marks": "推荐"}
{"content": "看这书的感觉，就像有人在教我打扑克，面对已知的规则，竟还有这些自己没有注意的玩儿法", "marks": "推荐"}
{"content": "还是有收获的\n", "marks": "推荐"}
{"content": "我想说，这书的题目很是名副其实~作为一名使用C语言更多的人，算是长了相当多的见识~", "marks": "力荐"}
{"content": "随手翻过，书中提的小细节很不错。", "marks": "力荐"}
{"content": "比较古老 ANSI前 一般", "marks": "还行"}
{"content": "比较基础，内容不算特别丰富。基本上是在公司厕所里看完的。。。", "marks": "推荐"}
{"content": "这本书的第一版甚至比ansi c还老，适合刚结束基础学习的同学。", "marks": "还行"}
{"content": "经验分享避免走弯路~", "marks": "力荐"}
{"content": "推荐", "marks": "力荐"}
{"content": "很快翻完了", "marks": "还行"}
{"content": "小品类的书，一下午就能读完。讲了几个编程的时候容易踩到的小坑，出面试题的时候或许可以用上。对于编程有好奇心的C/C++系的同学应该都读过这本书吧。", "marks": "推荐"}
{"content": "好书。", "marks": "力荐"}
{"content": "需要注意的是，这本书写作的时候，C89标准尚未确立，更没有什么C99", "marks": "力荐"}
{"content": "并不高深，但是读过之后会有收获。而且厚度让人赏心悦目不至于望而生畏。语言教材中的散文。", "marks": "推荐"}
{"content": "关于声明和优先级的部分尤为重要", "marks": "力荐"}
{"content": "绝对经典的好书！", "marks": "力荐"}
{"content": "几日车上看完的，虽然有点老，但是内容还是有价值的，可以总结出几条tips，很实用。", "marks": "推荐"}
{"content": "这本书我读了7遍，没学期开学和结束的时候都会读一遍，其中阐述的错误是我们犯了一遍又一遍的，C++/C程序员应该人手一本。", "marks": "力荐"}
{"content": "比较老的书了，通读了一遍，感觉收获不是很大，如果想了解C的历史可以读一哈。", "marks": "较差"}
{"content": "进阶必备", "marks": "力荐"}
{"content": "短小精悍", "marks": "力荐"}
{"content": "我读的时候，这些小问题基本上都知道了，收获不是很大，如果是大一时候读，可能感受会更大吧", "marks": "推荐"}
{"content": "手感很好。", "marks": "力荐"}
{"content": "C系Q1", "marks": "推荐"}
{"content": "看过C程序设计的人都觉得这本书so easy", "marks": "力荐"}
{"content": "呦~不错哦 ~", "marks": "推荐"}
{"content": "本书所揭示的知识，至少能够帮助你减少C代码和初级C++代码中90%的Bug。", "marks": "力荐"}
{"content": "我读的版本是这个，上个弄错了", "marks": "推荐"}
{"content": "第二次阅读是在阅读了C专家编程之后，相比于前者，本书的知识密度相对低一些，读起来也会比较快。最后的访谈尤其有意思", "marks": "推荐"}
{"content": "多看几遍。", "marks": "力荐"}
{"content": "学会了很多总领性的东西,机器与语言的本质,程序的书写风格.不可多的好书,虽然很薄", "marks": "力荐"}
{"content": "一个个tip似的小节却给人很人的启发", "marks": "推荐"}
{"content": "看过，但是有点忘了  有时间再看看，确实应该写博客总结一下了", "marks": "推荐"}
{"content": "每种语言都有自身的陷阱和局限，因此要利用语言本身最大的能力，避免误用以及规避语言的弱点，需要对这些问题有认识。", "marks": "推荐"}
{"content": "只读一遍肯定是不够的//20130610", "marks": "力荐"}
{"content": "难得的关于C的这方面的书,而且写的也是通俗易懂\n也讲述了很多容易忽略的问题,推荐阅读", "marks": "力荐"}
{"content": "对我较有用的是函数声明和预处理的宏。", "marks": "推荐"}
{"content": "归根到底，理解计算机最重要。。", "marks": "力荐"}
{"content": "很多错误都是经常碰到的，但是还是会一而再再而三的出现，主要原因就是缺乏对错误的一个汇总整理，本书很好的完成了这项任务，同时还有更多极为隐蔽的错误作者也给出了警示，因此程序员还是很有必要认真研读一下大师的作品。", "marks": "力荐"}
{"content": "经典，可以扫除忙点，不过看一遍是不够的，有机会再读一遍", "marks": "推荐"}
{"content": "内容有点老，毕竟是1985年的书了，而且由于是论文扩充过来的，内容也不是很全面。但是国外的科技书籍看起来总是赏心悦目的。", "marks": "推荐"}
{"content": "易犯错误规避", "marks": "推荐"}
{"content": "这周读了4.3本书，好吧，这是第.3本", "marks": "力荐"}
{"content": "一个星期速推看完 还不错 ", "marks": "力荐"}
{"content": "配合K&R看很适合，不错的辅助。有些很旧的部分可以略过", "marks": "力荐"}
{"content": "哎，早读到就好了(˶‾᷄ ⁻̫ ‾᷅˵)", "marks": "力荐"}
{"content": "学过应用过，很多坑已经不会再踩。现在我能做的应该是去了解这些语言是怎么设计和演进的", "marks": "还行"}
{"content": "相对简单，但是又很容易忽略，所以值得一读。", "marks": "推荐"}
{"content": "有些还是看不懂", "marks": "还行"}
{"content": "没c专家讲的好", "marks": "还行"}
{"content": "也许深受其害看了这本书才会有醍醐灌顶的感觉吧。。。", "marks": "还行"}
{"content": "很多平时不会注意但是会引起灾难性错误的细节，挺好。", "marks": "推荐"}
{"content": "让我想起了一句歌词：“留低击伤你的石头 从错误里吸收”.\n@2016.1.10 赞赞赞！", "marks": "力荐"}
{"content": "这本书其实谈不上让你更加熟练的编程，但是对一些知识，比如指针的理解很有帮助", "marks": "推荐"}
{"content": "确实基本上都碰到过~还记得刚来单位就翻了个错，=和==。", "marks": "推荐"}
{"content": "面试必读", "marks": "推荐"}
{"content": "细节决定成败。", "marks": "推荐"}
{"content": "实用", "marks": "推荐"}
{"content": "2014-04-11", "marks": "还行"}
{"content": "作者在实际编程中的心得笔记吧，初学者看了可以少走些弯路", "marks": "推荐"}
{"content": "C++程序员还是有必要看看这书的，毕竟很多东西继承自C，缺点在于很多东西太老了，ANSI　Ｃ之前的书，看的途中需要去验证缺陷在现在的编译器中还有没有。。", "marks": "力荐"}
{"content": "短小精悍，从词法分析到链接有涉及。不过实在是有点老了，看个思想就好了。", "marks": "力荐"}
{"content": "这书本就是个小册子~~愣是被扩充的像书了", "marks": "推荐"}
{"content": "短小精悍的小册子，很不错", "marks": "力荐"}
{"content": "很多细节没注意到", "marks": "力荐"}
{"content": "只看过一遍，觉得理解还不够透彻，还得再看", "marks": "力荐"}
{"content": "看完只想说：C语言真复杂又简单。", "marks": "推荐"}
{"content": "C语言三剑客之一，618买齐了，不过已经看过两遍了，经典中的经典，不适合刚刚接触C的初学者，里面上来就给了个从0地址启动的范例，本科看时一头雾水，现在看见好多了，书中关键的还是提出了太多的容易犯错的点，值得随手随意翻一翻，反思自己的程序，留意容易犯错误而自己在实践中没有想到的问题", "marks": "力荐"}
{"content": "比较绕", "marks": "较差"}
{"content": "一些小方法。", "marks": "推荐"}
{"content": "语法", "marks": "力荐"}
{"content": "还好吧，这些错误我都不会犯。。", "marks": "推荐"}
{"content": "很多内容已经过时，缺陷也复不存在。虽然了解到了很多技巧，但更多是当作 C 语言历史书来看的", "marks": "推荐"}
{"content": "避免错误，好代码。", "marks": "力荐"}
{"content": "内容有点老了", "marks": "推荐"}
{"content": "查漏补缺,有收获,看的这本不知道是不是正版,印刷质量不好.", "marks": "推荐"}
{"content": "超级好", "marks": "力荐"}
{"content": "非常详细好看的书", "marks": "力荐"}
{"content": "借同学的看过，很不错。", "marks": "力荐"}
{"content": "书太老了，没什么感觉", "marks": "还行"}
{"content": "极其实用的C语言编程指导，能有效帮助程序员绕过C语言晦暗的角落！", "marks": "力荐"}
{"content": "重读,好多地方深有感触,常常有种会心一笑的感觉", "marks": "力荐"}
{"content": "经典书，喜欢书中介绍的关于C语言的“小故事”。。。", "marks": "力荐"}
{"content": "要经常读一读。 ", "marks": "力荐"}
{"content": "虽然看过后基本忘了，但此书还是值得一读的，尤其是去面试前", "marks": "力荐"}
{"content": "C 补遗读物 + 历史教材", "marks": "推荐"}
{"content": "这个作者，不用说了，", "marks": "力荐"}
{"content": "不错，有一些笔记：https://github.com/geekan/resource_collection/blob/master/notes/C%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7-%E7%AC%94%E8%AE%B0.md", "marks": "推荐"}
{"content": "内容有些老了，我的意思是，要是几年前读到这本书应该会节省不少时间吧", "marks": "推荐"}
{"content": "关注细节~", "marks": "推荐"}
{"content": "了解语言易诱人犯错的细微之处，有助于对这门语言的学习。", "marks": "力荐"}
{"content": "大都是一些i平常易犯看过书后一不小心还得犯的错", "marks": "力荐"}
{"content": "除了内容有些旧，其余就是一个字：赞！", "marks": "力荐"}
{"content": "从图书馆借的认真看了两遍，更新了对C的认识，尤其是运算优先级的那部分很清晰。好书！", "marks": "力荐"}
{"content": "看的是英文版，很有收获。", "marks": "力荐"}
{"content": "我在我的小2寸mp3上读完了电子版。。。。", "marks": "力荐"}
{"content": "很好的一本书", "marks": "力荐"}
{"content": "非常多的经验之谈！", "marks": "力荐"}
{"content": "Traps and Pitfalls", "marks": "推荐"}
{"content": "内容略旧", "marks": "较差"}
{"content": "几年前看过的", "marks": "力荐"}
{"content": "以抱佛脚的目的读的，回头有空再重读一遍。", "marks": "力荐"}
{"content": "经典", "marks": "力荐"}
{"content": "内容比较老了，有些东西对于现在的编译器来说都不是什么问题了", "marks": "推荐"}
{"content": "很薄的一本书，200页不到。内容上很精简，可以看出作者的功底很深，寥寥数语就道出了C的常见陷阱以及语言自身特性导致的问题。\r\r不过限于自身水平，这本书我只读到第四章，余下三章的内容我作为初学者还不能理解。日后重温。", "marks": "力荐"}
{"content": "很多基础常犯的错误，不过要想笑话和记住需要时间，也需要代码积累。", "marks": "推荐"}
{"content": "与c专家编程相比，更喜欢这种风格，干脆利落，难度也小些", "marks": "力荐"}
{"content": "对使用C++的也是有一定帮助，还是一本工具书咯", "marks": "推荐"}
{"content": "解释了c里面的各种诡异，学习了……", "marks": "力荐"}
{"content": "ACM的经历中很多坑都踩过了。。", "marks": "力荐"}
{"content": "每次都被里面的坑 坑的 大呼坑爹啊！！！", "marks": "力荐"}
{"content": "Symbian的书买了很多，但，没用。", "marks": "还行"}
{"content": "其实我就翻翻，游戏什么的", "marks": "推荐"}
{"content": "haven't finished. ", "marks": "还行"}
{"content": "错漏百出不至于，但。。。", "marks": "还行"}
{"content": "很不错，唯一有点过时", "marks": "推荐"}
{"content": "Series 60 应用程序开发", "marks": "推荐"}
{"content": "我该怎么说呢。。。诸如此类这确实是我觉得最没用的东西。这本书算是工具书吧。还是老的工具书。", "marks": "推荐"}
{"content": "【把复杂的东西说简单才腻害，好书！】", "marks": "力荐"}
{"content": "大一时以为MFC就是windows编程的全部 钻研呀热血呀梦想呀 所有所有的回忆呀 随我飘洋过海 今天要在此分别啦 >_<...", "marks": "还行"}
{"content": "幫老師捧場唄~~~", "marks": "推荐"}
{"content": "MFC在当年还是不错的，后悔在学校的时候没好好读", "marks": "还行"}
{"content": "这本书看的不是API，是他对于一般的windows api用面向对象的思维抽象的。。。很出色。。。", "marks": "力荐"}
{"content": "没看出哪点好。+ =+", "marks": "还行"}
{"content": "当年看这本书的时候，真的感觉看到了MFC精髓所在，现在想想，MFC的体系真的有点。。。", "marks": "推荐"}
{"content": "1、主要看第二章 C++的重要性质,了解C++的多态是怎么实现的。\n2、力荐的原因除了里面的图表让我了解的多态怎么通过vtable实现之外，还有作者写书的风格，这一章里面出现了\"让我替你问一个问题\"、\"得到这些结论后，看看什么事情会困扰我们\"、\"你一定很想知道虚函数是怎么做出来的，对不对?\"等引导性的句子，这么好处除了引导，给出作者的思路，还有读起来不会枯燥。\n", "marks": "力荐"}
{"content": "2013-9-8: 今天我又看了一遍, 虽然好久没有碰了, 但依托之前的训练还能想起很多, 好书肯定不只让你读一遍而已. 我觉得配套孙鑫的视频更好, 两样学习下来, 可以很有把握了.", "marks": "力荐"}
{"content": "已经有点过时了。", "marks": "推荐"}
{"content": "勿在浮砂筑高台", "marks": "力荐"}
{"content": "MFC最好的读物", "marks": "推荐"}
{"content": "侯捷的这本书确实做到了深入浅出，我以为很好", "marks": "力荐"}
{"content": "勿在浮沙筑高台。后悔没有早点看到。", "marks": "力荐"}
{"content": "如果你在windows下用vc编写用户介面程序，那就必看", "marks": "推荐"}
{"content": "看得出它带着一种高级情感", "marks": "力荐"}
{"content": "完了再读一遍", "marks": "力荐"}
{"content": "现在又不得不看电子版的了。真后悔把这本书贱价卖给学弟。经典就是应该反复多看几遍，争取榨干作者的各种思想", "marks": "力荐"}
{"content": "CPP系Q1", "marks": "力荐"}
{"content": "只有知全貌 才能够驾驭", "marks": "力荐"}
{"content": "对MFC封装细节进行条分缕析，jjhou 经典之作", "marks": "推荐"}
{"content": "刚工作的时候大概翻了一遍，思路非常好。", "marks": "力荐"}
{"content": "很久很久之前....\n虽然很不正规。但自己是通过这本书学习C++的，比之Primer、thinking系列，我倒觉得侯捷先生这本书适合入门。\n后面的MFC框架设计剖析真的很用心，至少之后再没有看到有如此\"用心\"的书籍。\n不管现在的人怎么说,Linux或者什么MFC过时之类的话，我只能表示，这本书仔细看过了、领悟一遍了，绝对不会后悔。", "marks": "力荐"}
{"content": "经典！入门MFC的必选", "marks": "力荐"}
{"content": "MFC圣经级教材", "marks": "力荐"}
{"content": "用VC必读的一本好书", "marks": "力荐"}
{"content": "好啊", "marks": "力荐"}
{"content": "了解MFC内部机制的好书~", "marks": "力荐"}
{"content": "这本书还在书架放着。。最终我还是没学会MFC", "marks": "推荐"}
{"content": "MFC框架很丑陋", "marks": "力荐"}
{"content": "我UI的入门书，啥都不说了", "marks": "推荐"}
{"content": "唉，看得很晕，自己基础太差了", "marks": "推荐"}
{"content": "现在想想。这书不咋地。后面的书评还不错", "marks": "还行"}
{"content": "只是读了前边几个章节，MFC的解决方法太不优雅了，定义各种宏去实现封装，为了目的不择手段啊。觉得没有必要读下去了。", "marks": "较差"}
{"content": "弄明白了消息映射等，颇有收获，后面的实例部分浏览了一下，以后需要的时候在细读(希望这一天永远都不要来，哈哈哈，多文档模式做程序太蛋疼了)", "marks": "推荐"}
{"content": "当年还是很喜欢读技术书的😳", "marks": "推荐"}
{"content": "虽说有些老 但是还是很有参考价值", "marks": "力荐"}
{"content": "好书，自己买了，也推荐了很多同学也买了", "marks": "力荐"}
{"content": "本书最大的价值在于对windows界面编程的启发！其次是对MFC的剖析对于理解其他类似的东西很有帮助！", "marks": "推荐"}
{"content": "书好，就像在看小说，MFC的朋友必看的吧。我用不上荒废了。", "marks": "力荐"}
{"content": "当年真有毅力，竟然读完了，可惜读完了好像没写过MFC，现在也忘得差不多了，浪费了，记得当年还是非常有快感的", "marks": "力荐"}
{"content": "学习MFC必看。主要讲解了MFC中消息的路由机制和单文档多文档的内部原理，看着本书要先对WinSDK编程有一定的了解（不要问是不是应该先学C/C++了，不懂这两门语言那还是文盲）。", "marks": "力荐"}
{"content": "不愧为大师啊  相见恨晚之感。。", "marks": "力荐"}
{"content": "Coding 入门很好的书", "marks": "力荐"}
{"content": "粗略看过。理解MFC机制的一本好书，侯捷老师的讲解很清楚，同时又有大量的图示。从中可以看到MFC的内部的流程是什么样的。", "marks": "力荐"}
{"content": "名气很大的一本书，不过老实说，我没有从这本书里面学到很多....", "marks": "还行"}
{"content": "第一遍，还是有很多疑惑。。。", "marks": "推荐"}
{"content": "真屌丝，不mfc", "marks": "力荐"}
{"content": "学生时代读的，也没有太搞懂。但仍然记得某位同学的一句话，“这本书毁了一代人”", "marks": "还行"}
{"content": "MFC, N年前看的，重要的几个宏讲的很好！", "marks": "推荐"}
{"content": "侯捷老师的名著。", "marks": "推荐"}
{"content": "侯捷的书一向雷声大雨点小，，前三章有价值，后面的就有点水了。。", "marks": "还行"}
{"content": "MFC大势已去", "marks": "还行"}
{"content": "这是相当的经典", "marks": "力荐"}
{"content": "绝对的好书，MFCer必看。", "marks": "力荐"}
{"content": "神书", "marks": "力荐"}
{"content": "侯俊杰的经典之作", "marks": "力荐"}
{"content": "早年看过的技术书", "marks": "力荐"}
{"content": "前几章，对MFC的模拟，实在是经典", "marks": "力荐"}
{"content": "第一章介绍C++特性, 非常简单但透彻", "marks": "力荐"}
{"content": "豆瓣疯了吗..为神马最近推荐给我的全是编程的....要督促我学习吗...", "marks": "力荐"}
{"content": "也是粗略看一篇，没时间细读（理解一部分），今后有时间，需要相关知识，好有个印象。第三章，六大关键模拟技术和第六章，MFC的生命周期，写得很不错。", "marks": "推荐"}
{"content": "超烂啊，学的没用，闲着无聊啊。", "marks": "很差"}
{"content": "但我讨厌MFC", "marks": "推荐"}
{"content": "说句实话，不喜欢这本书，并不是写的不好，而是读完过一段时间，基本上没有在我的脑海里留下很多有用的东西，有可能我本身不太做界面方面的工作。当然作为一种专研去剖析代码值得学习，如果不是搞这方面工作的人读这本书帮助不大，更推荐同自己平时工作相关的类库源码分析，例如：Stl源码分析、Python源码分析等。", "marks": "还行"}
{"content": "我的技术启蒙书籍。", "marks": "力荐"}
{"content": "我都记不得上次用MFC是什么时候了 这本书倒是有印象 额 适合没基础没想法的人照葫芦画瓢吧", "marks": "还行"}
{"content": "这个曾经真的试图看过。貌似太难的样子，不太懂。基础不好的不推荐读", "marks": "推荐"}
{"content": "聊备一格，推荐MFC Internals", "marks": "还行"}
{"content": "前3章写的蛮好的，介绍c++，windows编程，MFC技术仿真，隆重推荐。第4章，有点水，自己操作一下IDE，看看教学视频效果更好。第5-7章，进一步介绍MFC，有点和1-3章重复，如果前面没理解好，这里就值得再仔细看看，否则有点罗嗦了。第8-11章，介绍一些应用层面上的东西，", "marks": "还行"}
{"content": "重点看了前面c++基础特性的。mfc后面都忘得差不多了，就记得好多宏。。。", "marks": "推荐"}
{"content": "MFC必读。虽然我一辈子也不想再用MFC了...", "marks": "力荐"}
{"content": "前边不错，后边就是api了，当时应该是本好书", "marks": "还行"}
{"content": "不可多得的有关mfc设计的书籍，对于mfc的框架及其实现讲解的很明了。我觉得，最主要的不是说了解这个框架，而在于我们自己究竟是否找到了抽象的手段和解决问题的方法。", "marks": "力荐"}
{"content": "这本书好早就读过了,感觉现在再研究MFC的话有点太高手了.呵呵.", "marks": "推荐"}
{"content": "难得一见的技术好书", "marks": "力荐"}
{"content": "喜欢前面的关于C++的知识的一些描述，和对MFC framework的描述,不喜欢MFC的宏以及JJH对这些宏的解说", "marks": "推荐"}
{"content": "MFC，很老的书了，新的MFC结构也不太一样，不过必须从老结构开始才能学到内容。", "marks": "推荐"}
{"content": "读了两遍 MFC基本上手了", "marks": "力荐"}
{"content": "侯捷深入浅出的一部, 看了太久, 后来也很少做MFC的工作, 已经基本忘了, 但是印象中没有STL那本好, 那本的很多东西, 不知道是不是用C++还比较多的原因, 一直印象深刻.", "marks": "推荐"}
{"content": "半個月读完的，為了上手項目....\n消息机制的原理说得比较清楚", "marks": "推荐"}
{"content": "想当年在公司搞监控软件的时候，就是靠这本书和VC技术内幕吃饭的。", "marks": "力荐"}
{"content": "简单的读过这本书，没有深入了解", "marks": "推荐"}
{"content": "对于看不懂微软恶心的C++风格，又必须看懂的人极力推荐！", "marks": "力荐"}
{"content": "看过一部分", "marks": "推荐"}
{"content": "六年前读完的，那时候MFC已走向没落，现在更没有读的意义了吧。不过平心而论，这本书还是比较经典的，只是此一时彼一时而已。", "marks": "推荐"}
{"content": "看了这本书最大的收获不是MFC的知识，而是C++基础和framework的知识。", "marks": "力荐"}
{"content": "~", "marks": "推荐"}
{"content": "classic", "marks": "力荐"}
{"content": "读不懂", "marks": "很差"}
{"content": "虽然现在mfc没啥用了，但这本书确实是深入浅出的，只是需要耐心去读。", "marks": "推荐"}
{"content": "理解mfc框架的经典的书", "marks": "力荐"}
{"content": "深入剖析了MFC的脉络", "marks": "推荐"}
{"content": "从学c++到mfc 是个痛苦的挣扎的过程\n\n当初为了拿计算机学位\n\n现在想来\n\n实际就是能独立些程序的过程\n\n还好 这本书帮了我不少\n\n我是个读书 喜欢寻根问底的人 ；\n\n现在mfc相对过时。\n\n这本书  可以说是我对我那个时代的一种纪念。。。。", "marks": "力荐"}
{"content": "侯老师的书写得很好！很多年前读的，不知道现在是不是已经过时了？\n如果要学MFC编程推荐阅读。", "marks": "推荐"}
{"content": "MFC必看", "marks": "推荐"}
{"content": "虽然说读完了以后也没怎么用过mfc，但是对一个这么流行的框架的机制原理进行了学习，再学习其他的框架就容易了许多，自己在设计框架的时候也知道了该保留什么，该废除什么，怎么更加易用。", "marks": "推荐"}
{"content": "翻来覆去就是那几个宏，也许这本书可以变得更薄许多", "marks": "力荐"}
{"content": "没有读完过。", "marks": "推荐"}
{"content": "不多说了，MFC入门精通必备", "marks": "力荐"}
{"content": "阐述详细，解释清楚。\n但夸大问题本身解决的困难程度。或使读者勇气不够。\n另行文方式太过罗嗦，描述用语不够专业，导致需用文字大片描述而不得点。\n\n依旧好评，适合初学者。", "marks": "还行"}
{"content": "侯捷\n翻译大家，但从这本书来看，他同时也是著述立说的大师！！", "marks": "推荐"}
{"content": "老生常谈", "marks": "力荐"}
{"content": "本书的质量和用心是毋庸置疑的。但是 MFC，属于一个典型过度设计的不良案例。所以，你没有必要使用它，但是作为一种近乎 windows 平台的“通用交流语言”，你知道要懂和了解它，可以比较容易的使用其他人使用 MFC 开发的代码基础，不困难的融为己用。这是一个基本要求。", "marks": "推荐"}
{"content": "10年TEC-ED上听过侯老师的一堂课，其对技术的认真和细节的钻研态度对我触动很大。。这本可以说是侯老师的经典之作吧，虽然MFC现在。。。在这本书里你还可以见到其他书里没有的图表描述方式。。", "marks": "推荐"}
{"content": "语言太难懂了", "marks": "还行"}
{"content": "讲的很细，很基础", "marks": "推荐"}
{"content": "2011.01.24", "marks": "推荐"}
{"content": "如果不想读《mfc internal》那种漫天源码的书，建议读一读这本，深入浅出，书中第二三章并没有传说那么难。", "marks": "力荐"}
{"content": "学习VC编程必备", "marks": "力荐"}
{"content": "几好的一本书", "marks": "力荐"}
{"content": "虽然写的都是较为深入的\n但是看着带劲\n对MFC理解非常有帮助，呵呵", "marks": "力荐"}
{"content": "这本书写得真好，是我当初进入IT行业的第一本厚书，当时完全看不懂，硬着头皮，啃了一个暑假，终于读完，真佩服自己当时的毅力。", "marks": "推荐"}
{"content": "囧，去图书馆续借时候被人预约了...", "marks": "力荐"}
{"content": "不同版本改进很大。0进程创建过程可以看做驱动的注册《设备驱动》。计算机中很多拟人化表述，实现逻辑功能等价但实现过程迥异《数字逻辑》。工程是在一个不确定和相互矛盾的要求条件下的进行的工作（组合，抽象，模块化，层次性）。", "marks": "力荐"}
{"content": "翻了翻记录，是从10年的7月份开始学习0.11内核的，工作日志不到2万字，svn里面的版本号是100多个，中间断断续续，去年生病头疼停了近一年，工作以后学习真是一件不容易的事情。无数次的make，一点点的解决问题，辛苦与收获，饮水冷暖自知而已。最后：纸上得来终觉浅，绝知此事须躬行", "marks": "力荐"}
{"content": "永远都“在读”", "marks": "力荐"}
{"content": "挑其中的部分章节阅读了一下，时间不够了，以后有机会的话补上～", "marks": "推荐"}
{"content": "充满各种细节的书，讲的也很详细；从linux的早期代码实现，来了解操作系统到底是怎么做的，还是很有参考价值的，其实大致架构和思想是没有变的", "marks": "推荐"}
{"content": "书中还是有些错误的；看完之后搞明白了c代码是如何转变成kernel的", "marks": "推荐"}
{"content": "好书！好代码！", "marks": "力荐"}
{"content": "推荐", "marks": "力荐"}
{"content": "第一次读没几页就放弃了~", "marks": "力荐"}
{"content": "读不下去…… 非要花很多时间来啃不成", "marks": "推荐"}
{"content": "一般般吧，其实选的内核版本太老了，作为操作系统内核入门来说难度高了点。但是做为深入研究现代操作系统内核又浅显了点。希望对linux内核有点了解，不需要很深入的或许 可以买来读一读。", "marks": "推荐"}
{"content": "这本书确实让我冲动的动手写了一把OS. 但是太厚了,我没认真看完.", "marks": "推荐"}
{"content": "Linux内核注释的升级版，比前一版本加了80x86相关知识，由于内核注释送给一个小师弟了，自己后来又买了这本留念，后来又出了Linux内核完全剖析，是不是也要买来留念？暂时还没有这样的打算，最近也没研究了，有机会再说吧。。。", "marks": "力荐"}
{"content": "读了一些，编了一些，搞不下去啦，搞MIT JOS去啦，又搞不下去啦", "marks": "推荐"}
{"content": "非常适合新手，作者很细心，如果没有这本书，我的linux之路会艰难很多。", "marks": "力荐"}
{"content": "这本书其实并没有读完，可能永远也不会再去读了。\n很多时候你以为你这辈子就会做这个领域了，就只会爱这么一个人了，所有的一切可以留到来日方长在慢慢做，\n其实很多时候，就没有未来了", "marks": "推荐"}
{"content": "写的不要太好", "marks": "力荐"}
{"content": "非常全面，好评", "marks": "力荐"}
{"content": "一本读书笔记 比自己领悟的深刻多了", "marks": "力荐"}
{"content": "别看这么厚，很多重复的地方。感觉有点骗稿费之嫌。傻瓜式的讲解。", "marks": "较差"}
{"content": "学习Linux的入门书，0.11内核，展现了内核的基本框架，为深入学习更深入的东西打下基础。感觉作者自己对Linux内核学习的很透彻，不然不会把内核文件结构列的这么清晰。书中还补了许多微机原理和x86芯片的知识，弥补了自己这方面的知识欠缺。", "marks": "推荐"}
{"content": "本科读机械的人写得书啊~~~\r\n向学长致敬！！", "marks": "力荐"}
{"content": "写的确实蛮好的，是比较浅显易懂的书", "marks": "力荐"}
{"content": "文笔精准，逻辑清晰，适合国人思维。相当不错的一本书", "marks": "力荐"}
{"content": "在读", "marks": "力荐"}
{"content": "linux内核入门的好书籍, 作者写作非常认真负责, 满分.", "marks": "力荐"}
{"content": "简单易懂。", "marks": "推荐"}
{"content": "入门教程，至少让你明白Ajax是怎么回事。但原理方面的不如看Ajax in Action，应用方面的不如直接看框架，估计现在没人自己封装Ajax请求吧...", "marks": "还行"}
{"content": "买了，还没有读。估计应该是本不错的书。", "marks": "还行"}
{"content": "很入门", "marks": "还行"}
{"content": "只能算是入门，实践应用还差点。", "marks": "还行"}
{"content": "内容的可用性不高", "marks": "还行"}
{"content": "可以一读, 但ajax显然需要很多的是实践.", "marks": "较差"}
{"content": "站在书店看一遍就可以了", "marks": "还行"}
{"content": "实用Ajax入门", "marks": "力荐"}
{"content": "看的挺好的。", "marks": "推荐"}
{"content": "什么都没说~ ~", "marks": "还行"}
{"content": "比较基础", "marks": "还行"}
{"content": "作为入门看了前几章，短短几年，很多内容现在已经有些过时了！", "marks": "还行"}
{"content": "如题，很基础的一本书，可以作为了解读读。\n不过现在谁还会去研究Ajax呀～框架拿来直接用了，哈哈～", "marks": "推荐"}
{"content": "学习了Ajax的概念", "marks": "力荐"}
{"content": "感觉讲的不是很深，但是对不了解的人来说，可以很快了解，比较容易懂的。\n哎，AJAX并不大难，难在利用AJXA和HTML,JS,CSS做出很好的用户体验，还要继续修炼呀", "marks": "推荐"}
{"content": "不怎么样", "marks": "还行"}
{"content": "实在没什么内容，基本上只要看个基本概念，接下来可以扔了", "marks": "还行"}
{"content": "一般，作为入门可以，但是太基础了，很多代码都有兼容性问题", "marks": "还行"}
{"content": "名字没取错，对，是基础", "marks": "还行"}
{"content": "很基础，入门很好", "marks": "力荐"}
{"content": "好多烂代码", "marks": "较差"}
{"content": "这本书19块钱我都觉得买亏了。在当时也只能算是基本入门书了。没有深度。", "marks": "较差"}
{"content": "....读的06版，  内容有些老了...2个小时就翻完了", "marks": "还行"}
{"content": "不错的入门书。", "marks": "力荐"}
{"content": "浅显易懂，不错的一本书。后半部分觉得比较废。", "marks": "推荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "使用此书来入门应该没有问题,翻译稍有瑕疵", "marks": "推荐"}
{"content": "Ajax很热的时候。头脑发热买的。看是看完了，但是现在用不上。书还可以，入门", "marks": "推荐"}
{"content": "Ajax", "marks": "还行"}
{"content": "很多Ajax的例子，介绍了很多有用的工具和资源，已经一些常见的框架,例如Dojo", "marks": "推荐"}
{"content": "继续实践新发现的“马桶读书法”。", "marks": "推荐"}
{"content": "差评", "marks": "较差"}
{"content": "比较旧了，服务器端使用的语言是java，不是被我的菜", "marks": "较差"}
{"content": "基础", "marks": "还行"}
{"content": "这本好像是大学毕业设计那时出版的第一部写ajax的书。", "marks": "还行"}
{"content": "我想应该是一本AJAX入门的好书", "marks": "较差"}
{"content": "简单易懂", "marks": "力荐"}
{"content": "几乎看完了，挺不错的", "marks": "还行"}
{"content": "Ajax很火，Ajax很强大。Ajax扫盲书，有很不错的例子。", "marks": "力荐"}
{"content": "这本特别适合入门级读者，不只详细讲解了表现层基础原理，还介绍了服务端的各种实现，让读者对整个前后台的流程有了清晰的认识。只是，相同代码重复出现会让人有些不耐烦", "marks": "力荐"}
{"content": "还行吧", "marks": "还行"}
{"content": "过时了", "marks": "较差"}
{"content": "通俗易懂", "marks": "推荐"}
{"content": "每天从四楼宿舍背到五楼机房，再从五楼机房背会宿舍，减肥利器呢，不过很好用的工具书！", "marks": "力荐"}
{"content": "此书作为AJAX的入门书籍，还是很棒的", "marks": "推荐"}
{"content": "断断续续的看着，学习着", "marks": "力荐"}
{"content": "基本是混稿费的", "marks": "还行"}
{"content": "可以比较快速的入门的书，整体比较简单，可是这种简单却更好的突出了Ajax的主体，而不会让学习看书者被其它的技术给难住或者费掉过多的精力。就是一个老手也是有必要读一下的。", "marks": "推荐"}
{"content": "带我进入了Ajax的天地", "marks": "推荐"}
{"content": "最近要用到，泛泛地看了一下，算是有个粗浅的认识吧。。。", "marks": "推荐"}
{"content": "ajax入门", "marks": "推荐"}
{"content": "如果是入门，这个是很不错的一本选择", "marks": "力荐"}
{"content": "当年第一本中文ajax，其实就普及了一下知识\n现在ajax完全交给jq做了，所以读一下jq就足够了", "marks": "还行"}
{"content": "适合初学者，现在回头看，这本书还是太浅了，倒是通俗易懂", "marks": "还行"}
{"content": "国内第一本AJAX图书，不错的入门教程，不过例子中的服务器代码使用Java servlet.实验时可采用自己熟悉的代码。主要看的前3章", "marks": "还行"}
{"content": "学习AJAX的入门图书，真的很不错！！", "marks": "推荐"}
{"content": "读过好久了，只记得看javascript有一定难度。于是先看了javascript又看了jquery在看的本书。书中内容不错，学到很多知识。", "marks": "推荐"}
{"content": "后面的读不懂了！", "marks": "力荐"}
{"content": "Ajax基础", "marks": "推荐"}
{"content": "前几章还可以，循序渐进，是入门级别的", "marks": "推荐"}
{"content": "2006-5-8", "marks": "还行"}
{"content": "不错，虽然用很大的篇幅，核心的代码估计也就那么一点点，其它的都是基础，但总算把Ajax的应用表现出来了", "marks": "还行"}
{"content": "我是学设计的，这本书完全看不懂的啊", "marks": "还行"}
{"content": "比起十年前第一次读，这次要读得懂一些了……不过，还是不太有谱怎么真的应用起来……", "marks": "推荐"}
{"content": "这才是OO正宗啊 设计的元信息 方法论 方法论", "marks": "推荐"}
{"content": "坦白说，本书的翻译差强人意。", "marks": "推荐"}
{"content": "读了一半，没什么收获\n", "marks": "还行"}
{"content": "简单翻了一下，发现我实在看不下去，应该是给比较熟悉UML的人看的", "marks": "很差"}
{"content": "class和object森么的讲的太不清楚，翻译的也挺可怕", "marks": "还行"}
{"content": "这是一本试图什么都讲到，但什么都没讲清楚的书。看得我想吐血！！！", "marks": "较差"}
{"content": "这书读着丈二和尚摸不着头脑", "marks": "较差"}
{"content": "其实书本的内容并不基础。", "marks": "推荐"}
{"content": "妈蛋从国内寄过来花的钱可以买好几本书。。。", "marks": "力荐"}
{"content": "写得挺生动亲民的，很好的入门书。", "marks": "推荐"}
{"content": "除了python tutorial之外，最好的python入门书。", "marks": "推荐"}
{"content": "复习复习，还行吧....还是要搭配核心库之类的来读...", "marks": "推荐"}
{"content": "的确适合没什么编程经验的人看，也就意味着不太适合已经有一些编程经验的人看，不过我还是打算把它看完。", "marks": "推荐"}
{"content": "面向初学者的Python书，出现缩进排版错误，实在是不友好。", "marks": "还行"}
{"content": "越往后的章节越读不懂了，放起来吧。", "marks": "推荐"}
{"content": "某人啊学经济之余看python 大前天给出了道99乘法表  昨晚给出了道画*金字塔", "marks": "推荐"}
{"content": "这本书写的比较全面，但是均浅尝辄止，而且有的地方写的莫名其妙，作者用到了一些东西但是没有进行说明。如果看的话强烈建议看英文版，中文版翻译的很不好！入门的话我推荐dive into python。", "marks": "很差"}
{"content": "Python入门教程", "marks": "还行"}
{"content": "唔真心不推荐新手看但是有一点了解之后看还是觉得很不错的", "marks": "推荐"}
{"content": "简洁的入门小册子，标题很有趣", "marks": "还行"}
{"content": "best python book ever", "marks": "力荐"}
{"content": "各个方面介绍都到了，后边的10个examples不错，不过还没做", "marks": "力荐"}
{"content": "掌握了一门新手艺", "marks": "推荐"}
{"content": "后面的project对入门不错，前面的基本知识讲解也就平均水平", "marks": "推荐"}
{"content": "结构条理都很清晰", "marks": "推荐"}
{"content": "逻辑非常好，适合入门。", "marks": "力荐"}
{"content": "没想象中那么好，如果为了熟悉python语法建议看这本，像learning python 之流太厚重了！ 缺点也就在于，由于包含的内容过多，所以感觉每一部分都点到为止，需要自己去找其他的材料看", "marks": "推荐"}
{"content": "很适合Python入门学习", "marks": "推荐"}
{"content": "这本书细节讲得比较多，进阶不错，非常不适合初学者，10个小项目难度略大了，书有点老。", "marks": "推荐"}
{"content": "例子非常好。", "marks": "力荐"}
{"content": "基础部分讲的不错，后面的练习对初学者来说可能有点复杂了", "marks": "推荐"}
{"content": "python好玩～～", "marks": "推荐"}
{"content": "还好我当初入门 Python 的没有用这本书。 很多基本概念没有详细的进行阐述，对于没有编程经验的新手来说会觉得比较吃力。不过这本书好的一点在于对一些常用库的使用有所涉及，方便建立一个初步的印象。", "marks": "还行"}
{"content": "看过一遍了，也一直在跟着edx上课，每周都要花好久搞这个东西， 但是还是忘了好多前面的小东西，笔记做的也不够到位，当然这书本身写的很不错的啦！打算重读！", "marks": "力荐"}
{"content": "只适合完全没编程经验的人作为编程入门. 不适合有其他语言使用经验的人, 这本书总在关键的地方缺乏细节.", "marks": "较差"}
{"content": "python3讲得不多，不过作为入门书籍写得不错", "marks": "还行"}
{"content": "读了一半发现对我用处不大，存为工具书，有用再翻。", "marks": "力荐"}
{"content": "看教程看得很快，看完就忘了", "marks": "推荐"}
{"content": "M", "marks": "还行"}
{"content": "基础啊基础。。。。。", "marks": "还行"}
{"content": "简单易懂 初学者的宝典~", "marks": "力荐"}
{"content": "  通過這本書把Python的語法基本搞清楚了，入門不錯的書講解的很清楚，模塊那章應該放在前面一點，這樣可以自己先把例子裏的函數做出來試試，翻譯的也算可以了，沒有啥特別難懂的地方。接下來就是自己多練手了。", "marks": "推荐"}
{"content": "还不错，靠它真正入了门", "marks": "推荐"}
{"content": "难怪都说python code很小资，果然是很随意啊~ 粗略读过一遍，后面可能还要经常查阅！", "marks": "力荐"}
{"content": "翻译错误令人发指！作者看不懂“C++--”幽默，不理解Batteries Included，不知道File Permissions……", "marks": "很差"}
{"content": "项目需要，浏览了一遍，很适合作字典用。", "marks": "还行"}
{"content": "大爱, 除了部分章节翻译不好", "marks": "推荐"}
{"content": "入门首选，赞书中的实际项目。", "marks": "推荐"}
{"content": "初学者必读。", "marks": "力荐"}
{"content": "确实是本入门的好书 不过需要有点脑子才能看下来 最好先学学基础的算法  适合开发者来学 书后面的10个项目很有帮助", "marks": "推荐"}
{"content": "自学Python主要依靠这本，读的很欢乐", "marks": "力荐"}
{"content": "降成4星吧，他到底用的是what.what版本的python。。。", "marks": "推荐"}
{"content": "作为入门书很细致，也比较系统，最后十个project作为收尾很有实战价值", "marks": "力荐"}
{"content": "不知道原书就很渣还是翻译很烂。。反正看了半天没太看明白。。。那本简明python教程就很好懂啊。。尼玛花了我50大洋啊。。", "marks": "较差"}
{"content": "勘误太多", "marks": "推荐"}
{"content": "是本不错的入门书。", "marks": "还行"}
{"content": "还是不能懂得re", "marks": "力荐"}
{"content": "前面的语法部分感觉写的还挺通俗易懂的，后面数据库、网络编程等部分的内容看起来就很费劲了，十分挫伤自信心。期间玩了pythonchallenge.com，感觉这种轻量级的实践项目、有游戏机制的学习方式是很不错的形式，可以很好地练习所学内容。受这个启发也许做点儿有意思的东西，帮助其他人学习coding。另外，真的需要对自己既有的学习模式进行反思了，也许真的有瓶颈需要突破了。另外，不知道电子书是不是真的没有纸质书的阅读效果好。\n--------\n讲的很通俗，可能是翻译的不错。中间有一章有点拗口。", "marks": "力荐"}
{"content": "讲的很详细，也很容易懂。\n不由感叹，Python是非常神奇的一门语言！\nPython强大的库，多种多样的工具，以及多种语言的扩展功能很好。\n另外，Python的另外一个重要思想就是，程序员的时间比机器的时间更宝贵！", "marks": "推荐"}
{"content": "很不错的Python教材", "marks": "推荐"}
{"content": "看完了2/3，可惜后来一直没用到python。", "marks": "还行"}
{"content": "非常好的入门书籍。翻译的也挺风趣。如果最后能按照说明把项目做一下基本上就熟悉基本特性了。\n对于python的GUI操作一直不感冒，我一直认为它是“跑动在”后台的角色，但最近又使用了wxpython后发现已经大为改观，仅仅用来搭建系统原型，甚至是简单的应用都可以胜任了，但在Windows平台下还是有些细节问题。", "marks": "推荐"}
{"content": "作者很Geek啊，很多地方都让人会心一笑。", "marks": "推荐"}
{"content": "看好几遍了，讲的比较透彻。里面的10个例子也很好。", "marks": "推荐"}
{"content": "学re那部分的时候满脑子的perl……", "marks": "推荐"}
{"content": "后面的10个项目不错", "marks": "推荐"}
{"content": "对零起点的初学者还是有些难度，看到中间就很艰难了。经常会有后面的知识在前面乱入。有基础读起来可能会很好，0基础还是先看别的为好。", "marks": "推荐"}
{"content": "简单易懂，例子很多", "marks": "推荐"}
{"content": "入门好帮手", "marks": "推荐"}
{"content": "整理书架日67", "marks": "推荐"}
{"content": "给初学者的好书，感觉有些地方翻译的有些生硬", "marks": "还行"}
{"content": "好书啊好书", "marks": "力荐"}
{"content": "只有简缺少明", "marks": "较差"}
{"content": "有点水...", "marks": "推荐"}
{"content": "在选材，广度和深度上是符合入门书要求的。", "marks": "推荐"}
{"content": "第二版：\nhttp://book.douban.com/subject/25880388/", "marks": "力荐"}
{"content": "忘记了如今。", "marks": "还行"}
{"content": "挺好的", "marks": "推荐"}
{"content": "前面很一般，project部分才是亮点~", "marks": "推荐"}
{"content": "后面的章节没详细看。有空再总结下各知识点。书的内容比较旧，基于Python2.5版本。", "marks": "推荐"}
{"content": "翻译不好。", "marks": "还行"}
{"content": "真心不如简明python", "marks": "还行"}
{"content": "鼓励逃避问题的书都不是好书", "marks": "还行"}
{"content": "还行吧，但作为入门的话感觉并不合适，篇章组织的不合理，对入门而言应该有个轻重，这本书过分的追求全。如果对篇章重组的话可能会有更好的阅读效果，建议有其他的语言基础的人阅读，不过内容很全，而且最后的项目很有用！", "marks": "还行"}
{"content": "槽糕的翻译，还在python比较简单", "marks": "还行"}
{"content": "前几章基础部分写得还可以，后几章SQL、HTML、CGI、GUI的内容简单带过，之前如果没有这些分支的基础的话，挺难理解的，数据库、网络编程的内容想完全搞懂需要另外补充书籍深入研究。十个项目还没有做，做完再更新评价。ps:翻译是真的烂。。。", "marks": "还行"}
{"content": "接下来造几个轮子试一试。", "marks": "力荐"}
{"content": "PY系Q1", "marks": "还行"}
{"content": "内容丰富，但感觉组织的不太好", "marks": "推荐"}
{"content": "比较易懂，例子多。", "marks": "推荐"}
{"content": "Python入门不错.", "marks": "力荐"}
{"content": "感觉比Learning Python好，入门佳品", "marks": "力荐"}
{"content": "花了我六十多人民币，看了大半，我日益怀疑这本书并不好。对于那些对Python比较熟的人，可能看不出来，这个本书前言不搭后语，很多东西作者前文没有给出，就开始用，这让初学者云里雾里。", "marks": "较差"}
{"content": "入门非常速度 好书.   ", "marks": "还行"}
{"content": "个人觉得写的不咋地, 很多地方没将清楚. 而且例子没有实际用途.\n我个人看的是 Ubuntu full circle magazine 中的python 教程, 感觉非常好", "marks": "还行"}
{"content": "没有全部看完，例子的部分实在看不下去了……前边的基础部分还行，比较基础，但是感觉简单的地方很啰嗦，难的地方很简略，有没看懂的地方，还是网上找资料，写demo靠谱一点", "marks": "还行"}
{"content": "反复阅读，慢慢觉得原理深入人心。", "marks": "推荐"}
{"content": "入门首选书，之前是看《Dive Into Python》，但觉得《Dive Into Python》把知识点分得太散了。。。没有这本划分的合理", "marks": "力荐"}
{"content": "就想做做后面的10个小项目\n没做小项目，翻了一遍，主要是之前用的过程中就学的入门了", "marks": "推荐"}
{"content": "刚看了一半，很不错的 Python 入门书", "marks": "力荐"}
{"content": "书中有不少排版错误，代码的indent有问题。不过还是给四颗", "marks": "推荐"}
{"content": "技术讲解很全面", "marks": "推荐"}
{"content": "算是python的书中最适合系统入门的了", "marks": "推荐"}
{"content": "学习python编程的一本书。", "marks": "推荐"}
{"content": "这个评论是怎么刷上去,作者就是在有限的时间内给你画了一块饼...再吐槽下后面的例子,可以直接无视了基本上都是toy...", "marks": "较差"}
{"content": "这本书后面的十个案例我就看了两个，感觉不如直接去找开源项目去看。这本书对字符串部分写的不错，和《Python3程序开发指南》相比，本书更注重机基础，而后者更像实一本参考手册。", "marks": "推荐"}
{"content": "真心不适合入门", "marks": "较差"}
{"content": "挺细的，有点琐碎，还是得多写点东西才行", "marks": "力荐"}
{"content": "作者是挪威人，在fb上po了张照片，照片里他反拿着自己的书，说明他能把自己的书倒背如流。书里面把python该说的基础知识都说了，书里没说的，得买他另外一本书《Python算法》。", "marks": "力荐"}
{"content": "我只是为了用爬虫和数据分析来搞清楚房价走势什么的，并非出于崇高目的学习此书。", "marks": "力荐"}
{"content": "作者的思路很清晰，深入浅出，解决了去年读dive into  python的一些问题", "marks": "推荐"}
{"content": "某些部分的翻译好似机器翻译。。", "marks": "还行"}
{"content": "非常适合菜鸟的Python 入门书籍。", "marks": "力荐"}
{"content": "入门翻过。", "marks": "还行"}
{"content": "作为textbook，这本书比《python学习手册》更好。那本书太全太细。", "marks": "推荐"}
{"content": "适合无编程基础者", "marks": "推荐"}
{"content": "是本入门书", "marks": "推荐"}
{"content": "前半部分写的很好，后面就有点乱了，十个例子写了一个，剩下的有空再写。。", "marks": "推荐"}
{"content": "今年对脚本的学习计划。。系统管理要求不高，但要能看懂，并能修改。。。", "marks": "推荐"}
{"content": "急着赶作业用3天看了一遍，感觉很多缺点：1. 讲述旧版本特性过多，浪费时间且容易混淆 2. 简单概念用法讲述太长，关键部分如迭代器却缺少详细的解释，还不如tutorial容易理解", "marks": "还行"}
{"content": "比较概要的了解了一下，其实是有些相对深入的地方看不太懂，out 了我", "marks": "推荐"}
{"content": "未完成", "marks": "还行"}
{"content": "看了一遍，语法和方式方法都有一定都了解，后面都十个小项目才是亮点。可是书已经不在了。编程需要都实践，关看书，看不出来的，先大概了解一下，就上手写写改改，慢慢就熟悉了，熟练生巧，再就是提高思维方式都层面的了", "marks": "推荐"}
{"content": "略厚。。。", "marks": "推荐"}
{"content": "不错", "marks": "推荐"}
{"content": "对于工作上用了3年C\\C++的人来说，这书是不错的入门书籍，也可以当作工具书，但有些内容也比较浅、初级，不过可以有即时的效果展现，看完立马几行代码就可以搞出一个以前用C++要一堆代码才能做的事情。用进废退，学完之后如果不经常写，在工作上还是用C++的话，学了等于白学，过阵子还是忘记了语法、忘记了库。要多写。", "marks": "推荐"}
{"content": "四天看完，python的网络编程还是不太理解", "marks": "推荐"}
{"content": "。。。。看了真的等于没看的一本书~", "marks": "力荐"}
{"content": "这书真的太好了！是我看过的最好的一本python书，看本书时思维及其流畅，欲罢不能！", "marks": "力荐"}
{"content": "评论中看到\"这本书以实践为主的写法的确会让一些喜欢把语言的specification先弄清楚的读者不适应\"<<<===简单扫了八章之后觉得确实是这样。", "marks": "还行"}
{"content": "很实用", "marks": "推荐"}
{"content": "挺不错的入门书，可惜讲的还是python2，并且略微有点啰嗦。不过也找不到其他比较好的python入门书了。。", "marks": "推荐"}
{"content": "有习题就更好了", "marks": "推荐"}
{"content": "讲python入门较好的一本。。时隔一年重新浏览，感慨良多，认识也完全不一样", "marks": "推荐"}
{"content": "入门", "marks": "推荐"}
{"content": "作为Python入门书是很好的选择", "marks": "力荐"}
{"content": "不适合有其他语言开发经验的人快速入门Python。", "marks": "还行"}
{"content": "蛮不错，知识点覆盖得蛮全面的，项目也很不错", "marks": "力荐"}
{"content": "10年的书，14年标记想读，17年读完……= =", "marks": "推荐"}
{"content": "作为入门书籍，很好。不过应牢记，最好的学习是动手。", "marks": "力荐"}
{"content": "屎一样的翻译", "marks": "很差"}
{"content": "再度系统学习python。跟ruby相比，python的语言设计果然没什么亮点，不过也挡不住大家线上用得多、性能好很多呢", "marks": "力荐"}
{"content": "这本书作为入门书还不错，介绍的比较全面，就是没有习题", "marks": "力荐"}
{"content": "适合入门，虽然后面几章没有深入研究。", "marks": "力荐"}
{"content": "入门不错", "marks": "力荐"}
{"content": "不错的入门书～～", "marks": "推荐"}
{"content": "当字典一样常翻翻挺好的 细致", "marks": "推荐"}
{"content": "Python初学者，选了这本所谓的“基础教程”。前面几章还行，第七章开始变得抽象，第九章开始就完全不知道在讲什么。", "marks": "很差"}
{"content": "回顾下python基础知识,这本书还比较简洁,还不错. 延迟阅读参考:http://lucida.me/blog/developer-reading-list/#python", "marks": "推荐"}
{"content": "作为python入门书还算ok，不过说实话组织的有点乱，没有python自身的document好。", "marks": "还行"}
{"content": "大致翻了一下：‘巩固’了一下Python知识点；了解了正则表达式；了解了网页抓取等知识&Python的一些新东西。感觉一般。", "marks": "还行"}
{"content": "教材。打开了新世界大门。", "marks": "推荐"}
{"content": "后边的一些例子很不错", "marks": "推荐"}
{"content": "TAT.谁知我这么快转行做了家庭主妇", "marks": "推荐"}
{"content": "快速的扫了一遍，最近时间紧张", "marks": "推荐"}
{"content": "建议所有要读该书的人去读《一个操作系统的实现》", "marks": "还行"}
{"content": "面向初中生的教程。。。8086汇编直接还是在QEMU上玩的必备啊，新人类该玩arm版的了。 ", "marks": "推荐"}
{"content": "虽然进程、内存、文件基本都没讲……", "marks": "推荐"}
{"content": "垃圾,这也能叫操作系统?简直就是在写图像版本DOS程序.幸亏是借了别人的盗版书看的..", "marks": "很差"}
{"content": "买来就后悔了……一是太老，已经出版都十四年了；二是面向读者是 Windows 用户，对 Linux 用户不友好；三是注释和官方在线文档均是日文。对了，这书散发着浓厚的日本腔……", "marks": "还行"}
{"content": "#纸质书# #作者吐槽# 这是全书除了内容之外的充满欢乐的第二个优点！但是觉得更像是写个壳子而已。。。", "marks": "推荐"}
{"content": "内容浅显易懂。不过没有太多的操作系统的理论方面的东西。看完之后，可以看看Operation Systems Design and Implementation。", "marks": "推荐"}
{"content": "操作系统课程偏理论，linux源代码又太庞大，所以这本书是理论结合实践的好材料。但是由于针对零基础所以比较啰嗦。", "marks": "推荐"}
{"content": "汇编+C，32位编程，主要偏硬件模块，后面从内存管理开始有点晕.....=.=....先不撸这本了.......希望了解操作系统的，还是不要看这本了....了解汇编能做到什么程度的，还是可以拿来看看....", "marks": "还行"}
{"content": "非常酷的书。而且写的超级细。5心推荐。", "marks": "推荐"}
{"content": "自己动手，丰衣足食", "marks": "力荐"}
{"content": "看完实体书再评价～～～在书店翻了下：有点啰嗦，对于我来说，重点不多。", "marks": "还行"}
{"content": "像是一个契子,敲开了<操作系统>的神秘外壳.", "marks": "力荐"}
{"content": "说的还是不错的，不过开发是基于 windows 的，所以我的做法是用这一本来入门概念，另外一本来实际开发，哈哈哈", "marks": "推荐"}
{"content": "毕业设计用了这个，也算是偷懒吧，但我也自认为不算偷懒，毕竟我话了很多时间去弄懂书上讲的东西。忘了说了，本书非常适合苦于找不到合适项目的计算机本科生利用课余时间实践，有很详细的指导哟～\n", "marks": "力荐"}
{"content": "多看推出限时读，一周看完这本书真的是很爽。启动，中断，多任务，窗口绘制，自定义可执行文件，把一个简易的os在这样的文风跟篇幅讲述清楚，实在不易，五星级推荐", "marks": "力荐"}
{"content": "只看文字，大概知道原理，代码到后面就不想看了。对于地址映射/如何进入保护模式的内容讲的不够系统，恰好这部分又很重要。其他的都相当不错。\n作者十分重视系统的性能和效率，书中用了迭代开发的方式，不断改进升级。讲述的方式是重要的，读完觉得操作系统也不是那么难以理解。\n另外，作者是个牛人，曾自己开发了osask小系统from scratch，８０ｋB，一半用汇编，据说启动只要１s，吊吊的", "marks": "推荐"}
{"content": "师父领进门，修行在个人。", "marks": "力荐"}
{"content": "看了一半。", "marks": "还行"}
{"content": "因为这本书毕业设计成了优秀.....", "marks": "力荐"}
{"content": "OS入门书，强烈推荐！", "marks": "力荐"}
{"content": "日本式的婆婆妈妈，不过写得确实通俗易懂。", "marks": "力荐"}
{"content": "读到了第10章，感觉很不错", "marks": "力荐"}
{"content": "Mac不能跟着做，挑了汇编语言和c语言指针部分的内容看。作者写的风趣幽默，不错，推荐。", "marks": "推荐"}
{"content": "过时删了", "marks": "还行"}
{"content": "两条尾巴的黑猫。。。", "marks": "推荐"}
{"content": "不适合自己，以后还是不看自制系列了", "marks": "推荐"}
{"content": "E...感觉玩玩可以，打法打发时间", "marks": "还行"}
{"content": "carp…………做到多任务的时候电脑坏掉了，mark 一下，以后有了电脑再继续做吧", "marks": "推荐"}
{"content": "好想好想看这本书，据说语言非常风趣幽默，绝对好入门OS～～～～实体书8月刚出，pdf只有0、1、15、16章～～～～", "marks": "推荐"}
{"content": "条理性太差，知识的铺垫太少，不会的时候很难看懂", "marks": "还行"}
{"content": "翻了几章，由于作者使用的並不是通用的编译器，而且是基于windows平台，所以没继续看了。", "marks": "还行"}
{"content": "从0开始写了一个操作系统，但是里面没有涉及到文件系统。文件系统在操作系统中是很重要的，不过瑕不掩疵。整体来说还是很不错滴。", "marks": "推荐"}
{"content": "没兴趣了已经", "marks": "还行"}
{"content": "虽然只是简单的操作系统，但可以让人对整个系统的构建有大体的了解。", "marks": "推荐"}
{"content": "大一还是大二的时候看的，整个照着敲下来了，当时感觉挺有意思的，但是感觉对现在没多大作用？准确的来说是没什么印象了", "marks": "推荐"}
{"content": "有种跟着感觉走的样子。\n不够系统，如果一开始能有一个系统整体设计的描述会更好。\n没有达到我想要的目的。\n只能说，照着书编着玩一玩还是可以的。。", "marks": "还行"}
{"content": "书写得真不好", "marks": "较差"}
{"content": "内容比较详尽，但理论层面的知识解释一般，并不能说照着书中代码写一遍，就能理解操作系统的真正实现原理，比如说有关PIC的设置说明，为什么这么设置，书中可能为了简明，总是说，IBM的大叔发明计算机就是这么设置的，这样的话一带而过，比如说GDT的说明，比如说16位进入32的说明等等，理论解释差强人意，推荐在读此书之前，读一读《x86汇编语言，从实模式到保护模式》和《深入理解计算机系统》一书，如果有时间，可以将《Linux内核完全剖析》这本书大概读一遍，不用精度，对一个现有的操作系统实现有一个较完整的理解后，再读此书，相信收获更大。", "marks": "推荐"}
{"content": "操作系统老师推荐的书，但是这TM也能叫操作系统？学习操作系统最好的方法就是linux源代码。", "marks": "较差"}
{"content": "算是读了读人家的代码，完成到多任务，就先这样吧", "marks": "推荐"}
{"content": "1）本着实用主义的理念，旨在讲解如何编码实现\r\n2）设计混乱、浅薄，并未道出操作系统的精妙之处，如内存管理、任务管理、文件系统都是勉强实现，能行则已\n3）讲解粗略，缺乏条理\n综上，可以作为入门材料，一窥管豹，但是想要深入研究操作系统还是不行", "marks": "较差"}
{"content": "虽然内容有点过时，但书还是很不错的，值得一读", "marks": "推荐"}
{"content": "不能算读过吧, 因为里面用的工具太古老了,让我完全没办法读下去", "marks": "较差"}
{"content": "适合C入门级的提高代码阅读能力，和操作系统入门级的基本原理，不适合凑丝剥茧的体制解析。", "marks": "还行"}
{"content": "还行，但是讲的不深，跟着做可以做出一个有图形界面有简单应用的操作系统，但是对底层的了解不会增加太多，可以打消对自制操作系统的畏惧吧", "marks": "还行"}
{"content": "过时", "marks": "很差"}
{"content": "#第一天#", "marks": "力荐"}
{"content": "本书译者飘过，贡献第一个评价，这本书门槛不高，写得很有意思，特点是通过试行错误来不断完善一个操作系统作品，推荐给对操作系统有兴趣的同学们～", "marks": "力荐"}
{"content": "非常好的一本书。", "marks": "力荐"}
{"content": "犹豫了好久该给多少分，最后这本书没看完，不过主要原因大概是因为自己是计算机系的吧。风格很特例独行，不过说这种书我还是比较喜欢能读原作者写的原文，也许学完日语会有不同的评价吧……", "marks": "推荐"}
{"content": "适合作为学习操作系统的第一本书。", "marks": "推荐"}
{"content": "从汇编入门，再导入c，到鼠标中断，看了两周，无奈后续部分实在晦涩难懂，便难以继续。不过本书的作者可谓天才，用汇编和c完成了简易的os，虽然没有看完，但书中的有些概念还是值得一看，在熟悉了已经封装好的工具之后，接触底层内部的工作原理还是有必要的。\n\n2017.4.27 阅 30天自制操作系统", "marks": "还行"}
{"content": "(2013)", "marks": "推荐"}
{"content": "听这名字就好玩", "marks": "推荐"}
{"content": "作为“十七天从入门到精通”一类的书还是不孬，从引导到成型每一步都有介绍，搞完会小有成就...只是可惜对零基础来说讲得太粗略反之又太细...", "marks": "推荐"}
{"content": "刚看了一点儿，讲得很细致的一本书，挺适合入门的，比看操作系统原理什么的好多了", "marks": "力荐"}
{"content": "看过三遍，从操作系统原理上来说没法跟UCOS比。比于渊那本书更容易看进去。大部分都是侧重UI的。总体来说还是不错的。", "marks": "推荐"}
{"content": "总体还可以。日本人写得总是蛮好玩的，浅显易懂，很容易按步就班的学习。后面GUI等部分罗嗦了点，boot启动部分我认为是操作系统的重点，没有说详细，删掉点，7天或14天也够了。书偏厚，有点贵。", "marks": "推荐"}
{"content": "不错的一本书，但很多实验都在xp上做，用linux就不那么方便了。。。。", "marks": "推荐"}
{"content": "虽然作者有时候很啰嗦，但是的确是很可爱，孜孜不倦，唯恐读者不懂，整体下来，对操作系统的知识有了整体的复习又增强了实践性，把概念具象化了，是一本好书！", "marks": "推荐"}
{"content": "此书另辟蹊径，从VGA12H图形模式开始编写操作系统，避免了复杂的设备管理，只需考虑鼠标键盘输入、VGA12H绘图、任务切换，大大降低了难度曲线。作者语言风趣幽默，特别是系统保护那几节让人捧腹大笑，使人深刻的体会到保护模式是如何“保护”的。\n缺点：系统性不足，API接口比较随意。", "marks": "力荐"}
{"content": "个人觉得翻译的还是不错的(目前看到70页)。书比较适合初学者，当然如果有一定的C或汇编基础看起来会更轻松。作者假设读者没有C基础和汇编基础，所以有时候会觉得内容有些冗余，不过总体是很好的，讲得很细致。推荐", "marks": "推荐"}
{"content": "偏方，不正统。", "marks": "还行"}
{"content": "最值得推荐的操作系统入门书。醍醐灌顶啊。我在 github 上开了个逐日提交, 方便大家学习.\nhttps://github.com/free2000fly/haribote ", "marks": "力荐"}
{"content": "这本书很是吸引人，让我在大学期间尝试了自制操作系统的乐趣，虽然最后没有完整写完，但是这期间的乐趣是难忘的😊", "marks": "力荐"}
{"content": "hehe", "marks": "力荐"}
{"content": "编程风格太弱了，看了一半就不想看了。", "marks": "较差"}
{"content": "功力不够，自制不了", "marks": "还行"}
{"content": "0基础，培养兴趣用书", "marks": "还行"}
{"content": "没有一丝超过季卫东的论文《法律程序的意义》", "marks": "还行"}
{"content": "有些地方不敢苟同……", "marks": "推荐"}
{"content": "《The pratice of programming》的中文版，很古老的书，翻译的太。。。interface、inline等都翻译成啥了。。。对于内容，虽然现在才看，但还有启发", "marks": "力荐"}
{"content": "Princeton编程导论课程。因为编程主要不是编码费时间而是调试：程序首先给人读，偶尔的供计算机执行。本书主要介绍的是书写的规范，关键说了：数据结构和算法都是固定的而且很少，大多数是针对具体问题的组合和变形。", "marks": "力荐"}
{"content": "翻译的人感觉很熟，但是翻译的质量相当的挫，不过书的内容那是非常的好，很值得一读", "marks": "力荐"}
{"content": "反正越王后看越看不下去，没什么新鲜的内容了。", "marks": "还行"}
{"content": "我看有人评价短小精悍，当之无愧。", "marks": "力荐"}
{"content": "看这本书的时候还在学校,好怀念工大图书馆还有足球场..", "marks": "力荐"}
{"content": "新手码农最大的苦恼往往是：书看的太少而想到太多。就像书中说的：“好的设计是思考和经验的结合；纯粹靠玩命干不可能造就出好系统。”当然，对于老码农，也是一本不可多得的好书，阅读的过程中，你（好吧，其实是我）会一次次的跪谢大师，帮你把心中模糊的想法做出如此完美的系统性的总结。特别是第九章 记法（Notation）值得每个程序员认真读几遍。", "marks": "力荐"}
{"content": "语言简洁，举例详尽。有助于从学生到程序员的转变", "marks": "力荐"}
{"content": "Kernighan和裘宗燕老师，天作之合", "marks": "力荐"}
{"content": "翻译扣星！", "marks": "推荐"}
{"content": "言简意赅 不过该说的也说了蛮多了", "marks": "力荐"}
{"content": "简短、精炼而有效。感谢现代硬件和现代编程语言，一般不用担心内存分配回收和代码可移植性的问题，但其余部分还是历久弥坚的，强力推荐！#应该成为全部大学生的第二本程序教材#", "marks": "力荐"}
{"content": "没看完，还行吧。", "marks": "推荐"}
{"content": "还行", "marks": "推荐"}
{"content": "非常好", "marks": "推荐"}
{"content": "首先这封面就不对，我读的版本是棕色封面。内容还不错，一些译法已经与今天不同，但别有古韵。", "marks": "推荐"}
{"content": "书很好，但翻译很外行，很多专有名词非常别扭，或许当年就流行这么翻译？", "marks": "推荐"}
{"content": "这书还是得有好多年的经验才适合读。", "marks": "推荐"}
{"content": "一本每个程序员应该读的书。", "marks": "力荐"}
{"content": "找到许多答案", "marks": "力荐"}
{"content": "适合刚工作时读，有利于培养好习惯。现在读来没有太多收获了（怪我自己太老了）", "marks": "力荐"}
{"content": "这本书只是草草的浏览过一遍，给我的感觉和《编程珠玑》一样，讨论的是程序过程中的一种规范方法。现在的代码编写风格和记法也是从这本书学来的，当然，受益翡浅。这是一本值得收藏的好书。", "marks": "力荐"}
{"content": "从这里我知道变量名的长度为什么是那么长。", "marks": "力荐"}
{"content": "有人说:书上的知识和动画里的妹子,终究不是你的。\n但是这些东西都可以花时间去把玩，挺好的。在校的时候觉得搬砖简单，想想认识得真肤浅。", "marks": "推荐"}
{"content": "写得很细致，很多细节都写到了，不错。", "marks": "推荐"}
{"content": "个人认为柯尼汉是最好的计算机作家之一", "marks": "力荐"}
{"content": "多年编程之后才看到此书 已无惊艳之感", "marks": "还行"}
{"content": "前面还好，最后一章作者放大招了，叹为观止", "marks": "力荐"}
{"content": "经验是智慧的结晶，要重视。\n本书有着太多太多需要你学习的东西。", "marks": "力荐"}
{"content": "都是干货，就是有点老", "marks": "推荐"}
{"content": "短小精悍，信息量浓缩度之高，此类书籍无出其右。", "marks": "力荐"}
{"content": "10块钱从二手书店买的。。好书", "marks": "力荐"}
{"content": "仔细读了一部分，后面大面积的c代码，看的比较粗略，以后再读一遍。", "marks": "力荐"}
{"content": "学完C语言就应该读这本书。", "marks": "力荐"}
{"content": "一般般吧，感觉可实践性不强。", "marks": "还行"}
{"content": "没印象了，当你立志做一名程序员", "marks": "还行"}
{"content": "翻译真的很烂。 接口interface竟然翻译成界面。。。", "marks": "推荐"}
{"content": "语文没学好，看裘老的书都是不理解汉语想表达什么意思。\n待工作以后，再在有体会的时候看看英文版的吧。\n推荐阅读英文版，我个人认为读起来逻辑上要比中文的好理解，好组织书中的内容。中文的，需要你先懂汉语想表达什么，然后再去想背后想表达的知识是什么。很痛苦，每句汉语你都要认真读才知道说的什么意思！！", "marks": "还行"}
{"content": "裘宗燕翻译很多语句不符合现在的编程常规。短小精悍。", "marks": "推荐"}
{"content": "KISS神道之作，书虽薄，信息量却很大，一次性很难完全消化。\n另外，可能是有些年代的原因，翻译版感觉不太顺畅。", "marks": "力荐"}
{"content": "这本应该在大学语言课程结束的时候读的，现在读到太晚了哎", "marks": "力荐"}
{"content": "真是编程实践方面的绝顶好书，无数的实际问题可以从这里找到答案或启发。工作中遇到不少问题，这本书中的经验总结完全适用。", "marks": "力荐"}
{"content": "第一遍", "marks": "力荐"}
{"content": "不错的非技术书。", "marks": "推荐"}
{"content": "其实没还没有完全看完。是暑假的时候查了CMU的计算机课，顺便翻出来的这本书。里面的知识很浅，也很细致。在大一大二的时候就应该看的一本计算机编程基础书籍。", "marks": "力荐"}
{"content": "* 我初初撸了一遍，有启发，但是后来没有翻了，我要标记一下以后再去翻一遍 _(:3", "marks": "推荐"}
{"content": "留下您对这本书的简短评论吧", "marks": "推荐"}
{"content": "真棒\nRob Pike, 怪异的才子", "marks": "力荐"}
{"content": "一般了~~", "marks": "还行"}
{"content": "大家之言，值得细细咀嚼", "marks": "力荐"}
{"content": "看了第9章，和编译原理有点关系，实在非常精彩", "marks": "力荐"}
{"content": "获益良多", "marks": "力荐"}
{"content": "相见恨晚，这本书应该是大一就应该看看的。非常值得反复回味，不断实践。", "marks": "力荐"}
{"content": "K.I.I.S贯穿全书", "marks": "力荐"}
{"content": "我看过讲程序设计的书中为数不多的好书，不知为什么国内关注的人不多。难道Kernighan的名字还不够响亮? 裘宗燕的翻译也很好。", "marks": "力荐"}
{"content": "短小精悍，作者文笔了得。", "marks": "力荐"}
{"content": "和the elements of style作用类似啦", "marks": "推荐"}
{"content": "原书和译书质量都上乘", "marks": "力荐"}
{"content": "作者从多年的编程中总结了许多有用的经验教训，中级的编程人员能通过阅读此书提高自己的编程水平。裘老师的翻译真是没得话说了！", "marks": "力荐"}
{"content": "2000年读的老书了，Rob Pike的经典，2000年版封皮其实不是这样的。", "marks": "力荐"}
{"content": "简练的程序设计指南，同类读物包括编程珠玑，程序员修炼之道。", "marks": "推荐"}
{"content": "薄薄小书, 绝对大收获.", "marks": "力荐"}
{"content": "书有点老，但有些启发。减一星是因为翻译:-(", "marks": "推荐"}
{"content": "到后头的名词翻译，实在是不能忍.....", "marks": "推荐"}
{"content": "读得很快，写得很好，但是明显一遍不能吸收这本书的全部精髓。编程在于实践，这本书常看常新，在实践中运用相关规则", "marks": "力荐"}
{"content": "C++语言的发明者的著作,语言语法设计的原理讲的相对其他书,更深入,理论性更强但不死板,可能看完了只能写出一段一段的代码,需要很长时间的联系消化,才能融会贯通,这时候也许算得上精通C++语法了吧,我还没到这地步", "marks": "力荐"}
{"content": "Brian W.Kernighan和Rob Pike，看见这两个名字，直接把书买下来就行了。书中没有高深的技巧和方法，但所说的每一点都是程序设计中的必须注意和考虑的。不过，书中的例子对于生活在windows中的我们可能体会不深，这个就要认真体会作者的每个例子。", "marks": "力荐"}
{"content": "正如后记所言，软件行业日新月异，新工具层出不穷，而本书着力讲述的是那些持久的概念，书中讲的原则在当下仍未过时（大师的总结还真是一针见血啊）\np.s. 每章开头的引言也很妙，十分契合内容", "marks": "推荐"}
{"content": "不要看", "marks": "很差"}
{"content": "很不错，作者都是原bell labs的大牛，rob pike是做plan9的那个哥们，现在在google也搞os。翻译的也很不错，有助于一开始入门的人树立正确的观念，很好。\n", "marks": "力荐"}
{"content": "打通任督六脉之作--BWK老师篇", "marks": "力荐"}
{"content": "略读，代码未敲。", "marks": "力荐"}
{"content": "英文版", "marks": "力荐"}
{"content": "读了英文原版, 顺便把它重新排个版 (LaTeX), 为一些难懂的单词作了中文注释, \n如果大家有兴趣, 可以在 github 上搜索 tpop, 欢迎提出批评与建议.", "marks": "力荐"}
{"content": "大师作品", "marks": "力荐"}
{"content": "讲述.Net平台知识的一本不可多得的好书！！", "marks": "力荐"}
{"content": "很经典", "marks": "力荐"}
{"content": "翻译的还算不错", "marks": "推荐"}
{"content": "启发和困惑同样.对我难度可能高了一些", "marks": "推荐"}
{"content": "我认为不怎么样！", "marks": "还行"}
{"content": "不错的书，对中国现在的法制建设有很大的指导意义。", "marks": "力荐"}
{"content": "契约的死亡和契约的再生都值得一读", "marks": "推荐"}
{"content": "90年代的文章读来一点也不过时。自然法的宗教背景衰落，程序中出权利的时代该到来。", "marks": "力荐"}
{"content": "法律程序 ", "marks": "力荐"}
{"content": "没有太看懂，但是至少懂得一个买卖和两个赠与之间的关系。", "marks": "推荐"}
{"content": "仔细做过读书笔记，曾有过想和季老师交流交流的冲动", "marks": "推荐"}
{"content": "这都搞错……豆瓣啊", "marks": "推荐"}
{"content": "这篇论文和封面完全不对，信息提供错误。", "marks": "推荐"}
{"content": "很好的一本书", "marks": "力荐"}
{"content": "相对与本书出版的那个年代，本书还可以。但是拿到今天来说，本书中的设计理念早应该深入每个C++程序员的内心，如果你没有做到这点的话，那你就该努力了。", "marks": "还行"}
{"content": "挺实际的，适合有一定项目经验的人阅读", "marks": "还行"}
{"content": "很薄的一本书，啃了2周才粗过了一遍", "marks": "还行"}
{"content": "不是太新颖", "marks": "推荐"}
{"content": "GSoC 的赠品，非常满意！\n书还不错吧。", "marks": "还行"}
{"content": "挑选的读了几章，开阔眼界了", "marks": "推荐"}
{"content": "没读完。有些章节很有趣，但大多数比较平淡。暂时觉得很难成为Programming Pearls一般的经典。", "marks": "还行"}
{"content": "只读了MapReduce,NumPy和Python Dict三章，作为休闲读物还不错", "marks": "推荐"}
{"content": "每个人都有责任管理自己代码的复杂度 和可读性 健壮性 在一家startup被垃圾代码坑了十几个月 这个体会太深了 @@ ", "marks": "推荐"}
{"content": "4/6/7/28这几篇讲编程思路的文章非常好！遗憾的是30篇文章下来，东方人作者只有Ruby的Matsumoto一个。", "marks": "推荐"}
{"content": "原来ddd是一个女孩读研究生期间写的。MapReduce那篇写得不错", "marks": "还行"}
{"content": "动态语言之美。", "marks": "推荐"}
{"content": "风格诡异", "marks": "还行"}
{"content": "看看顶尖的软件开发者都是如何开发的", "marks": "推荐"}
{"content": "没有细看", "marks": "推荐"}
{"content": "very cool", "marks": "力荐"}
{"content": "实践者心中的道", "marks": "力荐"}
{"content": "中文版太烂", "marks": "推荐"}
{"content": "说了一堆 code", "marks": "推荐"}
{"content": "某些章节很有启发性，其它的则比较平淡。", "marks": "推荐"}
{"content": "想更好的解决计算机问题的话，请看这本书", "marks": "力荐"}
{"content": "给个差评 -,-\n此书的最大问题就是严重和时代脱节以及极其松散的章节和随心所欲的各式风格和评价标准", "marks": "较差"}
{"content": "经典", "marks": "力荐"}
{"content": "当年c++启蒙教材", "marks": "力荐"}
{"content": "本书列举了很多代码细节中的各种问题，这些宝贵的经验对初学者很有用，作者居然都是用开源代码来举例，这得花多少时间去找啊。不过本书主要是针对基于C/C++的系统开发，其中的很多问题在高级语言中并不存在", "marks": "力荐"}
{"content": "翻译不行", "marks": "推荐"}
{"content": "翻阅，其中关于代码质量测量的内容非常好", "marks": "力荐"}
{"content": "有点泛", "marks": "推荐"}
{"content": "有些凌乱，感觉不如前作code reading，也可能是我功力还不到", "marks": "还行"}
{"content": "一本非常不错的书，没有很多的费话，我的感觉，内容很全面，值得收藏来看，我常常把它作为工具书一样来用", "marks": "力荐"}
{"content": "讲的很细 适合初学者", "marks": "推荐"}
{"content": "最早接触jsp时读过的一本书，很不错。", "marks": "推荐"}
{"content": "内容简单基础，适合初学者", "marks": "还行"}
{"content": "支持国书", "marks": "还行"}
{"content": "我可不想被玩死 忽的想起王烁天", "marks": "还行"}
{"content": "很详细", "marks": "推荐"}
{"content": "程序员的思维修炼~~ 就看了5.3，作者对MBTI有一些误解和错误。不过嘛，以后哪个程序员要是不懂MBTI，我就要质疑一下他的程序员修养了哦", "marks": "还行"}
{"content": "码农的成功学教材…… 属于看看书评即可的那种书……", "marks": "还行"}
{"content": "读了一部分，旧酒装新瓶。", "marks": "推荐"}
{"content": "作者算是做足了功课，但大部分观点没有什么新意。算是个比较好的排列组合。", "marks": "还行"}
{"content": "a plaza of cliches", "marks": "较差"}
{"content": "The author is not an expert in most of the topics he talks about; his explanation of how (he believes) the brain works is not very interesting", "marks": "还行"}
{"content": "中文书名还能更坑爹吗，和“程序员思维”关系不大，明明应该是“实用的思考和学习方式”。主要是从大脑的工作方式出发研究如何提高思考和学习效果。其实很多提到方法都是耳熟能详的。例如通过多种感官刺激加深学习的效果等。", "marks": "推荐"}
{"content": "中程发力之作", "marks": "推荐"}
{"content": "越读越差，但还是很强大", "marks": "推荐"}
{"content": "讲了很多心理学的东西，并且根据这些理论概念以及数据，设计了一些练习，还不错，知易行难，坚持练习是一件多么浩大的工程啊~好多的心理学知识在大学的组织行为学等课程都学过，所以，没啥新东西~一本简易的知识性读物", "marks": "还行"}
{"content": "lots of fun things", "marks": "推荐"}
{"content": "web散文", "marks": "推荐"}
{"content": "非常有用，如果实践的话。。", "marks": "力荐"}
{"content": "应该时不时地再看一遍", "marks": "推荐"}
{"content": "20120615-20120617", "marks": "推荐"}
{"content": "1. different levels of expertise. 2. from r mode to l mode.", "marks": "推荐"}
{"content": "best book ive read this year", "marks": "推荐"}
{"content": "左脑右脑之分已经证伪，那进程1有助于学习和创造吗？", "marks": "还行"}
{"content": "年度好书！！", "marks": "力荐"}
{"content": "讲如何思考如何工作的好书", "marks": "力荐"}
{"content": "这书大一上学期看过，很不错，Tip超多，值得一看", "marks": "力荐"}
{"content": "comparing with the Andy's previous magnum opus, this one is more scientific. with cognitive science, a few model Dreyfus and tribe rating, positive psychology, and even utilizing meditation; feels like a real leap.", "marks": "力荐"}
{"content": "这本关于大脑和思维训练的书的确实用 我在啃英文原版", "marks": "推荐"}
{"content": "今天最大的收获，就是找回了这本书，6星推荐。关于如何思考的书，前一段想到了书中的一些说法，但就是想不起是什么书。", "marks": "力荐"}
{"content": "看得懂，有启发", "marks": "力荐"}
{"content": "思维训练入门书吧，后面部分章节居然是在深大校园读完的，还是喜欢在学校看书的感觉啊。", "marks": "力荐"}
{"content": "不是很好...", "marks": "较差"}
{"content": "这就是传说中的 ....不吐槽了。", "marks": "较差"}
{"content": "内容组织得完备妥当，而且写得十分中肯。但这其内容确实容易推导，所以属于看与不看没有太大所谓的书。无论怎么说，纵使有再多技巧，重构终归是体力活，各位注意身体。", "marks": "推荐"}
{"content": "我有2本Martin亲笔签名的书哦", "marks": "推荐"}
{"content": "事无巨细，更像一个索引。其实大部分的篇幅都接近于废话那种=.= 体会是对于重构来说，提升代码品位和提升行动力很重要", "marks": "推荐"}
{"content": "每种重构的步骤很有用，找时间应该把bad smells再读一遍，记住每个重构名字代表什么", "marks": "力荐"}
{"content": "我觉得我这辈子基本上做不到书中这样的了...可有解?", "marks": "力荐"}
{"content": "豁然开朗", "marks": "力荐"}
{"content": "天天要读！！", "marks": "力荐"}
{"content": "重构也是SOLID原则体现在实践上的一种方式。", "marks": "力荐"}
{"content": "看的着实心累 其实感觉用好extract 就可以一招走天下了", "marks": "力荐"}
{"content": "再读一遍，受益匪浅！", "marks": "力荐"}
{"content": "bad smell部分应该是核心，其他内容可以当cookbook看", "marks": "力荐"}
{"content": "#纸质书# 挺有用的，有启发。", "marks": "力荐"}
{"content": "很多重构的方法是简单的，但之前没有人整理出方法论。", "marks": "力荐"}
{"content": "经典之作，高度总结分类有序的菜谱。", "marks": "推荐"}
{"content": "这书的生命力也太顽强了。。。", "marks": "推荐"}
{"content": "nice ", "marks": "力荐"}
{"content": "以前读这类书的时候，总是觉得特别吃力，现在虽然也有很多不懂的，但是也有挺多觉得恍然大悟，豁然开朗的感觉。嗯，现在有了ide的帮助，很多重构只要点下菜单就可以了，十分方便，安全。自从开始看这个书，就更加经常使用eclipse中的一些重构手法了，非常好呢。不过自己IDE用多了之后，反\n\n========================\n20160426：反复读", "marks": "力荐"}
{"content": "一些方法在不自觉间都使用过了 看书中的梳理加深理解 新学到的方法也不少 配合测试 重构手头的东西感觉游刃有余 间接地加深了对一些模式的认识 四人帮的那本抽象得飞起。。。", "marks": "力荐"}
{"content": "如果软件能做到，没有重复代码，没有重复逻辑，函数体不超过100行，那么根本用不上重构。", "marks": "推荐"}
{"content": "好书，都是经验谈，实用性很高。", "marks": "力荐"}
{"content": "读了几个月。很经典，值得反复推敲，不时拿出来参考一下。", "marks": "力荐"}
{"content": "经典书籍，比想象中的通俗易懂。\n可能是SICP的影响和一直以来都很注重代码风格，书中大部分内容一直在实践。读起来丝毫不吃力，很容易就能看完。", "marks": "推荐"}
{"content": "有一些启发，但不要读中文版", "marks": "推荐"}
{"content": "好些细致的值得学习的地方。其实便是细致来讲怎么做到最有效的OOP，独立、模块化，少耦合，尽量避免出错的可能……希望优化自己代码的programer值得一读。", "marks": "推荐"}
{"content": "中文翻译的不是很好", "marks": "力荐"}
{"content": "关注短期利益的重构而让我们长远受益。", "marks": "推荐"}
{"content": "借自书屋书架。总结得挺全的，讲解得很不错，如果用Ruby讲解或开发就更简洁了。", "marks": "推荐"}
{"content": "内容不错，可惜现在书中很多技巧步骤已经不再需要，IDE都能搞定。", "marks": "推荐"}
{"content": "这是一本教你怎么良好编程的书, 比较轻松愉快的小读物. 任何一个包括像我这样弱的人可能都对书中的各种方法有一定的体会。当然换句话说，这是一本经验手册。 另外吐槽一下，我手头这本书，缺页缺了倒数第二章。罢了，不看了。", "marks": "推荐"}
{"content": "最近在更改老项目的代码，有点痛苦...书中的方法很实用。", "marks": "力荐"}
{"content": "可能这一类的书看多了，看完感觉无甚收货", "marks": "还行"}
{"content": "单元测试果然是重构的最好工具。", "marks": "推荐"}
{"content": "很赞，学到不少小技巧。部分方法有设计模式的影子基本也能理解。毕竟设计模式让人第一次就写出不那么翔的代码，而重构则是让翔一样的代码稍微好看一些。总的来说，部分技巧其实挺显而易见的，就看写的人懒到什么程度了", "marks": "推荐"}
{"content": "9/10", "marks": "力荐"}
{"content": "作者语言相当有趣，第一次看技术书会笑那么多。描写详实，无微不至，深入浅出，结合设计模式看，效果加倍哦~", "marks": "力荐"}
{"content": "现在需要重构代码。不过看完书还不够，知易行难，还是要去实践。", "marks": "推荐"}
{"content": "重读，对照着过了一遍 IDEA 的重构工具。| 年份比较早的一本书了，如果能加一个IDE高效实战版，会更好一些吧。比如把书中的代码弄成一个个kata，多多练习，比单看书强不少", "marks": "力荐"}
{"content": "重构不应该是大刀阔斧似的，应该一点一滴循序渐进，它本身就是开发过程的一部分", "marks": "推荐"}
{"content": "得先了解GoF的那些设计模式，不然会对书中谈及的模式一头雾水。", "marks": "力荐"}
{"content": "思想非常好，可惜翻译太差了。建议英语好的同学读原版。", "marks": "推荐"}
{"content": "不仅是重构技法，更是一种设计思维，在开发的整个生命周期中，需有不断设计、不断重构的意识，来保证系统稳步演进。 非常欣赏熊杰和侯捷二位老师的翻译，不仅完美表达原作意图，更多了几分智趣。", "marks": "力荐"}
{"content": "面包、空气和水。 优雅的OO,整理 代码风格 与 设计。只是个开始，庆幸的是fowler带我们开始了。 <= 2014年04月26日。", "marks": "力荐"}
{"content": "经典！！！", "marks": "力荐"}
{"content": "拒绝一切messy代码", "marks": "推荐"}
{"content": "中文版第一章的排版空白太多了…… 熊节的翻译很地道~\n过段时间再重看一遍……", "marks": "力荐"}
{"content": "书中的很多条例都有用力过猛的感觉，还有一些条例给人显而易见的感觉，还有一些确实是不错的建议，可以一读", "marks": "推荐"}
{"content": "极具实施性好书", "marks": "力荐"}
{"content": "关于重构，每个人都有自己的方法和准则，本书作者将最普遍和有效的方式总结出来，读起来很有共鸣。重构没有绝对，有时决定是否重构十分微妙，更多的是靠经验和直觉。", "marks": "力荐"}
{"content": "对不了解的人还是有指导意义的", "marks": "推荐"}
{"content": "这本书真正改变了自己的编程习惯和方式，带给了自己对于优秀代码的很多思考。", "marks": "力荐"}
{"content": "老马得经典著作", "marks": "推荐"}
{"content": "这本书唤醒了我对优美代码的无限好感。值得以后再看一遍。", "marks": "力荐"}
{"content": "第二章的例子特别精彩！其他的还是感觉要多实践，多思考！", "marks": "推荐"}
{"content": "经验谈而已。整本书最重要的是第三章“代码坏味”，写的很有用。而之后的章节尽是些详尽的方法论，有哪些人能全部记下这么多方法呢？可惜这本书未能达到理论的高度，没有体系化的方法论，所以感觉对自己帮助不大。", "marks": "还行"}
{"content": "了解了什么是重构，为什么要重构，最关键的是知道了在何时何地重构。重构列表以后需要更加仔细认真的一条一条的去研究。“任何人都可以写出让计算机理解的代码，唯有写出让人容易理解的代码，才是优秀的程序员。”", "marks": "力荐"}
{"content": "还不错，刚买的时候很兴奋，再拿起来已是2年后。感觉还不错，我是把它作为what来读的，而不是how：我只想知道什么样的代码是好的，为什么，好在哪里。而不是用它来指导我重构。", "marks": "力荐"}
{"content": "一天/5小时略读毕。想起大三从读书馆借出这本书到自习室读了半章的情景。1999年的书，14年过去了，有多少人仍在重复着书中指出的错误呢？重构动机是精华。1604追记：在个人pj的重构实践中再度通读，收获颇丰，代码之道追求伸缩自如。", "marks": "力荐"}
{"content": "一些能工作的代码，如果没有非常完善的测试，就不要重构了。", "marks": "推荐"}
{"content": "果然看原版是正确的。完全不一样的感觉", "marks": "力荐"}
{"content": "计科是这样一门科学：它相信所有问题都可以通过增加一个间接层来解决。与《设计模式》成为面向对象的姐妹书：设计模式是目标，而重构就是通向设计模式之路。面向对象编程本质就是建模完全可以用类图和UML表示。重构，一言以蔽之，就是在不改变外部行为的前提下，有条不紊地改善代码。", "marks": "力荐"}
{"content": "这本书是我对手下必荐技术图书，对我技能发展影响也很大", "marks": "力荐"}
{"content": "重构现在已经深入人心，所以这本书的价值就不像十年前那么大了，适合工作了一两年的人。", "marks": "还行"}
{"content": "草草跑了一遍，印象不是很深刻", "marks": "还行"}
{"content": "这本书承载着软件开发软件专家的多年经验，巨细靡遗得从动机、做法和范例将一个个重构手法一一呈现。而其中的精华和深意，必须勤加修炼才能体会，在以后的Coding过程中，要时刻以重构的原则审视自己的代码。P.S. 本书的组织结构多少让人有些费解，还得自己提炼和排版才是。", "marks": "力荐"}
{"content": "嗅到代码中的坏味道，就可以去重构了。。重构的结果决定于重构者的品味", "marks": "推荐"}
{"content": "还用说什么么。。。用起来！！！", "marks": "力荐"}
{"content": "很好的经验分享。", "marks": "推荐"}
{"content": "略磨叽，但是人家是以严肃的态度和严谨的思维方式写的，细思恐极。", "marks": "推荐"}
{"content": "对于我这种强迫症人格的人来说，这本书第5章往后都是废话", "marks": "还行"}
{"content": "颠覆了我对重构的理解。让我对重构有了崭新的认识。清晰细致的讲解，不愧是大师。“我不是伟大的程序员，我只是有这优秀习惯的程序员”，以此自勉。", "marks": "力荐"}
{"content": "读的晚了，所以没有特别惊艳的感觉。读下不仅对于重构有帮助，更重要的是让人写出更好的程序，养成良好的taste", "marks": "推荐"}
{"content": "基本都是在用的手法了。重构，需要更多的练习。", "marks": "推荐"}
{"content": "编程经典，持续改进", "marks": "力荐"}
{"content": "听说过很多道理，却依然写不好一行代码", "marks": "推荐"}
{"content": "虽然书中很多建议都已经集成到IDE，但培养对坏代码的直觉仍是必要的", "marks": "推荐"}
{"content": "一天时间，详细看了1·~5章，其他重构细节浏览了一遍，没到五星的那种冲击。\n1. 理解CH3中“坏味道”为什么坏是关键，告诉我们什么地方该重改\n2. 具体工作了，发现了“坏味道”，再查询CH6~CH14对应的重构方法\n3. 重构最基本原则“小步前进，频繁测试”", "marks": "推荐"}
{"content": "奥利奥老师推荐的！", "marks": "力荐"}
{"content": "手法其实都挺基本的，主要还是个思想吧", "marks": "力荐"}
{"content": "要点很简单，步骤略详细，举的例子适合初学者....很多思想在之前看的书中都有涉及,蹦蹦跳跳就看完了，还是有挺多收获的...", "marks": "推荐"}
{"content": "扫了第一遍，后面组织类、接口、函数等时候，会下意识的问自己这个这些代码这样组织是不是合适？对类包装、封闭性更有意识。选择继承、组合变得很自然。感谢作者细致罗列每一条重构的思路，（虽然有时候觉得很多过程繁琐，但实操重构的时候，确实需要谨慎对待每一小步，最好配合单测）", "marks": "推荐"}
{"content": "久仰此书大名，大学时候由学长推荐，看了小一半，放下了。工作一年后再看，发现所有重构方法都在工作中或摸索，或看别人代码慢慢都掌握了，几天时间就把这本书看完了。其实吧，只要对代码审美没太大问题，都能嗅出代码中的坏味道，认真的给每个变量，每个函数取名字，认真地决定一个类的功能，代码读起来也就很舒服了。", "marks": "力荐"}
{"content": "方法比较琐碎，重构是个长期工程，你想就能。", "marks": "推荐"}
{"content": "读的是kindle版，但编程这东西：纸上得来终觉浅，绝知此事要躬行。", "marks": "推荐"}
{"content": "比较有用，不过似乎也不用一页页读过去。思想对写代码还是有影响的", "marks": "推荐"}
{"content": "书架必备", "marks": "力荐"}
{"content": "以前一直就有断断续续看过，早上起来心血来潮，把剩下的条目都浏览了一遍，不得不说，有了一定的coding后，很多条目已经融入到你的血液中了，Martin大叔不愧是『归纳』的宗师，另外本书的特色是，大部分条目均一正一反。", "marks": "推荐"}
{"content": "重构一招走天下:Extract method。", "marks": "还行"}
{"content": "读的另一本《重构》，via http://book.douban.com/subject/1229923/", "marks": "还行"}
{"content": "基于java的重构 不太喜欢", "marks": "推荐"}
{"content": "a book training you how to write highly maintainable and robust code.", "marks": "力荐"}
{"content": "早上看完了《重构：改善既有代码的设计》一书。有些失望。或许是这本书面世太久，里面的方法到如今已经成了常识。但总的来说是一本可以快速浏览一遍的书，至少会坚定自己的一个信心：当代码经过自己的手时，它应该变得比之前更好。不要害怕重构，因为重构是一步一步来的，确保步子不太大，确保每一小步的正确性。然后一遍一遍来。花在重构上的时间，从更长的眼光来看，终将会为我们带来更高的开发效率，节省更多的时间。", "marks": "还行"}
{"content": "好书！", "marks": "力荐"}
{"content": "重构不光是如何改正错误，也是从零开始时的指导", "marks": "力荐"}
{"content": "每个程序员都应该学习一下，重点是熟记第三章的所有代码的bad smell的特征！", "marks": "力荐"}
{"content": "非常好，进阶必备。", "marks": "力荐"}
{"content": "刚刚看了一小半。思想扎实，示例清晰易懂。其中第一章尤其可以作为理解面向对象与面向过程的绝好示例。\n中断了大半年之后，暂时觉得还是先搁置了。前面一小半看完后，其实对一些概念就已了解。而后面的部分更多的是拆解后的细节方法，需要实践中去沉淀。后面面向对象的开发做的多了之后，再来翻阅/查看。\n目前的总体评价：思想很有价值, 小步迭代, 先有方法测试再重构. 具体方法细节有点啰嗦.", "marks": "推荐"}
{"content": "很多重构表面上看起来是互相矛盾的，实际上目标是一致的，怎么拿捏还需要实践经验", "marks": "力荐"}
{"content": "站在前人的肩膀上，汗流浃背", "marks": "力荐"}
{"content": "one word, classics.", "marks": "力荐"}
{"content": "软件开发架构的方法论。", "marks": "力荐"}
{"content": "边读边练习", "marks": "力荐"}
{"content": "有些书需要在合适的时机阅读，利用周末时间很快读完这本书，再次感慨写代码容易，写出漂亮的代码难，接下来几天消化一下书里的内容，可以二手卖掉了🌚", "marks": "还行"}
{"content": "感觉有点罗说。。 后面一部分跳读..  可能是编程经验不够的原因？", "marks": "还行"}
{"content": "马丁大叔的经典", "marks": "力荐"}
{"content": "结构， 还是结构。", "marks": "力荐"}
{"content": "以前读", "marks": "推荐"}
{"content": "暂定的研究方向~", "marks": "力荐"}
{"content": "感觉书中很多重构技巧都已经是现在的编程规范，所以从这本书中并没有看到太多让人耳目一新的新东西", "marks": "还行"}
{"content": "例子太杂并没有看完 前面的思想很好\n实践以后效果佳则改为5星", "marks": "推荐"}
{"content": "讲了很详细的方法论，但我不是很习惯像书中所说的一样一步一步来，或许Commercial项目，为了保证鲁棒性，必须那么干，印像最深的是：先写好代码，最后再来优化（80%）的性能瓶颈", "marks": "力荐"}
{"content": "很好看", "marks": "力荐"}
{"content": "好像最受启发的就是一开始那个例子。后面是按照参考书的写法写的，就有些枯燥了。", "marks": "还行"}
{"content": "必看经典不解释。做软件其实就是不断的修修改改。这本书系统的讲解了重构的技法，当然其实方式都差不多。。步骤越小越好。。", "marks": "力荐"}
{"content": "之前草草读了第一版，这次，把第二版买回来再重读一遍，又多了一些感悟！", "marks": "力荐"}
{"content": "20000行的代码脚本 改了以后就挂了 \n如果早点看这本书 似乎会好一点。。。", "marks": "力荐"}
{"content": "跟《设计模式》一样的必读经典。边读边干，重构OgreTerrain的LOD实现~", "marks": "力荐"}
{"content": "如果你已经看过《编写可读代码的艺术》的话，那这本书最佳的读法应该就是：只看前四章，剩下的内容，快速翻一遍即可。\n\n书里很详细的介绍了各种重构的手法，但，确实没有太多必要，还是《可读艺术》更实用一些", "marks": "推荐"}
{"content": "介绍了很多种 重构的方法。\n但是， 说实话，从实践的角度， 方法太多了， 不如没有方法了。\n南图借的, TP311.11/078. ", "marks": "还行"}
{"content": "了解基本重构概念 ，在自己项目中实践 有疑惑的可以继续查看。当成一本工具书。", "marks": "力荐"}
{"content": "重新读一回.觉得有些rule略简单了", "marks": "力荐"}
{"content": "现在还只能看懂一点前4章，要尽快进入项目~", "marks": "力荐"}
{"content": "对于喜欢面向对象的coder还算不错，整本书写得太罗嗦，废话蛮多的，也比较适合入门面向对象的程序员后的进阶书籍。书中有一些想法我个人还蛮赞同，刚刚好最近也在很大规模的重构。", "marks": "推荐"}
{"content": "重构的手法并不复杂，大多数时候函数抽取就可以解决大部分问题了，难点在于何时何处重构。", "marks": "推荐"}
{"content": "书还是不错的，翻译得也挺到位，不过感觉里面的东西比较细节化。也可能是我还没理解透彻吧。总的来说就是随时重构、随时测试、不断优化、拥抱变化~", "marks": "推荐"}
{"content": "能看到重构是怎么回事，都是有哪些方法，每个方法是具体如何实现的，遇到问题的时候能想起这些方法，或者嗅到坏代码的味道，就明白了", "marks": "推荐"}
{"content": "我从这本书中最大的收获是知道了\"何时进行测试\".", "marks": "力荐"}
{"content": "M", "marks": "还行"}
{"content": "这本书我竟然看了2年多。等代码量到了如今，羞涩地发现我的很多代码习惯，原来已经被册封了有专有名词的「重构技巧」。", "marks": "推荐"}
{"content": "告诉你如何使代码更有条理和更符合面对对象的规则，重构在一定程度上能让你更方便地修改代码及添加功能。虽然这本书可能有些只要看下目录就大概知道怎么做了", "marks": "力荐"}
{"content": "很经典的书籍之一，一直看到有牛人在推荐。虽然买了也只是后来才来翻。译者很得原作的精髓，用语幽默，明明是技术书，有些部分却翻得很文艺：D\n关于正文，好就不用说了吧，虽然是十几年前的书，但有些内容还是值得细细品味的。不过有些部分，个人觉得倒没怎么必要，现在的IDE提供重构的功能基本已经涵盖了书中提到的那些重构的具体步骤，可以不细看。另，作者有些想法有些过度了，比如他说不要用switch，而是要用策略或者状态模式来代替，这种真没必要。大部分情况下你都不会想用繁多的对象来代替switch分支的逻辑。", "marks": "力荐"}
{"content": "按照此书写就的年代而论，确实是一本NB的宝书，Martin Fowler后来的工作也能从此书中找到影子，而这些也确实影响了后世的千千万万码农们。13年后再来读这本书，好多内容可以一扫而过了，或许正可以印证该书的成就把。", "marks": "推荐"}
{"content": "看了一半还觉得简单了点，到后来才慢慢体会到本书的妙。方法背后的精神才是让人深思的。重构是一项持续的行为，需要良好的习惯和坚持的毅力。", "marks": "力荐"}
{"content": "三年前读和现在读的感觉完全不一样，个人以为此书每年至少读一次", "marks": "力荐"}
{"content": "这本书非常的nice，虽然都是简单的样例，但是每一种都能够反射出内在的含义，而且很好的体现了设计模式，工厂、策略、状态比比皆是，设计准则也体现的玲离尽致。", "marks": "力荐"}
{"content": "20150206 想读。20170418-1004（中秋）。面向对象场景下代码重构的一些小 Tips。此书已问世十几年，其中观点却依旧很有启发性。从中还知晓了领域驱动设计。但是有时，我会怀疑读这类书的益处。毕竟，项目周期貌似总不够用，而急功近利的我们又难以看到这些知识的收益。", "marks": "力荐"}
{"content": "爽快！", "marks": "力荐"}
{"content": "书看完了,里面提到的一些方式方法,并没有理解,如果读者和我一样是初级程序员,我建议选择阅读,6章和9章----应该是编程经验过少,对书中内容理解不够", "marks": "力荐"}
{"content": "重构，是对自己的代码负责，也是将其打造成艺术品的必经之路。", "marks": "力荐"}
{"content": "重构就是在不改变外部行为的前提下，有条不紊地改善代码。", "marks": "力荐"}
{"content": "第二次更新。。。\n现在工作了，更加觉得这本书需要大家多读读，不过即使读了，要想交流和改变也挺有阻力吧。。。", "marks": "力荐"}
{"content": "不错的书", "marks": "力荐"}
{"content": "什么是代码的坏味道，如何消除这些坏味道，这是一本关于代码美学的一本书。培养码农那高贵的code taste的不二选择。", "marks": "力荐"}
{"content": "什么叫做好代码", "marks": "力荐"}
{"content": "主要是从面向对象的角度讲的，嗯，有点像代码大全里写类和class不好的详细扩充版本。感觉还行，有些地方有点绕，没有代码大全写的那么明白。", "marks": "推荐"}
{"content": "句句是经验之谈，条条是实践至上", "marks": "推荐"}
{"content": "你不用一次做对，可以step by step 的improve。", "marks": "力荐"}
{"content": "需实践", "marks": "推荐"}
{"content": "内容充实，举例得当，翻译通达，还不贵……", "marks": "力荐"}
{"content": "其实是讲OOP的书，对设计原则的讲解非常精辟，后悔没早点看", "marks": "力荐"}
{"content": "面向对象的几个原则诠释得很好，我认为本书的第二部分是全书的精华，值得反复阅读。我阅读时，跳过了大型案例分析，主要是不想投入时间理解这些复杂的需求，也因为自己水平有限，还看不了这些错综复杂的类图。", "marks": "推荐"}
{"content": "很棒的一本书，深入浅出的讲解了敏捷的关键内容。", "marks": "力荐"}
{"content": "这样说吧: 应届生读一本C++的砖, 再读一下这本, 就可以上战场了", "marks": "力荐"}
{"content": "晦涩", "marks": "推荐"}
{"content": "看大师演示如何Refectoring to pattern，手把手的教如何进行敏捷开发.", "marks": "力荐"}
{"content": "模式必读之书", "marks": "力荐"}
{"content": "四星给附录D：《源代码就是设计》", "marks": "推荐"}
{"content": "项目管理深受启发", "marks": "推荐"}
{"content": "BOB大叔写的比较好的敏捷入门书，我称之为3P。:)", "marks": "力荐"}
{"content": "经典书籍，有些跟设计模式重复了", "marks": "力荐"}
{"content": "没有带来我想象中的震撼，甚至有点烦，在某些方面过于繁琐了，有时间再重读看看", "marks": "推荐"}
{"content": "非常好的敏捷设计书籍", "marks": "力荐"}
{"content": "神书！至少看五遍(1/5)", "marks": "力荐"}
{"content": "经典的敏捷开发图书，bob大叔的力作，C++和java开发必读", "marks": "力荐"}
{"content": "不错\n但是震撼度不够", "marks": "推荐"}
{"content": "OOP和敏捷开发的圣经级读物！", "marks": "力荐"}
{"content": "值得一读", "marks": "推荐"}
{"content": "这本书杂了一点", "marks": "推荐"}
{"content": "又是看了一年以上的书，本书最大的优点是大量例子一步步展现设计过程的思路，敏捷的内容从来都没专门提理论，都在设计过程，开发过程中提到具体做法，要自己体会的", "marks": "推荐"}
{"content": "旷世奇书", "marks": "力荐"}
{"content": "大学的时候读的，忘了标… 是从这本书里知道六个 OO 设计原则的", "marks": "推荐"}
{"content": "我想我欣赏Robert C. Martin.一个极其快乐的人， 一个带你发现软件之美的曾经的UNIX黑客。。也是Rational ROSE的设计者之一，Rational Rose是我最喜欢的建模工具。这本书，我目前只想读前六章。", "marks": "力荐"}
{"content": "用敏捷除去腐烂的代码", "marks": "推荐"}
{"content": "里程碑式的讀物，其地位如同二戰開始前的閃電戰理論讀物，軟件開發書籍中的《注意！裝甲兵》", "marks": "力荐"}
{"content": "M", "marks": "还行"}
{"content": "看完了感兴趣的部分。不觉得跟敏捷有啥太大关系，总之不喜欢这种风格，可能跟我不大喜欢java有关。", "marks": "还行"}
{"content": "敏捷圣经", "marks": "力荐"}
{"content": "敏捷开发里面的经典之作，不得不看", "marks": "推荐"}
{"content": "SRP,OCP,LSP,DIP,ISP", "marks": "推荐"}
{"content": "其实还没有读完已经觉得牛X闪闪了", "marks": "力荐"}
{"content": "Bob大叔的作品，值得看", "marks": "力荐"}
{"content": "非常好.写得好，翻译得好。", "marks": "力荐"}
{"content": "设计模式实战、提炼必备好书。", "marks": "力荐"}
{"content": "呵呵呵，不推荐。", "marks": "还行"}
{"content": "马丁大叔！OH！", "marks": "力荐"}
{"content": "说是敏捷开发，实则设计模式也。。。", "marks": "力荐"}
{"content": "贴近程序员的敏捷书籍", "marks": "力荐"}
{"content": "早就读过，标记一下，好书，Bob大叔的书都很好。", "marks": "力荐"}
{"content": "当成通俗读物的于是读得很开心, 里面的例子比GoF那坨平易近人多了~", "marks": "力荐"}
{"content": "还不错，一些价值观挺新颖的", "marks": "力荐"}
{"content": "读完了理论部分。确实是一本系统开发工程师必读的基础书籍。", "marks": "力荐"}
{"content": "44", "marks": "推荐"}
{"content": "如果让我推荐一本计算机方面的书，我就推荐这本3p，通过阅读该书，可以学到很多软件设计与实现方面的知识，还能学到人生哲理，而且有丰富的例子，绝对不枯燥", "marks": "力荐"}
{"content": "从码五渣变成码零渣了，看完。大多还是看不懂，有时间机会慢慢实践。", "marks": "力荐"}
{"content": "学习案例和项目。", "marks": "力荐"}
{"content": "收把手教育的典范", "marks": "力荐"}
{"content": "看到孟岩的代序，更决定仔细地品味这本书。\n懂得那种感觉，因为爱，所以激情四射，四处推荐，翘首等了7年，只为新著。\n这种感觉，看CC时有过，相信Uncle Bob不会让我失望。", "marks": "力荐"}
{"content": "讲述了敏捷开发的很多原则，让人醍醐灌顶，受益匪浅的。", "marks": "力荐"}
{"content": "面向对象原则讲得不错", "marks": "力荐"}
{"content": "通过这本书可以知道SOLID设计原则，敏捷过程。", "marks": "力荐"}
{"content": "公司要敏捷，结果搞了个半吊子华为式的实践准则～", "marks": "力荐"}
{"content": "多参与几个实际项目才能有所体会。", "marks": "推荐"}
{"content": "其实是一部讲面向对象的书，敏捷只是一个陪衬。", "marks": "推荐"}
{"content": "作者对于面向对象分析设计的理解达到了宗师的级别。对于设计模式的讲解又深入浅出。此外本文的翻译质量也可以，读起来很流畅。", "marks": "力荐"}
{"content": "好书。 不过自己功力不够， 后面看不下去了， 只能领会30%， 过一段时间再看一遍试试。", "marks": "推荐"}
{"content": "终于下决心看了本技术书。孟岩的序足以说明这本书的价值。敏捷其实不是主题，更多的是OOD。受益菲浅。", "marks": "力荐"}
{"content": "对原则的总结非常好，后面的案例倒没仔细看", "marks": "力荐"}
{"content": "比较古老的一本书，例子主要是基于C++的，我没太看进去。", "marks": "推荐"}
{"content": "敏捷开发要解决的是人的问题。积极的跟进需求、积极地团队沟通、积极地重构代码是敏捷的核心。", "marks": "推荐"}
{"content": "原书内容一流！译文也很好！我已经看过两遍了，计划明年再看一遍", "marks": "力荐"}
{"content": "敏捷：以终为始；沟通，良好设计，重构演进，按图索骥", "marks": "力荐"}
{"content": "设计模式，应该在看一遍", "marks": "力荐"}
{"content": "讲得挺明白，我米用的是Scrum，学到很多东西～～～～", "marks": "力荐"}
{"content": "结对编程那个故事和现实中高效率的结对很相符。", "marks": "推荐"}
{"content": " 任何方法论，都是于方法之后产生。", "marks": "力荐"}
{"content": "后面很大一部分是c++设计模式, 各种设计模式，最后还讲了作者的框架经验。不过我自身功力不够未能吸收，以后再回头看吧", "marks": "力荐"}
{"content": "暂时算是看了一遍，有很多地方因为个人功底的原因，没理解清楚；很喜欢这本书提到的敏捷设计---极限编程；强调开发团队成员之间的合作和交互；强调与客户一起参与开发过程；认为代码是最好的文档；强调及时响应客户需求；\n等功力够了，再看一遍。", "marks": "力荐"}
{"content": "号称经典, 不过个人感觉一般.", "marks": "还行"}
{"content": "看了前面几章", "marks": "推荐"}
{"content": "老早读的，现在家里还有这本", "marks": "力荐"}
{"content": "理论清晰，案例详实，结合实践，收获颇丰", "marks": "力荐"}
{"content": "在实战中使用过各种设计模式，甚至有自己创造设计模式的大师来讲述这个topic确实令人感觉比较痛快。有优点的东西同样也会有它的弱点，对于各个设计模式缺点的说明，也是大师不同常人的地方吧。\n感觉非常好的一本书。", "marks": "力荐"}
{"content": "程序员必读，尤其是里面的那个薪水支付的例子", "marks": "力荐"}
{"content": "敏捷开发介绍", "marks": "推荐"}
{"content": "自己段位太低，很多地方看不懂，以后有机会再读", "marks": "推荐"}
{"content": "面向对象的设计原讲述的很全面", "marks": "力荐"}
{"content": "不想找乱七八糟的一堆书，还想了解敏捷，模式，这本书绝对适合。面向对象主要是中级开发人员。", "marks": "力荐"}
{"content": "写软件的同学都应该读的书", "marks": "力荐"}
{"content": "经典，无需多说", "marks": "力荐"}
{"content": "主要在于洗脑。后面几章没怎么看，精华在第1、2部分及薪水支付案例。如果单看“设计模式”，不如看《head first design pattern》。", "marks": "推荐"}
{"content": "读到22章了。感觉学到了很多东西，并且对组件化编程有了更深刻的理解。作者不断找出自己的问题，并推翻之前的决策，感觉编程真的不是一件简单的事。这书的编码部分，不但要求有一定的项目经验，并且要求跟着作者思考。我觉得有些地方我的理解仍然没有完全到位。但是感觉获益已经很大了。这是我第一次读到这样的书。打分有考虑到我的理解程度。", "marks": "推荐"}
{"content": "敏捷的基础读物", "marks": "推荐"}
{"content": "非常nice的一本书，模式介绍倒还体会不深，可能原来就已经比较了解了，但是样例代码非常的nice，每段代码、每段函数虽然没有注释，文中解释也言简意赅，但是理解起来非常清晰。", "marks": "力荐"}
{"content": "关于敏捷的部分讲的不够深入，概念性的东西偏多。后面关于软件设计原则的讲解，还值得一看。", "marks": "推荐"}
{"content": "很好的软件工程书籍，去年买了之后，匆匆看了前面100多页就没再看了，现在正学习c＋＋，可以趁机把后面的一些看完了", "marks": "力荐"}
{"content": "适合有一定软件架构经验的人看，不太适合初学者。所谓敏捷，强调可以快速迭代，能快速迭代必须有优秀的架构，优秀的架构意味着扩展或修改对整体的影响小，否则任何一个地方牵一发就动全身还如何敏捷。因此这本书可以看做是讲设计结构的。最后附录D的源代码即是设计点睛了。", "marks": "力荐"}
{"content": "好！", "marks": "力荐"}
{"content": "为何我读的索然无趣……", "marks": "还行"}
{"content": "是一本讲设计模式和OO的书", "marks": "力荐"}
{"content": "作者对OO理解深刻，详细讲解了类的设计原则，包的设计原则，介绍了设计模式，有收获，但是还有半本书的内容还看不懂，继续努力", "marks": "力荐"}
{"content": "值得买下来，没事多翻翻~技术书不适合通读，适合放在手边没事随机翻着读！", "marks": "推荐"}
{"content": "很好的一本写设计方面的书", "marks": "力荐"}
{"content": "真的是讲软件开发的一本好书！", "marks": "力荐"}
{"content": "有关敏捷开的一些原则：比如单一责任、开放-封闭等；利求得到对更改封闭，对扩展开放，高可复用性与可扩展性；还有很开发模式可供参考，是一本敏捷开关的经典参考书。", "marks": "推荐"}
{"content": "XP", "marks": "还行"}
{"content": "敏捷是噱头,其实是讲设计模式", "marks": "还行"}
{"content": "相当好的一本书。只重点看了第一二部分的敏捷开发示范与敏捷开发原则，后边的设计模式部分因为自己的功力不够吧，只简单的翻了翻。\n但仍然是很值得推荐的一本书", "marks": "推荐"}
{"content": "敏捷不是全书的重点，敏捷宣言几章带过。原则讲的相当透彻；模式不如经典；结合UML的实践看着还是不那么习惯。", "marks": "推荐"}
{"content": "这里面的一些观念，至今还影响着我的开发方式，受益非浅。", "marks": "力荐"}
{"content": "2014-04-07：去年5月15从淘宝上买来的书，买后大概看了一半，后面断断续续没有看完，直到看完《曾国藩家书》后2014-02-25日又才开始接着看后面的大概250P，虽然没有计划的快，比如每天25P，那么应该2周就看完，到今天其实已经过了6周，但是仍然比我想象中的快。曾经以为很难的内容，每天一点点，就看完了。学到了一些不是立竿见影的东西，但是相信在未来肯定会有用的。", "marks": "推荐"}
{"content": "深深震撼我的一本书，感谢鲍勃大叔！", "marks": "力荐"}
{"content": "面向对象必须，测试先行入门", "marks": "力荐"}
{"content": "自己火候未到，未来还需再看", "marks": "推荐"}
{"content": "苦于不会C#,但居然还是能翻完一次....", "marks": "推荐"}
{"content": "关于设计模式讲的很棒一本书", "marks": "力荐"}
{"content": "敏捷开发，以前一直认为和我没关系，甚至以为就几个人鼓捣出来的什么东东，写过一阵代码，看过一些书之后发现有些断层，自然而然的需要看看这本书了\n", "marks": "推荐"}
{"content": "同意“好书不代表好教材”。。。。看了真心吃力~", "marks": "还行"}
{"content": "当年从图书馆借的，启蒙读物", "marks": "推荐"}
{"content": "简直就是一模一样.", "marks": "力荐"}
{"content": "推荐", "marks": "力荐"}
{"content": "我觉得这本书是在传授一种精湛的手艺，一门手艺必须不断实践，雕琢。所以才会花了这么长时间来阅读。从敏捷到测试驱动开发，再到面向对象分析设计，直到重构和设计模式，半年时间受益匪浅，就像一个大师坐在对面手把手传授一样，逐步领悟这门手艺，而能否有幸像艺术家一样去创造则是之后的期望。", "marks": "力荐"}
{"content": "原则，模式，实践", "marks": "推荐"}
{"content": "大叔写的OOD+Agile的书，副标题概括了本书的内容：OOD原则，OODesign Patterns, OOP Practice. 和这本书类似的一本书是Applying UML and Patterns,同样推荐。", "marks": "力荐"}
{"content": "very good", "marks": "力荐"}
{"content": "不知道是什么书, 也不知道 clean code(+ coder)是什么书. 更不知道什么是OOP(Object Overflow Playground?)...更不知道什么是DP(动态规划是吗? Doubios Prank? )...   但我知道有个拥有6w推特粉的Bob大叔写东西很有意思...  (但这本书代码错误实在是不少啊...) ", "marks": "推荐"}
{"content": "敏捷和设计模式讲解非常到位，大师之作，相见恨晚", "marks": "推荐"}
{"content": "软件是门工艺", "marks": "力荐"}
{"content": "扫了一遍，讲敏捷软件开发的概念 原则 方法 实例。包含许多开发原则和多种设计模式的实例。", "marks": "力荐"}
{"content": "讲设计模式和建模的,但是有具体案例代码以及类图", "marks": "推荐"}
{"content": "bob大叔的书一定的看看啊", "marks": "力荐"}
{"content": "Uncle Bob的名著，敏捷的经典名著，这本书比较特别，与其说是讲软件开发过程的书，不如说讲软件架构的书，本书用了很大篇幅讲各种面向对象软件开发的各种模式，个人以为看了这本书，就不必看GoF的《设计模式》了。 ", "marks": "力荐"}
{"content": "软件工程就像心法口诀，在平时的使用过程中，应该牢记多实践多思考，否则看了也白看。", "marks": "推荐"}
{"content": "大道至简。面向对象设计、设计模式并非高高在上的，只要你掌握了设计的原则。心中有设计原则，手中无设计模式！", "marks": "力荐"}
{"content": "有敏捷开发的原则和实践，有面向对象开发的模式。", "marks": "力荐"}
{"content": "对于十五年后的今天,实在不推荐读这本了,晦涩,Java与C++混合,这本书对于我唯一的作用就是复习了一下设计模式,重新读了下<Head First 设计模式>", "marks": "较差"}
{"content": "“源代码就是设计”。七年写就，七年后重读，还是经典。", "marks": "推荐"}
{"content": "在2005年接触的一本敏捷开发上的书，最早的一本。其中迭代、结对编程、测试驱动，给我留下了深刻的印象，一直在当前的工作中应用", "marks": "力荐"}
{"content": "搁置了3年的书，一直没读，如今翻出来细细品味，发现3年前好多不明白的现在恍然大悟", "marks": "推荐"}
{"content": "SOLID还是挺重要的，在这本书上第一次见到就算它的功劳吧。名字具有欺骗性，明明就是设计模式，非要和敏捷扯上关系。", "marks": "推荐"}
{"content": "虽然打着敏捷的旗号，不过书的内容的确是非常不错。", "marks": "力荐"}
{"content": "之前看的是C#版，只是大概看个主要思想，不是很懂，从那个保龄球的结对编程实例就有点虚了，后面那个薪水分发系统的设计找了官网的C++代码来看了一下，有一定认识，通过这本书对UML有了些了解", "marks": "推荐"}
{"content": "我读的是C#版的，对软件开发的生命周期的重新定义及软件开发人员思维模式（不是技术）进阶具有指导意义\r\n", "marks": "力荐"}
{"content": "还行，但感觉收获不大~", "marks": "推荐"}
{"content": "诠释OO最好的一本书.", "marks": "力荐"}
{"content": "OO设计经典入门书", "marks": "推荐"}
{"content": "非常经典。本书其实没有介绍太多敏捷框架的具体实践。但是通过浅显易懂得语言和例子选序渐进得向读者讲了敏捷思想如何体现在代码中，以及设计模式的讲解。对于如何进行程序设计和写出好的代码很有帮助。", "marks": "推荐"}
{"content": "马丁大神，Java和C++必备", "marks": "力荐"}
{"content": "字典书。已经拿来垫显示器了", "marks": "推荐"}
{"content": "第一次看这种按主题编排的教材，不太适应。另：例子太长，看着想吐", "marks": "力荐"}
{"content": "编程类的书只能当工具书来看，不能从头看到尾，现学现卖，不懂就查", "marks": "推荐"}
{"content": "java入门用的java core，直接导致我不喜欢java。Bruce Eckel是C++标准委员会拥有表决权的成员之一，他在这本书里也客观的评价了C++。对于java的一些特性，他并把Java、c#、C++、c甚至Python都拿来对比。这书翻译的也特好！", "marks": "力荐"}
{"content": "废话真多", "marks": "还行"}
{"content": "这本书要常读，初学者可以快速概览，中等程序员可以深入看看java，老鸟还可以用之回顾java的体系。这本书之所以厉害，因为它在无形中整合了设计模式，这本书之所以难读，也恰恰在于他对设计模式的整合是无形的。", "marks": "力荐"}
{"content": "学java必看吧，但没怎么讲oop，也不涉及性能和调优", "marks": "力荐"}
{"content": "面向对象不可多得的好书啊！！！", "marks": "力荐"}
{"content": "又读了一遍", "marks": "力荐"}
{"content": "实在是没时间看完了orz", "marks": "还行"}
{"content": "工具书，字体实在是太小了。", "marks": "推荐"}
{"content": "实在是太厚了", "marks": "力荐"}
{"content": "算是Java领域的名著了", "marks": "力荐"}
{"content": "java 8都出了，这个基于5，稍微有点过时。", "marks": "还行"}
{"content": "原作很好，可惜翻译太差", "marks": "还行"}
{"content": "M", "marks": "还行"}
{"content": "从一个宏观的角度去看java ， 常看常新的一本书 ~ ", "marks": "力荐"}
{"content": "学习Java编程最佳书籍", "marks": "力荐"}
{"content": "读了12遍，编程刚入门，还需不断学习。", "marks": "力荐"}
{"content": "写的不错 就是太厚", "marks": "推荐"}
{"content": "不适合入门，适合当工具书~", "marks": "力荐"}
{"content": "java类中的经典", "marks": "力荐"}
{"content": "深入简出过", "marks": "推荐"}
{"content": "很详细...太长细了...", "marks": "推荐"}
{"content": "略过了，没有仔细学", "marks": "推荐"}
{"content": "历久弥新的Java经典。程序员期间宜每年至少读一遍，但无需通读", "marks": "力荐"}
{"content": "要多看几遍！", "marks": "力荐"}
{"content": "深入学习Java最好的书籍，还包含了面向对象程序设计、设计模式等内容。", "marks": "推荐"}
{"content": "又读了一遍", "marks": "力荐"}
{"content": "终于读完了", "marks": "力荐"}
{"content": "的确靠谱", "marks": "力荐"}
{"content": "现在觉得这本是不错的书啊，可惜绝对不是当时能理解的。现在对编程的理解也不一样了。", "marks": "推荐"}
{"content": "好书，很详细", "marks": "推荐"}
{"content": "没看完，大概也不会看完了，", "marks": "力荐"}
{"content": "memo 2", "marks": "较差"}
{"content": "不错的一本书，不过好厚\n", "marks": "力荐"}
{"content": "膜拜 !", "marks": "力荐"}
{"content": "似乎是初学Java最佳入门书啦？类似C++ Primer之于C++。不过这书网上电子版有很多是挂羊头卖狗肉的……", "marks": "推荐"}
{"content": "Java必读之经典，第三遍依然有很大收获", "marks": "力荐"}
{"content": "绝对的经典。", "marks": "力荐"}
{"content": "读过的最好的技术书籍之一", "marks": "力荐"}
{"content": "java入门及工具书", "marks": "力荐"}
{"content": "很多内容吧，你说他面向进阶者，他讲的比较基础，点到为主；你说他是面向初学者吧，他又讲的含糊不清。\n一般吧，远没有当年读C++ primer plus的爽快。", "marks": "推荐"}
{"content": "读到第12章，认怂", "marks": "还行"}
{"content": "是时候出新版了啊~\nJava1.5已经不适合这个版本了~", "marks": "力荐"}
{"content": "真的写得太好了，入门Java，仅此一本书足矣。", "marks": "力荐"}
{"content": "大四下学期为了做毕设才开始用java，到现在整两年。方敢尝试啃这本砖头，发现还是很吃力，放假回来开始看，期间读不动了啃完别的书回来接着看的。图形化部分直接忽略，但是自身对于泛型、并发以及IO的使用都不够贯通。书是讲到JDK6，待到熟悉设计模式并且此书出第五版讲JDK8的时候再来看看", "marks": "力荐"}
{"content": "Java学习经典好书", "marks": "推荐"}
{"content": "推荐给搞JAVA的", "marks": "推荐"}
{"content": "学JAVA不看这本儿书请去卖煎饼果子吧", "marks": "力荐"}
{"content": "这本我也没完全读懂", "marks": "推荐"}
{"content": "内容量好大，不过跟一般的教科书的编排明显不一样 ~ 像杂谈一样，还是有些 Java 实践之后再来看会比较好吧。", "marks": "力荐"}
{"content": "现在有英文就不怎么看翻译的了", "marks": "还行"}
{"content": "多线程没怎么看", "marks": "力荐"}
{"content": "这本看完，基础就算打牢了", "marks": "还行"}
{"content": "为了学java买的书，看得不是很仔细，后来回过头翻才发现的确有很多思想在里面", "marks": "力荐"}
{"content": "不是它不好，是我程度不够。", "marks": "还行"}
{"content": "陆陆续续看过几遍，我觉得这是Java入门和想了解整体概貌最好的一本书。", "marks": "力荐"}
{"content": "其实这本书最重要的是思想，看懂里面的意思简单，难得是如何学着像作者那样思考运用语言的特性，路还很长...", "marks": "力荐"}
{"content": "没由来的就是对Java没兴趣……于是虽然书是囫囵吞枣的看了大半，但其实对于如何使用Java是没什么概念的", "marks": "还行"}
{"content": "先前一堆人说这本书不适合我…然后我说，写Java的都应该需要这本诶！结果买回来一翻…好入门- -|||||||||||||||||||", "marks": "推荐"}
{"content": "也许是我读过的最好的语言基础教程", "marks": "力荐"}
{"content": "说实话 我看不太懂", "marks": "还行"}
{"content": "学习java的同学一定要看，决定经典，一阵阵高潮呀。", "marks": "力荐"}
{"content": "须反复看", "marks": "还行"}
{"content": "这是我在百度工作后读完的第三本书。前前后后花了近两个月时间。JAVA总算是入门了。", "marks": "力荐"}
{"content": "算是比较认真的翻完了大部分的章节（图形界面这种就没必要翻了吧）。基本学会了Java的泛型以及并发，对于最重视的IO一章依然没有学会 :(", "marks": "力荐"}
{"content": "有时候感觉是在是像一位智者在给你声情并茂的解读JDK...", "marks": "力荐"}
{"content": "最后三章不读了", "marks": "还行"}
{"content": "有传说中那么经典吗？没感觉出来。。", "marks": "还行"}
{"content": "不解释，但这本书对于专业人员来说并不全面", "marks": "力荐"}
{"content": "艺术", "marks": "力荐"}
{"content": "太厚了，坚持读完很难。", "marks": "力荐"}
{"content": "由浅入深。\r\n前面八章面向对象的内容讲的很好，这部分内容也很重要。", "marks": "力荐"}
{"content": "4m => 1 => 9\noop & cpp   泛读, 算是给fatlism.Huang做扫盲培训用...", "marks": "推荐"}
{"content": "多线程这一章节，讲得很好。", "marks": "推荐"}
{"content": "几乎看完，天杀的..但是，翻译能不能这么坑 ，# 书已经如此砖头#", "marks": "推荐"}
{"content": "并发一章难度不小", "marks": "力荐"}
{"content": "大二看过一遍  现在再看第二遍  依旧很有收获\n感觉其中虽然有些东西讲的有点儿过于详细以至于一时或许用不上\n但是 却清晰明确  并不会感到厌倦 ", "marks": "力荐"}
{"content": "我只能说这是Java的经典之作，我可是看了三遍哦，书太厚、太重了～", "marks": "力荐"}
{"content": "其实顶多读了三分之一...@2010-4-20", "marks": "还行"}
{"content": "同事拿来说里面有句中文看不懂，P149页，“从Wind向上转型到Instrument可能会缩小接口，但不会比Instrument的全部接口更窄”。翻译真他妈烂！", "marks": "很差"}
{"content": "易懂。但太长。国外图书的风格吧，都讲的非常详细，而且每个介绍都有具体的例子，实践和理论都讲的不错。", "marks": "力荐"}
{"content": "没有深入，值得再读..", "marks": "力荐"}
{"content": "看完这本 Java的方方面面算是都了解了。", "marks": "力荐"}
{"content": "经典", "marks": "推荐"}
{"content": "罗嗦，晦涩", "marks": "还行"}
{"content": "这书从一上大一就开始读 当时跳了很多地方 这些天复破之 收获良多. 其实对于一个重量级的语言, 理应在大一半年之内完全破掉, 不该有那么多的遗留. ", "marks": "力荐"}
{"content": "每读一遍都有新的领悟", "marks": "力荐"}
{"content": "Java 经典，啥也不说了。", "marks": "推荐"}
{"content": "各种关键字 翻译的都很奇葩", "marks": "还行"}
{"content": "这本书就不说了，JAVA学习必备经典", "marks": "力荐"}
{"content": "入门经典", "marks": "力荐"}
{"content": "本科读了一遍，研一读了不全的一遍。很详尽！", "marks": "力荐"}
{"content": "到处传说中的\"经典“呐，很博大， 很艰深，阅读感不强。 哎~~~", "marks": "推荐"}
{"content": "从图书馆反复借过好几次，次次都觉得生硬难咽", "marks": "较差"}
{"content": "作为野生程序员，面试收到打击后决定补基础知识，这一本确实很适合。", "marks": "力荐"}
{"content": "1M，夯实基础必备", "marks": "力荐"}
{"content": "我这本怎么这么多翻译错误。。。难道买到盗版了？", "marks": "推荐"}
{"content": "经典之作啊，就是太啰嗦了。", "marks": "力荐"}
{"content": "经典书籍，在成书的那个时代非常棒。但是当时的技术词汇翻译在目前有些已不通行。书籍从C++的基础上对比学习Java，适合有C++基础的读者。", "marks": "还行"}
{"content": "从没有这样一本编程书能如此无懈可击", "marks": "力荐"}
{"content": "慢慢看", "marks": "力荐"}
{"content": "“只有知道了某个技术不能做到什么，你才能更好地做到能做到的。”", "marks": "力荐"}
{"content": "大二下，要多看几遍", "marks": "推荐"}
{"content": "进入Java,5月读完，已读完", "marks": "推荐"}
{"content": "入口的API简介", "marks": "力荐"}
{"content": "“Java程序员的圣经”，但是不太适合入门。", "marks": "力荐"}
{"content": "java入门级经典", "marks": "力荐"}
{"content": "这是伴我成长的经典，学习java语言就是开始于这本书，不能说有多么的生动，但是在讲解JAVA的特性的同时，渗透思想的更多，面向对象很美", "marks": "力荐"}
{"content": "这个翻译太挫了，怀疑译者不是计算机专业的", "marks": "还行"}
{"content": "很好的入门和工具书，可是单纯入门的来看，还是有点啰嗦的，关键！！看完我还是不会写java，现在都用spring的，大家都整天写配置，哪还用敲代码啊！！！", "marks": "推荐"}
{"content": "不仅Java语言本身，更重要的是面向对象思想的运用", "marks": "力荐"}
{"content": "Java权威书籍，常看常新，并不适合新手。以前看过，有空的时候多翻翻", "marks": "力荐"}
{"content": "引人入胜。没吃透，常翻翻。", "marks": "力荐"}
{"content": "全面的参考手册", "marks": "力荐"}
{"content": "虽然之前跳着看过大部分，这次空闲时间一直都在看还是看了一个多月，总算是看完+总结完了。。。挺好的书，就是过多的偏门例子可能会让初学者难以弄明白，概念够多的。重点还是在于写Java的思路吧，很好的书！", "marks": "力荐"}
{"content": "经典中的经典，这样的书，中国人是写不出来的。", "marks": "力荐"}
{"content": "每次看过之后都有新的收获。", "marks": "力荐"}
{"content": "大学期间读了一大部分。。 刚读完那几个月确实感觉对Java的理解很不一样..  可惜工作后都淡忘了...", "marks": "力荐"}
{"content": "书是好书，不喜java。", "marks": "力荐"}
{"content": "事无巨细，必备！", "marks": "力荐"}
{"content": "深入，不愧是Thinking in Java，需要Thinking。", "marks": "力荐"}
{"content": "做java开发的朋友推荐学习java第一本书", "marks": "力荐"}
{"content": "之前入门读的，感觉没有传说的那么神啊。", "marks": "推荐"}
{"content": "虽然是最熟练的语言之一，但还是不太喜欢java\n本书是经典啊，虽然成书有点久了，重读更觉经典", "marks": "力荐"}
{"content": "这本书断断续续读了近两年，终于算是读完了，很多章节读了很多遍，从开始的不懂为什么很多人觉得这本书很经典，到后面觉得这绝对是一本著作。还会慢慢体会，有机会一定要读读英文原版。\n还有这本书我觉得对处在java迷茫期的同学会有些作用，但对初学者我认为是一个压力（看完它和看不完它都很困难）", "marks": "力荐"}
{"content": "神作，大字典", "marks": "力荐"}
{"content": "有些旧了，书本身像Java一样啰嗦", "marks": "推荐"}
{"content": "除了gui章节，其他基本完成~", "marks": "推荐"}
{"content": "看了2遍，巨著。", "marks": "力荐"}
{"content": "呃呃，好多年终于翻了一遍", "marks": "力荐"}
{"content": "翻译不怎么样，有时候还是要回去看英文原版", "marks": "力荐"}
{"content": "对java基础知识有很深入的讲解，还有很多实例，很适合入门者，当然最好自己要动手调试下书上的例子与习题。", "marks": "推荐"}
{"content": "好几年了终于看完了。。。", "marks": "推荐"}
{"content": "A good Java book for teaching and study by selt .jsut for new java learner", "marks": "推荐"}
{"content": "Java基础知识", "marks": "力荐"}
{"content": "Java开发必备", "marks": "力荐"}
{"content": "看了老师的ppt，书没读，也不想读", "marks": "推荐"}
{"content": "2010-03-07 第一次读。每一次读都有不一样的感受——如果将项目视作一种有机的、进化着的生命体而去培养，而不是打算像盖摩天大楼一样快速见效，就会获得更多的成功和更迅速的回馈。", "marks": "力荐"}
{"content": "比较仔细，但是始终觉得“注解”等后加的东西，不引入吧语言会老化，引入吧又会极大增加语言复杂性，最后总会有新的语言简洁而原生地提供相同功能。这大概也是语言都会死的原因之一。", "marks": "力荐"}
{"content": "时隔大半年终于读完了，不愧是Java语言的经典著作，几乎每页都是作者的深入思考。白璧微瑕的是，很多地方（如一些方法、接口）介绍的并不是非常详细，如果想彻底理解还需要去翻阅API手册（《JavaTM 2 Platform Standard Edition 6 API 开发人员文档》足矣，建议下一份离线版的）来了解更多。不过如果这些细节在书中太具体的话，篇幅怕是要翻倍了吧", "marks": "力荐"}
{"content": "经典入门教程", "marks": "推荐"}
{"content": "大致看一下", "marks": "力荐"}
{"content": "阅读时间跨度最大的一本书啊，不光是学习Java知识，更是开发脑力的好书。", "marks": "力荐"}
{"content": "不适合初学者，翻译的很烂", "marks": "还行"}
{"content": "偶要开始写java了……", "marks": "推荐"}
{"content": "想了很久，还是入手了！", "marks": "力荐"}
{"content": "更加偏重工程运算。而非商业。", "marks": "还行"}
{"content": "没看后面的实例。只看前半部分的优化，还算有点干货", "marks": "推荐"}
{"content": "还不错的书，总结了了使用MATLAB编程是关乎效率的常见误区以及相对的建议。", "marks": "还行"}
{"content": "码农必备", "marks": "力荐"}
{"content": "走马观花，看完更喜欢python了……", "marks": "还行"}
{"content": "IO/Prolog跳过没看，Clojure和Haskell囫囵吞枣而过之。后两者感觉表现力极强，语言设计先进。这本书非常值得推荐，提取了各种语言中最值得称赞的部分来讲解。", "marks": "力荐"}
{"content": "这本书并不是用来学习的。而且阅读的时候尽量是快速阅读。编程语言是拥有“天赋”的，如何好好认识它的天赋，并利用其天赋，正是这本书的价值所在~~", "marks": "推荐"}
{"content": "完全可以不读，太浅", "marks": "较差"}
{"content": "作者和译者都很有爱！豆列：http://movie.douban.com/doulist/1574646/", "marks": "力荐"}
{"content": "這本書介紹了許多小衆的語言，十分讚！但有一點不爽的是作者的語氣，感覺過於傲慢，看的時候有一種被鄙視的感覺。", "marks": "推荐"}
{"content": "\"Scala的一切都关于妥协，而Haskell的一切都关于纯洁。\"", "marks": "还行"}
{"content": "对书中的prolog很感兴趣 对特定问题是个很好的解决方案 | 不支持尾递归的函数式编程语言都是没有诚意的 | 并发是OO的Achilles' Heel，也是学习新范型的语言应该着重去理解和掌握的", "marks": "推荐"}
{"content": "走马观花的读了一遍，对于像我这样没怎么接触过这些语言的人来说，还算是不错的吧。因为是在坐车的时候读的，里面的习题就没有做。话说读完这本书之后，我决定还是去学Lisp吧……", "marks": "推荐"}
{"content": "作者是一个有java情节的程序员……", "marks": "推荐"}
{"content": "随便翻翻可以。", "marks": "推荐"}
{"content": "不深入，开拓视野用，可以多了解几种有趣的编程范式。", "marks": "还行"}
{"content": "想真正理解语言设计者的思路，就必须有超越基本语法的觉悟。在简单性和安全性之间、编码效率和程序性能之间所做的哪些让步和折中Haskell。它是本书唯一的纯函数式语言，这也意味着，它根本不存在可变状态：只要使用相同的输入参数，去调用相同的函数，就会返回相同的输出。在所有强类型语言中Haskell拥有最令人称羡的类型模型；面向对象，意味着Ruby支持封装（把数据和行为一起打包）、类继承（用一棵类树来组织对象类型）、多态（对象可表现为多种形式）等特性。编程语言的根本机制只有两种就是C代表的有限状态机和lisp代表的形势变换。所有语言都在这两者之间进行折衷。", "marks": "力荐"}
{"content": "还是觉得prolog立意最新。但是性能不能控制，以及难以给出次优或部分匹配解不好弄。其它大多都是在玩语法糖。", "marks": "推荐"}
{"content": "嗯哼", "marks": "推荐"}
{"content": "走马观花也是件很有趣的事，其实这就是本让你浅尝辄止的书，用最短的篇幅展现每种语言各自的魅力。另外貌似很多语言开发的最初原因都是想练练手，嗯…", "marks": "推荐"}
{"content": "最强大的还是erlang, 什么语法都是浮云， 瓶颈不在编码，而在运行。一旦编译，不用再改代码，这才是终极目标。", "marks": "推荐"}
{"content": "不好读，但值得一试", "marks": "推荐"}
{"content": "还很好玩，技多不压身", "marks": "推荐"}
{"content": "介绍语言的语法过多", "marks": "还行"}
{"content": "看完之后想学 Prolog / Erlang / Clojure", "marks": "还行"}
{"content": "ruby/io/prolog/scala/erlang/clojure/haskell，走馬觀花.....有空還是要找本專門的書細看....", "marks": "推荐"}
{"content": "向编程这件美好的事情致敬，向美好的编程思想致敬，向实现一门新的编程语言这样美好事情致敬！", "marks": "力荐"}
{"content": "如果都能多了解一些，应该就不会有太多语言之争之类的话题了。\n", "marks": "推荐"}
{"content": "走马观花的几篇水文", "marks": "还行"}
{"content": "ruby: 5, io: 5, prolog: 5, scala: 3, erlang: 4, clojure: 4, haskell: 4. 总体给个五分吧, 作者辛苦了...", "marks": "力荐"}
{"content": "感觉没有想象的好。", "marks": "推荐"}
{"content": "推荐大一下、大二上读，话说这本书本身太侧重于并发了，到后面看的有点不耐烦", "marks": "力荐"}
{"content": "编程范式。面向对象、原型编程、逻辑编程、函数式。", "marks": "力荐"}
{"content": "入门级的好书。", "marks": "力荐"}
{"content": "ruby/io/prolog/haskell/erlang/scala/clojure,对编程真正有兴趣的人必读，是目前最好的编程语言方面的思维拓展指南", "marks": "力荐"}
{"content": "好玩。突然对F#感兴趣了……", "marks": "力荐"}
{"content": "蜻蜓点水", "marks": "还行"}
{"content": "读了ruby、Haskell、Prolog几章，还不错哦。", "marks": "推荐"}
{"content": "浏览完样书，感觉其他两位译者译得比我好，呵呵。顺便也推荐一下此书。", "marks": "推荐"}
{"content": "Prolog给我最深的印象。", "marks": "力荐"}
{"content": "Prolog 真是惊艳啊...", "marks": "推荐"}
{"content": "暑假每天的一道甜点，在学Ruby，可操作性甚强", "marks": "推荐"}
{"content": "看过不少编程语言，顺手的没几个。", "marks": "推荐"}
{"content": "各种语言之间共通的东西越来越多.流行都是基于妥协.monad和prolog的部分很好玩", "marks": "推荐"}
{"content": "这书还行吧，过誉了", "marks": "还行"}
{"content": "太简要，实在难以对一门语言的思想有所领悟，只能走马观花而已.\n对每一种语言做了少许了解. \n", "marks": "还行"}
{"content": "略读。觉得解释脚本、分布式[并发、容错]、逻辑式等的确是一个大趋势，而具体编程语言更像一种小工具，而熟悉语言要素（语法语义语序，如变量表示、列表等数据结构、条件循环等语法）对快速学习一种新语言至关重要。", "marks": "力荐"}
{"content": "很有想法的一本书，刚读了讲scala的一章", "marks": "力荐"}
{"content": "很棒的一本书，很新颖的一本书。序言写的太好了。", "marks": "推荐"}
{"content": "Quick Ruby", "marks": "还行"}
{"content": "大开眼界！不过这书的推进速度真是……第 10 页在讲 Ruby Hello World，第 30 页已经到元编程和 DSL 了。从来不知道有 Prolog 这种东西，很长见识。后面挺难的， Clojure Haskell 好在哪里还是不能理解。", "marks": "力荐"}
{"content": "相见恨晚", "marks": "推荐"}
{"content": "程序员开眼界之用，经历了一趟语言设计探险之旅。书名已经告诉你，所有地方都是蜻蜓点水。", "marks": "还行"}
{"content": "还不错。对各种编程范式的简单描述", "marks": "力荐"}
{"content": "内容如题，可惜每种语言只有3课，总评A-，难度A，推荐指数B+", "marks": "还行"}
{"content": "挺好玩的,特别是Prolog部分..", "marks": "推荐"}
{"content": "“七周七”系列的滥觞。对于鸟瞰不同语言的“世界观”来说，是本很好的书。", "marks": "力荐"}
{"content": "TP312/5925", "marks": "还行"}
{"content": "多种语言的入门合集，适合喜欢扩大知识面的程序员", "marks": "力荐"}
{"content": "把ruby和prolog的章节翻了一下，算是开拓下眼界，长个姿势吧……", "marks": "还行"}
{"content": "原作者很用心，但是翻译实在是……", "marks": "还行"}
{"content": "我想到一个小说 叫做 七武器", "marks": "推荐"}
{"content": "很薄...相当于简介", "marks": "推荐"}
{"content": "万金油类技术书似乎不适合我。。。", "marks": "还行"}
{"content": "这绝对是一本好书，值得读两遍以上，开阔视野，了解不同的编程语言模式", "marks": "力荐"}
{"content": "最后两章没有看完。这本书可以放着时不时再翻一番。", "marks": "推荐"}
{"content": "大概看看，太多太杂了", "marks": "力荐"}
{"content": "重点看了Ruby~~还有可怕的Prolog·其他几门好有难度~", "marks": "力荐"}
{"content": "erlang 部分与erlang程序设计 类似", "marks": "还行"}
{"content": "开拓眼界", "marks": "力荐"}
{"content": "忍不住，翻着看完了。。。   Ruby 和 Erlang更合口味些。 Clojure虽好，Lisp实在是。。。嗯，我更喜欢语法糖<=还是Python Ruby这些有亲和力的语言悦目点。Haskell据说轮子比较少。。。   不要天真的以为一种语言能搞定所有。", "marks": "推荐"}
{"content": "只能拿来 了解 不能拿来学习用的", "marks": "力荐"}
{"content": "同Linux/Unix设计思想", "marks": "推荐"}
{"content": "我喜欢这种短小的语言入门书。", "marks": "推荐"}
{"content": "猎奇，看完这样的文艺书籍就又可以装逼了~", "marks": "推荐"}
{"content": "开始寻找下一代编程范型吧。", "marks": "推荐"}
{"content": "真是本儿很好玩儿的书，怪不得当初amazon一直在推荐，我还纳闷这种书名就跟“21天学会VC”的玩意儿怎么会评价这么好 :D", "marks": "推荐"}
{"content": "超越编程语言的极限。", "marks": "力荐"}
{"content": "没感觉", "marks": "较差"}
{"content": "作者要写这本书，定是花了很大精力的。中文的翻译难得这么通畅，值得买。不过真得做开发有一定程度的积累才能真正有收获，不然理解不了其中提到的各种范型的优劣。嗯，段位高了以后再读一遍。", "marks": "推荐"}
{"content": "@vikingmew送书抢得的第三本，“课后作业”部分略多【我肯定不会去查资料的啊啊啊】。。。", "marks": "还行"}
{"content": "少数让人深切感受到编程乐趣的书籍", "marks": "力荐"}
{"content": "短小精悍 大开眼界", "marks": "力荐"}
{"content": "开阔视野", "marks": "力荐"}
{"content": "想领略一下不同语言的风采，可以拿来看看，品味一下不同的设计思路。但并不适合作为语言的学习指导。而且我认为语言并没有它们的拥趸吹嘘的那么优秀，能否创作出色的软件主要还是看开发者。", "marks": "还行"}
{"content": "粗翻了一遍，适合后续再阅读", "marks": "力荐"}
{"content": "适合于对小众语言的粗浅了解，对prolog, haskell产生了兴趣，后面可以展开学习～", "marks": "推荐"}
{"content": "长见识", "marks": "力荐"}
{"content": "更着重于体验不同的编程语言，关于每种语言编程范型的总结不够到位。", "marks": "还行"}
{"content": "开开眼界，尝鼎一脔。", "marks": "推荐"}
{"content": "即使7个tutorial合体，终究难成正果。", "marks": "还行"}
{"content": "七周七语言的前提是你得在七周前先掌握好这七种编程语言的语法，然后再跟着来学。多译者翻译得很是不给力，同样一个set，一会集合，一会集，一会嫌翻译成中文跟collection冲突；一会map，一会映射。坑货。听说七周七数据库的翻译也坑爹，让我怎么买。", "marks": "还行"}
{"content": "其实并没有看太懂。", "marks": "推荐"}
{"content": "不是很推荐这种书，促销时可买", "marks": "还行"}
{"content": "读了里面感兴趣的4种语言:erlang,scala,clojure,ruby，入门还是可以的，简单了解下，有很多语法相关的东西，看了之后不用，都记不住的，了解下语言的思想还是有所帮助的。", "marks": "推荐"}
{"content": "如果只熟悉一两种语言的话，不妨看看这本书，开拓视野，了解不同编程范式。", "marks": "推荐"}
{"content": "同意“点子不错，缺乏洞见”的评论", "marks": "还行"}
{"content": "一个星期了解7种语言，实在是一件很划算的事。ruby算是熟人了（所以我宁愿讲的是python）；prolog也算是有接触过；Clojure是Lisp方言（对Lisp也算是有些了解），不过由于构建在JVM上，一些特性有所妥协。对于原型编程方式（Io），还是没有体会到和面向对象的本质区别在哪里，也许以后有机会再看看Javascript。印象最深还是Erlang，太适合构建高并发的分布式系统了。用C++来做同样的事情真是有点苦不堪言。Scala是旧闻大名，不过看下来没有特别的感觉。Haskell也算是久仰了，类型系统很强大，monad真没看懂。作为一门纯粹的函数式语言，值得以后进一步了解。", "marks": "推荐"}
{"content": "只会一种编程语言的同学们都有读一读!", "marks": "推荐"}
{"content": "你当然不能指望它面面俱到，但是好处是快速的了解每个语言的key features，并快速知道它值不值得花时间学", "marks": "推荐"}
{"content": "用恰到好处的篇幅介绍了每种编程语言的精髓之处，并总结了每种语言适用的场合与应用。语言和电影人物的类比耐人寻味。", "marks": "力荐"}
{"content": "浅", "marks": "较差"}
{"content": "对语言没感觉了", "marks": "还行"}
{"content": "查理曼大帝说：你拥有了另一种语言，就拥有了另一个灵魂……。", "marks": "还行"}
{"content": "更多的注重语言实现，而不是细节", "marks": "推荐"}
{"content": "非常好。除了函数式编程带给我的震感，通过本书，我第一次感觉到声明式编程的神奇，prolog语言是我想要的语言。在解决特定问题上，例如逻辑算法、行程规划、自然语言处理等领域相当擅长。有机会可以一试", "marks": "力荐"}
{"content": "了解不同的解决问题思路", "marks": "推荐"}
{"content": "涨姿势", "marks": "力荐"}
{"content": "因为当时在学习Erlang，这里面有一章是讲Erlang的就看了一下，基本上就是简介，介绍下思想以及基本的内容，没有很深入，对于如此薄的一本书苛求深度也不可能，总体上算是开阔眼界的～", "marks": "推荐"}
{"content": "没读完，感觉这本书的定位很尴尬。学习一门语言的话我可以去该语言的官网，学习思想的话，这本书又太浅薄了～为了猎奇的话，我逛论坛看到的比看书新鲜的多", "marks": "还行"}
{"content": "看了大概有20个小时，浅尝则止学了点皮毛，每个语言都有各自的特点，比较通用的几个特性是列表解析（看起来蛮好，但感觉只是map的简化写法），模式匹配(远胜JAVA)，函数式风格（map,foldl,filter,cons之类）。其他不错的特性有Erlang的actor，Cloujure的STM，Haskell的无穷序列。总而言之还是学到不少东西～", "marks": "力荐"}
{"content": "感觉只是泛泛介绍了一下各语言的特点，并没有太多有深度的东西。", "marks": "还行"}
{"content": "形式很好，效果一般", "marks": "还行"}
{"content": "最有价值的一点是各个语言的编程范式、优势和劣势的说明，但是语法的内容还是过多啊。", "marks": "推荐"}
{"content": "对像我这样只有几年面向对象编程思维的程序员来说，理解并掌握本书的所有内容绝非易事。书中所说：学习一门语言就多一门思维方式，学Prolog这个基于约束—逻辑编程泛型的语言时完全跳出了以前的编程思维方式，很有趣; 函数式编程语言Clojure, Haskell不易掌握，但功能强大，作者用了个形象的比喻\"你不能因为三轮车好学，就不学骑自行车\"；而Erlang\"就让它崩溃\"策略是我最喜欢这门语言的地方", "marks": "推荐"}
{"content": "好久没读书了，这次把这本书读完，整个过程没有太大的障碍，当然收获也不算特别多，了解了LISP的括号（代码即数据），还有不少语言的一些独特技巧，设计挺好，现在感觉越来越烦Java那类繁琐的写法，语言应该要有善于表达的能力，不要为了复杂而设计", "marks": "推荐"}
{"content": "手机上看这个太折磨了", "marks": "推荐"}
{"content": "读了一部分.. 一小本书确实也就是带看看基本语法和特色", "marks": "还行"}
{"content": "真的有点意外的惊喜的感觉，ruby  Io  prolog  erlang 让我印象深刻！", "marks": "力荐"}
{"content": "一本領略多種語言的小書，適合開眼界。不過七週有點不精準啊，書裏面寫了每種語言只需要3天，而且實際上我用了一週就讀完了。要是這樣一本小書也要七個週來讀，那也太慢了……", "marks": "推荐"}
{"content": "对快速了解这几种语言的范式、特点等有所帮助", "marks": "推荐"}
{"content": "太开阔眼界了！不看不知道，一看吓一跳！世界太大了！每个语言都有不一样的体验！", "marks": "力荐"}
{"content": "爽", "marks": "推荐"}
{"content": "真的像语言大混讲，还每篇掺和些不知所谓的电影片段。算是粗粗的报团旅游拍些照片就走人。读完之后，对我印象最深的只有prolog的优雅逻辑，还有函数语言的各种混搭。", "marks": "还行"}
{"content": "不同领领域  能相互借鉴", "marks": "力荐"}
{"content": "为避免七周变成七年，抱着没时间吃猪肉也要抽时间看猪跑的精神把书看完了。。。", "marks": "力荐"}
{"content": "选择性的看了ruby/scala/clojure，其他的短时间内看不到需求。这么多玩意，看的人真是头大，不过对于clojure的括号表示很适应。\n", "marks": "推荐"}
{"content": "值得一读，haskell好美，prolog简直神奇", "marks": "还行"}
{"content": "全而不精", "marks": "力荐"}
{"content": "还行，没仔细看，应该仔细看的～～～", "marks": "还行"}
{"content": "几种语言的简单介绍，开阔下眼界也不错～", "marks": "还行"}
{"content": "从面向对象编程到面向List编程（所以才叫Lisp嘛[List Process]）", "marks": "力荐"}
{"content": "相当于作者的学习笔记，这种形式的对比分析对深入理解语言很有好处。", "marks": "推荐"}
{"content": "可以粗略了解不同语言范型，开拓下眼界，为下一步深入学习找个方向，不错", "marks": "推荐"}
{"content": "关于Lisp语言的括号，有一个广为流传的笑话：据说，一个黑客冒死偷到了美国用于导弹控制的Lisp代码的最后一页，却发现那一页上全是右括号“)” 。", "marks": "推荐"}
{"content": "走马观花地了解各种形式的编程语言的话是个不错的选择，可以了解很多概念～", "marks": "推荐"}
{"content": "看完可以快速熟悉多种主流语言范式 OO Prototype-based Functional Declarative", "marks": "推荐"}
{"content": "好吧学习范型，ruby作为OO其实什么都有，Io是原型类似js，prolog是古老的逻辑语言，后四种函数语言里，scala是对java的函数扩展，erlang由prolog启发加入了actor模式以及就让它奔溃的理论，clojure是由java实现的lisp方言并优化了语法，haskell是真正纯函数式没有可变量。基本也是个小品文，大多都在讲语法有点无趣。", "marks": "推荐"}
{"content": "噱头太多", "marks": "还行"}
{"content": "蛮复杂", "marks": "还行"}
{"content": "短小，实用", "marks": "推荐"}
{"content": "这书感觉有点像韦小宝拉着他七个漂亮老婆给你一个个点评一样好玩，可惜我还要写蛋疼的60页的毕设日志，好想一口气看完....七周这系列都mark一下", "marks": "力荐"}
{"content": "写的简单易懂，不仅仅是hello world，多了一点语言特性的核心实践，了解了之前一直想了解的函数式编程模型，也是可以跟人吹逼说自己知道柯里化是啥了。顺便很想吐槽作者就是一个不折不扣Ruby脑残粉嘛", "marks": "推荐"}
{"content": "看完这本让我最感兴趣的应该是 Prolog。因为之前对 Lisp, Haskell 这些都有一些了解，所以看这本就没那么多新鲜感了。个人觉得这本讲得太基础了一点，比较无聊，不如看 Matz 的 《代码的未来》。", "marks": "推荐"}
{"content": "重要的不是语言本身，而是隐含于语言之中的思维方式。", "marks": "推荐"}
{"content": "先粗略翻了一遍。接下来打算细细的看下ruby，以及再翻下haskell。 ", "marks": "推荐"}
{"content": "仔细看了Ruby，其他语言了解了下。", "marks": "力荐"}
{"content": "一般般，边看边望", "marks": "还行"}
{"content": "很赞的一本书，想拓宽知识面的建议入手。缺点是点到为止。", "marks": "力荐"}
{"content": "天赋太低了，七周七语言根本做不到，只能了解一下", "marks": "还行"}
{"content": "现在静不下心来看纯技术的书了呢", "marks": "推荐"}
{"content": "待阅", "marks": "推荐"}
{"content": "终于看完了，绝对的好书。第一本硬是让我一字一句读下来的英文书，完全不觉得枯燥无味。主要分析linux平台x86处理器的汇编，从底层到高层，讲的很透彻。", "marks": "力荐"}
{"content": "很好的书", "marks": "力荐"}
{"content": "下面的东西", "marks": "力荐"}
{"content": "以我现在的基础来学这个 感觉很浅 不过好在他用实例把linux上用gas开发串了一下 我自己也能按照意愿开发些简单小应用了  所以还是很有用的 下一步有两个方向 1,实现个forth2,实现个小操作系统", "marks": "推荐"}
{"content": "gas相关的书籍不多,这本是奇好的一本.\n不过内容还是少了点,如果再加点linker script方面的东西就更好了.", "marks": "力荐"}
{"content": "唉。", "marks": "力荐"}
{"content": "几年前看的时候觉得很好，现在看看觉得好浅...", "marks": "力荐"}
{"content": "找AT&T汇编找到的一本启蒙书，挺好看的。赞一下书里面给的一些链接和书单", "marks": "力荐"}
{"content": "linux平台汇编入门最佳教材！", "marks": "推荐"}
{"content": "nice~", "marks": "力荐"}
{"content": "200页不到，建议直接pdf，http://savannah.nongnu.org/projects/pgubook/。", "marks": "推荐"}
{"content": "很好的编程入门书，从底层的汇编讲起，涉及到程序设计的各个方面。最后一章还推荐了一些继续深入学习的书籍。", "marks": "推荐"}
{"content": "没有不好理解的地方，都是程序员的自我修养", "marks": "推荐"}
{"content": "简明易懂的AT&T汇编入门书籍，将各种程序概念讲的通俗易懂，最后的推荐书单非常经典。英语CET4水平即可读懂英文版，中文版为《深入理解程序设计》", "marks": "力荐"}
{"content": "GAS 汇编简易教程。", "marks": "推荐"}
{"content": "绝对值得一读的好书", "marks": "力荐"}
{"content": "从C语言到Linux系统开发的教程", "marks": "力荐"}
{"content": "比较适合汇编入门，面向的对象是完全不懂汇编的人。值得阅读的章节是2-6和第9章，中间谈到作者对coding的建议，觉得价值不算很大", "marks": "推荐"}
{"content": "此书讲AT&T风格的32位汇编语言，内容简练充实，视角高瞻远瞩，亦附带适当练习，实为不可多得之编程好书。然错字不少，仍有改善余地。", "marks": "推荐"}
{"content": "了解tdd，单元测试", "marks": "还行"}
{"content": "谁有这本书，二手的也行，卖我吧，Q544599787", "marks": "力荐"}
{"content": "一本cookbook，讲的挺全的，还可以，译文所说的错误都没发现。", "marks": "推荐"}
{"content": "读了几个月……拥有dataset和source，实践是件有趣的事情，有趣的事情会让你沉迷其中，这是良性循环。遇到难点可以去看《机器学习》，实践需要正确的理论来搭配。", "marks": "力荐"}
{"content": "这本书，前几章看着还可以，觉得学到了点东西，到了后面完全不知道在说什么了，只告诉你怎么做却不告诉你为什么要这样做，套公式", "marks": "推荐"}
{"content": "里头有些代码实现略糙。", "marks": "力荐"}
{"content": "数据挖掘入门书，比清华的教材好太多了。这本是基于Python的应用书，但数学算法部分没有细讲，不过至少告诉你这些算法可以怎么用，而很多应用数学的教材，只谈理论，没应用。", "marks": "力荐"}
{"content": "入门佳作，不懂数学也可以数据挖掘哟~~~即使API过时了还是非常好用。（当然你不能做梦不懂数学看了它就熟练掌握DM", "marks": "力荐"}
{"content": "很“基础”的书，或者说很应用的书。可以用来快速了解领域概况，严格来说可能连基础都算不上，只能说是入门。", "marks": "力荐"}
{"content": "内容丰富，实践性极强。", "marks": "力荐"}
{"content": "为毛叫集体？这个词儿在汉语里就是上世纪那场浩劫，还有对个性人性无情的扼杀，让我心有余悸", "marks": "力荐"}
{"content": "失控中的蜂群，蜂群不是民主，而是一种局部随机整体最优的模型；皮尔逊距离是整体测量。", "marks": "力荐"}
{"content": "真是好实战哇！", "marks": "力荐"}
{"content": "难怪算法工程师们都对此书很不屑嘛～", "marks": "推荐"}
{"content": "非常实用的宝典，看了这本书，如果有工具，可以解决大部分问题，只是不懂python，实现部分看不懂啊", "marks": "力荐"}
{"content": "翻译减分，有很多句子在原文里清晰简单，被翻译得莫名其妙。作者这种从零开始自己写决策树的精神是很伟大的，值得学习。", "marks": "还行"}
{"content": "指条明路给我", "marks": "力荐"}
{"content": "很实用", "marks": "力荐"}
{"content": "很实用，内容有些过时", "marks": "还行"}
{"content": "三年前第一次看这本书的时候里面有一章教你如何使用libsvm...那时候鬼知道3年后libsvm是我帮老师一起release的呢...", "marks": "推荐"}
{"content": "python实现，简单易懂", "marks": "推荐"}
{"content": "机器学习，实践性较强的一本书。\n\n简单过了一遍~", "marks": "推荐"}
{"content": "找个时间把程序都跑一边。", "marks": "力荐"}
{"content": "对原理讲的不够明白，得自己看代码。对一些可能的特殊情况也没提，照搬容易吃药。\n", "marks": "还行"}
{"content": "带领我入门，实战，上手蛮快。内容基本涵盖。不过教学过程有些潦草。", "marks": "推荐"}
{"content": "需要重读", "marks": "推荐"}
{"content": "很深，虽然序言写入门书。很好，很新。开阔眼界，但是暂时神马都没学会……", "marks": "推荐"}
{"content": "终于看完了。。放了一年", "marks": "推荐"}
{"content": "看个一知半解。细节还需另找资料深入。勘误表是必需的 http://oreilly.com/catalog/errataunconfirmed.csp?isbn=9780596529321", "marks": "推荐"}
{"content": "  看了三分之一，雖然職業算法高手表示不屑，但是對我們這種平時被框架保護的好好的盡寫些修改、新增、刪除的程序員來説，這本書夠受用很長一段時間了，完美的入門書。", "marks": "力荐"}
{"content": "M", "marks": "还行"}
{"content": "要是不给五颗星。。。会不会让别人认为此书是白读了。。。\n最近看<超级数字天才>一书，回头感慨，看来此书还得再读一遍了。。。", "marks": "力荐"}
{"content": "人工智能的应用与python实现", "marks": "力荐"}
{"content": "不通读，准备当工具书用", "marks": "还行"}
{"content": "循序渐进。基本无数学推理，入门就是得这种书。", "marks": "力荐"}
{"content": "很好的书，很适合数据挖掘，机器学习，信息检索，模式识别等领域的研究生当作课外兴趣补充读物～", "marks": "力荐"}
{"content": "读过的第一本data mining方面的书", "marks": "推荐"}
{"content": "再读一遍，还是 5 星比较合适 ...", "marks": "力荐"}
{"content": "appetizer", "marks": "推荐"}
{"content": "TP393.09 S454 令希301", "marks": "力荐"}
{"content": "很好的书，用Python做代码讲解，很方便。部分内容（比如支持向量机）的代码有点过时", "marks": "力荐"}
{"content": "这本书太棒了", "marks": "力荐"}
{"content": "被捧的这么高。。。我还是更喜欢机器学习实战。", "marks": "推荐"}
{"content": "具体的步骤挺详细的…但是堆代码真的很难看啊…", "marks": "推荐"}
{"content": "应该说，翻过。", "marks": "推荐"}
{"content": "本书介绍了人工智能（机器学习与数据挖掘为主）在编程（特别是网络编程）方面的具体应用，介绍了许多机器学习与数据挖掘的算法与实现，几乎每个算法都是结合着实例来说的，因此能让读者有很感性的认识，并且没有复杂的数学推导，比较适合入门者，要想读懂本书的算法，唯一的要求就是懂python，如果不懂就没有办法精通本书，尤其是初学者，很多原理与实现的详解都是用python语言来表达的。", "marks": "推荐"}
{"content": "挺不错的书，属于涵盖很广的类型，可以了解很多方法，有兴趣的人也可以看看里面推荐的论文（Google上都能找到）", "marks": "推荐"}
{"content": "极好的入门书", "marks": "推荐"}
{"content": "不可错过！", "marks": "力荐"}
{"content": "python机器学习实践指南。", "marks": "推荐"}
{"content": "真是好书,一周看完,知道的有点晚了.代码不必去挨个尝试,单机跑的程序以后也用不到吧,知道思想就行.", "marks": "力荐"}
{"content": "ML入门读物，太偏工程了", "marks": "还行"}
{"content": "推荐算法领域神器。", "marks": "力荐"}
{"content": "涉及的内容很广（数据挖掘 推荐系统 优化 SVM 智能算法 ），每项内容均结合Python给出例子", "marks": "推荐"}
{"content": "很不错的入门书籍，偏工程不偏理论", "marks": "力荐"}
{"content": "适合ML入门", "marks": "推荐"}
{"content": "还是当年写毕设的时候读的，就记得很浅显易懂，然而现在全忘了", "marks": "力荐"}
{"content": "几个案例可以入门", "marks": "推荐"}
{"content": "Machine and Data Mining的绝佳入门，还能学python，偶也~", "marks": "力荐"}
{"content": "曾经的经典，介绍了很多不错的概念，但是，实现不足，细节不足。机器学习近几年发展太快，已经太多更棒的书可以替代这一本了。该退休的一本书了。", "marks": "还行"}
{"content": "条理清晰 浅显易懂 休闲时光好读物", "marks": "推荐"}
{"content": "T_T 看了一遍毫无感觉。。", "marks": "还行"}
{"content": "可以省去很大篇幅", "marks": "推荐"}
{"content": "作为一本机器学习相关的书，从理论角度来看这本书实在是太弱了，很多系数算法连公式都没有，解释的也很不清楚，不适合机器学习入门。从实际应用角度，这本书还是给出了很多具体的实现和一些实际问题的场景，但是python代码写的实在是太难看了，反而从应用角度更不具参考性。", "marks": "较差"}
{"content": "介绍了基本思想，入门极佳", "marks": "推荐"}
{"content": "绝对是最适合初学者入门的书籍。典型的美式思维，精于解释。我们要干一件什么事？那么直觉上我们会怎么干？这样干了后会遇到什么困难，我们如何再解决之？干完了我们还想改进一下直到看上去还不错。这样一个算法就出来了。机器学习的十大算法并没有全部涉及到，不能要求一本书既dummy又浩瀚。Python代码改吧改吧就可以用。非常好的书。", "marks": "力荐"}
{"content": "很适合程序员出身又要做些数据挖掘和机器学习工作的人们，非常Practical，容易读，即使不会Python也没关系", "marks": "力荐"}
{"content": "据说是数据挖掘的经典入门书…… 木有膜拜过  不过已经大名久仰了！   \n后来看了看这本书  表示由于出版时间比较早了  书中的内容已经有点儿老了  \n颇有旧时王谢堂前燕   飞入寻常百姓家  的赶脚  \n不过 作为数据挖掘开山力作  值得给4星  向这条路上的先驱致敬", "marks": "推荐"}
{"content": "快速浏览了一遍，基本上都看不懂，好书啊，很神往，但是就是看不懂！", "marks": "力荐"}
{"content": "读到三分之一，是本好书。里边很多概念都是机器学习的核心", "marks": "推荐"}
{"content": "浅显，可以对一些常用的算法和思想建立直观的感受。", "marks": "推荐"}
{"content": "我看得买一本", "marks": "力荐"}
{"content": "1、机器学习入门；2、理论简明清晰；3、简短的代码示范了算法实现；4、示范了开放API的使用；5、文字平易近人；6、知识都比较新；7、翻译得很好", "marks": "力荐"}
{"content": "我一直都觉得这个“集体智慧”不太合适。我刚开始还以为是方法论方面的，翻了才知道是数据挖掘方面的。短平快的数据挖掘书，可以当作数据挖掘和人工智能的实践导引", "marks": "还行"}
{"content": "捡了几个感兴趣的看了", "marks": "推荐"}
{"content": "智能算法入门", "marks": "推荐"}
{"content": "数据挖掘、机器学习必读书", "marks": "力荐"}
{"content": "理论足够少，刚刚好够用。读者可以轻松地做出一些简单的机器学习的效果。对于入门和建立兴趣和信心有很大的帮助。", "marks": "推荐"}
{"content": "不错，对于我这种不愿意也不是很有能力深入学习理论的人来说，这本书可以在比较实用的一个层次上介绍一些数学上的算法。", "marks": "推荐"}
{"content": "这书不错哎～～～ 虽然我看 有点悲剧～～～", "marks": "推荐"}
{"content": "很多人推荐 当时也不知道为什么收藏了 先留着\n2012.4.18再次发现 跟机器学习相关\n2012.12.8再再次发现 数据挖掘的入门书？？？\n\n2015.9.2读完. 看的电子版, 中文版, 英文版交叉着看, 也是醉了\n没有想象中那么好, 算是个敲门砖吧, 启个引导作用, 还得继续看其他书涨姿势", "marks": "还行"}
{"content": "触类旁通可乎", "marks": "力荐"}
{"content": "貌似是研一暑假看的", "marks": "推荐"}
{"content": "入门必备", "marks": "力荐"}
{"content": "从易到难，从实例到工具库，常用算法全面，而且对于应用有较深入的介绍与讨论，入门好书。", "marks": "力荐"}
{"content": "五分好评！", "marks": "力荐"}
{"content": "入门简单书", "marks": "力荐"}
{"content": "流行读物", "marks": "还行"}
{"content": "最近很烦躁，技术书都不太能看的进去，特别是这种一页需要思考很久的。看了60%，暂时放弃吧。等稍微能静下来再看翻看。。。", "marks": "还行"}
{"content": "很实用的数据，几种常用算法都有很清晰地解释和实现。通览了一遍感觉实现过程做了相应简化，没具体看编码，", "marks": "力荐"}
{"content": "入门必备", "marks": "力荐"}
{"content": "没评论里说的那么好，真的，适合python还可以的同学，学习机器学习。别用语言掩盖了机器学习的本质", "marks": "还行"}
{"content": "很不错的AI入门书，力荐", "marks": "力荐"}
{"content": "简单了解ML, AI", "marks": "力荐"}
{"content": "web 算法", "marks": "力荐"}
{"content": "不错的入门书。它的定位是就是入门书，用工程的方法来介绍机器学习。就这本书自己的定位来评分的话，它可以得五星，但和其它机器学习的书来作比较的话，它只能得三星，因为确实讲得很浅。中和一下，给四星吧", "marks": "推荐"}
{"content": "可以快速了解各种机器学习算法及应用场景", "marks": "力荐"}
{"content": "智能和智慧是不同的概念，莫要乱用啊～", "marks": "还行"}
{"content": "周末翻了一下，感觉还是不懂", "marks": "还行"}
{"content": "每个算法和实现都是那么简洁和清晰", "marks": "推荐"}
{"content": "入门足够简单，深度不够。", "marks": "还行"}
{"content": "为什么我的支持向量机没法承载大量数据为什么我的支持向量机没法承载大量数据为什么我的支持向量机没法承载大量数据", "marks": "还行"}
{"content": "非常好的应用书，适合入门，但是需要一本理论书来配合着看。", "marks": "力荐"}
{"content": "有实例，易上手，但是只是入门级~~", "marks": "推荐"}
{"content": "好书啊！！！", "marks": "力荐"}
{"content": "还需要再读", "marks": "推荐"}
{"content": "挺对不起这本书的，多少次拿起又放下，其实还是挺不错的入门书", "marks": "推荐"}
{"content": "直接上手，不想学公式的“捷径”", "marks": "力荐"}
{"content": "学习了一系列用户推荐和集体智慧过滤的算法，还是挺有收获的", "marks": "推荐"}
{"content": "别的不说，里面python代码比国内同类书籍写得好100倍。缺点是讲原理比较少，需要自己去深挖", "marks": "推荐"}
{"content": "code跟着抄一遍，很是受用，这本书在我这个阶段真是“来得刚刚好”，复习旧的补了新的知识。看的过程中不断回想起过去一年中自己学习python、ml、sql等等的种种画面，颇有感慨。", "marks": "力荐"}
{"content": "计算机改变未来！", "marks": "力荐"}
{"content": "数据挖掘的好书，讲解详细，实用", "marks": "力荐"}
{"content": "后面几章实例代码不能正常运行，需要修改源码或者引用的外部数据不好获取\n解释的部分也不如之前多\n总之还算是一部不错的入门书", "marks": "推荐"}
{"content": "好艰难", "marks": "推荐"}
{"content": "人工智能以前大多基于经验和领域知识，直到上万上亿的数据出现时，基于数据的人工智能更有了广阔的天空。", "marks": "推荐"}
{"content": "学习机器学习的第一本书，虽然我不是科班出身，但我还是爱数学公式，这本书这方面略差一些。", "marks": "推荐"}
{"content": "这本书，前几章看着还可以，觉得学到了点东西，到了后面完全不知道在说什么了，只告诉你怎么做却不告诉你为什么要这样做，套公式", "marks": "力荐"}
{"content": "慢慢悠悠，终于看完了，不错，用很简单的例子把各种算法解释的很清楚。", "marks": "力荐"}
{"content": "最好的入门书", "marks": "推荐"}
{"content": "相见恨晚，人生能遇几本这样的技术书", "marks": "力荐"}
{"content": "比较水，而且给出的solution基本不是工业界会用的，适合初级用户了解相关方面", "marks": "较差"}
{"content": "基本的优化、机器学习算法练了手。后面比较难懂的遗传编程什么的，就草草带过了。不过收获还是很大！", "marks": "力荐"}
{"content": "对数理知识不必太过熟悉，也可以开始读，但当然是对背后的算法原理比较清晰了，才能对解决各类问题的方法思路透彻。看得过程还能体会到，自己去构造算法的一些思路方法，所谓算法工程师的方向有个感性认识。基本机器学习理论及实践的书扫了下，该考虑结合实际问题，应用解决问题了，加油。", "marks": "力荐"}
{"content": "简单易懂,可实践性强", "marks": "推荐"}
{"content": "还不错，比较适合做数据挖掘的初学者学习下", "marks": "推荐"}
{"content": "2017第36本，忽略了实现内容，当做入门书籍阅读，算法汇总集：\n贝叶斯分类器（推荐影片）-决策树分类（发现群组）-神经网络（聚类）-支持向量机（发现群组）-K最邻近（发现群组）-非负矩阵因式分解（文本权重）-成本函数-模拟退火（最优成本）-遗传算法", "marks": "推荐"}
{"content": "讲解系统，举例都十分契合章节。", "marks": "力荐"}
{"content": "很不错，作为一个机器学习&人工智能的门外汉，感到视野有很大的开阔。可读性很好，结合实际例子，显然作者花了很多心思，非常让人放心。尽管如此，很多东西必须再看专门的书，比如神经网络和svm。考虑到实际应用的关系，我只看了前九章。", "marks": "力荐"}
{"content": "用python实现了不少数据挖掘，机器学习算法，相当好的书。", "marks": "力荐"}
{"content": "快速阅读，入门必备。", "marks": "推荐"}
{"content": "通用，不过不细致", "marks": "推荐"}
{"content": "未来", "marks": "力荐"}
{"content": "阅读了前几章，写的比较通俗易懂，最好是会python（例子都是用python写的）。因为已经买了其他书入门了，这本书目前对我价值不是很大，但绝对是本入门好书。", "marks": "力荐"}
{"content": "早些时候看感觉会更好，有代码，科普性强，原理少", "marks": "力荐"}
{"content": "很好的入门书，不过代码都有点旧咯->PIL....", "marks": "力荐"}
{"content": "弱化了理论，注重实践，适合我这种小白。", "marks": "力荐"}
{"content": "挺有趣的", "marks": "力荐"}
{"content": "精华。有种相形见绌的悲哀。", "marks": "推荐"}
{"content": "聚类 挖掘 推荐 算法", "marks": "力荐"}
{"content": "还行 数学科学家为目标的职业人士可考虑. 但不是最好的那一类", "marks": "推荐"}
{"content": "用到了一些算法，但不讲原理，只是说怎么用，与《数学之美》相差太远，看了三分之一就实在看不下去了。", "marks": "还行"}
{"content": "写得非常好，生动，深入浅出。", "marks": "力荐"}
{"content": "data ming入门教材首选，理论和实践相结合，python确实非常的elegant", "marks": "力荐"}
{"content": "最初是老板给的一本Kindle书，看了小一半发现，靠，居然家里有中文版... 目前看了前几章，太吸引人了，精干的小段算法精确的描述了耳熟能详的经典学习算法，是一本很好的温故而知新的书籍", "marks": "推荐"}
{"content": "生动清晰，理清了以前上学时没弄明白的优化、聚类和分类问题。关于神经网络、SVM和NMF还需要找专门的资料进行深入了解。", "marks": "力荐"}
{"content": "赞！", "marks": "力荐"}
{"content": "无数人推荐，绝对是超级好书。刚翻开，心情比较兴奋。里面讲到了很多对大规模数据进行数据挖掘和机器学习的方法，作者许诺会浅显易懂。虽然从来没有接触过，但以后的世界将绝对是一个数据驱动的世界，了解一下数据常识也是好的。再不济也能接触到名词，心里踏实一些。在上Andrew Ng的机器学习课程时，对里面的一些内容的理论依据重新强化，沾沾自喜。（1年后的）今天整理豆瓣书架的时候，发现这本书真的开阔了我的眼界。", "marks": "力荐"}
{"content": "评分过高了。", "marks": "还行"}
{"content": "简介", "marks": "推荐"}
{"content": "硬件和程序，程序和操作系统。", "marks": "力荐"}
{"content": "这翻译翻的，蹲厕所的时候译的吗？", "marks": "还行"}
{"content": "如果能好好读通还算是不错的入门书，典型的学院派外文教材译本，文风也挺诙谐的。", "marks": "推荐"}
{"content": "讲的很清楚。认真看了一遍，还是很有收获的。\n翻译算是差强人意吧。", "marks": "推荐"}
{"content": "本科学得收获最大的一门课。", "marks": "推荐"}
{"content": "这本书能让我看懂，真的！", "marks": "力荐"}
{"content": "比第二版变化多了点", "marks": "力荐"}
{"content": "原版还行", "marks": "还行"}
{"content": "算是从头到尾读过了，收获极其大，被我贴满了有待review的标签... \n2015年赠送给了离职的小弟zqx。", "marks": "力荐"}
{"content": "[昔时所读]大三 操作系统 课程教材。", "marks": "力荐"}
{"content": "非常好，系统权威又不失细节，终于啃完这本书，被学长誉为“非计算机专业学习计算机科学与技术的四大敲门金砖”，呵呵", "marks": "推荐"}
{"content": "深入浅出，很是喜欢。可惜基础不好，关键部位看的很是草率。", "marks": "力荐"}
{"content": "四星给T老爷子，负一星给翻译", "marks": "还行"}
{"content": "塔神", "marks": "力荐"}
{"content": "感觉那本《操作系统概念》更好一些。", "marks": "推荐"}
{"content": "不看这本书你还以为操作系统是什么讨厌无聊的怪物呢——就像老师讲这门课时所给你的那种感觉一样［吐舌头］", "marks": "力荐"}
{"content": "翻译很一般", "marks": "推荐"}
{"content": "姐发现自己不适合搞操作系统。果断的", "marks": "推荐"}
{"content": "版面很不友好", "marks": "还行"}
{"content": "教材", "marks": "力荐"}
{"content": "读了前六章，虽然很多地方还是云里雾里，但我的感受是：任何想学习linux的人都应该来读一读这本书。我会重读的", "marks": "推荐"}
{"content": "讲得很深，很不错，并不是简单地讲概念，而是提出并解释了操作系统设计时考虑的问题。", "marks": "力荐"}
{"content": "见书评\r\n", "marks": "力荐"}
{"content": "风趣幽默！行文又不失简洁！而且编排思路清晰，提纲挈领，最后又有各个系统的案例分析。很棒！", "marks": "力荐"}
{"content": "有用常识的大合集，而且行文还挺逗，冷笑话挺多。。", "marks": "推荐"}
{"content": "一部分，以后碰到相关的可以再翻翻", "marks": "推荐"}
{"content": "毫无疑问，这是一本7星级的书。", "marks": "力荐"}
{"content": "译得不够好。我觉得缺细节。", "marks": "还行"}
{"content": "没看过原版，但看着翻译很难受。", "marks": "还行"}
{"content": "翻译得太..................", "marks": "推荐"}
{"content": "Tanenbaum，好书", "marks": "力荐"}
{"content": "粗略读过一遍，很多很杂，大量的知识对一个喜欢折腾软件硬件、读微型计算机长大的电脑爱好者来说是常识。但是对于专业上的深入学习来说，我还需要以后回来细读某些章节。", "marks": "推荐"}
{"content": "很好的书，只是要多看几遍", "marks": "推荐"}
{"content": "封面很好玩啊～", "marks": "力荐"}
{"content": "很好的一本讲操作系统的一本书。适合用于学习操作系统原理、应对笔试和面试等。", "marks": "力荐"}
{"content": "塔嫩鲍姆的书。在教材层面的阅读上，如果不是查阅，而是精读，那么刷课后习题是必须的。对于教材而言，不做习题的读书效果 = 零。", "marks": "推荐"}
{"content": "图文并茂，讲的很详细；其中的实例研究，比如linux、vista和symbian，都是各自领域的专家贡献的，非常专业。", "marks": "力荐"}
{"content": "和刘志斌讲得差不多嘛 ", "marks": "推荐"}
{"content": "看了前八九章。书很好，真的，翻译的部分地方觉得不是太好。我是对照原版书看的，真的是好书啊。看的部分是操作系统最经典的一些理论，后面的包括分布式多处理器的一些高端东西，没有看。后来介绍几个操作系统的章节应该很有价值，书到期了，就还了。以后在补了。", "marks": "力荐"}
{"content": "多读几遍，会有新的发现与感受", "marks": "力荐"}
{"content": "#读万卷书行万里路#借此评价在读教材，英文经典读物，毕竟翻译版，错误处时有，包括注释后的分号，以及伪文件等术语翻译。感谢译者，希望再版语言更流畅以及本地化。", "marks": "力荐"}
{"content": "OS课应该是实践出真知", "marks": "推荐"}
{"content": "这本书的前面对操作系统中内容的讲解很好，基本都会有例子，但是后面几章在讲解实际的操作系统的时候反而讲解的不是很清楚，对于概念只是一笔带过，没有详细解释。如果没有对操作系统本身的理解，后面几章看起来很吃力，而且不一定能懂。总的来说还是本不错的书，看看前面几章基本就够了，后面写的比较泛泛。", "marks": "推荐"}
{"content": "tanenbaum一贯的啰嗦，入门还是不错的", "marks": "推荐"}
{"content": "例子很多，个人觉得写的比 Concept of Operation 好", "marks": "力荐"}
{"content": "这本是实验室重点推荐的书，但由于我短浅的见识忽略到现在，之前我一直认为，不怎么了解操作系统而直接啃这本书有点打击人的自信心，现在看来是错的。前几章对概念的讲解还是比较明白的，但我觉得还不够深入，可能更深入的就是深入到代码了吧，反正这本书无法满足我对操作系统的好奇，字体太小可能是个问题，导致看起来很复杂的样子，其实不然，认真看还是比较基础的。我对操作系统的好奇不仅仅因为操作系统的魅力，还因为操作系统了太多的经典算法和精巧实现，大工程项目的管理，哲学思想，包含了太多前辈的心血，如果能够有效学习，在以后大工程项目当中都可以有用武之地，好好学习操作系统，借鉴其思想应用到其他地方，解决更多人们生活中问题。", "marks": "力荐"}
{"content": "例子太久了希望有Android和iOS", "marks": "推荐"}
{"content": "这个需要多读几次", "marks": "力荐"}
{"content": "课本～～～～ 深入不浅出啊，各种算法都讲得很详细，尤其是Linux和Windows都用到的鸵鸟算法～～～～", "marks": "推荐"}
{"content": "看了主要部分", "marks": "推荐"}
{"content": "这套书都相当好.", "marks": "力荐"}
{"content": "Tanenbaum这本书和他的《操作系统设计与实现》有很多相同的内容，不过这本讲得更细、更精致。", "marks": "力荐"}
{"content": "基本上涉及了一部電腦的各個軟件方面，是一本大部頭……總的來說，是什麼都有。", "marks": "推荐"}
{"content": "中文的读了一半，忍不了了，像吃屎一样，果断入手英文版了", "marks": "推荐"}
{"content": "很好的综述，不过有些名词翻译别扭，如果有一定了解的话读起来还是挺不错的。", "marks": "力荐"}
{"content": "os理论经典", "marks": "力荐"}
{"content": "概念讲解得非常到位，比如说讲消费者&生产者模型，讲银行间算法等，有图有代码。最后还分别介绍linux、windows、symbian系统，但symbian已经不再了。", "marks": "力荐"}
{"content": "终于啃完了！！", "marks": "力荐"}
{"content": "翻译的相当好，经典读物", "marks": "力荐"}
{"content": "对小白很友好。翻译有点像是在google机翻的基础上改的，09年出版的，没能涉及ios和android也有点遗憾。草草过了一遍，为明年笔试占坑。", "marks": "力荐"}
{"content": "书中的代码不错，配合着代码看还是很好理解的。", "marks": "力荐"}
{"content": "操作系统概念和理论，没有操作系统精髓和设计原理讲得细，不过挺全的", "marks": "力荐"}
{"content": "基本还算深入浅出，非IT专业爱折腾系统的人也可以读读，对理解电脑这个天天见的小伙伴的内心世界很有帮助", "marks": "力荐"}
{"content": "权威作者，内容也很经典，可惜翻译很一般。", "marks": "推荐"}
{"content": "在看过的几本里面算最好的了。", "marks": "力荐"}
{"content": "先分析操作的功能、组成、实现，然后比较不同操作系统的实现和差异，最后提供操作系统以及大型软件的开发建议", "marks": "力荐"}
{"content": "翻译差", "marks": "推荐"}
{"content": "当初读了，好多没懂，但是感觉知识点应该很全，应该以后反复读的。", "marks": "推荐"}
{"content": "赞，描述的很清晰", "marks": "力荐"}
{"content": "内容不错，翻译问题太多；虽然参与翻译是我老师，但也不得不说这翻译确实不行，必须有英文版备查", "marks": "还行"}
{"content": "理论一大篇，可以结合操作系统设计与精髓互相补充。", "marks": "推荐"}
{"content": "看了前六章，大赞第二章，感觉第六章有时间还的看看", "marks": "力荐"}
{"content": "觉得不如想象中的好，作者固然把现代各种操作系统的概念以及设计始末讲到了，但是概念众多，许多内容重叠部分容易混淆 。好在最后几章结合了三种系统实例阐述概念。我想大概是因为这本书内容量对初学者多了点，而我也只匆匆一览。", "marks": "还行"}
{"content": "经典之作。", "marks": "力荐"}
{"content": "2012.04.28 ~ 2012.09.02 终于看完一本操作系统的经典书籍了，虽然只是粗读一遍，但很多萦绕在脑中的模糊的概念全部变得清晰了起来", "marks": "力荐"}
{"content": "初学不推荐。", "marks": "推荐"}
{"content": "封面太可爱了！线程、图形界面、网络、多处理器以及OS设计的章节讲得很清晰，书中还有各种八卦故事，另外塔神幽默风趣的风格一如既往。如果推荐操作系统理论，这本是No.1", "marks": "力荐"}
{"content": "偏理论的东西，介绍的还是很详细的", "marks": "推荐"}
{"content": "我的操作系统的入门书，很好的书", "marks": "力荐"}
{"content": "【学术教材类补完计划】有机会会拜读原书全本", "marks": "力荐"}
{"content": "如果再版，会讲android吧？最后部分的“阅读资料和参考文献”是亮点。", "marks": "推荐"}
{"content": "需要再读", "marks": "推荐"}
{"content": "不得不说，学完操作系统和体系之后，觉得自己算是个科班的计算机系学生了。", "marks": "力荐"}
{"content": "当初上学没好好看的我真是SB……这本书根本就是超好！！！字里行间能感受到Tanenbaum大师风度", "marks": "力荐"}
{"content": "唉- -不知道读懂了没有", "marks": "力荐"}
{"content": "应该早点读的..也不用自己花那么多时间看垃圾教材了...相恨见晚啊...\n尤其是对Linux的解剖,真是写得好啊!!!!", "marks": "力荐"}
{"content": "课本是必须读的，文风幽默", "marks": "力荐"}
{"content": "太喜欢这本书了", "marks": "力荐"}
{"content": "复习一下操作系统 还要加强实践", "marks": "推荐"}
{"content": "很好的操作系统入门书，虽说是入门但里面涉及的知识面也相当广，能吸收一半已不错", "marks": "推荐"}
{"content": "读了这本书，对操作系统了解了很多。读了这本书 就像是练了九阳神功，以后练什么都会更快一些。基础课程必选 必读 严重推荐", "marks": "力荐"}
{"content": "最后几章没读，很详细。", "marks": "推荐"}
{"content": "入门级教材，读完一遍还有一些点不懂啊", "marks": "力荐"}
{"content": "书肯定是好书，但是这翻译错漏的地方真的很多啊，有些地方真的要找英文版看原文才能理解清楚。扣的一分给翻译。", "marks": "推荐"}
{"content": "作者写作水平非常高，复杂的内容也能写的妙趣横生，读着读着有点上瘾，而且夹带许多有趣的哲学观点", "marks": "力荐"}
{"content": "言辞幽默，但感觉过于随意，不如典型教材一样严谨", "marks": "推荐"}
{"content": "每章几乎都是由不同人来翻译的，第11章简直不堪入目。。", "marks": "推荐"}
{"content": "详细", "marks": "力荐"}
{"content": "中英文对照着看的，翻译错误好多，能不看翻译版就不要看了吧。而且有第四版了，更新了很多东西，去看英文第四版吧", "marks": "还行"}
{"content": "翻译得太别扭了，一本好书被翻译搞烂了。、", "marks": "推荐"}
{"content": "技术书写成这样真是让人佩服，一点都不枯燥。非常好看，受益良多，尤其是计算机领域发展相似性这一观点甚为精辟。", "marks": "力荐"}
{"content": "正看着，深感自己基础之薄弱……", "marks": "力荐"}
{"content": "非常好的书，和cssap内容不同，两本都应该看", "marks": "力荐"}
{"content": "原版很好，两星给翻译，贱人们又成功毁掉了一本", "marks": "较差"}
{"content": "翻译属典型的直译，而且存在低级错误，译者态度有问题。不过还可以看，建议对照阅读。原书满分", "marks": "推荐"}
{"content": "快读完了，接下来就该读特定操作系统(没错就是你linux)的书了", "marks": "力荐"}
{"content": "Tanenbaum - 系统领域的教父，神著。", "marks": "力荐"}
{"content": "操作系统基本概念", "marks": "力荐"}
{"content": "觉得中文版不如操作系统概念,可能是翻译和排版的原因", "marks": "推荐"}
{"content": "思路清晰简单，一本书还能有什么更高的要求。。", "marks": "力荐"}
{"content": "操作系统通用读物", "marks": "力荐"}
{"content": "很清楚，但是没有更多的收获", "marks": "还行"}
{"content": "各方面讲的比较细致", "marks": "推荐"}
{"content": "这本书的评价很高，第一次接触操作系统就直接上手的这本书。感觉不是非常合适。推荐入门操作系统的朋友可以先看《操作系统：精髓与设计原理》把概念搞清楚再来读这本书的会更好一些", "marks": "力荐"}
{"content": "教材,其实这书很好,可惜我考试前那几天才能知道,呵呵~", "marks": "力荐"}
{"content": "操作系统领域权威的书籍。该书作者是MINIX OS的设计者。值得一看。", "marks": "力荐"}
{"content": "本科OS时用的教材", "marks": "力荐"}
{"content": "中文版翻译差了点", "marks": "推荐"}
{"content": "挑选了一部分章节进行阅读，写得比较晦涩，冷笑话不少，没真正写过操作系统光看书还是不够啊", "marks": "推荐"}
{"content": "没能坚持读完。。只读过进程一部分。。不过真心是本操作系统方面的好书", "marks": "力荐"}
{"content": "被翻译毁了", "marks": "还行"}
{"content": "有些内容还是太深奥，没看懂", "marks": "推荐"}
{"content": "果然是操作系统教材中的经典之作，受益匪浅，翻译水平也是很高的。", "marks": "力荐"}
{"content": "扣掉的一星为有点糟糕的翻译。", "marks": "推荐"}
{"content": "这是看过讲解的最详细的操作系统书籍（虽然没有看几本- -!），而且理论联系实际，风格像C++ Primer", "marks": "力荐"}
{"content": "大概没有更通俗的OS教材了，抽象的理念贯穿始终，入门级。", "marks": "力荐"}
{"content": "看了三四遍了，翻译还是有点牵强，准备去看英文版，不过书的内容真心不错，os入门推荐", "marks": "力荐"}
{"content": "内容充实，语言幽默。注意看封面，一定要看封面", "marks": "力荐"}
{"content": "全书过了一遍，此书可以说是os的百科全书，佩服作者的博学。当然面的广泛覆盖必然导致有些地方不够深入，作者也列出了很多其他资料让读者深入阅读。", "marks": "力荐"}
{"content": "一本好书，没读完就已经感觉到它的强大了。程序都是运行在操作系统之上，了解操作系统，很多编程方面的知识就能融会贯通了！", "marks": "力荐"}
{"content": "不错，北大用的教材。。。", "marks": "力荐"}
{"content": "这版太老了，跟第 4 版差了 7 年（2008->2015）；里面还讲 windows vista 和塞班。新版更新为 Win8 和 Android，还有多核系统跟虚拟化等等。／／读完，只能了解一些概念，具体的实现仍然不明瞭。", "marks": "还行"}
{"content": "把操作系统的基本概念讲解的足够通俗易懂", "marks": "力荐"}
{"content": "强烈建议读原书第四版，内容修改，加了对win8和安卓的讲解。最重要的，只有原版才能把想表达的意思表达清楚了。开始我读中文版，总感觉表达不清楚，看了英文版才明白，有些地方翻译的真是南辕北辙词不达意。我会告诉你英文第四版各种pdf，mobi都齐全，还是带完整书签不到十兆的文字版吗", "marks": "力荐"}
{"content": "真是不可多得的好书。 书中对操作系统的讲解深入浅出。我没有水平去评论这一本书 只能给予由衷的赞美。", "marks": "力荐"}
{"content": "只看了部分章节:进程与线程，内存管理，文件，Linux示例讲解", "marks": "推荐"}
{"content": "非常全面，算法很多", "marks": "力荐"}
{"content": "书是好书，翻译像屎一样", "marks": "还行"}
{"content": "学校教材的中译版，大神之作，经典永恒，值得一直学习", "marks": "力荐"}
{"content": "better than the operating systerm concept", "marks": "力荐"}
{"content": "翻译很差", "marks": "还行"}
{"content": "译者太烂！！", "marks": "很差"}
{"content": "这本书前前后后看了大概三遍，“没有一次是系统的看完的”，理解的不是很透彻;我会继续读下去的 ", "marks": "力荐"}
{"content": "操作系统课程教材，很好的书。涵盖面广", "marks": "力荐"}
{"content": "看了约1/4就不知道丢哪里去了", "marks": "较差"}
{"content": "说句实在话程序员真的是一期不如一期了，连合订本也是。", "marks": "推荐"}
{"content": "56", "marks": "还行"}
{"content": "没原来好了", "marks": "还行"}
{"content": "和犀牛书比起来，这一本更适合拿来入门，支撑了我从后端开发转型前端开发的全过程，令我对 JavaScript 使用中那些令人困惑的地方有了更好地理解，不过 Web 世界变化太快，书中的部分内容倒是显得有点过时了，这也是书本难以避免的问题吧，改版的速度跟不上技术的变化。因此推荐阅读的时候结合当前趋势，不必全部通读。", "marks": "力荐"}
{"content": "啰嗦部分占三分之一   有关兼容ie部分占三分之一  剩下的就是这本书精华了", "marks": "推荐"}
{"content": "胜在够全面，但无论从细节方面和可读性方面都没有犀牛书好。尤其在对象的讲解上，和犀牛书差的不是一点半点。作用链倒是讲得比犀牛书简洁明了。这本书和Andrew S. Tanenbaum 那本《计算机网络》一样，在国内都是过誉了，原因大概是两本书正好出现在了同类优秀书籍在国内相对匮乏的时代。", "marks": "还行"}
{"content": "被抓壮丁去做UI，接下来几个月可能就折腾javascript和CSS了……", "marks": "推荐"}
{"content": "翻翻，感觉怎么好是五年前的老内容呢。", "marks": "还行"}
{"content": "第二版五年前已经看过了，所以第三版看起来很快~这真的是最经典的JavaScript书，第二次看，还是感叹其中的思想，很多直击JavaScript的核心，但是需要你自己有很扎实的基本功，也确实如同很多人所讲，它真的不是一本入门书。", "marks": "力荐"}
{"content": "这可能是今年买的唯一一本技术书....", "marks": "力荐"}
{"content": "很不错，全面，深入，文笔也很好", "marks": "力荐"}
{"content": "真心觉得比犀牛书好，也有可能是我后看的原因？", "marks": "力荐"}
{"content": "前端程序员入门到提高必读", "marks": "力荐"}
{"content": "挺糟糕的", "marks": "较差"}
{"content": "本书是JavaScript超级畅销书的最新版!", "marks": "力荐"}
{"content": "感谢这本参考书目", "marks": "力荐"}
{"content": "#纸质书# 工具书，还不错啦~但是对我最感兴趣的部分说的不详细啦。。。", "marks": "还行"}
{"content": "用js的语法套面向对象感觉就跟用铲子切菜一样……", "marks": "推荐"}
{"content": "JavaScript最基础的书籍，要看认真，慢慢地看，累计接近1000小时吧。而且对象与继承，性能优化，HTML5 api由于没有实践或缺乏代码阅读量导致看的很糊涂，不过以后可以遇到时再翻翻，或者看更专业的书。", "marks": "力荐"}
{"content": "又厚又老……", "marks": "还行"}
{"content": "加入更多针对HTML5内容", "marks": "推荐"}
{"content": "全面，确实要多看几遍才行啊。。。", "marks": "力荐"}
{"content": "当工具书可以。入门不适合。", "marks": "较差"}
{"content": "因为这本书讲得有些繁琐啰嗦，所以看第一遍的时候有些不好啃，但有了重点之后再看第二 三遍就清晰多了，知识点也很全面", "marks": "力荐"}
{"content": "虽然有点啰嗦，但是很全，很适合打基础，有时候还能拿来做参考手册，非常不错\n", "marks": "力荐"}
{"content": "看完目录发现上次阿里的面试一小半问题出自此书。。。", "marks": "力荐"}
{"content": "比JS权威六版好学，这本更人性", "marks": "力荐"}
{"content": "再读高程", "marks": "力荐"}
{"content": "JavaScript学习必读，详细解释了JavaScript的工作原理。", "marks": "推荐"}
{"content": "👍", "marks": "力荐"}
{"content": "有的翻的好啰嗦只能去看原文理解本来就不复杂的文字逻辑，内容上有些益处不大的内容篇幅反而占了太多，看了半天，告诉我说其实这个方法因为太烂已被废弃，逗我呢！大体的看一下有个轮廓吧，受人推荐，我去看下 good parts 那本提炼下可能靠谱点", "marks": "还行"}
{"content": "翻第二遍估计书得烂掉 ", "marks": "力荐"}
{"content": "非常系统 紧跟潮流 新手老手都值得好好读一读", "marks": "力荐"}
{"content": "内容充实，一本非常好的入门书。", "marks": "力荐"}
{"content": "每一次重温数据类型篇章都有新的认识", "marks": "力荐"}
{"content": "习前端者，必读此书也。2014年初，粗读一遍；同年秋，读第二遍。获益匪浅。仍有必要读第三遍也。", "marks": "力荐"}
{"content": "真的，太好了，js圣经不为过，走马观花的看了五个月(5.27-10.24)，拖拖拉拉才看完。非常有必要仔细再读一遍。", "marks": "力荐"}
{"content": "内容很新，讲得也比较透彻，算是没白放血...", "marks": "推荐"}
{"content": "js一统天下的环境下，用来掌握ecmascript的用法不错，dom和bom部分没太仔细看", "marks": "推荐"}
{"content": "最佳入门书", "marks": "力荐"}
{"content": "写的很清楚啊", "marks": "力荐"}
{"content": "读不动了，javascript入门这本是神书，但是浏览器兼容什么的实在太坑，非专业前端想想还是算了。。。", "marks": "力荐"}
{"content": "1-8 10-14 20 21 8及以后多为粗看", "marks": "力荐"}
{"content": "前端程序员必读，能少走很多弯路", "marks": "力荐"}
{"content": "仔细读了前七章，面向对象的部分比较难理解，还需要重新读下；后边的章节，都是在讲浏览器的范畴内的技术，只是大概了解下。", "marks": "推荐"}
{"content": "走马观花。。", "marks": "力荐"}
{"content": "一定要读第N次", "marks": "力荐"}
{"content": "【Nth刷，2017.02】JavaScript圣经。断断续续看了大半个月，还是觉得好难啃，每次看都觉得还是有很多不懂。以后还是经常刷吧~", "marks": "推荐"}
{"content": "前端必备  多看几遍啊", "marks": "力荐"}
{"content": "这本看了一个多月，讲的很详细，这一本基本就够用了，里面重要的内容值得多看几遍", "marks": "力荐"}
{"content": "果然够全", "marks": "力荐"}
{"content": "这才入了门", "marks": "力荐"}
{"content": "不算过时吧，适合想对JavaScript有个全局概念的人读。", "marks": "推荐"}
{"content": "许多地方其实还是一笔带过。", "marks": "还行"}
{"content": "五颗星不够用了啊", "marks": "力荐"}
{"content": "经典的JS入门书籍", "marks": "力荐"}
{"content": "非常好的书，由浅入深的讲解JavaScript各个知识点和特性，以及一些较高级的方法和技巧，同时对于跨浏览器的JavaScript编程这块讲的比较好，值得多看几遍~", "marks": "力荐"}
{"content": "备查", "marks": "力荐"}
{"content": "长篇大论，但有些有意思的地方写得不是很好懂。比如对闭包的介绍就写得不够清晰。", "marks": "还行"}
{"content": "准备面试的过程陆陆续续看了一大部分，很适合入门。闭包没有讲太清楚。如果全能记住面试肯定不是问题，然而背不住。。。", "marks": "推荐"}
{"content": "草草读完了一遍，跟definitive guide一样要放在电脑边上，多读多有收获", "marks": "力荐"}
{"content": "10分！作为教材，远胜过适合做字典的犀牛书，和水的不行的《JavaScript DOM编程艺术》。详略抽象级别非常合适！//其它章节翻译不错，但第六章除外", "marks": "力荐"}
{"content": "果然人家推荐的书讲的就是好...", "marks": "力荐"}
{"content": "不愧是是经典。。。", "marks": "推荐"}
{"content": "学习JavaScript的好书", "marks": "力荐"}
{"content": "深入浅出啊", "marks": "力荐"}
{"content": "端午节４天假，重新看了一遍，很全面，但是有些知识已经老了。", "marks": "推荐"}
{"content": "怎么形容呢：大概就是看的时候醍醐灌顶，出bug了一脸懵逼", "marks": "力荐"}
{"content": "如果说《Javascript权威指南》值5颗星，这本书该值6颗。体量这样厚的一本书，讲解起对象创建继承、函数作用域包括闭包等重点知识点却是深入浅出，没有类型书中的通病；整书编排翔实、条理分明、重点突出，实在是不可多得的JS进阶书。", "marks": "力荐"}
{"content": "权威，百科全书式的详细", "marks": "力荐"}
{"content": "基本上我能够理解的我都看了一遍。不懂的理解不了的先跳过，以后有疑问再翻。也自己写了些脚本来实践。书很厚，内容很多，选择性的看吧。", "marks": "推荐"}
{"content": "此类书籍第一读最好是略读，之后再针对性的精度。\n蛮喜欢作者的写作方式，先解释再给出实例代码。\n希望早日出第四版吧。", "marks": "力荐"}
{"content": "适合纯新手入门！另外借此感慨一下：回过头来看，JS是如此松散的弱类型语言，如果不制定一套具有严格规范约束的框架，很难想象如何进行中等以上项目的开发。", "marks": "还行"}
{"content": "从第 2 版读到第 3 版，JavaScript 比想象中博大而精深的多", "marks": "力荐"}
{"content": "Javascript入门进阶必读之书。", "marks": "力荐"}
{"content": "据说前端必读", "marks": "推荐"}
{"content": "居然没有讲模块化、AMD规范、require.js", "marks": "还行"}
{"content": "某些地方写的有点啰嗦，有些知识点有点旧了", "marks": "推荐"}
{"content": "js值得读的图书，另外还有一本《The Good Parts》。js各种坑，建议去学TypeScript和jQuery", "marks": "还行"}
{"content": "看完这本算入门了", "marks": "推荐"}
{"content": "大部头能给人以安全感，事无巨细无死角。", "marks": "力荐"}
{"content": "非常不错的JavaScript入门书籍。我看的是第3版本。代码有些印刷瑕疵。补充了很多的JS基础知识。", "marks": "推荐"}
{"content": " 需反复读至少三遍 ", "marks": "推荐"}
{"content": "随时翻来看看就好了", "marks": "推荐"}
{"content": "部分遗留", "marks": "推荐"}
{"content": "名副其实。内容好，逻辑顺，翻译准", "marks": "力荐"}
{"content": "上半年一直在看, 终于特么看完了. 讲得比较全面, 也挺深入, 力荐!", "marks": "力荐"}
{"content": "粗读", "marks": "推荐"}
{"content": "js入门可以看，不要被高级两个字唬到了。我看了前七章，对js语法有了很多的理解，但是高级的还是无法理解，应该还是用的不是很多，不是很能理解。慢慢来。ECMAScprit好像最高去到了5，少了6，下一本读阮一峰的，加油。", "marks": "推荐"}
{"content": "工具书", "marks": "推荐"}
{"content": "早就慕名了，之前只是基本的使用，没有这样全面详细的去学习JavaScript，看过其他相关的书籍，这本是最好的JavaScript。", "marks": "力荐"}
{"content": "适合有编程基础，并且略懂 HTML/CSS 的程序员入门 JavaScript。可参照 http://javascriptissexy.com/how-to-learn-JavaScript-properly/ 上的 roadmap 和练习来安排阅读。", "marks": "推荐"}
{"content": "javascript入门书籍，看了最久的是第六/七章（面向对象的程序设计/函数表达式），第二十一章的Ajax/Comet学到一些跨域知识，第二十二章的高级技巧很特别，利用setTimeout实现数组分块遍历(Yielding Processing)，利用clearTimeout实现函数节流(throttle)等", "marks": "推荐"}
{"content": "一看看一天。。。", "marks": "推荐"}
{"content": "如果能把 IE 相关的内容去掉，再把 web API 的部分充实一下，那就更好了。", "marks": "推荐"}
{"content": "读完这本才发现我根本不懂web", "marks": "力荐"}
{"content": "找时间重新阅读阅读", "marks": "力荐"}
{"content": "觉得这本学习，搭上犀牛书做参考，可以完成80%的工作了", "marks": "力荐"}
{"content": "好书，前几章完全看不懂@_@", "marks": "力荐"}
{"content": "读完不易，收获不少，底层的东西知道不少，又可以拿出去吹牛逼，真好。😂", "marks": "力荐"}
{"content": "终于把这本经典读过了。", "marks": "力荐"}
{"content": "就买这本，足矣。", "marks": "力荐"}
{"content": "M ", "marks": "还行"}
{"content": "第一次看这么厚的技术书。翻译的不错，涉及到了网站开发的方方面面，回头看看曾经写过的js代码，性能是多么的糟糕。", "marks": "力荐"}
{"content": "嗯，两星期，700多页，全面熟悉。", "marks": "力荐"}
{"content": "我的入门书", "marks": "推荐"}
{"content": "《javascript高级程序设计与IE8及更早版本兼容性解决方案》", "marks": "力荐"}
{"content": "认真读过，不过以后估计不会做前端。", "marks": "力荐"}
{"content": "最近免不了多翻翻", "marks": "力荐"}
{"content": "读过，因为这学期学了网易前端微专业", "marks": "还行"}
{"content": "一遍不够 还是需要时常复习一下 基础知识都在里面", "marks": "力荐"}
{"content": "即使你定义只接受收两个参数，但可以传递一个三个甚至不传参，而解析器永远不会有什么怨言。———令人感动…………", "marks": "力荐"}
{"content": "值得再啃一遍", "marks": "力荐"}
{"content": "绝对好书。很详细。很深入。", "marks": "力荐"}
{"content": "感觉适合作为工具书。。。只说了怎么做，深入的东西都是点到即止，有点越看越糊涂。", "marks": "还行"}
{"content": "come on.", "marks": "力荐"}
{"content": "又看了一遍。期待第4版。", "marks": "力荐"}
{"content": "挺好的一本书，读第二遍了。说实话，第一遍读的时候走马观花囫囵吞枣，没有认真的读，收获不太。写了一段时间的js后再来看这本书，收获了很多", "marks": "力荐"}
{"content": "最好的 JavaScript 入门书籍！", "marks": "力荐"}
{"content": "入门提高必备", "marks": "力荐"}
{"content": "前端开发工程师必读", "marks": "力荐"}
{"content": "查看查看", "marks": "力荐"}
{"content": "没看完，这是一本看一遍两遍都不够的书。为Zakas疯狂打call一万年。", "marks": "力荐"}
{"content": "JS", "marks": "力荐"}
{"content": "清晰、透彻，讲清了关键部分，好书最重要。", "marks": "力荐"}
{"content": "这才是好书啊，原理，历史，底层，入门帮你讲得一清二楚。", "marks": "力荐"}
{"content": "一本全面了解JavaScript的书，基础+事件，一本好的工具书。", "marks": "力荐"}
{"content": "去年买的第一本技术书", "marks": "力荐"}
{"content": "入门级读物", "marks": "还行"}
{"content": "如果学js只有一本书可看，那就不用想选这本书，，如果读完了意犹未尽，该读读你不知道的javascript；犀牛书太厚，知识点碎。", "marks": "力荐"}
{"content": "= =想死+1", "marks": "推荐"}
{"content": "后面一些章节没读。\nZakas的文风很好，实在是我等初学者的福音", "marks": "推荐"}
{"content": "我的红宝书 么么哒", "marks": "力荐"}
{"content": "还得重读，有些感念和api一扫而过。单页收获颇丰，老大说要跟es6了，复习下再出发", "marks": "力荐"}
{"content": "关于JavaScript中的原型和常见的几种面向对象编程的手法，以前一直都不是理解的很清晰，看了这本书之后，这个地方马上就明白了。整体上是一本很好地书，可惜我看的第三版翻译的稍显失色。", "marks": "力荐"}
{"content": "我的第一本图灵书和前端启蒙书，现在偶尔还会翻翻", "marks": "力荐"}
{"content": "JS权威指南是手册的话，JS高级程序设计的可操作性更高，工作中可能仅仅会用到其中的几部分，不同的阶段回顾这本书，都会有意想不到的理解和发现", "marks": "力荐"}
{"content": "翻译的还行", "marks": "推荐"}
{"content": "工具用书\n", "marks": "力荐"}
{"content": "嗯必读", "marks": "力荐"}
{"content": "红宝书的称号绝对不是盖的。", "marks": "力荐"}
{"content": "略显枯燥的大全级别书籍，让我想起了HTTP权威指南，推荐但我想我看不完了。", "marks": "推荐"}
{"content": "全面", "marks": "力荐"}
{"content": "过了一遍。", "marks": "推荐"}
{"content": "看了前面一半，后面的dom2,ajax翻了一下。", "marks": "力荐"}
{"content": "值得反复去读的经典", "marks": "力荐"}
{"content": "1) JS跟python已经不能更像了 2)goto语句早就被嫌弃，不知道为什么label还会出现 3)Array跟其他语言相比简直是个奇葩，不过好好用 4)例子给的不好，越到后面越读不下去了。。", "marks": "还行"}
{"content": "这本书给我带来很大提升，如果能有一个手册性质的附录就完美了。", "marks": "力荐"}
{"content": "副标题应该是 ECMAScript Spec for Human. 这一类书的通病是没有清晰的主干, 思路非常诡异, 搭配 good parts 有奇效", "marks": "推荐"}
{"content": "英语词典一样，详细又乏味", "marks": "推荐"}
{"content": "书是好书，翻译的语句还算通顺，但翻译的小错误很多，有些和英文版的意思完全不一样，甚至相反", "marks": "推荐"}
{"content": "讲得清楚，比较透彻。", "marks": "力荐"}
{"content": "只看了JS语言特性部分，讲得太透彻了，特别是原型链章节。把JS的原型链，闭包、作用域概念搞明白，可以算入门了。", "marks": "力荐"}
{"content": "JS红宝书，搞前端基本人手一本，书中最需要理解的还是关于函数、继承的那两章，后面的章节其实读起来也快的。技术书籍就得连续长时间阅读，这样会越读越快，理解书本的速度也会快起来！", "marks": "推荐"}
{"content": "进阶好书,话太多,不适合入门*3,最好做过些东西看这个很有感触", "marks": "推荐"}
{"content": "  讲的基础比较好  深入浅出  学习  ", "marks": "推荐"}
{"content": "重新系统的认识了这门语言。脚本代码乱不是因为语言，而是我们还没掌握好它", "marks": "力荐"}
{"content": "ajax polling, comet和advanced part有所收获", "marks": "还行"}
{"content": "不错，不过标准老了", "marks": "推荐"}
{"content": " 讲的很系统，又很多之前根本没听说过的知识，如果有时间，建议通读", "marks": "推荐"}
{"content": "本科上软件测试课用的课本", "marks": "推荐"}
{"content": "翻译太差……", "marks": "较差"}
{"content": "此书是经典，我个人意见啊！\n测试的离散数据基础，已经使用原则的原因讲的非常详细，一直认为测试对象，无论黑盒白盒灰盒没有本质的区别，此书正好说明了此想法。\n\nsed:单缺陷猜测与多缺陷猜测的基础可以准备写一篇论文了 list一下", "marks": "力荐"}
{"content": "比较理论的一本书，没有读完。", "marks": "还行"}
{"content": "考试前三天看完了，可是考得基本都是概念", "marks": "还行"}
{"content": "概要性的了解一些基本的测试技术", "marks": "推荐"}
{"content": "需要比较扎实的数学功底。这是一本专业性及技术性很强的书，不建议初学者看", "marks": "还行"}
{"content": "软件测试在软件构建活动中究竟应该是什么角色，目前还没有定论。这本书倒是给出了很多值得借鉴的实践活动", "marks": "推荐"}
{"content": "理论性比较强，入门者看懂不太容易", "marks": "推荐"}
{"content": "简单易读懂的一本算法和数据结构书。如果你只想读一本算法书，那就读这本。", "marks": "推荐"}
{"content": "这个厚度的书覆盖面如此广和深确实很见作者功力，但仍难免经常语焉不详。不得不说在让行文尽可能晦涩难懂这个目标的达成上翻译同学又立了大功。", "marks": "推荐"}
{"content": "上数据结构课的时候买的, 一直没有完整看, 找实习的时候翻一翻, 校招的时候翻一翻", "marks": "力荐"}
{"content": "看得其实是英文版，比算法导论比起来有信心的多。", "marks": "力荐"}
{"content": "挺枯涩的，总觉得翻译有些别扭……", "marks": "还行"}
{"content": "中规中矩的书。", "marks": "推荐"}
{"content": "速读了一遍，还是觉得《C算法(第一卷:基础、数据结构、排序和搜索)》好！", "marks": "还行"}
{"content": "看做excel，acess数据库就行了：表--关系--查询（问题）--修改数据库（类型 属性 关系）", "marks": "还行"}
{"content": "这才是经典，聪明人玩的东西。比王晓东的简单点", "marks": "力荐"}
{"content": "没能坚持读下去。", "marks": "还行"}
{"content": "程序入门", "marks": "力荐"}
{"content": "抛开图没看。。", "marks": "推荐"}
{"content": "编不粗来。。。", "marks": "推荐"}
{"content": "主要了解各种数据结构和算法的定义和描述。基本编程练习可以在leetcode完成。", "marks": "推荐"}
{"content": "algorithm", "marks": "力荐"}
{"content": "虽然不如算法导论之类的全,但不失为一本好书,办公室桌面常备.", "marks": "力荐"}
{"content": "好难，看不懂，我好蠢啊！", "marks": "力荐"}
{"content": "待读。", "marks": "推荐"}
{"content": "很早以前的书了", "marks": "推荐"}
{"content": "大二学算法的时候看的书之一", "marks": "力荐"}
{"content": "算法技巧部分有点挠头。。", "marks": "力荐"}
{"content": "这什么翻译……", "marks": "还行"}
{"content": "大致看了下，跳过图论、摊还分析、高级数据结构后面几章....总的来说，非常不错，常用的数据结构在做题的时候可以适当参考下....后面章节过于高级，暂时不看了...XD", "marks": "推荐"}
{"content": "中译版的翻译太TM渣了", "marks": "还行"}
{"content": "就这样吧，大学时候为了自学算法买了一本书... 放家里一直没看完...", "marks": "力荐"}
{"content": "太注重分析了，本来打算通过这本书普及一下算法常识，结果看不太懂", "marks": "还行"}
{"content": "翻译的不太好……", "marks": "还行"}
{"content": "书很不错，例子，思路，语言都很有帮助", "marks": "力荐"}
{"content": "没什么用，重新浏览一下", "marks": "还行"}
{"content": "其实我觉得国内的书写得也不错...关键看你怎么看.数据结构又不是啥大问题,国内人写的书不至于会出现学术错误.所以看啥都一样...关键是你自己要怎么看", "marks": "力荐"}
{"content": "M", "marks": "还行"}
{"content": "from bottom to up ,first in last out ，好复杂好复杂的堆栈列表", "marks": "推荐"}
{"content": "值得一看。相当经典的算法书。", "marks": "力荐"}
{"content": "也就是改版的另一种", "marks": "力荐"}
{"content": "感觉比算法导论讲的深入", "marks": "力荐"}
{"content": "翻译有的句子觉得不大清楚", "marks": "推荐"}
{"content": "好书。", "marks": "力荐"}
{"content": "比清华严蔚敏那本好太多了", "marks": "力荐"}
{"content": "这本讲算法的虽然只有300多页，比不上算法导论那样的大部头，不过讲了许多的算法设计技术，对我的启发很大，整本书的信息量很大，好好研读，定会有较大收获。以我这囫囵吞枣的看法，看一遍是远远不够的，好多已经忘了，有空多翻翻吧，翻多了，自然记忆就深刻了", "marks": "力荐"}
{"content": "基础", "marks": "力荐"}
{"content": "让我们来平衡这棵树", "marks": "力荐"}
{"content": "读了大部分……", "marks": "力荐"}
{"content": "经典读物", "marks": "力荐"}
{"content": "数据结构经典书，薄薄一本，虽然还有其他语言版，但还是C语言版最好", "marks": "力荐"}
{"content": "例子代码写的非常好", "marks": "力荐"}
{"content": "这本书不错，许多高级的数据结构我都没仔细看，找时间再认真看一下。", "marks": "力荐"}
{"content": "4m => 2 => 1\nclrs的辅助书.", "marks": "力荐"}
{"content": "教材", "marks": "力荐"}
{"content": "原来我们课本这么好啊。。。mmd 姐姐才考75", "marks": "力荐"}
{"content": "1.上大学到现在，至今都没看完", "marks": "力荐"}
{"content": "看原版看原版看原版", "marks": "推荐"}
{"content": "很适合算法入门的书", "marks": "力荐"}
{"content": "记得这是我数据结构和算法的启蒙书，整体风格简洁漂亮", "marks": "力荐"}
{"content": "实用清晰 翻译也不错", "marks": "力荐"}
{"content": "很多c的代码，如果完全敲一遍，数据结构和算法都会有很大提高", "marks": "力荐"}
{"content": "感觉很一般啊", "marks": "推荐"}
{"content": "很好！", "marks": "力荐"}
{"content": "力荐！和《算法导论》比，各有优劣，这本书侧重与数据结构和算法的结合，《算法导论》更侧重与算法和理论。我更喜欢这一本。", "marks": "力荐"}
{"content": "很适合初学者的一本书，建议国内不要用严蔚敏的东西了，严蔚敏写的实在很烂", "marks": "力荐"}
{"content": "最适合本科生阅读的一本数据结构著作", "marks": "力荐"}
{"content": "大学时候读过的书。。。已然忘得差不多了", "marks": "推荐"}
{"content": "简明易懂，深入浅出，20世纪顶尖的30本计算机著作果然是名不虚传，翻译也很不错。看了前5章和排序章节，深受启发。\nP.S.感觉工程技术人员读这本书比CLRS更好，个人推荐。\n12.08.05. 重新开始阅读。", "marks": "力荐"}
{"content": "估计还得再过两遍", "marks": "力荐"}
{"content": "非常棒。没有废话。不过偷懒没做习题，学习效果折半啦。", "marks": "推荐"}
{"content": "没怎么看懂", "marks": "推荐"}
{"content": "整合了排序算法，精彩至极。", "marks": "力荐"}
{"content": "中文版。高效率的C语言，精华在于指针。\n对排序，二叉树，图有些研究。", "marks": "力荐"}
{"content": "有着严密的数学论证，喜欢，比严蔚敏的泛泛而谈强多了", "marks": "力荐"}
{"content": "面试必备！另：中文版翻译差强人意", "marks": "力荐"}
{"content": "考研的时候，可以再拿起来参考", "marks": "推荐"}
{"content": "好书渣翻译", "marks": "推荐"}
{"content": "其实并非很神奇,基础而已", "marks": "推荐"}
{"content": "树结构最重要", "marks": "推荐"}
{"content": "描述清楚，代码示例规范~~ 习题也不错", "marks": "力荐"}
{"content": "薄薄的一本书有这样的广度和深度确实难得。但讲得太跳跃，而且命题证明过程的表达水准一泡污。一豆友说“让行文尽可能晦涩难懂这个目标的达成上翻译同学又立了大功”--这条不作定论。其实，如果这本书的作者能好好说话，那书里的结论都是很好理解的。读者如果求甚解，还是看算法导论去吧。", "marks": "还行"}
{"content": "只看了最小生成树 讲的很浅 翻译很乱", "marks": "较差"}
{"content": "实话说,收获还没我看集训队论文和作业大", "marks": "还行"}
{"content": "数据结构部分与排序一章着实精彩，算法部分继续去啃CLRS。。", "marks": "力荐"}
{"content": "这个月一定要读喔", "marks": "力荐"}
{"content": "我看过的最好的数据结构书", "marks": "力荐"}
{"content": "挺好的，就是代码少了些，如果想看代码可以看《算法：C语言描述》。", "marks": "推荐"}
{"content": "算法是内功，每周学点，慢慢积累吧。\n从2011年12月13号开始。", "marks": "推荐"}
{"content": "当初的数据结构和算法课程指定的教材之一，真心的不错，工作之后一直跟着我。", "marks": "推荐"}
{"content": "经典，翻译也不错", "marks": "力荐"}
{"content": "内容很不错，覆盖了基础结构，侧重实现。译者语文功底太差，句子十分不通顺。", "marks": "较差"}
{"content": "刷 oj 的时候，刷了不少这样的书，大部分都是用的 c 或者伪码，而且至少 80% 的内容都能在本科《数据结构》《算法》里面学到", "marks": "推荐"}
{"content": "书是好书，不过翻译的一般。许多信息只有结论没有推导，想看讲的全的还是看算法导论吧~", "marks": "力荐"}
{"content": "看过2，3遍，我的算法和数据结构底子没塌，就靠的它了", "marks": "推荐"}
{"content": "简单易读？我只觉得好绕啊，是翻译的问题吗？？暂时弃吧，，唉", "marks": "较差"}
{"content": "算法启蒙书，导读里的那个例子好震撼。不过读完感觉程度还是不够。", "marks": "推荐"}
{"content": "当年用的教材", "marks": "力荐"}
{"content": "还是教材， 中不中， 洋不洋， 最后还得中。", "marks": "推荐"}
{"content": "代码精炼，咋一看，很复杂，仔细看，很精辟", "marks": "力荐"}
{"content": "文字描述比较清晰明了，常见知识点也都涵盖到了，但里面的程序实现很一般，不建议作为参考。", "marks": "推荐"}
{"content": "说数据结构和算法没用的人，是因为他所在的层次，接触不到编程中最关键或者最核心的部分~", "marks": "力荐"}
{"content": "没恒心了，读了几章就废了", "marks": "推荐"}
{"content": "数据结构与算法分析", "marks": "推荐"}
{"content": "算法这东西，还是要练才能掌握", "marks": "推荐"}
{"content": "很难读完啊", "marks": "力荐"}
{"content": "准备花一个礼拜，把里面的程序实现，做做相关的acm题", "marks": "力荐"}
{"content": "入门好书，轻于算导而重于学校的烂教材，读完就能应付大部分场景了", "marks": "力荐"}
{"content": "在学习过C语言后，不要拖太久了，就看它，书很好，讲解透彻简明，虽然范围有点广，但是比国内大部分已经好很多了，建议刷完后面的题目，做有意见挑战性的锻炼能力的题目。看完一遍后正在刷后面题目，代码实现，博客记录。", "marks": "力荐"}
{"content": "英文版虽然是97年的，不过依然是入门最佳，有足够的数学推导但又不会太难，要真的理解算法还得学点数学推导。C语言让代码足够的简洁，本书还有Java 和 C++ 版本，不过略显冗余。", "marks": "力荐"}
{"content": "为什么要读数据结构？\n因为只了解一门语言的语法是远远不够的，一个正规的程序员必然会遇到数据结构和算法问题（而不是设计一个新算法）；面试时对数据结构的测试可以一定程度反映一个人的编程水平。\n如何评价这本书？\n不是很适合零基础阅读，既不能高效应付考试，也不能快速消化在实际中应用。如果当年面试看的是金典的话，同样的时间成绩可能会好很多。\n\n读了前7章，应该够应付笔试了，接下来刷题\n能救你的只有自己\nPS：翻译实在是太烂了，完全抵消掉了其作为外文书的优势\n1、在我有限的代码生涯中，确实从来没有遇到过数据结构的问题\n2、但是，在笔试中，确实是重点考察的对象，甚至高于数据库和语言基础\n3、所以，为了笔试，看吧……", "marks": "还行"}
{"content": "好书，描述清晰，逻辑清楚，比学校的教材不知高到哪里去了。", "marks": "推荐"}
{"content": "我就直说我基础差看不懂吧", "marks": "还行"}
{"content": "大致的读了一遍，受教了不少，感觉还需要再细致地把练习题也做一遍。", "marks": "力荐"}
{"content": "纪念一记响亮的自抽", "marks": "推荐"}
{"content": "我没有看完会到处说吗～", "marks": "推荐"}
{"content": "这本和紫色皮的那套就有一定差距了", "marks": "还行"}
{"content": "不错，比国内的好", "marks": "推荐"}
{"content": "这本书确实不适合初学者。初学者往往浮躁，急切地希望提升自己的能力，因而难以静心看书。\n\n而这本书不静心看是看不懂的。", "marks": "推荐"}
{"content": "书中前几章讲解得很不错。从图论开始，内容就非常简略，还是CLRS来补吧。并且C语言这个版本翻译得不是一般的烂。", "marks": "推荐"}
{"content": "花了两个月撸完，期间多次几欲放弃，程序员的路也是不好走！", "marks": "推荐"}
{"content": "读了一部分", "marks": "力荐"}
{"content": "这书难度其实不小。", "marks": "力荐"}
{"content": "万恶的算法，我还是喜欢python！", "marks": "推荐"}
{"content": "细看还是讲的太简略了。", "marks": "推荐"}
{"content": "经典之作，但不适合大陆学生当课本，被深深的坑了", "marks": "力荐"}
{"content": "确实经典的一本书", "marks": "力荐"}
{"content": "翻译的弱爆了.", "marks": "推荐"}
{"content": "这破书怎么得到8.9分的，翻译水平基本上就是谷歌翻译的水平，建议任何人都不要买", "marks": "较差"}
{"content": "书五星，翻译负三星", "marks": "较差"}
{"content": "学过后再来看这本书，仍然很有收获", "marks": "力荐"}
{"content": "有条件一定要读原版。5颗星是我在脑海中YY给原版的分数。", "marks": "力荐"}
{"content": "只能说我的水平不到，云里雾里。一些常用的算法我都听说过，但是作者讲出来之后我就不懂了。", "marks": "还行"}
{"content": "学习数据结构，只一本足以。", "marks": "力荐"}
{"content": "挺好的，虽然我还没开始用。。。起码能看懂。。", "marks": "推荐"}
{"content": "看完了，感觉不强烈", "marks": "较差"}
{"content": "大神的门徒，作品果然很正。", "marks": "力荐"}
{"content": "很不错", "marks": "力荐"}
{"content": "看得很吃力。", "marks": "推荐"}
{"content": "看的原版。比起翻译的版本，原版更加清晰易懂。", "marks": "力荐"}
{"content": "又是本大学回忆。。。", "marks": "推荐"}
{"content": "算法证明很好", "marks": "力荐"}
{"content": "这个一直是硬伤", "marks": "力荐"}
{"content": "以前准备考研的时候看过。跟严奶奶的书相比，某些内容细节不一样。后面还有一些当时对我来讲略显高深的主题", "marks": "力荐"}
{"content": "五星 是给当时讲这门课的陈越教授 我所经历过最好最好的教授", "marks": "力荐"}
{"content": "...本科时候无知啊...就知道无脑读中译版大部头教材...", "marks": "还行"}
{"content": "大学二年级，陈越", "marks": "力荐"}
{"content": "一直想读 Algorithm in C 但是找不到 只好找这个翻来看了, 也挺好的", "marks": "推荐"}
{"content": "我学语言用的。", "marks": "推荐"}
{"content": "根据图书馆记录整理一些读过的书。。。", "marks": "推荐"}
{"content": "翻译太烂", "marks": "推荐"}
{"content": "挑着看，略读完。 算不上工具书，总结的原则值得思考。", "marks": "推荐"}
{"content": "我觉得这本书吧，技巧性十足，但实用性不够。为什么呢？因为他的解决方法是在建立在你知道问题出在哪里了，但往往我们的难点在于不知道问题具体在哪里", "marks": "还行"}
{"content": "可以说....是在发明名词么？", "marks": "推荐"}
{"content": "重构的概念不止是软件", "marks": "力荐"}
{"content": "很受益的一本书～", "marks": "力荐"}
{"content": "其实你写代码写久了，重构也就信手拈来了，尼玛自己写代码不自己重构的程序猿都去shi吧！\n", "marks": "力荐"}
{"content": "好书，但是大部分篇幅介绍了重构步骤，过于琐碎", "marks": "推荐"}
{"content": "当年看的时候，对我来说最大的收获就是一个意识和观念的改变。", "marks": "推荐"}
{"content": "大师Martin Fowler的经验之谈，看后有种醍醐灌顶、欲罢不能的感觉。重构也是当今敏捷开发一项不可或缺的技艺，建议所有有设计和项目开发经验的开发者都应读一下。", "marks": "力荐"}
{"content": "对于开发内容是增量和优化为主的系统,本书很实用,但应该按需采用而非直接套用.", "marks": "推荐"}
{"content": "非常值得一读，对于重新审视现有代码有极大的帮助", "marks": "力荐"}
{"content": "此书总结了不少代码的问题及重构的方法，对于设计与编程的见解相当正确，但难免流于俗套 - 大道理谁都懂，但知易行难永远是硬道理， 尤其其对于每种情况进行重构的极其繁冗的步骤描述，实在是相当的不高明， 本人认为这是本书的一个败笔， 但其后对于重构自动化工具的介绍则是黑暗中的一道阳光 - 我们需要这种工具。（目前来看Visual Studio的插件VA的重构功能最为好用，但却还是远远不够）", "marks": "还行"}
{"content": "程序员必读...", "marks": "力荐"}
{"content": "事无巨细地讲如何重构，可重要的是重构成怎样的形态。", "marks": "还行"}
{"content": "是本好书，不过refactoring 十分依赖工具，所以了解工具可能跟实在一些。", "marks": "推荐"}
{"content": "重构圣经。什么是OO，通过重构能够更加清楚。", "marks": "力荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "重构这本书在现在看来，技术指导意义大于实际意义，有助于建立重构的理念，敏捷开发中不可缺失的一环", "marks": "推荐"}
{"content": "很不错，快读完了", "marks": "力荐"}
{"content": "如果你关心你的代码质量，此书必读！", "marks": "力荐"}
{"content": "当你面对隔壁那个菜鸟或者三个月前的自己写的蹩脚代码时，重构它。", "marks": "推荐"}
{"content": "“重构的意义就在于：你永远不必说对不起——只要把出问题的地方修补好就行了。”", "marks": "力荐"}
{"content": "等读完了可能写个书评，刚开始以为是很高深的一本书，同事放在桌旁，两天没敢碰，后来发现其实是一种思维方式，一种习惯，一种技巧，一种结构美，一种智慧。", "marks": "力荐"}
{"content": "java好高深…", "marks": "推荐"}
{"content": "翻译得不错\n内容也很棒", "marks": "推荐"}
{"content": "Martin真是一个优秀的程序员，重构需要在开发中不断使用，去除bad smell。\n前后看了好长时间才看完，一会再回味回味，写个读书小结。", "marks": "力荐"}
{"content": "浅显易懂，就是看过一遍也不见得记得多少refactoring method，就算培养一点sense吧。Convert Java Sample code to C# as practices.", "marks": "推荐"}
{"content": "重构要和设计模式结合在一起看，而设计模式的学习则更依赖经验的积累。", "marks": "推荐"}
{"content": "写的很流畅， 翻译得也很好", "marks": "力荐"}
{"content": "从图书馆的纸书到模糊的扫描电子版再到高清晰的扫描版，一路看了三个版本才看完，历时一年半，不是因为深奥，反而是因为都已经是大家现在都知道的实用技术。某次同事聚会，某一前同事对04年分享该书的同事说起此书（英文文字pdf）是大加赞赏，他说后来推荐给他人也是一致好评。可惜当年未看。", "marks": "力荐"}
{"content": "不懂重构哪算懂设计模式", "marks": "力荐"}
{"content": "重构可以帮你写出更好的代码", "marks": "力荐"}
{"content": "必须反复阅读，并负责任的来重新审视自己编写的代码", "marks": "力荐"}
{"content": "理论联系实际才能养成这种习惯", "marks": "力荐"}
{"content": "很多方法在重新修改自己已有程序的时候都会遇到", "marks": "力荐"}
{"content": "初步了解软件重构概念，以后经历项目后，再来读", "marks": "力荐"}
{"content": "里面的很多重构方式在实际中已经使用，很多都不需要讲得这么细", "marks": "还行"}
{"content": "要在项目中实践体会", "marks": "力荐"}
{"content": "不太喜欢这本书，里面的代码太多了，看着不像一本讲软件工程的书。", "marks": "推荐"}
{"content": "很好很强大的，学java的重点推荐。", "marks": "力荐"}
{"content": "看看重构对coding也会有帮助。下笔之前就知道怎样写有利于代码的可持续发展", "marks": "力荐"}
{"content": "并没有读完，里面很多重构的方法对于现在来说应该是常识。", "marks": "力荐"}
{"content": "这是让我的开发思维发生颠覆性变化的第二本书。", "marks": "力荐"}
{"content": "想写出漂亮整洁的代码，想提高代码能力，就看这本书", "marks": "力荐"}
{"content": "经典之作，每个开发人员都应该阅读", "marks": "力荐"}
{"content": "有一部分比较有用。但总的来说，里面的很多例子太过简单。", "marks": "推荐"}
{"content": "在朋友手中借过来，花了近十个晚上的时间来阅读。总的来说，很多技巧都很技术性，适合研讨。对于其中的一些点，之前已经有那样做。总的来说，思想及步骤很有意义，细点呢，适合作参考。", "marks": "推荐"}
{"content": "一个晚上在wd图书馆读完的书，写的很轻松。主要就是掌握所说的原则;\n经典再读，总结不少可以应用到项目的经验", "marks": "推荐"}
{"content": "基本功.", "marks": "力荐"}
{"content": "整个系统的稳定性在于不断的重构向前，目前项目中直接用到了诸多里面的方法，非常具有可操作性。本书加上Intellij的重构工具，极大的提高了编码效率", "marks": "力荐"}
{"content": "正适合现在读", "marks": "力荐"}
{"content": "里程碑式好书", "marks": "力荐"}
{"content": "有实践支持，再读起来是很轻松的。", "marks": "力荐"}
{"content": "Martin Fowler的书一直很喜欢，很久以前就一直在研读，fowler的博客也一直关注着，大师的思想值得我们去学习", "marks": "力荐"}
{"content": "从重视码前设计转移到码后重构，这是对软件开发流程的一种更新！代码写出来是给人看的，书中大量实用而有效的技巧对于重新审视现有代码有极大的帮助。", "marks": "力荐"}
{"content": "绝对的经典好书，强烈推荐", "marks": "力荐"}
{"content": "一本实践性很强、实用性很强的书！", "marks": "力荐"}
{"content": "太贫了，一点破事写那么多", "marks": "还行"}
{"content": "04年读此书，醍醐灌顶。从此对写软件才有了兴趣，恩重如山。有人说，Martin把写代码上升到了艺术高度，这就对了嘛，我原本就是一名艺术爱好者啊。", "marks": "力荐"}
{"content": "比起重构步骤的细节,更关心采取这个动作背后的理念..\n需要找本OO的书补补.", "marks": "推荐"}
{"content": "这种书还是要不停的翻的...", "marks": "力荐"}
{"content": "大概就7~8种我这种水平经常用，其他的都可以扯下来当厕所纸了。。。", "marks": "力荐"}
{"content": "宝典级", "marks": "力荐"}
{"content": "我的评价和大众评价相去甚远的一本书", "marks": "还行"}
{"content": "实践性极强，constructive", "marks": "推荐"}
{"content": "提高代码质量，提高设计能力，不甘于做一名Coder，那就学习并使用重构吧！", "marks": "推荐"}
{"content": "什么时候才能看这本书", "marks": "力荐"}
{"content": "39", "marks": "力荐"}
{"content": "给四颗星，写这本书的时候Java语言风头正劲呢", "marks": "推荐"}
{"content": "软件工程师的第一步是兴趣和天赋。第二步漂亮的代码（重构加一小点的设计模式），第三步吾将上下而求索，第四步……天知道。", "marks": "力荐"}
{"content": "程序员的必读书", "marks": "力荐"}
{"content": "读了前面五章，收获颇多。\n读完之后，觉得写代码的标准高了。怎样的代码才算代码？行为和数据都服务于本对象的，在对象里发生改变，在对象里结束改变。尽可能每次修改只让一个对象发生改变。", "marks": "推荐"}
{"content": "大致翻过一遍，想仔细看一遍", "marks": "推荐"}
{"content": "事无巨细 有些过时，很多设计已经融在框架中了", "marks": "推荐"}
{"content": "窗户破了要立即补起来", "marks": "力荐"}
{"content": "重构圣经；可以看出作者有模仿GoF的书写方法的意思；是通向设计模式和良好代码习惯的更轻量的方法；相对于“事前设计”，“事后整理”总是更简单、更清晰。", "marks": "力荐"}
{"content": "光读不用的话……", "marks": "还行"}
{"content": "对于我这种半路出家的码畜来说还是很有用的", "marks": "力荐"}
{"content": "前四章讲了讲思想，后边就全是重构实例了，还配有一个列表，可以当做工具书使用，不必一页一页的读。\n书中的重构是很厉害的思想，代码不断的重构，越来越好。\n只是实际工作中不怎么用的上，待过的地方都不写测试用例，自己也不知从何弄起，这等牛逼手段只有沦为“屠龙之术”。", "marks": "推荐"}
{"content": "整容术", "marks": "还行"}
{"content": "JP!", "marks": "力荐"}
{"content": "2007", "marks": "推荐"}
{"content": "重构指导设计模式，非严格定义", "marks": "力荐"}
{"content": "看完以后深深觉得，OO好麻烦。换句话说，混合编程或许更好。另外翻译扣一星。", "marks": "还行"}
{"content": "要写出能让计算机懂的代码很容易，能写出让人容易理解的代码很难", "marks": "力荐"}
{"content": "老实说，虽然很经典，但并没有感觉到太多的精彩，个人认为，\n1、里面的Java版本太老了，有些重构可以用更好的方法，比如enum\n2、对于一些带有“坏味道”的代码，平时也会进行一些修整\n3、面向对象的编程虽然便于后期扩展，但也带来了维护的麻烦\n希望如果能重读的话能另有收获", "marks": "还行"}
{"content": "重构的方法", "marks": "推荐"}
{"content": "后面几章大致浏览了一下，以后需要时再细细研究~", "marks": "推荐"}
{"content": "很棒，这里面的方法大家都用过，这本书给总结成了一个知识体系，既便于学习，也便于使用。赞一下翻译，读起来很流畅。", "marks": "力荐"}
{"content": "重构要有点设计模式思想和对变化的理解", "marks": "力荐"}
{"content": "无与伦比了.一看却全部读了一遍,绝对的经典.虽然我明白里面的每一个道理.但是每一个道理要在实践中游刃有余的运用却需要自己常年的累计和感悟才行.我相信我没各两年重读一次此书便有新的感悟.此书不是读完便罢,而且随他在项目中感悟和领略.", "marks": "力荐"}
{"content": "重构就是修改软件，在保持软件行为的基础上改变软件结构。", "marks": "还行"}
{"content": "编程观念经过了又一番的刷新……", "marks": "力荐"}
{"content": "正是我需要的，讲得很详细。", "marks": "力荐"}
{"content": "第2遍阅读。", "marks": "力荐"}
{"content": "与设计模式搭配读，简化软件编写的复杂度", "marks": "推荐"}
{"content": "现在看不出什么东西，这么多代码～～～", "marks": "还行"}
{"content": "讲得很细，尤其是小规模重构，大规模架构级别的重构提炼不多", "marks": "力荐"}
{"content": "很经典的书籍，值得阅读", "marks": "力荐"}
{"content": "技术中的好书太多，开始静下心来认真关注技术。好书，大赞。", "marks": "力荐"}
{"content": " 经典。重构时最有快感的事就是删除一大段一大段的代码，去年在工作中要重构一个1000行代码的方法，二三十个if/else判断，用的方法就是书中第九章提到的以多态取代条件式。", "marks": "推荐"}
{"content": "非常好的软件工程书籍，要放在手边，当作工具书经常拿来翻翻", "marks": "力荐"}
{"content": "开发必读", "marks": "力荐"}
{"content": "我的起步", "marks": "力荐"}
{"content": "把各种常识和非常识都化为标准，繁复而精美。", "marks": "力荐"}
{"content": "写代码的艺术", "marks": "力荐"}
{"content": "后面是不是有点像设计模式了？", "marks": "力荐"}
{"content": "没觉得多好。啰嗦的厉害。只能仰望设计模式的背影了。", "marks": "还行"}
{"content": "1111-1301", "marks": "力荐"}
{"content": "重构里面都是老程序员的经验。作为认真的程序员都应该能够自己总结出来这些经验，这本书的价值在于加速了这个过程。\n而真正意义上的重构，书中的“大型重构”还是需要在实践中自己揣摩。", "marks": "推荐"}
{"content": "从这本书学会了什么叫做Refactor,以及意义所在。", "marks": "力荐"}
{"content": "当年入门时读过，现在补记录", "marks": "力荐"}
{"content": "知道为什么，ｓｔｅｖｅ，ａｌｅｘ他们的代码那么写了", "marks": "推荐"}
{"content": "很努力地看完，但印象不深，可能火候未到吧", "marks": "还行"}
{"content": "中文版是借看的，很不错。看了这本书后我的代码几乎每天都在重构，汗颜啊！！！", "marks": "推荐"}
{"content": "讲了很多重构的技巧，很多对我现在就有用，当然也很多看不懂，后期要多看。", "marks": "推荐"}
{"content": "看的英文版，这本书不需要精读，了解概念，不断实践就好。在某个阶段，代码水平决定了完成代码的质量。Don't Repeat Yourself.", "marks": "推荐"}
{"content": "需要不断复习", "marks": "推荐"}
{"content": "新开始每一个项目之前都应该好好再读读本书的前四章。", "marks": "力荐"}
{"content": "修改代码的经验总结", "marks": "力荐"}
{"content": "这是《设计模式》这本书的双生花！《设计模式》强调的是设计的时候保证正确和灵活性，而《重构》这本书则着眼于设计阶段结束后，在软件实现过程中不断的优化设计。他们之间的关系有点像理论和最佳实践。很快就看完了这本书，并没有想象的那么艰深晦涩，而是浅显易懂，有点后悔没有早点阅读。", "marks": "力荐"}
{"content": "没有看完，但是仅看前几章就能肯定其为神作。重复代码正如脏Cache一样，带来不一致性。", "marks": "力荐"}
{"content": "作者试图把重构的行为：1、标准化；2、目的化。\n种类：1、改名；2、提取或转移属性，方法，类；3、提取条件；\n可以讨论工具支持：1、识别坏味道，2、自动更改\n还可以讨论：更复杂的坏味道，解决方案", "marks": "推荐"}
{"content": "代码需要不断重构。", "marks": "力荐"}
{"content": "相当不错的一本书，示例详细。", "marks": "力荐"}
{"content": "2012.04.28 ~ 2012.06.07 作者非常全面的总结了重构的各种方法，学会嗅出坏味道", "marks": "推荐"}
{"content": "指引程序员写出更好的代码", "marks": "力荐"}
{"content": "秉持一个原则，把代码写的和小说一样清晰优美。", "marks": "力荐"}
{"content": "再通读一遍后，当作手册有需求时翻看不错。实际项目中为了重构而重构就没意思了，等闻到坏味道再来，当然，单元测试是要写的。", "marks": "推荐"}
{"content": "敏捷基础，翻译的不错", "marks": "力荐"}
{"content": "重构的本质，是拾起在代码中沉淀的人力资源（时间、金钱、经验）。", "marks": "力荐"}
{"content": "经典，要将其中的思想应用到实践中", "marks": "推荐"}
{"content": "少一刻星是因为: 这里介绍的都是基本招式,可实际问题的都tm是精英怪,boss怪.", "marks": "推荐"}
{"content": "经典", "marks": "力荐"}
{"content": "\n", "marks": "力荐"}
{"content": "敏捷实践的基石之一--重构的开创之书", "marks": "推荐"}
{"content": "martin fowler的书都是经典。", "marks": "力荐"}
{"content": "手册性质的，用到的时候再查会比较好", "marks": "还行"}
{"content": "书的结构很清晰，最开始介绍了什么是重构为什么要重构以及什么时候需要重构等，之后通过很多简短的示例详细讲解了重构的经验方法。很容易读", "marks": "力荐"}
{"content": "要和模式结合看更有收获。另外重构的工具很重要，VA是目前我用过的最放心，最好用的重构工具，没有之一。", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "看了官方网络版，新浪爱问的却字符集看不了，代码非常实用简洁，人性化的解释也一目了然。http://wiki.woodpecker.org.cn/moin/ObpLovelyPython", "marks": "力荐"}
{"content": "入门书.哈哈", "marks": "推荐"}
{"content": "一般般，没有显出python的可爱", "marks": "还行"}
{"content": "适合入门，有趣，丰富的示例及扩展，内容稍显陈旧，不过从原理上去了解是不为过的~", "marks": "力荐"}
{"content": "给新人看这书，人家回来就问我zope怎么配。", "marks": "很差"}
{"content": "作为入门书挺好的～谁说要学python都推荐他先看这个了", "marks": "推荐"}
{"content": "集体创作的书，质量我个人觉得差强人意。", "marks": "较差"}
{"content": "方式很好，也深入浅出，但大量均匀分布的感叹号和北方土话是怎样", "marks": "还行"}
{"content": "怪了吧唧的 cday和kday挺好玩 不过对于我这样的苦手来说老要去svn看答案不是什么好的体验 到作弊条部分又变得和ref似的了(哪有那么厚的作弊条啊) 感觉像在看一个喜欢发转帖的博客", "marks": "较差"}
{"content": "只是浏览，回家细读", "marks": "力荐"}
{"content": "这书不像是给小白看的", "marks": "推荐"}
{"content": "\"下酒的老醋花生，解酒的胡辣汤，下饭的榨菜\"，的确如此，挺好", "marks": "推荐"}
{"content": "很带感，看了之后应该才算有一定了解python，简单地说，这本书必看~", "marks": "力荐"}
{"content": "it's not easy for me", "marks": "还行"}
{"content": "书的名字和封面设计可能误导新人认为这本书是入门书籍，可事实并非如此，没有一定的Python或其它语言的基础的话可能会觉得比较吃力。至于本书的后半本看上去类似cookbook，适合快速浏览以便有个大概的了解或需要时的查阅。", "marks": "推荐"}
{"content": "很好哈哈", "marks": "推荐"}
{"content": "像Cookbook类，手把手教学、现实中可用（介绍实际常用模块）、足够广度，但内容较凌乱不系统。不太适合入门，适合在有基本语法基础上阅读。", "marks": "还行"}
{"content": "《Learning Python》饭后甜点，不错。", "marks": "推荐"}
{"content": "主要介绍了一下web构架还有一下设计思想，挺好的。//差不多看完了主要内容差不多就几十页web框架之类的。挺简单的。3.5分左右吧", "marks": "推荐"}
{"content": "有些蜻蜓点水，不适合初学者", "marks": "还行"}
{"content": "很无耻地将这本书标注为已读。只是非常粗略的扫了一遍。特点是一上来就用案例带着你走，而实际上看到后面就只觉得算是颠倒了下顺序而已。应该说还不太适合完全python新手。我想我应该早该知道：用着学，而不要学完了再用。看这本书对我来说就是拖延症啊。", "marks": "还行"}
{"content": "更应该实践多一点。", "marks": "还行"}
{"content": "当闲书翻翻，不推荐用来学习python", "marks": "还行"}
{"content": "传道书", "marks": "还行"}
{"content": "走马观花了一遍，效果还行。", "marks": "推荐"}
{"content": "小白的入门部分很好看，框架的介绍也很好看，还有许多杂杂碎碎的内容。ZQ 辛苦了！真没想到 Python 社区的力量这么强。与 豆瓣 有关的内容实在是太吸引人了。", "marks": "推荐"}
{"content": "Python的一道好菜，建议入门之后再看\n不建议作为Python入门教材，尤其不适合文中的“小白”", "marks": "推荐"}
{"content": "绝对不是如作者所说的入门级的Python教程……  里面提供了许多有用的参考资料，非常有帮助，总之很赞！", "marks": "推荐"}
{"content": "真的不适合新手～", "marks": "还行"}
{"content": "作弊条？oh no...", "marks": "还行"}
{"content": "太水了", "marks": "较差"}
{"content": "怎么说呢，感觉讲的有点泛泛的，只能作为一种学习笔记看", "marks": "推荐"}
{"content": "。。。。。", "marks": "推荐"}
{"content": "前面的例子仔细看了，越往后看的越粗。\n可以当工具书用。", "marks": "还行"}
{"content": "不错，特别是关于python的各种网络编程框架的介绍，这一部分是我需要的。", "marks": "推荐"}
{"content": "入门？这不是入门，这应该是催化剂。", "marks": "力荐"}
{"content": "Geek而不是Greenhand看的入门书。", "marks": "推荐"}
{"content": "封面看起来一点都不像程序书，整体风格很是新颖。但是对于初学者来说，经常会看得有些莫名。还是有一定基础以后再来看看作为巩固好了。", "marks": "推荐"}
{"content": "很不错的小菜啊....", "marks": "推荐"}
{"content": "Python社区的无比的优越感彻底把我击倒.", "marks": "较差"}
{"content": "不错的Python入门书", "marks": "力荐"}
{"content": "前两个例子实践，后面介绍python，然后介绍常用模块以及实践常用技巧。非常非常深入浅出的一本书！力荐...", "marks": "力荐"}
{"content": "作弊条应该有些用处。", "marks": "推荐"}
{"content": "一本为Python世界的新人准备的导学性质的书，概括的介绍了Python的各种概念，工具，框架，不深入，但是挺全面，也挺有趣的，社区称它是可以送MM的书（送MM？确定不是在陷害宅男们？）", "marks": "推荐"}
{"content": "一小时在上海书城翻完，怎么现在计算机的书都流行写成小说呢？", "marks": "还行"}
{"content": "对于快速入门并没有什么用", "marks": "还行"}
{"content": "家庭主妇读物！", "marks": "推荐"}
{"content": "深入还需多动手！", "marks": "力荐"}
{"content": "对我不实用。", "marks": "较差"}
{"content": "讲得东西通用性不强，还有装B的目录实在很难忍受", "marks": "还行"}
{"content": "入门之后，读读不错。", "marks": "推荐"}
{"content": "没那么容易诶", "marks": "还行"}
{"content": "应该是不错的，但是自己当初读的时候不知道为什么，总感觉有些不上不下的……", "marks": "还行"}
{"content": "只给三颗星，因为排版是在有问题，边边空一大部分的，代码字体看着不舒服。麻烦下版参考一下原版的英文技术书籍。", "marks": "还行"}
{"content": "初学的人强烈不建议，在我看来这本书的组织形式太过松散了。", "marks": "还行"}
{"content": "真的很适合入门？", "marks": "还行"}
{"content": "我几乎忘了当年在东晖老师的建议下，还看过这个。。。", "marks": "推荐"}
{"content": "国产的难得好书，但实用性没说的那么好。", "marks": "推荐"}
{"content": "一半是技术，一般是科普。", "marks": "还行"}
{"content": "哲思的书，不错；\n编程是一种乐趣；", "marks": "力荐"}
{"content": "比较有意思的书，应该是看的第一本Python书", "marks": "推荐"}
{"content": "满怀着期望和好评之后，相当失望，举的第一个实例从头到尾都让人麻烦，第一个实例是关于~cdrom光盘里的文件信息~多少人用光驱了现在......", "marks": "还行"}
{"content": "又是一本cookbook", "marks": "还行"}
{"content": "一本很有特色的编程书，不过它的受众面还是比较狭窄，只适合熟悉其它某种OO语言的人去了解Python。后半本书的内容比较鸡肋。", "marks": "还行"}
{"content": "废话较多", "marks": "还行"}
{"content": "这书讲解方式蛮不错的...除了实际应用.没有更好的方式学编程了...", "marks": "推荐"}
{"content": "不算是入门书，书中信息量相当大。", "marks": "还行"}
{"content": "没读过，也读不懂。\n我就是来给组长大人打分的。哈哈哈", "marks": "力荐"}
{"content": "定位有些尴尬的Python教材，新手可能会觉得不够系统和全面，进阶的话又略显浅显，而且其中一些库的应用多少有些过时！", "marks": "还行"}
{"content": "早已看完，标注。", "marks": "推荐"}
{"content": "python社区真是实用主义至上的社区啊！行者们的价值观充斥整本书中。。。", "marks": "力荐"}
{"content": "只适合初学者，不然会很失望", "marks": "还行"}
{"content": "章节安排不太合理", "marks": "还行"}
{"content": "小白和社区之间的故事真是振奋人心啊。觉得要做一个技术员，混技术论坛简直是必须且有效的～本书设计思路很好，先是通过故事，再细讲语法，再有reference～民众的力量是强大的", "marks": "力荐"}
{"content": "我的Python入门", "marks": "力荐"}
{"content": "前两章入门的还可以", "marks": "推荐"}
{"content": "内容也算是选序渐进。大多内容还是点到为止，书中重点讲解的框架版本较旧。不太适合新版本。\n总体来说还行，适合有其它程序编程经验的读者阅读。", "marks": "还行"}
{"content": "作为Python入门书，还是不错的，一天就可以读，", "marks": "推荐"}
{"content": "看完后感觉就像一本洗脑书，一味赞美 Python 多么好，但看完之后根本不知它说什么，还是不会用 Python，总之不适合初学者。", "marks": "很差"}
{"content": "初学看看还凑合....", "marks": "还行"}
{"content": "有点难的python入门书。", "marks": "还行"}
{"content": "  简单有趣，但是很有阅读性，实践性，入门可以", "marks": "推荐"}
{"content": "见过作者之一的ZQ老大，这本真的值得推荐", "marks": "推荐"}
{"content": "比较偏重实践，介绍了很多框架", "marks": "推荐"}
{"content": "过时了。", "marks": "很差"}
{"content": "说实话我还是没办法习惯这样没头没绪地学，给我教科书吧，系统地从基层开始。", "marks": "推荐"}
{"content": "例子很不错，从简单功能入手，慢慢优化", "marks": "推荐"}
{"content": "社区出的书不错，算是我的入门书了", "marks": "还行"}
{"content": "杂乱无章，不实用", "marks": "较差"}
{"content": "Python 的入门书, 简单翻了一些. 内容还行吧.\n适合刚入门的初学者.", "marks": "还行"}
{"content": "翻过", "marks": "还行"}
{"content": "这个是面向初学者，个人还是喜欢实战系列。。", "marks": "推荐"}
{"content": "python入门的好书", "marks": "推荐"}
{"content": "说实话有点晕乎，里面的例子太特殊了。", "marks": "还行"}
{"content": "还不错，不过不适合0基础入门。看过py简明之后提高一下还是不错的。", "marks": "较差"}
{"content": "很多实用的介绍", "marks": "力荐"}
{"content": "入门加工具书。现只跟着做了“光盘故事”，亦然能发现python的语言之美，在函数式编程方面比较有意思。", "marks": "推荐"}
{"content": "对于初学者来说可能难了一点儿，但是熟悉之后再看绝对是一本好书~~~", "marks": "力荐"}
{"content": "内容已经严重过时了。", "marks": "较差"}
{"content": "洪强宁介绍 Quixote 的小节是全书唯一的亮点.", "marks": "很差"}
{"content": "入门读物", "marks": "推荐"}
{"content": "风格真诡异", "marks": "还行"}
{"content": "定位和风格是不错的，可惜估计是初尝试，没把握好度，有些进退失据。纯初学者会看不明白，有经验的人又会嫌讲的不够清楚。前面的示例引导很多地方粗糙了点，至少涉及的具体技术点还是要讲清楚。后面的很多地方又过于简略了。python内容确实很多，也许这么点篇幅还要分半部示例出来，要讲清楚太勉强了点。", "marks": "还行"}
{"content": "建议先看《简明pyhon教程》,然后再把这本书敲一遍！", "marks": "力荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "并不适合Python入门", "marks": "还行"}
{"content": "很有趣。但实际上一般。", "marks": "还行"}
{"content": "CDay挺不错，KDay枯燥了点，框架篇里面的几个介绍和对比很赞，还有封面很卡哇伊", "marks": "推荐"}
{"content": "引用前言——如果以厨艺来作比喻的话:  \"Lovely Python\" 就是下酒的老醋花生,解酒的胡辣汤,下饭的泡菜！ \n\n一本很有爱的Python介绍书箱，了解的不仅仅是一门语言，还有更多Coding、Open Source、Hacker的思想。难得的“小白”指南啊！", "marks": "推荐"}
{"content": "比较轻松愉快的书，适合入门，尤其是后面半本书的cheating sheet", "marks": "推荐"}
{"content": "同意网友的看法，书是好书，但入门的人读起来肯定一头雾水：Python 这也能干，那也能搞，到底从哪开始入手捏？", "marks": "力荐"}
{"content": "感觉这本书不好，不是我的口味，而且选择的web框架也太。。。其实不推荐。", "marks": "还行"}
{"content": "不错的入门书籍，和一般的语言介绍类书比起来要更讲究实用性，而且我认为是国内人写的非常不错的技术类书", "marks": "推荐"}
{"content": "粗略的看完了python tutorial、head first python、dive into python后，才达到书中“小白”的水平。。。。", "marks": "推荐"}
{"content": "来自邮件列表的一本书。入门很好。结构很新颖。", "marks": "推荐"}
{"content": "至今为止看到的有关python的最好的书了。", "marks": "力荐"}
{"content": "实在不是一本适合用来入门的书，感觉过于杂乱了", "marks": "还行"}
{"content": "风格挺好的，不过每个都写得不深入，入门书籍？！", "marks": "还行"}
{"content": "没事看看别人怎么写故事吧～", "marks": "较差"}
{"content": "三次去书城..站了一个角落中看完此书....让我大体对python有了个整体的概念...不错...", "marks": "还行"}
{"content": "比较适合入门的Python教程", "marks": "还行"}
{"content": "a quick glance of python. good!", "marks": "力荐"}
{"content": "大学时在图书馆看的入门书", "marks": "推荐"}
{"content": "写给非Python程序员的程序员的入门书，但是，我，没，看，懂。", "marks": "还行"}
{"content": "可爱", "marks": "还行"}
{"content": "卖萌是可耻的", "marks": "还行"}
{"content": "开始读的时候，觉得python不是想的那么容易，但是认真，艰难的读过了前160页后，发现后面近300全是对前面的补充，顿时有一种豁然开朗的感觉，“轻舟已过万重山”。这本书本身就进行绝佳的学习语言方法的传授现在是凌晨00：34，我刚刚读完这本书，非常激动。很感谢这本书做为我了解python的第一本书，我也越来越喜欢开源世界里思想的自由和激情！！强烈推荐，以此书作为python的入门第一本书。", "marks": "力荐"}
{"content": "真单纯啊。", "marks": "推荐"}
{"content": "不建议读，太罗嗦，还不如直接看手册。。", "marks": "还行"}
{"content": "说实话，很喜欢这样的风格。", "marks": "推荐"}
{"content": "让我学到了很多。", "marks": "推荐"}
{"content": "一般般吧，翻着玩~", "marks": "还行"}
{"content": "喜欢这种不正经的书，虽然后面有些框架说得不太清楚，不过可以通过此书稍作了解之后，直接看官方文档。这书很不错，交给新手学习方法。", "marks": "力荐"}
{"content": "风格挺清新，而且我很佩服是社区完成的。内容还涉及了web框架等高级主题，开了眼界。不过确实不是本入门书……", "marks": "还行"}
{"content": "后面的东西太浪费纸了吧", "marks": "还行"}
{"content": "在电脑上看完的全书，总结一下的话，觉得一般吧，就是前面的故事实例算是比较有新意的，后面的就是简单的各个库的介绍了，介绍的不是很深入。", "marks": "还行"}
{"content": "Python可爱，可爱的python不怎么可爱", "marks": "还行"}
{"content": "算是编程书籍中很标新立异的一本", "marks": "推荐"}
{"content": "这书太初级了，基本上什么都学不到，后来买了Python核心编程才发现python的乐趣", "marks": "很差"}
{"content": "风格挺“卡瓦一”的", "marks": "推荐"}
{"content": "本书谈不上什么好与不好的，但是对于想入门的，还是可以看看。", "marks": "还行"}
{"content": "python", "marks": "推荐"}
{"content": "短小精干，一个例子主导，对初学者来说不错。\n学到了chardet和dict4ini，不知道是不是有更好的包替代，比较python发展很快", "marks": "还行"}
{"content": "说实话，觉得拿这本儿书上手还是太难了...定位还不如初步提高更贴切一些", "marks": "推荐"}
{"content": "难！", "marks": "力荐"}
{"content": "那谁，我儿子觉得这科学不明白，给我把这门科目撤了吧！看着心烦，眼不见为净！", "marks": "较差"}
{"content": "很棒的自学。我是拿来作自学C语言教材用的，但还是不得不承认此书比较难，要自己摸索的细节比较多，课后习题认真做，往往最后的几道是向下章节的过渡。以后还是会拿来重读，再查阅的。（官网自带的习题答案是不全的，新浪博客“逆潮堂”有比较详细的答案）", "marks": "力荐"}
{"content": "强烈建议作为接触编程的第一本书，特别是不要用国内的教材来入门，否则你会走很多弯路", "marks": "力荐"}
{"content": "写的太客气了！作者很有礼貌，家教很好！", "marks": "力荐"}
{"content": "个人觉得是一本C入门的优秀读物,尽管可能对于很多高手来说这书是过于基础了.", "marks": "推荐"}
{"content": "看了两个月，尼玛，接下来先写两万行代码再说~", "marks": "推荐"}
{"content": "神书呀。。。", "marks": "力荐"}
{"content": "总体来说不怎么样，简单的地方太简单，难的地方又说的很简单，再加上翻译的水平也很烂。---冒犯了冒犯了，我看到最后才发现作者的水平确实是高~ 具有历史意义的时刻！---最后一章是数据结构的问题了不看行不，我算是看完一本专业的书啦！---稍微看下网上的参考文档就会发现，这书里好多的函", "marks": "推荐"}
{"content": "为了教萌妹编程", "marks": "推荐"}
{"content": "啰嗦而详细", "marks": "推荐"}
{"content": "最重要的易于实践，所以比较适合于Primer。", "marks": "推荐"}
{"content": "入门好书", "marks": "推荐"}
{"content": "读的过程简直可以用愉悦来形容，读专业相关的书鲜少有这番体验。三年前如果第一本接触的编程书是这本可能会改变我的轨迹吧。虽说不想以谭教授的书不合适作为借口……", "marks": "力荐"}
{"content": "M", "marks": "还行"}
{"content": "。。。对这书最大的印象就是语言实在很冷幽默", "marks": "力荐"}
{"content": "粗略看了一遍还花了10天，可见C++是有多艰涩了。。。最大的收获除了了解各个概念，就是内存分配的规则，现在更能理解OC中的内存泄漏了", "marks": "力荐"}
{"content": "我发现，我买它的很大原因在于：理解函数的递归。K&R的篇幅太小，理解不了。", "marks": "推荐"}
{"content": "相比起来入门看这个比K&R好。而且现在觉得入门真的需要先学一门诸如Python这样曲线平缓的语言做点东西，才有那种欣喜的心情支撑去完成C这种相对陡峭的语言。但是学C确实是很必要的。C on Pointers没读，无法对比了。", "marks": "力荐"}
{"content": "因为在这本书里看懂了函数递归，所以果断买了。目前读到的C程序设计入门最好的书。锱铢必较断断续续看了3个月，对C的整体架构有更广泛的了解，将以前的零碎的知识结构化，一些模糊的概念变得清晰", "marks": "力荐"}
{"content": "上学时看过，后来书都被翻破", "marks": "力荐"}
{"content": "大学 C 语言课 叶俊老师 ", "marks": "推荐"}
{"content": "娓娓道来，非常适合初学者，以及从未接触过编程语言的人群", "marks": "推荐"}
{"content": "讲解的非常透彻，还有很多幽默的调侃。国内大学为什么不用这本作为教材呢", "marks": "力荐"}
{"content": "第一本编程书", "marks": "推荐"}
{"content": "随处可见被黑的谭老师...", "marks": "推荐"}
{"content": "清晰晓畅，方便自学，对读者友好，国内的教材啥时候能编到这水平啊？", "marks": "力荐"}
{"content": "脉络清晰。", "marks": "力荐"}
{"content": "无比经典，如果能早点遇到就好。上学期看完", "marks": "力荐"}
{"content": "非常系统地讲解了C语言，我看的时候比较泛，只看了关于C99的部分，不足之处就是太厚了。", "marks": "推荐"}
{"content": "去年刷C++还用了五天，今年就只有2天半刷C了…TAT…于是大概有1/3的部分被跳过了…但真心爱这本书，里面各种小细节小萌点小搞笑，明明是学习，搞得跟看小说似的~说它是最好的C入门书绝不为过.*某强的跟这个完全没有可比性…假期一定要抽时间把里面的代码敲一遍… 把C++那本看完…", "marks": "力荐"}
{"content": "嗯，写程序才是正经事。(╯‵□′)╯︵┻━┻", "marks": "力荐"}
{"content": "这类书就是给不愿意用大脑的人看的。愿意用大脑人的学这个只需要3页纸。", "marks": "很差"}
{"content": "学C的经典书，大概用了两年，陆陆续续，基本都看完了", "marks": "力荐"}
{"content": "断断续续总算是看了一遍", "marks": "力荐"}
{"content": "讲得很基础也比较全面，英文版绝对是上乘入门佳作；不过中文版翻译实在是。。。好几次都想把“云巅工作室”给人肉出来！！！另外，我是不是还写过这个的书评；然后实在不好意思又删掉了？？？", "marks": "还行"}
{"content": "挺好的C99入门教程！", "marks": "力荐"}
{"content": "对于初学者来说比较适合", "marks": "还行"}
{"content": "详细!字典式教程", "marks": "力荐"}
{"content": "700来页的大部头，但读起来却轻松愉快。", "marks": "力荐"}
{"content": "二级我来了~", "marks": "推荐"}
{"content": "内容详实，读过这个就不用读其他的入门书了。", "marks": "力荐"}
{"content": "当初c语言考试前买的突击书，用一个星期的时候在课下断断续续看了一些。至少考试的时候轻松加愉快。反正把c写的特别好玩。据说是特别适合初学者的书。", "marks": "推荐"}
{"content": "这个下雨天的下午莫名悲伤。", "marks": "推荐"}
{"content": "虽然我一直不提倡这样看书学语言，但用过之后回头再看书还是不错的", "marks": "还行"}
{"content": "囫囵吞枣，有时间还是要再看看，这种书适合经常看，可惜个人还是太浮躁了，有时候看不下去。", "marks": "力荐"}
{"content": "排版各种错误", "marks": "推荐"}
{"content": "算得上是最好的C入门教材了吧", "marks": "力荐"}
{"content": "终于啃完了。想系统的学习c的话推荐之", "marks": "推荐"}
{"content": "学程序读老书略坑爹＝＝", "marks": "还行"}
{"content": "学完谭浩强的书 再看这书 感觉自己就是没学c~", "marks": "推荐"}
{"content": "讨厌啊~~看完之后，貌似还是小白状态的孩子伤不起啊啊", "marks": "力荐"}
{"content": "很基础，讲的很详细", "marks": "推荐"}
{"content": "没有看完，而且可以确定的事，我这辈子也不会看这种书了~", "marks": "力荐"}
{"content": "4年里不知读了多少遍。", "marks": "力荐"}
{"content": "好书啊，爱死这本书了", "marks": "力荐"}
{"content": "还算不错的c入门书吧", "marks": "推荐"}
{"content": "c语言的语法书", "marks": "力荐"}
{"content": "神作。", "marks": "力荐"}
{"content": "很适合入门", "marks": "力荐"}
{"content": "我的字典。", "marks": "力荐"}
{"content": "以前读过，最近又过了一遍，还行。难度居中。但不方便当作手册查阅。有些疑难问题也没有解释清楚。", "marks": "较差"}
{"content": "C入门", "marks": "力荐"}
{"content": "启蒙书。很喜欢作者这种风格。", "marks": "力荐"}
{"content": "入门经典", "marks": "推荐"}
{"content": "引导我进入编程世界的一本书,谢谢作者,谢谢译者.\n还清晰记得当年求道无门的困窘,是这本书,一本图书馆里被翻得破破烂烂的书,让我一读就爱不释手,如果一开始就遇到这本书,生命该是多么美好 :D", "marks": "力荐"}
{"content": "好，比较全面，详细。", "marks": "推荐"}
{"content": "超棒的C语言入门书", "marks": "力荐"}
{"content": "回过头来再看看c的基础，这是基本的东西，批判和赞叹的角度都有。这本书对于科班出身的来说，看起来就像看帮助文档或者小说一样，不会费劲的，主要用来查漏补缺。毕竟搞计算的，C是基础。c同时作为c++的子集，也是语言中的基础，即使不使用c开发还是得时常的看几眼，以保持对行业基础语言的崇高敬意。", "marks": "推荐"}
{"content": "C语言字典", "marks": "推荐"}
{"content": "看完了", "marks": "力荐"}
{"content": "nothing better", "marks": "力荐"}
{"content": "经典", "marks": "力荐"}
{"content": "谭浩强那本可以扔了", "marks": "力荐"}
{"content": "记得大一暑假看完的，编程得多实践~", "marks": "推荐"}
{"content": "念文", "marks": "力荐"}
{"content": "2004年买了纸质书，正式步入了C开发", "marks": "推荐"}
{"content": "真的是神书一本", "marks": "力荐"}
{"content": "高考完后立马买了一本，研读了一个暑假。这本书对我后续编程的思维和态度产生了深远的影响。", "marks": "力荐"}
{"content": "总体不太推荐。\n\n大概浏览了下，书还是不错的入门书，特别是对于零基础的。但是这书作者太啰嗦了，无论是叙述还是取材，没想到这次新的版本竟然700多页（英文版将近1000页），这可是写c语言的啊，简直疯了。对于我来说，无论是初学者还是有经验的，都不大推荐这么事无巨细的版本。", "marks": "还行"}
{"content": "简单，还是看K&R吧", "marks": "推荐"}
{"content": "沉没在细节的海洋，不过的确是好书啊，入门推荐", "marks": "力荐"}
{"content": "不错的入门书", "marks": "推荐"}
{"content": "你需要立刻把学校发的教材给丢了", "marks": "力荐"}
{"content": "受益~", "marks": "推荐"}
{"content": "虽说这本书很多人的评价都不错，但我认为，至少，如果想初学C语言的话还是去看谭浩强的书吧，这本书能把很多自学者打的没有信心。的确，在严谨、范围方面都比谭浩强的书强，但那些繁琐的步骤，无趣的习题让人好生讨厌。现在有多少人想吧命令行程序学到透？", "marks": "还行"}
{"content": "买了两年终于读完了，挺好，很细，有些小错误不影响阅读。", "marks": "推荐"}
{"content": "大二啃掉了，结果现在一行代码也没写_(:зゝ∠)_", "marks": "力荐"}
{"content": "c语言正确、系统的入门进阶书", "marks": "力荐"}
{"content": "价格便宜 量又足^_^", "marks": "力荐"}
{"content": "复习功课，C99方面阐述的要比K&R好的多呢。", "marks": "力荐"}
{"content": "神书！", "marks": "力荐"}
{"content": "就是云巅工作室可以翻译的再准确些", "marks": "力荐"}
{"content": "主要是对版本之间的特性说明有意思。其他类似的（优秀）教材倒是有很多。", "marks": "力荐"}
{"content": "大一看的,大三再来推荐一边,认真的看完这本书之后,对c的掌握程度绝对超出大多数人很多。他的价值远远超过书的定价。", "marks": "力荐"}
{"content": "超棒..例程很多，完全没动手也有了一种我会编程了的错觉。（为写作业看了1-7 10 14 16..大概接下来很长一段时间内都会是“在读”。", "marks": "力荐"}
{"content": "入门和当字典用都很好 只是自己的懒惰 现在倒是很少翻了", "marks": "力荐"}
{"content": "比较不错的入门书，由浅入深，而且非常的详细", "marks": "力荐"}
{"content": "内容很棒，印刷和翻译错误略多。最好对着英文原版看。", "marks": "推荐"}
{"content": "相比tcpl，更适合我的口味，只不过书中使用的是第二人称，而一般技术书籍都是使用的第一人称，有些不适应", "marks": "力荐"}
{"content": "永远ye学不会的C~~", "marks": "力荐"}
{"content": "很详细。", "marks": "力荐"}
{"content": "很不错的C语言入门书", "marks": "力荐"}
{"content": "比老谭好", "marks": "力荐"}
{"content": "全书中都是“您”而没有出现一个“你”，可能是译者想表现出对读者的尊敬，但是我觉得这是画蛇添足，几乎所有书都以“你我”相称，也早已习惯这样的称呼，而且我是怀着接受教育的心情去阅读这本书的，此书扮演着老师的角色，然而却称我为“您”，实在是多此一举，而且对患有轻度强迫症的我来说，这确实在一定程度上影响我的阅读体验。如果有电子版的话，我一定将所有“您”替换为“你”之后再读。", "marks": "推荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "非常经典的C入门著作。同时也可以作为handbook来使用。看了这本，可以完全无视老谭的书。", "marks": "力荐"}
{"content": "零基础学编程，这本书是首选。大量的编程例题，通俗易懂。文风还有些幽默，作者真是用心良苦啊", "marks": "力荐"}
{"content": "对于初学者来说内容还是比较全面的 挑了想读的部分读 讲的不错 翻译也还过得去 除了把you都翻译成“您”有点奇怪的感觉  入门看的话 这个比谭爷爷好多啦~", "marks": "推荐"}
{"content": "C入门好书", "marks": "力荐"}
{"content": "入门书吧，工作跟编程也没关系，但是确实讲的非常细致，习题也比较经典，反正干死2级c语言足够了。自己也不懂c，先给个5分。", "marks": "力荐"}
{"content": "入门的经典书籍，语言通俗易懂，排版调理清晰，还有较多的有趣实例", "marks": "力荐"}
{"content": "程序员真的是集幽默与可爱于一身的人。作者很棒啊，一些体现在代码里面的玩笑也真挺有趣的。它值得成为所有人的编程入门书！(听说出第六版了，这得入手)", "marks": "力荐"}
{"content": "讲的很全，很简单，非常适合入门。", "marks": "还行"}
{"content": "需要读很多遍的经典书籍。", "marks": "力荐"}
{"content": "糟糕的扫描像素。", "marks": "推荐"}
{"content": "good 😂", "marks": "力荐"}
{"content": "好久好久没用C了。", "marks": "力荐"}
{"content": "由浅入深，讲解全面，可能是最好的入门书了。", "marks": "力荐"}
{"content": "入门不错", "marks": "推荐"}
{"content": "书还是不错的，就是我他妹的看太墨迹了，本来早该看完了，也不知道在忙什么。我了个去    终于看完了，谭浩强就是一坨屎，这本书太好了，我应该多看几遍。", "marks": "力荐"}
{"content": "大致扫完了，比较基础，习题也很少特别难的，适合入门。", "marks": "力荐"}
{"content": "翻过一下，写得挺简单，适合新人", "marks": "还行"}
{"content": "C入门书，写得通俗易懂。", "marks": "力荐"}
{"content": "当之无愧的C语言入门的经典级教材。第六版倒是出了，然而也没那么心思啃英文了。", "marks": "力荐"}
{"content": "以前本科用的教材和这个比起来都是一堆狗屎", "marks": "力荐"}
{"content": "很好！", "marks": "力荐"}
{"content": "书写地很是详细，结合例子容易理解。", "marks": "推荐"}
{"content": "今年前后读了三遍，每遍都有新的体会。", "marks": "力荐"}
{"content": "一本入门级的全面的C语言经典之作", "marks": "力荐"}
{"content": "想打10星，比清华老谭的书易读太多了", "marks": "力荐"}
{"content": "想打6星，因为这本书真的好6。\r\r毫无疑问，这本书是很适合作为入门C的第一本教材使用的。但是！不仅止于此，从这本书的厚度（中文第五版626页）可以看出这本书的内容是很丰富的，可以说很多编程中会遇到的细节作者都简洁明了的进行了讲解。也就是说，即使你已经有一定的编程经验，这本书依旧是有用的，它可以帮助你养成良好编程习惯并让你对常用语法加深理解。\r\r很好很好的一本书，目前还剩16、17两章没读完，居然有点舍不得。", "marks": "力荐"}
{"content": "面面俱到，适合初学者的工具书。", "marks": "推荐"}
{"content": "极度推荐啊 。现在看来有点啰嗦，一大段文字加上一大段代码还是带有驱动程序的，不过还是很适合入门人士", "marks": "力荐"}
{"content": "鄙视销量一千万册的那个", "marks": "力荐"}
{"content": "不觉得厚", "marks": "力荐"}
{"content": "里面有少许错误，最后几章可以再深入详细点", "marks": "推荐"}
{"content": "当初大一的时候，是谭浩强的书，大二读的这本书。虽然告别编程了。不过这真是经典~", "marks": "推荐"}
{"content": "C和C++一起学。基础书。可以说写得够详尽，也可以说太啰嗦。", "marks": "推荐"}
{"content": "和C++ Primer plus一样 每次有人问吖我想要开始编程怎么开始啊？我就会推荐c/c++ Primer之类", "marks": "推荐"}
{"content": "难得的好翻译！", "marks": "力荐"}
{"content": "good", "marks": "推荐"}
{"content": "基础内功-2012年10月24日将郝斌老师的视频看完（推荐网上有免费下载的），看看这本书，觉得很不错，编排很有条理性，与王爽的《汇编语言》一样，是本很不错的入门书。", "marks": "力荐"}
{"content": "内容很丰富，适合入门学习，这是我第一次把一本如此厚的书认认真真的看了两遍，但是看完之后才发现，这只是万里长征的第一步。", "marks": "力荐"}
{"content": "讲了很多细节，是本好书", "marks": "力荐"}
{"content": "这本书对于深入了解一下windows网络编程还是有点帮助的\n前面三章很不错，比较详细，\n后面的ftp,email.不能实现。\n串行通信那么一点，讲不清楚。", "marks": "还行"}
{"content": "没看完，呵呵", "marks": "推荐"}
{"content": "就。啊。可怕", "marks": "较差"}
{"content": "这本书的例子很差。。。", "marks": "还行"}
{"content": "百读不厌，必备手册", "marks": "力荐"}
{"content": "翔实。如果有机会应该对以前写的js都重构，也对学习理解jquery有很大裨益。", "marks": "推荐"}
{"content": "Only a little bit old, but still very helpful.", "marks": "力荐"}
{"content": "js入门必备，及工具书", "marks": "力荐"}
{"content": "中规中矩", "marks": "还行"}
{"content": "系统性认识下JS", "marks": "推荐"}
{"content": "5th ", "marks": "推荐"}
{"content": "一本字典，中文翻译不给力，作为入门书的话，还是搭着zakas的《javascript高级程序设计》一起看吧，这样会好懂点。如果只买一本的话，当然是zakas那本了", "marks": "推荐"}
{"content": "第四版，中文，有点老了。有时间看看英文第五版。", "marks": "还行"}
{"content": "这是一本必备的手册。", "marks": "力荐"}
{"content": "工具书宝典必备", "marks": "推荐"}
{"content": "做为C,C#,Java,Ruby后的我学的第5个语言，这本处女书，还行吧，扫了一遍,JQuery，我来了。", "marks": "还行"}
{"content": "学习过了。收获不少。现在要的是实战技巧。", "marks": "力荐"}
{"content": "读吧，昏天黑地的读！", "marks": "力荐"}
{"content": "有这本书足够了吧", "marks": "推荐"}
{"content": "可能是因为我对js的兴趣在减少, 现在来评价, 对其有失公允.", "marks": "还行"}
{"content": "JavaScript 程序设计的教科书", "marks": "推荐"}
{"content": "大概翻了下，嫌太厚，决定去看 good parts 了。", "marks": "较差"}
{"content": "很厚，需要经常查词典。太厚了，而且很难，读到一半完全丧失自信，放弃了。", "marks": "还行"}
{"content": "略嫌厚重", "marks": "推荐"}
{"content": "JavaScript内功修炼宝典", "marks": "力荐"}
{"content": "JS系Q2 太厚。没有精粹读起来舒服。", "marks": "还行"}
{"content": "当字典用了", "marks": "推荐"}
{"content": "大部头看得累死了", "marks": "力荐"}
{"content": "JavaScritpt", "marks": "力荐"}
{"content": "经典，不多说", "marks": "力荐"}
{"content": "既然是权威指南，大家还是读把。哈哈，书中1/5的内容讲的是JS的历史和语法，1/5是关于常用的函数以及作用域等概念的介绍，3/5完全是所有DOM编程以及JAVASCRIPT对象的一个API文档，作为工具书非常不错，如果谁人能完整的看透书籍里面所有的内容以及背诵API文档的话，那他肯定是精通了。哈哈。", "marks": "力荐"}
{"content": "不错的javascript 的书。 ", "marks": "推荐"}
{"content": "这本书作为手册不错，很多细节点可以查看。", "marks": "力荐"}
{"content": "Web开发必备 JavaScript 经典手册", "marks": "力荐"}
{"content": "太厚了，适合入门第一本看，不然后面没耐心。", "marks": "还行"}
{"content": "前年大四上学期在学校里死磕，结果最后证明自己是学不会的，放弃了", "marks": "还行"}
{"content": "很好的JS参考书", "marks": "推荐"}
{"content": "深入学习JavaScript的好书， 同时也是一本不错的工具书", "marks": "推荐"}
{"content": "O'Reilly，保质保量。虽然讲继承那段是错的，不妨碍其成为Js教科书的经典", "marks": "力荐"}
{"content": "很好的书", "marks": "推荐"}
{"content": "评价是针对翻译的, 又是一本翻译毁了的好书, 有条件的建议读原版.", "marks": "较差"}
{"content": "当作工具书吧", "marks": "还行"}
{"content": "挺不错，感觉对“类”的描述比较混乱，没有 c++ 来的清晰！", "marks": "推荐"}
{"content": "只能当参考书用", "marks": "较差"}
{"content": "js的经典书籍，里面的正则也讲的不错。搞web开发的最好看看。", "marks": "力荐"}
{"content": "我觉得有些过誉了，平时还是网络比较好用。", "marks": "推荐"}
{"content": "js 大坑", "marks": "力荐"}
{"content": "当手册还是不错的", "marks": "推荐"}
{"content": "包含了很多，不过个人觉得作者的语言表述还是比较绕。。。", "marks": "推荐"}
{"content": "二刷还是三刷了", "marks": "力荐"}
{"content": "权威指南的一贯好书，适合深入学习 JS 的同学，如果写框架的话就更应该看了。", "marks": "力荐"}
{"content": "参考书，全面的很啊", "marks": "力荐"}
{"content": "这个东西发展太快了，还是看下最新的资料更合适，不过作为一个基础入门还算合格，只是不要盲从", "marks": "还行"}
{"content": "web程序员都需要读此书。没有扎实的JavaScript基础，根本不可能精通AJAX", "marks": "力荐"}
{"content": "这是一本参考书,不是一本入门教学书", "marks": "推荐"}
{"content": "空闲的时候草草的读了下，这本书真应该是遇到问题的时候翻阅的。而且很多的东西都已经不太流行了。不过Javascript这语言，算是开发当中还不错的语言了。", "marks": "推荐"}
{"content": "js 入门经典", "marks": "力荐"}
{"content": "看了好几个月才看完，书比较厚重，讲的比较细致。", "marks": "力荐"}
{"content": "学习javascript必看  学习笔记：https://www.evernote.com/shard/s20/sh/83c1aced-abdf-4866-a6a1-8f247815b5c2/eec821d6a4fb9940ff7deea4c190d713", "marks": "力荐"}
{"content": "著名的犀牛书，经典。", "marks": "力荐"}
{"content": "最好的JS书吧。很全，很厚，看完了。以后就是本非常好的手册了。", "marks": "力荐"}
{"content": "公认的一本好工具书", "marks": "推荐"}
{"content": "http://wangbinjr.blog.sohu.com/", "marks": "推荐"}
{"content": "大四毕业设计精心研究的一本书，非常不错，全面，准确，每天看一看，保证开卷有益。", "marks": "推荐"}
{"content": "对JS的诠释非常详细和全面", "marks": "推荐"}
{"content": "参考书籍,如想入门,不建议看这本书..", "marks": "推荐"}
{"content": "内容很完善，讲解也很深入，但是翻译实在是够烂。", "marks": "推荐"}
{"content": "挺不错的一本书，详细、到位！", "marks": "力荐"}
{"content": "已阅，参考手册的部分省去。可惜看的是同事的旧版，等打折的时候，再入手新版。", "marks": "力荐"}
{"content": "尝试用这本书作为入门js的书籍，发现讲的很难懂。只能作为一本参考书籍。", "marks": "推荐"}
{"content": "大砖头，长期无用武之地，垫桌脚专用。", "marks": "推荐"}
{"content": "犀牛书，，必备，，和高级编程搭配，绝了", "marks": "力荐"}
{"content": "编程，手头必需。", "marks": "推荐"}
{"content": "感觉很全,结构清楚", "marks": "力荐"}
{"content": "以前以为这是一本入门级别的书，但是看完以后才发现这本书应该归为高级教程，它从语言本身的特性说起，到客服端详细的讲解，每个细节都说的很清晰，是一本进阶提高的好书。", "marks": "力荐"}
{"content": "犀牛书绝对是前端开发必读.", "marks": "力荐"}
{"content": "这个叫权威手册更适合", "marks": "力荐"}
{"content": "没看完，呵呵😄。花了20天只看了第一部分，果断转《你不知道的JS》，感觉像看小说一样过瘾。（逃", "marks": "推荐"}
{"content": "受益匪浅。JavaScript入门比看。", "marks": "推荐"}
{"content": "工具书。", "marks": "推荐"}
{"content": "好书！ 很有用！", "marks": "力荐"}
{"content": "非常全面且权威的js参考书籍", "marks": "力荐"}
{"content": "很经典的书,学习Web必读的书此外o'relly的css权威指南也值得收藏.可惜电力出版社不如机械工业出版社翻译的好", "marks": "力荐"}
{"content": "当你熟悉了js时，再反过来细读，才会觉得，这特码不是针对初级的，否则，你当初真不知道字里行间的话的含义啊！", "marks": "推荐"}
{"content": "本书不仅适合初学javascript的人们，也很适合当作工具书以及加深理解概念翻阅。虽然后面的章节略显冗余（相当于api参考），但是整书对js的讲解还是非常透彻。", "marks": "还行"}
{"content": "粗略过完了这本书，适合复习或者字典查阅", "marks": "力荐"}
{"content": "javascript的工具书来看，很全，就是太厚了些，可以挑重点看，非重点大概了解即可", "marks": "推荐"}
{"content": "工具书", "marks": "推荐"}
{"content": "介绍了方方面面，同时不乏深度。好书", "marks": "推荐"}
{"content": "09年公司购买此书，还是比较好的。例子比较通俗易懂。适合基础入门。", "marks": "力荐"}
{"content": "的确很权威，越看到后面越觉得这本书适合前端开发人员", "marks": "还行"}
{"content": "来北京得到的第一本书。", "marks": "力荐"}
{"content": "经典不解释", "marks": "力荐"}
{"content": "很厚实的一本书，自然内容也相当的厚实。需要很大的耐心！", "marks": "力荐"}
{"content": "想学js的，从它开始吧～", "marks": "力荐"}
{"content": "web前端学习交流群：528576461欢迎初学和进阶中的小伙伴", "marks": "力荐"}
{"content": "javascript工具书，心目中不如javascript高级程序设计 但仍然不失为一本好书", "marks": "推荐"}
{"content": "可惜太厚", "marks": "推荐"}
{"content": "好书。。。淘宝的大牛翻译的", "marks": "力荐"}
{"content": "JavaScript", "marks": "推荐"}
{"content": "圣经吧。入门必备。", "marks": "力荐"}
{"content": "2234341321\r\n", "marks": "力荐"}
{"content": "老鸟和菜鸟都有收获！", "marks": "推荐"}
{"content": "介绍了各种求和、二项式系数、递推式的处理方法；有限积分、各种整数函数、生成函数技巧。这些都是算法复杂度分析等问题中是必备工具和技术。大量的带答案的习题更增加本书的实用性。其中的概率章节较简略。全书不仅深入浅出且有趣，这是一本绝对是聪明人写得书。2012.5.2-2012.8.27", "marks": "力荐"}
{"content": "课本好嘛！！！！！！！！！！！！", "marks": "力荐"}
{"content": "计算机程序设计艺术的prerequisite， 装逼必备～    如果只是普通的就业，   基本不用看鸟～  ", "marks": "推荐"}
{"content": "I lack a huge amount of practice...", "marks": "力荐"}
{"content": "一梦十年啊我擦，在火车上看完了一章", "marks": "力荐"}
{"content": "书选材不错， 只可惜不深， 如组合类计算不如看专门书籍。", "marks": "推荐"}
{"content": "好书啊，- -，就是英文版读得有点吃力~", "marks": "力荐"}
{"content": "非科普，绝对不适合工程人士阅读。它首先是一门'数学'，之后才是计算机科学基础。如果想完全看懂，建议先做一个多（>1）年计划。", "marks": "力荐"}
{"content": "只看了部分，很好的书，有趣的排版和吐槽，因为时间有限，后面的部分暂时不看了。", "marks": "力荐"}
{"content": "好书", "marks": "力荐"}
{"content": "just have fun", "marks": "力荐"}
{"content": "放弃", "marks": "力荐"}
{"content": "Knuth爷爷", "marks": "力荐"}
{"content": "非常有趣的一本书，由浅入深带你进入计算机的数学。这本书让数学变得生动有趣，奇妙无比。如果你爱数学，你肯定会爱这本书。", "marks": "力荐"}
{"content": "经典中的经典，希望能中文版能够再版。", "marks": "力荐"}
{"content": "组合数学“基础”的圣典之一啊", "marks": "力荐"}
{"content": "装逼用的~", "marks": "力荐"}
{"content": "基于以下原因负责任推荐 :1.Knuth is co-author  2.内容实用、文笔幽默、深入浅出  3.500道习题:从warm-up 到 research problem，均有答案或提示(100+页) 4.旁边附有之前学生的“学习感言” 不乏幽默犀利甚至温馨提示 ", "marks": "力荐"}
{"content": "是的，离散的、随机的、组合的、一切不连续的，都是具体的……", "marks": "力荐"}
{"content": "只读了很小一部分，不读第二遍不行。", "marks": "力荐"}
{"content": "对于ACMer来说，这玩意真就是字典。。还是英英字典。。。。。", "marks": "推荐"}
{"content": "the very basic book for cs students.", "marks": "力荐"}
{"content": "超级好看，尤其是侧栏，太可爱了", "marks": "力荐"}
{"content": "虽然也没看完吧 不过它还是教材呢", "marks": "力荐"}
{"content": "对于数学的思维，是突破性进展", "marks": "力荐"}
{"content": "其实我没看完。", "marks": "推荐"}
{"content": "实在找不到文笔更风趣的书了", "marks": "力荐"}
{"content": "看完这个，才知道什么叫特么的数学！~", "marks": "力荐"}
{"content": "看了两章，有启发可太费劲了...", "marks": "力荐"}
{"content": "貌似没有时间看第二遍了，最近时间安排的太紧。等闲下来，看心情挑当时觉得好玩的部分再翻翻。", "marks": "力荐"}
{"content": "不错的基础书籍，就是需要时间理解。", "marks": "推荐"}
{"content": "具体数学", "marks": "力荐"}
{"content": "或许是六颗星", "marks": "力荐"}
{"content": "建议菜鸟出征随身携带，很多诡异的题目对应诡异的原理这里都能找到～", "marks": "推荐"}
{"content": "妈蛋最后还是没看完…习题太难了：（", "marks": "力荐"}
{"content": "看了一半实在没时间看下去了。篇幅不长，但是内容翔实易懂（相对易懂XD）。", "marks": "力荐"}
{"content": "Good", "marks": "力荐"}
{"content": "给大神跪了！", "marks": "力荐"}
{"content": "interesting name of 'concrete' from computer science and discrete", "marks": "推荐"}
{"content": "只看了和组合数学有关的部分，很虐。", "marks": "力荐"}
{"content": "没什么说的了。", "marks": "力荐"}
{"content": "慢慢啃。", "marks": "力荐"}
{"content": "TAOCP的配套书, 以后如果看TAOCP还得读几遍", "marks": "力荐"}
{"content": "哇！好厉害！！然后呢？", "marks": "还行"}
{"content": "消耗脑细胞的一本书，每一章节十来页书，就囊获了几乎之前一学期的内容。题目依旧很困难，但是也是思维挑战的好书。", "marks": "推荐"}
{"content": "数学基础不行看不大懂", "marks": "推荐"}
{"content": "不用太多言语了吧，只要看看作者就知道是必读之精品了！", "marks": "力荐"}
{"content": "英文版，有点难，算法的基础，类似后缀数组的设计思想就来源与本书吧", "marks": "推荐"}
{"content": "读过 = 没读", "marks": "力荐"}
{"content": "入门性的算法书，重新夯实数学基础", "marks": "推荐"}
{"content": "from 2010.7(around 15)", "marks": "力荐"}
{"content": "God is Knuth.", "marks": "力荐"}
{"content": "哎，我还是没读完啊", "marks": "力荐"}
{"content": "没耐心看，有一些东西已经学过了，在《应用组合数学》中", "marks": "还行"}
{"content": "这本书的中文版和英文版我都买了，但是目前还没看完。书籍秉承高大爷一贯的风格，细致入微，不放过任何值得分析和得出结果的点。", "marks": "力荐"}
{"content": "好书。", "marks": "力荐"}
{"content": "买了好久了也一直没有看完...", "marks": "力荐"}
{"content": "非常喜欢的一本书，种种原因，可惜才看了几章，后面的题目也搞不完。", "marks": "力荐"}
{"content": "虽然没有完全理解，但至今屹立在工作台，而非书架上的一本书，闲来再看一些。", "marks": "力荐"}
{"content": "只看过几章，长见识", "marks": "推荐"}
{"content": "大师经典。", "marks": "力荐"}
{"content": "大胡子 Blair 强烈推荐的课本，从斐波那契数列开始讲了很多数学问题，有一定的趣味性，但也比较深奥，确实给解决数理问题提供了很多思路。", "marks": "力荐"}
{"content": "我的感觉就是数论加组合数学，我在看这本的时候已经看过了数论和组合数学，所以算是复习了。", "marks": "推荐"}
{"content": "knuth大牛的著作，做过几章翻译，可惜未读完。。。。", "marks": "力荐"}
{"content": "读了前几章，很有意思，其实我觉得这本书不应该算是数学类的书，应该算是写给程序员的工具书，不像那种专业的数学书那么枯燥", "marks": "推荐"}
{"content": "第一次看时看到了1/3,第二次看时又从头看到了2/3", "marks": "力荐"}
{"content": "读了前几章然后就不行了。。", "marks": "力荐"}
{"content": "书是好书，不过当时看得略吃力", "marks": "力荐"}
{"content": "学的不怎么样，不过这本书确实经典", "marks": "力荐"}
{"content": "其实基本都是高中数学。", "marks": "力荐"}
{"content": "相当难", "marks": "力荐"}
{"content": "经典", "marks": "力荐"}
{"content": "计算机今后发展的趋势就是用数学来代替你所描述的语言，如果没有良好的数学功底是不可能在计算机科学这条路上走很远的，尤其是线性代数，对于今后在计算机领域占据主导地位的Machine Learning来说，非常重要，推荐大家去学习MIT的视频课程，非常好", "marks": "力荐"}
{"content": "展现数学的美感的书。。", "marks": "力荐"}
{"content": "中文版翻译的不错，值得一读。", "marks": "推荐"}
{"content": "晚上闲着翻了一遍，太浅！", "marks": "还行"}
{"content": "Haskell写起来别扭，读起来恶心。", "marks": "还行"}
