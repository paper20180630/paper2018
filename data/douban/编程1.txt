{"content": "一言难尽 日后再写书评", "marks": "力荐"}
{"content": "用的 IDE 是 Android Studio，棒。偶有错误，影响不大，浅显易懂，适合入门。少点重复就好了，经常出现同样的内容一页之内看了两三遍的情况。哇，我好像是第二个马克看过的人也。【2016年5月9日】", "marks": "推荐"}
{"content": "浅显易懂的Android开发入门指南，可以帮助读者快速地了解Android的整体框架。图文并茂，用词通俗。", "marks": "力荐"}
{"content": "很棒的图书，注意出版年限，之前有个2011年版本的。", "marks": "力荐"}
{"content": "走马观花。", "marks": "还行"}
{"content": "这本书在细节与整体上平衡得很好。系统类的书就得这么写，不能从零开始讲，否则得十倍的厚度根本没法儿看。 第一遍基本翻完了。", "marks": "力荐"}
{"content": "基础和少量高级的结合体", "marks": "推荐"}
{"content": "中译有误，明明是入门概览，怎么就译成精通了呢？书作为概览有价值，详略上再改善些就更好了。", "marks": "推荐"}
{"content": "对linux的大局观", "marks": "力荐"}
{"content": "书名误导人，介绍的范围还挺广，连systemd都占了一定的篇幅，不过深度太浅", "marks": "推荐"}
{"content": "书名标题党，根本和精通没关系，就是本入门书，被中文译名给糟蹋了。", "marks": "还行"}
{"content": "入门linux够用了", "marks": "推荐"}
{"content": "粗略翻过，东西很多，每项都是点到为止", "marks": "推荐"}
{"content": "因为debian服务器，认真的看了一遍，真是浅显易懂，非常适合入门。", "marks": "力荐"}
{"content": "言简意赅", "marks": "力荐"}
{"content": "LINUX 入门和一些知识点的补全 ", "marks": "推荐"}
{"content": "讲到很多，但不深入", "marks": "推荐"}
{"content": "作为教程看有些枯燥，作为手册看讲得又太浅。。整体还可以，有几章还不错。", "marks": "推荐"}
{"content": "基础，读起来挺累的。", "marks": "还行"}
{"content": "失眠，简单翻完了。作为入门书还是讲的挺好的，深入浅出。不过呢，大多数东西去过从头折腾/看过一遍archlinux的wiki就都能了解到了，有些还更详细些。对于熟系的用户，新本书的价值在它推荐的深入阅读的书目。", "marks": "还行"}
{"content": "入门还不错 推荐的书目非常好", "marks": "推荐"}
{"content": "自己的基础不好，但这本书让我提高了许多", "marks": "力荐"}
{"content": "看到这种low的书名，就是一般的书籍啦，只能让你入门而已…", "marks": "还行"}
{"content": "我的入门书籍，真心不错，讲解了Linux是如何工作的，还有一些实践的命令。作为入门是不错的选择！", "marks": "力荐"}
{"content": "彩色印刷，还挺时髦~", "marks": "推荐"}
{"content": "python大法好。Tkinter做界面看起来不错。pygame看起来也不错。", "marks": "还行"}
{"content": "只有第一章似乎有用", "marks": "还行"}
{"content": "不错，整本书设计的比较合理。通过实际例子讲了python的一些基础。主要是用了做界面gui的包。", "marks": "推荐"}
{"content": "简单入门还可以\n实战练习，不会太难上手\n但是不会学到太深", "marks": "还行"}
{"content": "看完了，个人感觉不是特别号，如果要入门Python的话还是建议去廖雪峰的网站吧。另外，Adventure 8 里的素材其实在9里面可以找到。\n不知道大家再Adventure 8中的素材在哪里下载的？进行不下去了。\n", "marks": "推荐"}
{"content": "只是简单罗列一下 有哪些工具 没有价值的书", "marks": "很差"}
{"content": "战术流程 有很多挺有意思的资源  ", "marks": "推荐"}
{"content": "现在的黑客都沦为只会用工具了", "marks": "较差"}
{"content": "适合有较多web开发经验的人，用过五六个web框架再来看会好很多", "marks": "推荐"}
{"content": "也许作者是想写给那些从事数年后端开发的资深工程师。他们有一定的开发经验和充足的时间，通晓工作中现有的开发框架的同时闲来无事想“长长见识”。如果你满足以上的条件那么恭喜你就是作者的读者群。", "marks": "还行"}
{"content": "看了下目录就觉得这也太水了点吧", "marks": "较差"}
{"content": "又老又肤浅。", "marks": "较差"}
{"content": "内容有点松散，点到为止。", "marks": "还行"}
{"content": "非常宽泛…指路", "marks": "还行"}
{"content": "讲的比较泛泛。。。", "marks": "还行"}
{"content": "不建议买", "marks": "很差"}
{"content": "有价值的内容不多", "marks": "还行"}
{"content": "全是各种框架工具的浅尝辄止的介绍", "marks": "较差"}
{"content": "教你如何快速的用现代的，轻量级的开发方法来实现自己的idea，并尽可能快的获得用户反馈，为快速迭代提供条件。", "marks": "力荐"}
{"content": "知识比较全面，成体系，读起来很过瘾，不光介绍工具和框架，还分享了开发方法，TDD，CI，CD，环境自动化构建等。端到端，可以给一个轻量级Web应用开发相关技术的整体视图。", "marks": "力荐"}
{"content": "还不错，但是体系不太全面而且过度依赖ruby．当然最后给的关于奇葩植物的网站架构例子很不错．前面的部分类似各个包的应用说明．不过闪光点还是有的至少不是那种照抄教程的书，但是比较偏ruby．所以不熟悉ruby慎重．", "marks": "推荐"}
{"content": "明明只有一个pull request概念，硬是扩成本书", "marks": "推荐"}
{"content": "清晰易懂 作为教程来说 已经是非常难能可贵了 于日常使用也已足够 至于更高级的技巧 或许还得仰仗 Pro Git 吧。", "marks": "力荐"}
{"content": "Github是个好东西...", "marks": "还行"}
{"content": "绝佳的git与github入门书籍，能get到二大核心技能：如何在实践中git代码和如何利用github参与社会化编程。", "marks": "力荐"}
{"content": "与几个关键的地方步骤过于简略，“保存并关闭”。。。看得一头雾水，其它还好。", "marks": "推荐"}
{"content": "Github入门可看", "marks": "推荐"}
{"content": "入门书", "marks": "力荐"}
{"content": "十分简单，大地可以当作GitHub的帮助来使用。对于git讲的不多呢。", "marks": "推荐"}
{"content": "字典", "marks": "推荐"}
{"content": "了解github平台的那一整套流程，入门还是不错的\n", "marks": "推荐"}
{"content": "简明清晰，相当入门，适宜于对 GitHub 的总体把握。", "marks": "还行"}
{"content": "非常不错的入门书籍；貌似的确国内没有类似的入门书籍。", "marks": "推荐"}
{"content": "some step by step guide ", "marks": "还行"}
{"content": "6413.04.10", "marks": "较差"}
{"content": "很好的入门手册，终于看懂了git的工作流。", "marks": "力荐"}
{"content": "书第一次看就掉页！内容和网站上会有一些重复。", "marks": "推荐"}
{"content": "简单明了直接上手的github入门指南，最重要的是树立起版本管理的理念、建立工作流。如果能对文件区、缓存区、分支的概念作详细介绍与区分就更好了。", "marks": "推荐"}
{"content": "与全世界开源开发者交流的平台\n一些git命令行就不在此赘述\n可以用github pages+hexo搭建静态页面博客\n也可以用来展示HTML项目页面\nguihub jobs面向全世界招聘程序员的公告板\n", "marks": "推荐"}
{"content": "主要是将应用，我感觉将的够细了，我觉得挺不错的，入门了，", "marks": "力荐"}
{"content": "很不错的一本Github入门书", "marks": "力荐"}
{"content": "把github上每个按钮的功能基本都给介绍了下, 还是从里面学到了一些东西. 值回书价了.", "marks": "推荐"}
{"content": "对着作者的例子敲一遍，折腾一两周就可以学会了。", "marks": "力荐"}
{"content": "Github 入门书籍", "marks": "推荐"}
{"content": "出差的路上看完的，不错~", "marks": "推荐"}
{"content": "有帮助，尤其是 github flow部分", "marks": "推荐"}
{"content": "git部分还是要参考pro git", "marks": "推荐"}
{"content": "github的入门书，内容少而静，总算弄明白pr的一次流程", "marks": "推荐"}
{"content": "浅显易懂 然后看git pro", "marks": "推荐"}
{"content": "本来就是一个入门书籍，干嘛苛求那么多，确实可以帮助新手少走很多弯路，可以推荐。", "marks": "力荐"}
{"content": "工具书", "marks": "推荐"}
{"content": "写得比较简单", "marks": "还行"}
{"content": "入门书，讲的很清楚。不过后半部分大多数是和企业有关的所以暂时用不到。还有的话，其实如果英文好可以直接看github的文档，但是对于我来说看看中文会比较印象深刻一点。", "marks": "力荐"}
{"content": "重点就放在pull request 上，可惜我这菜B 啊，一年没几次在GitHub Pull Request.", "marks": "推荐"}
{"content": "挺好的关于github的书籍，可以关注书中的团队协作git–flow那块内容，至于git基础，还是推荐廖雪峰的教程", "marks": "推荐"}
{"content": "github这么火，是时候去了解一下现在开源社区的东西了。\n看完之后，感觉确实不错，很多github的功能，如果不通过这种书来看，自己可能要摸索挺久的", "marks": "力荐"}
{"content": "绝知此事要躬行", "marks": "还行"}
{"content": "感谢这个地球上的所有大神", "marks": "力荐"}
{"content": "第八章跳过没看，其他部分基本上都有了解，对自己有价值的地方不多。get 了一些 github 的小技巧。", "marks": "还行"}
{"content": "挑重点看，当复习；吐槽下git flow…真心复杂", "marks": "推荐"}
{"content": "还行吧，对于完全没接触过git的人来说挺好上手的", "marks": "推荐"}
{"content": "走马观花读完，不作为工具书，重点在github，不在git", "marks": "还行"}
{"content": "很入门", "marks": "推荐"}
{"content": "对于Git小白来说略懵逼", "marks": "还行"}
{"content": "最好的GitHub入门", "marks": "力荐"}
{"content": "也很可爱", "marks": "推荐"}
{"content": "书尺寸不大，作为工具书刚刚好。内容翔实，整体逻辑非常清晰，一步一步的教，很适合初学者。排版精美，阅读起来非常容易吸收。看了两天， 按照书中所说的一步步敲完了命令，虽然更深层次的功能没有用到，但是那是实践的问题了，基础已经完全吸收。完全赞！！！！就喜欢这种小巧但是内容丰富不啰嗦的书。", "marks": "推荐"}
{"content": "重点是GitHub而非Git，强烈推荐", "marks": "力荐"}
{"content": "好书啊。", "marks": "力荐"}
{"content": "不错的教程，更像是网站说明书，哈哈", "marks": "推荐"}
{"content": "Pull-Request的介绍，比较有价值。", "marks": "推荐"}
{"content": "不是特比理想，开阔眼界还阔以", "marks": "还行"}
{"content": "很有意思的一本书 日本人的写作风格值得学习", "marks": "推荐"}
{"content": "廖雪峰的教学视频更有用些...", "marks": "还行"}
{"content": "github入门再好不过了～  对于小白而言\n工具类的书籍", "marks": "力荐"}
{"content": "整本书的精华就在第四章\n其他的如果闲着没事可以随便翻翻。", "marks": "力荐"}
{"content": "细致实用", "marks": "推荐"}
{"content": "github入门书，工具书。", "marks": "推荐"}
{"content": "两天时间翻完了  相当于一本使用说明", "marks": "推荐"}
{"content": "1.需要基础代码知识\n2.我觉得自己动手在github实践比看书更能上手", "marks": "还行"}
{"content": "泛泛而谈，和个人笔记类似", "marks": "还行"}
{"content": "讲解了Git、github以及流程模型的方方面面，最具特色就是以实际开发环境出发，没有涉猎到深层和枯燥的高级理念，是一本企业实践git版本管理的好书", "marks": "力荐"}
{"content": "我…太…渣…了😔", "marks": "还行"}
{"content": "一本关于github的使用说明书，关于git的原理讲解比较简略，先用着然后慢慢学。", "marks": "推荐"}
{"content": "简单了解 GitHub 不容错过的一本书", "marks": "推荐"}
{"content": "非常不错的入门书，特别是学习GitHub比起单纯的学习Git更有帮助。", "marks": "推荐"}
{"content": "额。。。我以为是讲git的", "marks": "还行"}
{"content": "非常实用的基础书，可以跟着书上步骤一点点走下来。", "marks": "力荐"}
{"content": "不看也不会错过什么，看了也没啥，不花多少时间。", "marks": "还行"}
{"content": "学习git基础命令和github流程看前7章就够了,太啰嗦了", "marks": "推荐"}
{"content": "我认为讲Git命令的例子不是很好。另外由于github界面的改动，里面的很多解说都废了。", "marks": "较差"}
{"content": "挺不错的Git入门教程，配合廖雪峰的Git教程基本上就能完成常用的所有操作；\n要想深入学习，可以阅读《Pro Git》这本书", "marks": "力荐"}
{"content": "日本人写的书真是细致，还有各种小例子，入门读物~", "marks": "推荐"}
{"content": "言传身教通俗易懂手把手教的日系技术书不解释", "marks": "力荐"}
{"content": "很简短的一本小册子，用了一节课的时间就看完了。简单介绍了一下Git，大部分都在介绍GitHub的各种功能，可以作为一本入门的书来看。想了解原理的或者更高级的用法还是应该看《Pro Git》。", "marks": "推荐"}
{"content": "4.5小时看完\n两个GitHub工作模式讲的很好", "marks": "力荐"}
{"content": "git入门", "marks": "推荐"}
{"content": "非常棒的一本介绍Git以及Github的书，非常适合初学者，翻译的非常棒。", "marks": "力荐"}
{"content": "入门不错，但是深入还差点。", "marks": "推荐"}
{"content": "算入门的书,翻翻复习一下", "marks": "还行"}
{"content": "还行", "marks": "还行"}
{"content": "适合入门，内容丰富，扫盲了很多以前不知道的盲点，也真正意识到GitHub的强大，超乎我之前的想象。", "marks": "推荐"}
{"content": "不错的入门书，通俗易懂，翻译的挺好", "marks": "力荐"}
{"content": "不错，Github工具书一本", "marks": "力荐"}
{"content": "GitHub快速搞起", "marks": "推荐"}
{"content": "去年读了，是本好书。很多实践性示例，多动动手，有收获。", "marks": "力荐"}
{"content": "这本书怎么说呢，如果你是有点基础的，想系统学习一下的，建议不要看，因为就从我个人角度看，前八章的知识你找个博客或者看看官方的中文文档，一两个小时就会了，第八章后面的内容，对于我来说工作上用不上，所以，一般般吧，上班没事看着玩吧。", "marks": "较差"}
{"content": "讲了一些常用的操作，没有对命令做深入的讲解。", "marks": "还行"}
{"content": "挺不错的一本书。以前一些似懂非懂的东西，通过它系统学习下来了，特别是github的一些小技巧，如果不是书中一一道明，估计要花很长的时间才知道。", "marks": "推荐"}
{"content": "查漏补缺的书", "marks": "还行"}
{"content": "对于github相关的都有", "marks": "力荐"}
{"content": "很浅显的入门级读物，更详细的读后感见书评。PS：翻译的很用心，可见译者日语功底深厚。", "marks": "还行"}
{"content": "这本书是github入门与实践，不是git入门与实践。第三章讲的主要是git的几个基本命令，其他地方通篇都在讲github的页面操作和基于github的开发流程。不如网上一些blog关于git的干货多", "marks": "还行"}
{"content": "很有日本人写的技术类书籍风格。对于代码管理有了一个初步的概念，同时学习到了Git的基本操作。", "marks": "还行"}
{"content": "入门手册，大和总是把复杂的东西写的简浅易懂，书本小，适合随身携带阅读", "marks": "推荐"}
{"content": "浅显易懂，示例全面。也可以作为Git的入门学习资料。", "marks": "推荐"}
{"content": "感觉自己好闲，花时间看了一本网站说明书，还是过时了的。有这功夫不如自己实际操作一番。", "marks": "较差"}
{"content": "很好的一本书，github入门必读，语言通俗，需要一边读一边实践。", "marks": "力荐"}
{"content": "懂的看了没用，不懂的看了也不懂\n两百几页的东西居然基本概念都说不清，甚至根本没说，这是让人入门的嘛？！知识点非常零散，感觉就是把各个命令，各名称拿出来简单说一遍的流水账。", "marks": "很差"}
{"content": "很不错的入门书。省了好多摸索的时间。", "marks": "力荐"}
{"content": "这本书确实写的不错，很详细，之前入门Github的时候就是用这本书的知识玩转的，比网上写的那些教程好多了。", "marks": "力荐"}
{"content": "内容太少，感觉吃不饱。", "marks": "还行"}
{"content": "日本人真的是事无巨细地写教程啊。。。", "marks": "力荐"}
{"content": "一般吧，知道了一点新工具。恶意代码分析和最后四道题的思路还是值得看一下。", "marks": "还行"}
{"content": "太基础了，没有什么技术含量。", "marks": "还行"}
{"content": "一般般，了解新工具可以。都是应用层的审计。", "marks": "还行"}
{"content": "参数化应用方向介绍，语言不够精准干练，缺乏归纳", "marks": "还行"}
{"content": "翻译的不错.大部分内容来自于jsr-133和Doug Lea的jsr-133 Cookbook,如果想深入研究这方面的问题,推荐仔细研究一下上面的两个文献和本书里提及到的引用文献(当然还有Lea的另外两本书),本书文献的引用只提及于书的正文,末尾并没有参考文献.也许是书名的\"著\"导致的这个问题...", "marks": "还行"}
{"content": "希望读者喜欢", "marks": "力荐"}
{"content": "这本书的精华在第三章。对容器的代码解读不够\n对 aqs 的代码解读还要再看看。\n三星的原因，1: 内容主要是翻译的 ；2: 笔误的代码太多了", "marks": "还行"}
{"content": "国内技术书通病，不深入，浮于表面，各种错误误导，concurrent包的分析连某些博客都不如", "marks": "较差"}
{"content": "不知道是装b还是怎么的，书写出来晦涩难道，本来很简单的东西翻来覆去讲不清楚，烂书", "marks": "很差"}
{"content": "Java并发编程，还是需要自己花时间研究 java.util.concurrent", "marks": "还行"}
{"content": "博客的堆积，不严谨，不流畅，前后有重叠。\n不过还是能了解到一些知识，不过比较琐碎。\nAQS那章介绍还不错", "marks": "推荐"}
{"content": "前面几章还行", "marks": "还行"}
{"content": "了解了除了synchronize之外的几种并发技术，其他的收获不大", "marks": "推荐"}
{"content": "觉得作者是个经验丰富的工程师却不是一个合格的老师，太多说教性质的概念，而且内容详略把控的太随意。", "marks": "还行"}
{"content": "还有几个章节需要重点多读", "marks": "力荐"}
{"content": "个人觉得挺多干货的，很多底层分析啊，并不是单纯的API罗列。", "marks": "力荐"}
{"content": "总体上可以给出一个中上的评分:\n整体上并没有如前言中提到那样深入, \n后半部分(4~10章)几乎是JDK并发组件的使用和原理的简单介绍, 相对浅显易懂, 且里面错误/缺陷不少, 需要读者阅读时小心在意/避免踩坑(如10.4节对FutureTask的使用完全错误、对AbstractQueuedSynchronizer介绍了两次、代码风格混乱难以阅读、方法签名int xxx()写成intxxx()等等).\n前半部分(1~3章)讲解并发的基础/底层知识, 相对深入, 但知识点透出突兀且没与实际代码结合讲解验证, 读来颇感费力, 且同样有不少错误/缺陷之处(如\"逸出\"写成\"溢出\", JMM部分如happens-before讲解重复/繁琐/未能重点突出, 代码写错导致理解困难等).", "marks": "还行"}
{"content": "关于volatile、内存模型、并发框架的锁讲得很好，结合着并发编程那本一起看的。常读常新，一遍是远远不够的", "marks": "力荐"}
{"content": "入门级别，不够深入，有些地方逻辑不严谨；代码排版风格有前后不一的情况。个人觉得对不起这个价格。", "marks": "还行"}
{"content": "大致浏览了一下，讲的透彻，还需要回来重复品味", "marks": "力荐"}
{"content": "这本书写的挺好的，看完挺有收获", "marks": "力荐"}
{"content": "这让《多处理器编程的艺术》怎么看。", "marks": "较差"}
{"content": "适合入门之后的进阶", "marks": "推荐"}
{"content": "弥补了不少欠缺的知识", "marks": "推荐"}
{"content": "诶，买了一只没细读。这两天为了阿里面试，复习的看了一遍，发现好多错误。明显作者写了一遍没仔细看过就交稿了。", "marks": "还行"}
{"content": "章节安排比较齐全，但是前面三章写得很深入，而后面几章特别是介绍JUC的部分比较敷衍。", "marks": "推荐"}
{"content": "淘宝员工写的一本书，但略感失望。前80页虽然在讲理论，但讲的并不深入和透彻。后面都是java并发库的使用，举的例子都是玩具级别的，参考价值真心还不如core java。书名应该把艺术改成入门更合适。", "marks": "还行"}
{"content": "初学者可以看看，但里面内容有些重复", "marks": "还行"}
{"content": "错误很多，没看完，失望。比并发编程实战那本差远了", "marks": "较差"}
{"content": "几个博客作者，拿自己的博文拼凑成的，很敷衍的态度", "marks": "很差"}
{"content": "volatile和AQS可以再整理一下，知识有一点分散。书有错别字。但总得来讲是很棒的书", "marks": "推荐"}
{"content": "我很喜欢", "marks": "力荐"}
{"content": "国人写的通俗易懂入门佳作。", "marks": "力荐"}
{"content": "深入浅出，还是很不错的", "marks": "推荐"}
{"content": "快速的看了一遍，重点都有提到，有的地方值得看第二遍", "marks": "推荐"}
{"content": "对我这个初学者来说不错", "marks": "推荐"}
{"content": "本书第二章及第三章难度较大,不是读一遍就能理解的,值得去读第二遍.", "marks": "推荐"}
{"content": "主要是对java 并发基本知识的讲解和java concurrent包常用类和方法源码的分析。值得一读，配合java并发编程实战食用，味道更佳～", "marks": "推荐"}
{"content": "典型的中国式教科书式写法，但是可以了解到很多Java并发相关的东西，还是有点收获的。书上的示例代码写得不怎么好，格式也很难看", "marks": "还行"}
{"content": "感觉学到了很多，尤其是在jmm和concurrent包中的理解上，有了更深的认识，在concurrent包介绍的时候很多都引用了，java doc的内容，对很多英语不太好的人来说还是很方便的，能很好的理解", "marks": "力荐"}
{"content": "建议比较快的跳读，作为闲暇时候翻阅的书籍，对java并发编程有个初步的概念。但是很多细节有错误！", "marks": "较差"}
{"content": "不清楚这本书是怎么打到7.2分的.....先看了豆瓣评分才去买的。结果内容很失望，前边三章算是还可以，后边就呵呵了，另外错别字太多，重复的东西也太多，另外给想买这本书的同学一个建议，，先看看第9页，再决定是不是要买。机器翻译的痕迹很严重", "marks": "较差"}
{"content": "三五两章JMM和Java锁的实现讲得很清楚", "marks": "推荐"}
{"content": "超棒，java程序员进阶必读", "marks": "力荐"}
{"content": "书内容中的错误，可以看出作者的态度是多么的不端正，一本连作者自己都不好好对待的书，如何能够写出共鸣的话语。程序写的结构性一点都不好，都是摘抄一段一段的，对能力的要求不是一般的大啊", "marks": "较差"}
{"content": "很喜欢 java并发方面的只是是这本书入门的。很喜欢作者创办的并发编程网", "marks": "力荐"}
{"content": "学习并发，我是先读这本书。作者是蚂蚁金服的技术专家，之前在阿里的时候还想其请教过，还是非常感谢方老师。这本书对并发的基本概念都讲解的很到位，读完后对并发有一定的认识，还是很不错的。适合入门", "marks": "推荐"}
{"content": "前几章jmm可以读读，后面内容有点凑数的意思。", "marks": "还行"}
{"content": "很经典的书，评分不是很高，喷子果然是猛", "marks": "力荐"}
{"content": "还不错", "marks": "推荐"}
{"content": "这种直白的翻译还不如拿个词典看英文规范文档！有些句子就像是谷歌翻译出来的，还有那些特别绕的，不知道作者再看的时候能不能明白。个人觉得，就算英语不好，挨个单词翻译都能比这个理解的透彻。", "marks": "较差"}
{"content": "算是不错的书了", "marks": "推荐"}
{"content": "我是觉得这书挺好，能让你深入理解volitile，jvm对 synchronized锁的优化等。当然，“艺术”两字应该是对不住。说 国内书不行，好多细节错误的同学，麻烦把错误列出来，不要说一句“好多错误”就走人，一来作者可以再版修改，而来已买当前版的同学也可以学习下？", "marks": "力荐"}
{"content": "错误百出，逻辑混乱，", "marks": "很差"}
{"content": "就凭第三章关于Java内存模型的讲解，这本书就不算烂书，已经在代码层面上算比较深入了。而且这不是一本分析源码的书，它指出了Java 并发编程库里最核心的底层实现，梳理了整体的框架结构，难不成要一句一句的分析才行？关键位置给了说明，自己去看源码就是了，总不能全部嚼碎了喂你才吃的下吧", "marks": "推荐"}
{"content": "之前一直关注方腾飞的并发编程网，学到了很多东西。看到这本书的时候还是比较期待的，但是没有达到预期中的效果。有些语句比较生涩难懂，内存模型那部分直接从infoq上copy。", "marks": "还行"}
{"content": "基本上是并发编程网上的文章。", "marks": "还行"}
{"content": "没有大局观, 过分纠结于细节, 没有合理的利用抽象来控制复杂度, 强行深入CPU来解释,增加读者的心智负担.", "marks": "较差"}
{"content": "个人感觉写的挺好的，其中第2章并发的底层实现，第3章的内存模型，以及第5章的锁，对底层的实现描述的比较清晰，逻辑比价强，推荐", "marks": "力荐"}
{"content": "太糙了，属于操作手册或者笔记一类的书，看了一章，改看《Getting Started with LLVM core Libraries》了", "marks": "还行"}
{"content": "Very good.  It helps to understand how LLVM works.", "marks": "力荐"}
{"content": "这本书对于入门还是不错的，知识点讲的比较全，对于书中的代码也有很详细的解释，通过代码和运行结果来讲解，代码在github上，可以clone下来运行，适合新手入门。", "marks": "推荐"}
{"content": "快速了解RxJava", "marks": "还行"}
{"content": "国内国外技术书籍差距不是一般的远啊", "marks": "推荐"}
{"content": "有意思，有点晕", "marks": "推荐"}
{"content": "帮忙review了这本书，内容对于RxJava初学者入门挺有帮助的。", "marks": "力荐"}
{"content": "中间有部分感觉成了api使用指南", "marks": "还行"}
{"content": "初学者入门不错，想深入的话还是建议看其他书吧。", "marks": "推荐"}
{"content": "经验性的东西比较多，原理大多是源码分析。作为工具书使用是可以的。", "marks": "还行"}
{"content": "正在看，感觉很超值啊，yeah!", "marks": "力荐"}
{"content": "内容没啥可挑剔的，五星的书。但编辑校对根本就是糊弄了事，大量的英文单词拼写错误就不单说了，「见 xxx 页」的页码没一个写对的，「标红色 * 号的...」有绿色的。。译者真是把书交给了一个很不负责的出版商。2015 年 6 月 1 版 1 印。", "marks": "还行"}
{"content": "great books", "marks": "力荐"}
{"content": "前端的书做成这样子就对了。", "marks": "推荐"}
{"content": "很适合 我这种小白。。", "marks": "力荐"}
{"content": "入门书籍，排版很好，大段的代码没有必要，错误内容也有点多", "marks": "还行"}
{"content": "非常适合新手入门。老手就不要看了~", "marks": "力荐"}
{"content": "排版精美，js内容框架梳理得很棒", "marks": "力荐"}
{"content": "排版也好，内容全，简单明要", "marks": "力荐"}
{"content": "写的很好很适合入门\n虽然已经学了很多，决定重新再学习一遍了", "marks": "力荐"}
{"content": "感觉反倒不如作者的Html&Css那本精致了，不过就偏设计人员的实用性来说够了，对程序员来讲确实前半本都太基础了后边难度也不大但逻辑理得清楚，更多关于JS的东西还得看高程红宝书。最大优点是一贯的精美排版但本书的编辑校对实在不用心，“参见XX页”有的照搬英文版页码有的又是对的有的差得十万八千里只有个位数是对的。", "marks": "推荐"}
{"content": "权当入门可以 如果能接受W3C应该比这本书更好", "marks": "还行"}
{"content": "优点:全彩，排版很好。\n缺点:干货少，内容的组织方式不太妥当，组织松散，不适合有编程基础的人学习，简单的东西反复提及，代码规模太小，另外中文版排版比较马虎。", "marks": "还行"}
{"content": "太基础了，废话一堆，几行字能占一页。", "marks": "还行"}
{"content": "适合入门～", "marks": "推荐"}
{"content": "全彩印刷,真心疼排版的编辑", "marks": "推荐"}
{"content": "图文并茂的入门书", "marks": "推荐"}
{"content": "只因为印刷太好看了，简洁，很适合入门，不过太基础了。", "marks": "力荐"}
{"content": "超级漂亮，这才是前端的书。\n但是校对有很多小问题", "marks": "推荐"}
{"content": "很多字母错误，装订和HTML那本一样……", "marks": "还行"}
{"content": "竟然是第一个评分的。这本书很适合有一定python基础的读者，里面的代码示例也很好，解答了我之前对面向对象编程的很多疑问。可能是第一版的关系，排版错误较多，特别是代码的缩进错误超过四五处，已经发邮件给出版社，希望下一版会修正。", "marks": "力荐"}
{"content": "断断续续读了4个月，前面讲OO很受启发，后面几章感觉是凑章节，与本书主题无关，纯介绍性的讲。", "marks": "力荐"}
{"content": "我觉得书名应该叫《面向对象编程：使用python语言实现》。本书内容比较基础，讲解细致，每一章结束都有一个小案例，全书还穿插了软件工程和设计模式的内容，推荐对面向对象、软件工程和设计模式知识薄弱的python新手进阶，是一本好书，但个人认为对于python面向对象的特性讲解，还不够深入。", "marks": "推荐"}
{"content": "绝对的好书", "marks": "力荐"}
{"content": "进阶应该可以", "marks": "还行"}
{"content": "还是看cookbook吧，边看边学才效率高", "marks": "还行"}
{"content": "没什么感觉", "marks": "还行"}
{"content": "写得还行，就是这个版本排版有问题，很多代码缩进都有问题，只要懂一点Python基础语法就能看了，算是入门书籍。当成杂书有空读读，可以看到一些编程思想和规范", "marks": "还行"}
{"content": "印刷质量非常差，严重影响阅读", "marks": "较差"}
{"content": "比较适合零基础的初学者", "marks": "推荐"}
{"content": "书是好书,但翻译的水平不敢恭维,有能力的还是读英文吧", "marks": "还行"}
{"content": "预看此书，先学基础！", "marks": "力荐"}
{"content": "面试前看看还是挺有效果的", "marks": "还行"}
{"content": "作者用大量示例，通过表现来说明JVM的各种并发特性，适合初学者直观掌握。", "marks": "还行"}
{"content": "毫无看点。。", "marks": "还行"}
{"content": "书缺点：\n变量命名，ThreadBB这些真实烂死了。\n异常抛出的代码都没删掉\n只是拿出api常用的这些，贴贴代码\n类的命名也是可以吐槽的\n连线程池都都没有。Timer用得着花一章来讲吗？", "marks": "较差"}
{"content": "适合Java多线程初学者，书中很多基础代码，通俗易懂。", "marks": "力荐"}
{"content": "大篇幅的代码演示，内容不如经典的那本Java并发实战翔实及深刻。只涉及了一些基础知识并没有深入探讨", "marks": "还行"}
{"content": "例子太多了，篇幅有点长", "marks": "还行"}
{"content": "初了通篇的贴代码，真看不到其他多少有价值的内容", "marks": "很差"}
{"content": "一些基础的内容，举得例子一般，命名随意。代码贴得多，总结得少。", "marks": "还行"}
{"content": "这本书比较基础，例子很多，使得更移动，多线程入门不错。但是有些例子解释得不是很清楚，关于书名见仁见智吧，毕竟为了多卖点，用一个霸气的名字也无可厚非。但是这个价格值得吐槽一下，我觉得紧凑一下买40块还不错，快70的价格觉得有点贵了。如果便宜些我给四颗星。", "marks": "还行"}
{"content": "基础线程示例，三星。", "marks": "还行"}
{"content": "从来没了解过多线程的可以随便翻翻，代码难读又罗嗦，不知道为什么会有人推荐这本书。", "marks": "较差"}
{"content": "无尽的重复代码，基本是java核心技术卷一第十四章的示例版。", "marks": "还行"}
{"content": "没有深度，基本上是语法框架的例子", "marks": "还行"}
{"content": "多线程入门书籍，适合新手看", "marks": "推荐"}
{"content": "绝大部分是在演示最基本的线程类使用方法，没有明显的作者个人多年实践经验的积累心得，只是堆砌示例。而且有些章节的陈述有错误，比如schedule 和 scheduleAtFixedRate的对比，只是考虑到执行任务延时与否，没有考虑到firstTime因素所具有的补偿性动作，就贸然下结论，实不可取。望读者慎重。", "marks": "较差"}
{"content": "烂书！很多不清晰的地方，初学者很容易被误导", "marks": "较差"}
{"content": "一般般，基本上就是解释多线程各种方法，没有深入去说why。代码示例比较多，入门实战的话或许可以看看。", "marks": "还行"}
{"content": "讲解很详细。", "marks": "力荐"}
{"content": "贴代码我就忍了，代码还写的烂的一比，不具有任何价值，甚至不如看上一篇博客有用。扎心了，老铁！！！", "marks": "很差"}
{"content": "代码实验不给结论", "marks": "较差"}
{"content": "确实很基础 一日读完的书拖了很久 不过还是能起到一定的查漏补缺功能", "marks": "还行"}
{"content": "买了他的两本书过来评价，还有本多线程，这两本书全是贴代码，一模一样养的 代码提供的下载还给你全部贴上去，连import都不拉下，给人一种贴代码凑字数的感觉，重复代码一大片真的把人当傻瓜，对于小白看了还以为什么都懂了，完完全全的api解读毫无用处，看了什么都不会！全书那一页都是代码，和那本Java多线程编程核心技术全是很浅的api解读，还核心技术，薄薄的两本书完全可以写到一块，全是代码凑字数，不要入这个坑了，特来评价，给后人警醒。我真是看不懂还有五分多，真的是小白多！！！！", "marks": "很差"}
{"content": "适合初学者学习多线程，了解概念，根据简单的例子理解。很多api，可以粗略地看。", "marks": "还行"}
{"content": "可以一看", "marks": "推荐"}
{"content": "代码太浪费篇幅 不过倒是把每个功能都说清楚了。。", "marks": "还行"}
{"content": "萌新多线程入门书。", "marks": "力荐"}
{"content": "感觉像是copy,拼凑的，贴那么多代码也是为了骗钱的吧~~~\nboolean running =true;\nwhile(running==true)\n\n这代码写的也好意思出书~~~", "marks": "很差"}
{"content": "该书主要针对许多API接口进行案例叙述，浅显易懂，可以说达到了降低初学者畏难情绪的目的；但是代码质量及编码规范方面稍差，全书篇幅比较小，仅仅能够入门而已，案例代码也仅仅是演示性质，不过评价还是愿意给4分；本人将全部代码盲敲完，提升了对多线程API接口熟悉度，强烈推荐给初学者。", "marks": "推荐"}
{"content": "这本书只能说是java多线程编程类的简单示例；但示例中也是有很多不严谨的地方；更关键的地方是，对java的方法简单的调用完，然后贴个运行图在上面，就结束了！也没有解释为什么会出现这样的运行结果。而且，多线程执行的结果跟运行程序的硬件环境有关系，也就是说同一段代码，在作者的机器上是一个结果，在读者环境上是另外一个结果，这个问题也没有在书中说明，容易对读者造成“为啥我就没有和书中一样结果的困惑”。不建议初学者读，有一定基础的可以速看下，就当温习JUC部分方法了。。。", "marks": "较差"}
{"content": "不错吧", "marks": "力荐"}
{"content": "书中错误过多！完全坑钱", "marks": "很差"}
{"content": "觉得比较基础", "marks": "较差"}
{"content": "一般般，别被书名唬住，入门书", "marks": "还行"}
{"content": "真的是堆代码啊，整本书讲的很少，啰嗦冗长的代码占了本书的80%，代码看的头晕死了 。感觉就是凑数的。以后编程类书籍真的只能买外国专家写的。既然买了这本书只能硬着头皮读下去了唉╯﹏╰", "marks": "很差"}
{"content": "多线程基础知识详解", "marks": "还行"}
{"content": "很好的学习Java多线程的书籍，demo很详细，只要运行出来就能理解其原理，赞~！Talk is easy, show me the code.", "marks": "力荐"}
{"content": "我觉得还行，作为一本多线程入门书籍还可以，这本书代码重复有点蛋疼，但是质量还凑合，关键是代码一定要多实践，看懂和自己理解是两码事", "marks": "推荐"}
{"content": "主要是swift语法，比The Swift Programming Language要粗略很多。没怎么介绍cocoa和cocoa touch，想写app的话还有很多东西要学。", "marks": "推荐"}
{"content": "真的很基础哦，如果你也写过Python，C#， Ruby，JavaScript 等一堆语言然后再看看这个，半小时搞定。", "marks": "还行"}
{"content": "我看了大半了，里面的继承、闭包、扩展、扩展闭包，反正把我绕的很晕，我觉得没有英文版的另一本教程好。全是平白直述的语句，好希望里面能有个比喻的修辞手法也好，这样对记忆有帮助。看到实践了，还是会看完的～", "marks": "还行"}
{"content": "假期不出门顺便学门新语言，有其他语言基础的人用来入门不坏，比官方文档可操作性好点", "marks": "推荐"}
{"content": "很适合入门", "marks": "推荐"}
{"content": "像程序员转型的开始", "marks": "推荐"}
{"content": "真的是很基础，除了了解一下基本的语法以外，没什么作用。看得出来Swift借鉴了很多C#的概念，不过闭包的写法看得出苹果在语法解析上确实更愿意偷懒，而不是处理更多冲突，降低使用者的理解难度。", "marks": "还行"}
{"content": "太过基础 没有什么深度 随手翻完了", "marks": "较差"}
{"content": "非常详尽的入门知识，跟着做能一步步往下对于新手来说比什么都重要。Swift 的版本迭代很快，所以有些语句和方法已经不可用，不过自己稍微看看文档就能处理好。", "marks": "推荐"}
{"content": "总有点虎头蛇尾的感觉，不过算了了解了个大概吧", "marks": "还行"}
{"content": "作为Swift的基础教程来说，本书值得一读，书中语言很风趣，读起来不枯燥。但是内容上来说真的是个入门，就算看完这本书后面也还有很长的路要走", "marks": "力荐"}
{"content": "讲的很清楚，由浅入深。只是版本太老，有些东西变了。不推荐购买。", "marks": "推荐"}
{"content": "新手向 Java EE、Spring 入门教程", "marks": "推荐"}
{"content": "非常契合工作中的应用", "marks": "力荐"}
{"content": "这书讲的还是挺全的..", "marks": "推荐"}
{"content": "蛮好的", "marks": "力荐"}
{"content": "等会，这个豆瓣的评分怎么回事！没人评四星以下总分怎么只有7.8", "marks": "力荐"}
{"content": "一本书搞定JAVA WEB后台编程", "marks": "力荐"}
{"content": "自成体系的书，内容既有浅显也有深入的地方，对于无法展开叙述的地方也指明了查阅的方向", "marks": "力荐"}
{"content": "还可以吧，不建议新手看这本书", "marks": "还行"}
{"content": "非常好的一本讲java web的书,比起国内的讲java web的书不知道高到哪儿去了(深入分析 java web 说这个锅我不背)", "marks": "力荐"}
{"content": "能让我对java web后台开发更有系统性。值得一看。", "marks": "力荐"}
{"content": "果然技术还是国外的先进，国内的说实话就是代码的堆砌，这本书我看的第一感觉居然是特别舒服，很爽", "marks": "力荐"}
{"content": "中文版 03 译自日版 2013.09 期，延时了将近 2 年有木有。好在大部分内容并不会随着时间而过期，读来还是有些收获。本期的 sed/awk 让我第一次较深入的了解了这两个强力的工具，赞。", "marks": "推荐"}
{"content": "读书笔记见评论。", "marks": "还行"}
{"content": "可以作为练习数值算法和C++编程的绝好示例", "marks": "力荐"}
{"content": "如果要写自己的物理引擎，那就必读了", "marks": "还行"}
{"content": "用实例完成bootstrap入门。", "marks": "力荐"}
{"content": "属于“第二本书”行列，比同类入门的书更深入一些，写得很详细。", "marks": "推荐"}
{"content": "早听说入门不合适，还是硬生生结合官网把它啃完了。", "marks": "推荐"}
{"content": "案例有点特化，翻译……作为入门其实不太合适。", "marks": "还行"}
{"content": "除了本书外，bootstrap只看过官方的文档，没与其他书籍比较过。但我个人认为，这本书还是比较适合初学者的，涉及到了awesome font，less还有一些其它的，虽然介绍的都比较简单，但个人认为还是能起到一个简单的概览作用的，像less也可以看看官方的介绍。这本书是bootstrap3的，写短评时bootstrap的官网有bootstrap4的预览了。", "marks": "推荐"}
{"content": "刚读完了，感觉还行，一个个案例，需要对CSS有深刻认识才能使用好less", "marks": "推荐"}
{"content": "不错，通过事例，然后了解了bootstrap的用法，配合h5bp框架，还有修改less的方法。也涉及了wordpress。。。但是它里面的那个主题我总是安不好。。。", "marks": "力荐"}
{"content": "这本书还是不错的 ", "marks": "力荐"}
{"content": "更清晰了写，上下文衔接好，来龙去脉过渡好", "marks": "力荐"}
{"content": "感觉细节可以更深入些~", "marks": "还行"}
{"content": "整体结构还是比较清晰，编译、字节码、Launcher、VM初始化、内存分配和垃圾回收、类加载、执行几部分，比较简单入门。有几处贴大篇代码不太好，结尾讲执行过程过于简略。其实从语法上来讲Java比Go还简单...", "marks": "推荐"}
{"content": "结合HotSpot来谈JVM还不错", "marks": "还行"}
{"content": "如前有人评论：最大优点就是让人觉得jvm没有那么神秘。缺点：总结性不够强，没有形成体系化的结构，各章节独立前后不够连贯。比如介绍字节码常量池的时候，只是简单介绍各项结构，看了完全不知道有什么用，比较困惑。好的讲述方法应该只是jvm在哪个阶段、什么情况下会使用这写信息。", "marks": "推荐"}
{"content": "感觉一般", "marks": "还行"}
{"content": "不错 这本书 正在读 写得很详细且易懂 适合从事java的人员读", "marks": "力荐"}
{"content": "good", "marks": "力荐"}
{"content": "看完了前面五章，整体感觉还行，就是有部分地方有错误，应该是笔误吧", "marks": "推荐"}
{"content": "介绍性", "marks": "较差"}
{"content": "最近正打算研究研究虚拟机，提高一下自己，很期待Java虚拟机方面的新作", "marks": "力荐"}
{"content": "书还没有出吧，还没买，到时候买了再评论。", "marks": "力荐"}
{"content": "因为工作的原因，最近在研究Java的虚拟机。自己对虚拟机一无所知，就买了这本书，刚买到就读了一大半。 全书写的很吸引人，而且通俗易懂，对于刚接触虚拟机的同学，很实用。书循序渐进的讲解了虚拟机的工具，如何解析，如何自己做debug。 而且，书中代码量也很多，对于初学者，理解起来更加容易。", "marks": "力荐"}
{"content": "各种经验，点到即止，如果每个点都展开讲大概又是一本一千七百页的砖头。", "marks": "推荐"}
{"content": "看完也没成为高手。。。。。", "marks": "推荐"}
{"content": "我才不会告诉别人这是一本好书，我自己偷偷摸摸学就可以了", "marks": "力荐"}
{"content": "作为进阶还是不错的，但内容不怎么完整，很多python的高级特性都没有覆盖到，缺乏系统性", "marks": "推荐"}
{"content": "很不错的一本书，很多都是经验之谈，切合自己在做的开源项目，以及遇到的问题，收获很多，非常值得一读！", "marks": "力荐"}
{"content": "用来找方向", "marks": "推荐"}
{"content": "过于泛泛，无论是内容还是翻译都不值得称道，内容脉络也略显杂乱。", "marks": "较差"}
{"content": "从架构设计到单元测试到原型、语法树都有涉猎，适合有一定经验的人找学习方向，非常不错", "marks": "力荐"}
{"content": "书名翻译够了。接下来读“Python Cookbook”20151202", "marks": "还行"}
{"content": "书虽然很薄，但涉及谈到的东西不少。", "marks": "推荐"}
{"content": "做过大工程的，格局果然不同，明显是高了一个层次，大牛。", "marks": "力荐"}
{"content": "还需要再读~", "marks": "推荐"}
{"content": "只是一篇从一整个项目构建开始着手的，第一章到第六章讲一些项目开发的东西如版本号，文档，分发，单元测试等。第七章到第十章讲一些性能优化方法的知识，到后面的第十四章讲的比较杂。总体来说，涉及面比较广，但是内容比较浅。但是其中采访一些编程大神的内容还是挺不错的。这本书简洁易懂，适合在茶余饭后看，如果针对高手进阶的话，确实有点失望了。", "marks": "还行"}
{"content": "花一天功夫看完了，前六章介绍的项目分发、虚拟环境、单元测试的内容不错，经历过几个Python项目，这些东西都搞的乱七八糟，Python在这方面不像Java一样标准，后面针对语言的章节不如读Python Cookbook。", "marks": "还行"}
{"content": "算是实现Python开发大型化标准化的开发实践。", "marks": "力荐"}
{"content": "这是一本不错的书，讲了很多在实际开发项目中游泳的工具和想法", "marks": "力荐"}
{"content": "简介很牛，看起来觉得很烂", "marks": "较差"}
{"content": "书的前半部分感觉都很基础,后半部分倒是有写层次,不过说的相对比较简单", "marks": "推荐"}
{"content": "涉及的方面比较多，大多是泛泛而谈，很像是blog上的文章集合，任意一个章节都可以拿出来单独看，对我个人而言文档那一张也许是我唯一的收获吧。之前的文档做的很不规范看到了这个，以后我的文档会努力的标准化。", "marks": "还行"}
{"content": "说实在的，好多东西看不太懂。", "marks": "推荐"}
{"content": "真的很不错~ ", "marks": "力荐"}
{"content": "我去。。。这也就python高手之路，果然技术大牛都写不出好书 - -", "marks": "较差"}
{"content": "这本书讲具有一定规模的Python项目应该考虑的内容。包括单元测试、Python2和Python3兼容方案和并发等几个方面。除了项目实践外，还包括一些实用的技巧，包括装饰器、函数式编程和选择适当地数据结构提升性能。总体来说适合有一定项目实践经验的Python程序猿进阶阅读。", "marks": "推荐"}
{"content": "高手个蛋", "marks": "还行"}
{"content": "是核心编程的补充扩展，但是还不够深", "marks": "推荐"}
{"content": "实用型书，感觉不错，回头还要细看", "marks": "推荐"}
{"content": "本书主要讲了将python用于实际项目时的具体注意事项和python语言的一些高级特性，以及一些比较实用的库模块，对于有一定python经验的开发者非常实用，让你知道需要完成一个任务时有哪些良好的工具可用。", "marks": "推荐"}
{"content": "和自己的目标偏离，读不下去了", "marks": "较差"}
{"content": "更多的是作者在工程之中积累的经验", "marks": "推荐"}
{"content": "主要是讲python开发的各个层面，没有局限在语法层面，可惜核心内容不是很多，就后面几章。后附的访谈很有意思。值得一看。", "marks": "力荐"}
{"content": "有一些高级的概念，点到为止", "marks": "还行"}
{"content": "关于Python开发细节的书，完全不讲语法和基本的实现", "marks": "力荐"}
{"content": "这本书代码简单，没有实践，内容也只是点到即止，根本不是Python进阶的书嘛，看完了只有好无聊的感觉，会不会是我代码写的太少？", "marks": "推荐"}
{"content": "英文已经有第二版了", "marks": "推荐"}
{"content": "这本书我记得初次看的时候，还比较懵，后面学了用了一年python过后来看它，发现还是挺有帮助的", "marks": "推荐"}
{"content": "作者为openstack贡献源码，所以举的例子很多是以openstack为例，比如编码规范，标准库的编写。适合熟悉python的人用来找方向，因为高阶部分讲了一点却不深入。", "marks": "还行"}
{"content": "正在看第三版，感觉言语比较直白易懂，值得多看几遍！", "marks": "力荐"}
{"content": "20150909：alloyteam的书//20160222：好多年没看到国人写的、这么优秀的技术书了，绝不是趋利的拼凑之作，字里行间都透露出作者有积淀，且用心把这些积淀传授出来的诚意。优点不胜枚举：行文流畅，全程伴随例子，难度曲线平滑、措辞实在不故弄玄虚……", "marks": "力荐"}
{"content": "难得的中文好书，由浅入深，娓娓道来。虽有小瑕疵（都在笔记里列出），但绝对是一本值得反复研读的好书。", "marks": "力荐"}
{"content": "设计模式这种东西来回都是那些事，看到前几章本以为作者会用FP方式重新诠释设计模式，结果下半本的内容还是回到OO的路上。可能是期待太高了", "marks": "推荐"}
{"content": "比O'reily社对应的书好的不多，这是一本！", "marks": "力荐"}
{"content": "非常棒的一本书，在设计模式以及js两方面都有很大的收获。", "marks": "力荐"}
{"content": "难得的国内作者著有的、基于 JavaScript 讲解设计模式的书，针对十来种更适合 JavaScript 的设计模式进行讲解，同时对模拟传统面向对象方法的类实现和原生 JavaScript 实现方式进行辨析，力荐！", "marks": "力荐"}
{"content": "好书 作者丰富的经验太棒了 ", "marks": "力荐"}
{"content": "兵法", "marks": "力荐"}
{"content": "一般吧", "marks": "还行"}
{"content": "国产书我给五星的很少，这本书确实非常不错。通过作者的语言可以了解到作者确实实在一线工作，并且累积大量的实战经验，而非一些秀才侃侃而谈！作者一直强调要注重设计而不滥用设计，这就是恰如其分的设计吧。", "marks": "力荐"}
{"content": "看完之后，每当实现一个需求就会想能不能用这里的设计模式优化下，是一本可以多次翻阅的好书，期待作者的下一本书。^_^", "marks": "力荐"}
{"content": "看完后，我把星星加到了4颗星星。2016年的js书籍这个是起点，15年是speaking javascript", "marks": "推荐"}
{"content": "速度看了一遍又认真敲了第二遍。闭包用的很溜，不过到底很多好东西还是得要有实践场景的。", "marks": "推荐"}
{"content": "作为工具书自己练习一下不错，但是具体在项目中灵活运用就要点水平和功力了", "marks": "还行"}
{"content": "目前读过最好的JavaScript书，通俗易懂，深入浅出，不要说工具书权威指南和高级编程。", "marks": "力荐"}
{"content": "真正基于JavaScript去讲述。理解很棒，例子很棒，还夹带了object和function的深入理解，以及设计原则和重构实践的讲述。", "marks": "力荐"}
{"content": "还可以吧，挺简单易懂的", "marks": "力荐"}
{"content": "作者是来自一线的工程师，讲解理论的同时，给出了很多实际项目中的示例，简单易懂", "marks": "力荐"}
{"content": "学习js设计模式的入门首选", "marks": "力荐"}
{"content": "这本书会让你思考如何编写优雅，健壮的代码。", "marks": "力荐"}
{"content": "实践过少，有些还是看不懂，明年再看一次", "marks": "推荐"}
{"content": "的确不错。。。信息量巨大。。。。。。", "marks": "力荐"}
{"content": "通俗易懂的好书，不过容易造成滥用的情况。现实的业务编程背景下，设计模式的使用是比较少见的，驾驭得不好的话容易引起严重的错误", "marks": "力荐"}
{"content": "非常不错, 浅显易懂", "marks": "力荐"}
{"content": "1. 花了四个晚上翻完这本书，浅显易懂，从目的、现实例子、动静态类型语言在设计模式实现上的差异以及对应的实际用例，勾绘了设计模式的核心内容。作者作为一个闷骚程序员，举的一些例子实在太可爱。这本《设计模式》看完了，收获挺大，过段时间再荟萃一篇自己的整合笔记出来，也准备翻一翻另外两本《设计模式》做一个主题阅读，再辅一本《函数式编程》钻研下编程方面的技巧和能力。\n2. 看完书还是需要整理，不然看完了等于没看。有积累，还能随时翻一翻做些回忆巩固、参考。\n3. 最后，安利下昨天（其实可以说前天）写的一个状态提取函数atcon，https://github.com/Xaber20110202/atcon，和复杂的if、else说再见。", "marks": "力荐"}
{"content": "学到了不少小技巧", "marks": "推荐"}
{"content": "感觉还行，有些代码思想还是值得学习。", "marks": "还行"}
{"content": "设计模式入门好书，不只告诉你怎么做，还说明白了为什么和什么时候这么做，冲着这一点就必须推荐了。", "marks": "力荐"}
{"content": "好读", "marks": "力荐"}
{"content": "简单易懂，收获很多", "marks": "力荐"}
{"content": "例子有些偏旧，可以多举些新鲜例子就好了，讲得不错！", "marks": "推荐"}
{"content": "新的大门", "marks": "力荐"}
{"content": "在读中，无奈自己水平太差看不太懂", "marks": "推荐"}
{"content": "看到是alloyTeam就脑残粉一般的买了，设计模式这块一直比较缺失……但愿在鹅厂中工作顺利，我要补足的实在太多了\n--------------------------------------------------------------\n读后感：觉得是我最近买的质量最好的一本Js书，其实我很喜欢图灵原创系的书籍，国外的技术书翻译质量通常都堪忧，自己英语又是个战五渣。这本作者的叙述深入浅出，结合项目场景也让读者加深理解。但对我来说，只读一遍有很多地方还是懵懂，还是要多重温思考结合自己的项目才能有更深的领悟。", "marks": "力荐"}
{"content": "看看国人的书吧（≧∇≦）\n看了5章，发现是非常非常好的一本书！作者思路十分清晰内容通俗易懂！有很多非常实用的代码片段。\n个人觉得唯一不好的地方就是这本书的封面，之前差点因为封面太土太难看而差点错失这本书了-_-#", "marks": "力荐"}
{"content": "很实用的设计模式的书，提供了很多编程的思路，值得时常翻看", "marks": "力荐"}
{"content": "这种书需要反复读，需要在工作中碰到问题的时候再回过头来读。", "marks": "力荐"}
{"content": "写得真好！", "marks": "推荐"}
{"content": "好书！", "marks": "力荐"}
{"content": "推荐~", "marks": "力荐"}
{"content": "不错，有助于提高编码质量，感觉例子还可以更复杂一点", "marks": "推荐"}
{"content": "javascript基本语法很简单，但思维方式上跟其他语言有很大差别。看这本书能更深刻地理解javascript，更好地运用。", "marks": "力荐"}
{"content": "看起来很舒服", "marks": "力荐"}
{"content": "结合了JavaScript来讲设计模式", "marks": "推荐"}
{"content": "在阅读的过程中对一些框架的设计有了新的认识，例如 Vuex 就是应用了状态模式。", "marks": "力荐"}
{"content": "很棒的讲解 详略得当的代码示例 虽然有些地方的重点突出不够 比如this的过度使用 让我就多次陷入思考 其实可能并没有特殊意义 只是占位而已 整体还是很值得一看", "marks": "推荐"}
{"content": "特别棒.....难得一见的好书.....这么评论会不会被认为是托儿=。=", "marks": "力荐"}
{"content": "相比代码排版就看不下去的《JavaScript设计模式》，本书通俗易懂的结合现实例子的讲解就易读许多了，尽管可能代码有需要勘误的地方但本人基本做的后端开发就没有动手实践而权当伪代码看了。前后还分别加了基础知识和设计原则编程技巧，有铺垫有延伸，由浅入深娓娓道来，值得收藏。", "marks": "推荐"}
{"content": "必读系列", "marks": "力荐"}
{"content": "简明易懂", "marks": "力荐"}
{"content": "非常好", "marks": "力荐"}
{"content": "国产的难得好书，作者十分用心。整本书的知识点循序渐进。细心的介绍了传统设计模式和JavaScript设计模式的区别。每种设计模式都举出了与之适合的实际例子。如果你想了解一下JavaScript的设计模式，这本书不要错过。", "marks": "力荐"}
{"content": "闭包原型这些基础部分，比高程通俗易懂", "marks": "力荐"}
{"content": "Javascript设计模式好书，由浅入深，示例清晰。\nAOP before after确实让人眼前一亮，增加了见识，设计模式要多思考多实践", "marks": "力荐"}
{"content": "讲解的很通俗，连我也能基本看懂", "marks": "力荐"}
{"content": "好书，国产良心作。", "marks": "力荐"}
{"content": "前序：本人觉得，书名凡是遇到“模式”或“指南”，这本书一点都不简单，比十天从入门到精通更加踏实。                                          正文：这本书我看来无疑是一部良作，绝非拼凑字数，用生活中的简单例子代入程序的设计中，令读者更通俗易懂，作者更用自身在项目实战中使用设计模式来给读者娓娓道来。                                     后序：值得一买（重要是中文）。", "marks": "力荐"}
{"content": "好书，深入浅出，值得反复拜读！", "marks": "力荐"}
{"content": "百度有本类似的", "marks": "力荐"}
{"content": "个人觉得，受用！真的理解设计模式啦", "marks": "推荐"}
{"content": "非常棒的书，比《JavaScript设计模式》中文版好太多，后面那本还是看英文原版版吧", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "一线工程师写的操作性很强的js设计模式书。我认为最大的亮点就是作者没有将js模拟成Java式的设计模式来讲，而是契合js语言本身的动态性讲模式。", "marks": "力荐"}
{"content": "超赞 ", "marks": "力荐"}
{"content": "还行，其实是matplotlib包的说明书吧。翻译的也还行虽然有几处错误，但是大部分还行，可以很快看过去，推荐在实践中更好的方式是阅读文档。", "marks": "还行"}
{"content": "简单易学的python数据可视化入门，很多实用例子。", "marks": "力荐"}
{"content": "市面上这样的书很少，没得选只能看这本。内容不丰富，只能用来入门，可以不买，上网搜搜代码也可以。", "marks": "还行"}
{"content": "虽然网上都能搜索得到，但是当参考书还是不错的。可以配合《利用Python进行数据分析》，并对比ggplot。", "marks": "力荐"}
{"content": "较无趣", "marks": "还行"}
{"content": "讲得比较全面，但每一点都不够深入。提供的一些小例子还挺有用的，可以直接模仿着写类似的程序。在地图数据可视化那一块儿，还要装一些其它的插件，比较麻烦，没有上手敲。还有，感觉在图形美化方面讲得不够。建议作为Python可视化入门的书籍，更深入一点的可以直接查matplotlib官网文档。", "marks": "还行"}
{"content": "虽然是本老书，但是精炼简洁，点到为止……书籍第一要务是能引发读者的兴趣，这比正确与否都重要，本书作者做到了~", "marks": "推荐"}
{"content": "电路图部分有意思", "marks": "力荐"}
{"content": "用通俗易懂的语言把计算机的基本构成与工作原理梳理了一遍，适合零基础新手。", "marks": "推荐"}
{"content": "很简单的入门书，贴心到非常，论详细程度和专业深度都不能与《网络是怎样连接的》相比，但涵盖的范围更广，算是科普了，不过个人认为，想靠这本理清计算机原理的说法还是太夸张了。初版时间太早，有些论断现在看来过时了，好在基本原理仍有价值，第六、九章尤其清楚。现在对图灵教育印象很好。", "marks": "推荐"}
{"content": "硬件的部分通过一张电路图讲解，挺清晰的～", "marks": "推荐"}
{"content": "居然标记过想读，完全忘记了。没想到是03年的书，要在10年前读多好。作者预测以后是java  .net的天下，可他没想到动态语言的崛起，软件web化，不知下一个十年会是什么技术崛起。ai，大数据是否真的普遍化？可这2种对于一般人来说太难了，纵观软件技术发展是越来越简单化的", "marks": "推荐"}
{"content": "对于CPU讲解的部分很好。", "marks": "推荐"}
{"content": "自己过了一遍，发现给不懂技术的产品经理做技术入门很不错", "marks": "推荐"}
{"content": "通俗易懂，介绍了这个计算机行业系统知识，硬件软件，数据库", "marks": "推荐"}
{"content": "很浅显的一本书，适合计算机入门。对编程的各个方面有个初步的了解。", "marks": "较差"}
{"content": "非科班出身值得一看", "marks": "推荐"}
{"content": "嗯，还行吧", "marks": "还行"}
{"content": "过了一遍大学基础课，03年的书了，过去12年了，有的东西确实陈旧了。不过看看补补基础还不错", "marks": "推荐"}
{"content": "计算机", "marks": "还行"}
{"content": "计算机组成原理的普及读物，比《编码的奥秘》还简单些，让你能在几小时的阅读中了解一台微型计算机的组成和运行原理。教材往往会把初学者锚在细枝末节中。而科普的任务就是努力让读者保持一个观其大略的视角。由表及里，从科普到教材，是一个被常常被验证为可行的学习路径。", "marks": "还行"}
{"content": "2015.10.03", "marks": "推荐"}
{"content": "第2，3章才是亮点，毕竟新一代的IT者基本都没有这个环境，其他都是基础。", "marks": "还行"}
{"content": "讲得非常基础，包含了计算机组成原理，数据结构&算法，数据库基本原理，网络技术等等方面。", "marks": "还行"}
{"content": "一本很薄的适合外行人看的很简单的计算机科普书，日本人很会从小事做起。", "marks": "还行"}
{"content": "读的时候有点枯燥，读完觉得，这么枯燥的事情写的这么好懂也是不容易，至少能看懂。", "marks": "推荐"}
{"content": "适合我这种智障读的导论（", "marks": "还行"}
{"content": "设计思路和流程是关键 语言只是方言", "marks": "推荐"}
{"content": "并没有想象的那么好。前半部分的计算机讲解，并没有多么通俗易懂。后半部分关于编程语言的讲解，又显得太过浅显。", "marks": "较差"}
{"content": "挺简单的，不够深入。准备看作者的另外一本《程序是怎样跑起来的》", "marks": "推荐"}
{"content": "比较浅显，入门不错", "marks": "推荐"}
{"content": "对入门级的我来说相当科普、易读了", "marks": "力荐"}
{"content": "dk~因吹斯汀", "marks": "推荐"}
{"content": "太基础了，前面讲了些硬件，更多讲了软工的基础知识", "marks": "推荐"}
{"content": "前几章还可以，尤其第一章有点意思", "marks": "推荐"}
{"content": "我觉得有必要再看一本这方面的书。", "marks": "还行"}
{"content": "辣鸡，真辣鸡", "marks": "很差"}
{"content": "看完之后搞懂了看教材都没懂的几个小问题   我要是大一大二看到就好了", "marks": "力荐"}
{"content": "适合对硬件和软件有一定了解后读，梳理知识。对小白来说很难懂，对大神来说太简单。对于想深入学习的人来说太简略，对于只是想科普的人来说太复杂。年代久远的书，有些过时", "marks": "推荐"}
{"content": "适合高中的时候看....可惜已经老了。。", "marks": "还行"}
{"content": "不推荐，也就前面3章有点意思，从第四章开始，都是在扯淡。可以认为，本书内容与标题基本毫无关系。。。。。", "marks": "较差"}
{"content": "写的挺糟糕的,计算机的方方面面还是蛮复杂的,作者企图在一本薄薄的书里面把体系结构,操作系统,编程语言,运行环境等做一个说明,结果适得其反.\n什么也没有说明白.", "marks": "很差"}
{"content": "前面几章（2/3/4）还行，后面就没法看了。", "marks": "还行"}
{"content": "看书名以为是计算机组成原理这样的内容，但是随着阅读的深入，涉及了编程，数据库，网络，加密，文档协议，软件开发方面的内容，覆盖面还是蛮广的。读完还是很有收获的，推荐！！！", "marks": "力荐"}
{"content": "挺有意思", "marks": "推荐"}
{"content": "适合计算机入门的书籍，前面手动连接有CODE的滋味在里面", "marks": "推荐"}
{"content": "原来计算机也不过如此\n简单明了\n入门可看", "marks": "力荐"}
{"content": "是看过程序是怎样跑起来的，然后看的这个，整体上来说讲解很具体，也很简单，适合入门的人好好看看，和《编码》类似，但是应该不如那个介绍的详细，毕竟页数在这里", "marks": "还行"}
{"content": "科普读物 大一看看不错", "marks": "还行"}
{"content": "这书虽然是2003年出的，但是里面的内容真的控制很好，写的内容足够广泛，深入单点内容的力度又不深不浅，恰到好处。随便从自己感兴趣的一章读都行。花看一篇博客的时间就可以看上书里的一个知识点，比如 加密解密。作者能够把书的节奏控制如此好，自然能够引起读者对于计算机的兴趣。", "marks": "还行"}
{"content": "对我而言，仅仅是最后一章讲SE时值得读一读，但是也很浅显。我以为日本人讲道理画图表会很厉害，结果也是乱七八糟。看这样的书还不如去看技术论坛上网友的答疑讨论来得有效。", "marks": "较差"}
{"content": "不懂计算机的我 竟然能看懂不少 很简练的一本书", "marks": "推荐"}
{"content": "真正的基础入门书籍", "marks": "推荐"}
{"content": "非常好。", "marks": "力荐"}
{"content": "好书！不知道对于完全不懂计算机的人可读性如何，有一点基础的话读起来特别顺畅，把以前有些模糊的概念梳理了一遍。由于成书较早，有些内容已经有所变化，不过无伤大雅。", "marks": "力荐"}
{"content": "看不下去", "marks": "还行"}
{"content": "2017.11 前三章非常推荐，硬件和汇编现在刚入门的程序员都没玩过，电路图也非常棒，四章以后的，都是基础程序员的必备技能", "marks": "推荐"}
{"content": "有基础的就别读这本书了", "marks": "还行"}
{"content": "大家小书", "marks": "推荐"}
{"content": "怎么说呢，至少我个人感觉一般吧，可能是年代有点早了吧。", "marks": "推荐"}
{"content": "标题党的书，看完还是不知道计算机是怎样跑起来的。怎样跑起来这个问题看国人写的“穿越计算机的迷雾”这本就很好。不过这本书有些地方写的不错，举个简单的例子就把问题说明白了（算法和结构那里讲得确实简单易懂，赞），只是收益不多。", "marks": "还行"}
{"content": "图灵出版的书都可以。。。", "marks": "推荐"}
{"content": "03年的书，好多内容过时了", "marks": "较差"}
{"content": "从科班的角度来看也算是努力使得计算机的道理通俗易懂，但仍然未交代的更彻底", "marks": "还行"}
{"content": "简单的内容太简单，难得依然看不懂（＃－.－），这种书感觉还是看大部头比较划得来，作为科普书也不太好，如果有些基础，两三个小时足够看完了，最好去图书馆借吧", "marks": "还行"}
{"content": "为大部头打基础", "marks": "推荐"}
{"content": "通俗易懂，可以作为引导书籍。提高兴趣", "marks": "力荐"}
{"content": "科普书", "marks": "还行"}
{"content": "还是挺值得一读的", "marks": "推荐"}
{"content": "科普，仅此而已。", "marks": "推荐"}
{"content": "科普书籍", "marks": "推荐"}
{"content": "内容比较分散,行文比较啰嗦", "marks": "推荐"}
{"content": "感觉不如另一本。", "marks": "还行"}
{"content": "讲的好生动清晰，查漏补缺非常赞", "marks": "推荐"}
{"content": "一直以来很好奇电脑内部数据是怎么传输和计算的，读了这本书对这方面稍微有了点了解。后面还涉及了一些编程思想和数据结构，稍微了解下。", "marks": "还行"}
{"content": "讲解了计算机的基本原理，易懂，值得闲暇之时回顾一下基本知识", "marks": "力荐"}
{"content": "对整个计算机软硬件进行了通俗概要的讲解，作为专业的程序员虽然大部分内容都了解，但还是对部分内容有豁然开朗的感觉，尤其算法，数据结构，数据加密原理，SE的工作范围等内容之前有疑问，读完就舒坦。程序员必读", "marks": "推荐"}
{"content": "挺好的 把每个方面都很浅的讲了一点，并没有很深入，正是这本书比较适合大家一起读的原因吧。还有一本 程序是怎么跑起来的 最近就去图书馆借来看", "marks": "推荐"}
{"content": "对于了解计算机领域非常有利。", "marks": "力荐"}
{"content": "炒鸡喜欢！", "marks": "力荐"}
{"content": "原书出版于2003年", "marks": "力荐"}
{"content": "比上一本简单，收获不大。", "marks": "还行"}
{"content": "好书，值得一读，我看了前4章，很快就可以看完了。其中组装微型计算机，手工汇编的部分非常好，对于一个非计算机专业的了解底层的知识是很有帮助的。当然了，计算机专业的可能对于这些已经有了非常深刻的理解，看这些就会觉得小儿科。对于非计算机专业的编程人员还是推荐的。2016-6-27。", "marks": "力荐"}
{"content": "硬件软件网络都点到为止，把这两年学的课程串了一遍吧。", "marks": "力荐"}
{"content": "正在试图读更多科技方面的书。日本人写的科普类书籍总有一种中二感，大概也算是民族特质吧︿(￣︶￣)︿", "marks": "推荐"}
{"content": "讲的很仔细，一些基本原理讲的很清楚", "marks": "力荐"}
{"content": "计算机概论的简化版，对于自己有计算机基础的准码农来说非常适合查漏补缺，又非常易读。但从周围人的反响来看，没有基础的人并不好理解。通过这本书，让我第一次接触图灵社区产生了好感，也让我可以有兴趣认真去读读计算机概论。", "marks": "力荐"}
{"content": "花了一天时间看完，整本书涉及面比较广，从硬件到软件，从软件架构到技术细节，从数据库操作到面向对象内容都涵盖全了。通读下来，小白可对计算机组成、软件模式、数据库、OOP等概念会有个整体认识，入门不错，比国内教材质量要高！", "marks": "推荐"}
{"content": "新人入门推荐", "marks": "力荐"}
{"content": "科普文，不确定非专业人员读了什么感受，这个得母上父上来评论，只是觉得还是趣味性有点缺乏", "marks": "还行"}
{"content": "适合查漏补缺", "marks": "推荐"}
{"content": "相对《程序是怎样跑起来的》不是那么的有趣吧，提到的知识点很多，很散。", "marks": "还行"}
{"content": "书中最有趣的部分就是跟着讲解画电路图的部分，形象生动地解释了电脑内部的组成部分和作用，很适合初学者。", "marks": "力荐"}
{"content": "胜在双语，定位有点尴尬，不高不低的", "marks": "还行"}
{"content": "肯定不值这个价……", "marks": "较差"}
{"content": "入门的时候看过，现在又溜了一遍，用来找找那些已经忘记的不常用的知识点。讲的浅，有些许过时", "marks": "推荐"}
{"content": "一般", "marks": "还行"}
{"content": "讲的内容比较泛泛，比较简单，只是把一些用法简单的demo出来，入门教材中的初级水平", "marks": "较差"}
{"content": "这书真的没意思 太简单了 ", "marks": "很差"}
{"content": "有些知识点讲的很简单，但是真的太简单了", "marks": "还行"}
{"content": "哎，一个模板偏执狂写的书", "marks": "还行"}
{"content": "又是一本浅显解释大段贴代码的中国风技术书。咦，我为什么要说又呢？", "marks": "较差"}
{"content": "看的时候一直被shock，豪爽豪爽", "marks": "推荐"}
{"content": "只读了前半部分，后半部分工程级应用没有读。前半部分把一些知识点总结归纳的很好，看完C++ Primer之后能加深理解。给三星是因为书中错误很多。一是印刷错误很多，明显的编辑校对不力，二是概念错误，比如混淆了拷贝构造函数与构造函数的隐式类型转换，默认构造函数与合成的拷贝构造等的区别，MyString类的实现虚构函数中该用delete的用了free，赋值运算符中没有delete等问题。", "marks": "还行"}
{"content": "c++11 普及版", "marks": "还行"}
{"content": "好多空格丢失，断行，还有文字错误，内容感觉组织得还可以，有收获。", "marks": "还行"}
{"content": "错误略多，而且勘误表不全。不过这书的思路不错。", "marks": "较差"}
{"content": "如果早点看的话，还是能有所收获的。", "marks": "还行"}
{"content": "深入浅出", "marks": "推荐"}
{"content": "前半部分总结得不错，后面工程实践有点toy，略过", "marks": "还行"}
{"content": "其实是在作者博客上收益菲浅，准备特买书支持一下", "marks": "还行"}
{"content": "对C++11介绍的很细致，不过还是需要慢慢啃，得静下心来看才行。", "marks": "力荐"}
{"content": "只看了后半部分，对代码质量不做评价，但是代码风格不太好(主要是namespace混乱)，而且很多可以用C++11特性的部分却使用了boost(出于性能的考虑？)。总的来说还是受益很多的(也可能是因为我确实太菜了)。", "marks": "推荐"}
{"content": "这本书不是语法入门书籍，而是讲解C++11新特性的，内容比较全面。也可用来当工具书用。", "marks": "力荐"}
{"content": "相比官方手册，这本是更适合人类阅读的文档。怎样写作是大学问。", "marks": "力荐"}
{"content": "R包开发的不朽之作。。。", "marks": "力荐"}
{"content": "quote 'the book written by Hadley Wickham, the guy who also wrote ggplot2, dplyr, testthat, roxygen2, etc.......'", "marks": "力荐"}
{"content": "最近用的package和看的书都是hadley的，他的贡献颇多啊。这本书确实比官方文档更“用户友好”。最后，更深入的东西还是需要查阅文档或者stack overflow", "marks": "力荐"}
{"content": "Hadley出品", "marks": "力荐"}
{"content": "这本好多泛泛而谈，干货不足。", "marks": "推荐"}
{"content": "作者我们聊聊人生，为什么一本算法书不好好写伪代码，居然用C++写？", "marks": "还行"}
{"content": "书中算法多有应用场景，比很多教科书上的“应用题”好些，可以作为基础算法之后的扩充。\n要吐槽的是代码难读，各种没有注释的单字母参数，各种没来由的函数。", "marks": "推荐"}
{"content": "大杂烩，看前几页以为是给大学生看，看后面以为是给研究生看，中间一坨C++和积分公式……最后明白了，估计是给博士吃饱没事看的", "marks": "还行"}
{"content": "#PDF# #mobi# 3.7 分。还挺好看的。", "marks": "推荐"}
{"content": "前面还是很不错的，破除了算法本身的神秘，但是后面的一些例子，很有些牵强，而且都没有什么乐趣可言，生硬的语言描述，外加大篇的代码。", "marks": "还行"}
{"content": "前三章系统介绍了各种算法的逻辑结构，其后章节都是针对具体问题构造算法。值得参考。", "marks": "还行"}
{"content": "还行", "marks": "推荐"}
{"content": "“破除算法的神秘”，“可能的优化”，“实用的算法”这三点印象深刻，值得一读。", "marks": "力荐"}
{"content": "讲了很多其他算法书上没讲的东西~", "marks": "力荐"}
{"content": "匆匆翻了一遍，算法挺全的，值得参考。", "marks": "推荐"}
{"content": "学习C++编程时练习用，看这书只能知其然而不知其所以然，所以我还是看《算法导论》了。", "marks": "力荐"}
{"content": "一般，有趣，但算法深度和细度不够", "marks": "还行"}
{"content": "论读到博弈游戏发现正是期末考没做出来的最后一题的解法的心理阴影T.T 小时候不好好学的奥数，长大总是要还的...", "marks": "推荐"}
{"content": "算是相当不错的一本书了。几个算法说的很清晰。有了不一样的认识。推荐。", "marks": "推荐"}
{"content": "能看懂真是不容易，对我太说太烧脑了", "marks": "推荐"}
{"content": "好啰嗦，理论讲太多，到了真正具体的问题和算法例子，又一笔带过", "marks": "较差"}
{"content": "作者很有编程感悟，从实践中感悟算法和数学的重要性，写得很对我胃口，但未必受本科大学生欢迎。对回头看的开发者，做项目的硕博士应该很适合，很有启发。", "marks": "推荐"}
{"content": "很枯燥并不有趣的一本书。", "marks": "较差"}
{"content": "涉及到大量人工智能算法，学习C++编程的不错选择", "marks": "推荐"}
{"content": "算法大列举。对于算法只能说是了解，可能算法书都是思路+公式+代码？", "marks": "还行"}
{"content": "支持作者的钻研态度", "marks": "力荐"}
{"content": "不适合没算法基础的人！我不知道什么是时间复杂度，看贪婪法的时候也不知道什么是分治法和动态规划法。直接抛出一堆的概念，这一定是假定读者是有算法基础的。没看出来乐趣在哪。", "marks": "很差"}
{"content": "很实用的一本书，可以作为算法学习后的实战参考。至于想通过它来学习算法，呵呵，它也不会告诉你为什么。", "marks": "推荐"}
{"content": "读完了，五星好评，望野前辈翻译的太有意思了，这个系列的丛书完全超越了老道的Good Parts，谁读谁知道。", "marks": "力荐"}
{"content": "通过这本书可以对“对象、继承、this”等概念有一个进一步的理解。\n这本书把继承分成了两种：模仿类行为的和委托。还有就是这本书很多概念都描述的非常清晰，比如模块必须满足两个条件：“为函数定义引入包装函数，并保证它的返回值和模块的API保持一致。”\n这本书用词准确一致，比如“实例”，作者认为在一些其他的面向对象语言中，类的实例化是复制的过程，在闭包那一部分写到模块：模块创建器每一次被调用都会创建一个新的模块实例。\n《你不知道的JavaScript》（上）和《JavaScript高级程序设计》对照着看我觉得收获很多，可以每隔一段时间就翻翻看加深理解。", "marks": "力荐"}
{"content": "有一种约之前告诉你他活很好, 让你期望很高, 结果一般般的那种感觉. 主要是以为会很深入, 但是真的只是浅出了.\n\n而且我并不觉得委托模式很好. ES6 class尽管有缺点, 但是木已成舟, 只能尽量使用class了... 当然我也不赞成在一款主打原型的语言上搞什么class", "marks": "力荐"}
{"content": "前端必读", "marks": "力荐"}
{"content": "写的太好了，简直是神作！刚看了30页，关于javascript的认识已经被刷新了！（也许是我javascript基础本身太差，空有编译相关的抽象理论吧。", "marks": "力荐"}
{"content": "译者一定是个宅...", "marks": "力荐"}
{"content": "进阶，配合讲 6to5 很有趣。翻译得很奇怪，尤其是代码中注释部分。", "marks": "推荐"}
{"content": "断断续续读了一个礼拜，了解到以前不太接触的东西，好神奇，虽然读到后面因为不了解ES6不太hold得住，技术还是很渣渣呀~", "marks": "推荐"}
{"content": "词法作用域，this，prototype机制还算讲得清楚。可能之前作用域链看过更深入的，但是还是没太理清楚，这本把不必要的原型链知识剪除。提倡的委托，这种用法的确不多，挺刷三观。可能算是对prototype关联而非类用法的一个洗洗白吧。js本身都是对象的关联而非类复制。", "marks": "推荐"}
{"content": "【深入】打算在读jQuery源码之前先读一下这本书。讲得非常好，内容比较深入。另：几段代码有轻微的错误注释，需要注意一下。", "marks": "力荐"}
{"content": "可能是基础不够，好多地方看不懂= =", "marks": "推荐"}
{"content": "js原型闭包讲得很好", "marks": "力荐"}
{"content": "作者深入剖析了日常js开发中一些令人困惑的地方，值得一读。第一部分五星级，第二部分不如第一部分。", "marks": "推荐"}
{"content": "非常棒!刷新很多知识理解!最主要是理解清楚代码被编译的过程", "marks": "力荐"}
{"content": "学渣表示过段时间回来再看一遍。", "marks": "力荐"}
{"content": "相当于js的重难点手册，看完感觉懂的还是懂，不理解还是不理解，需要重复读吧", "marks": "力荐"}
{"content": "标记的第200本书竟然是JavaScript的，不错的一本书，适合有些编程经验的人，后面类的部分，有些啰嗦", "marks": "推荐"}
{"content": "深入浅出，受益匪浅。这本书对作用域的介绍赋予我从另一个角度，或者说十分重要的角度去认识一门语言的技能。如果你不是很理解作用域和this的绑定，那一定不能错过这本书。", "marks": "力荐"}
{"content": "第一次看JS，匆匆看完this的章节，详细讲述了this绑定的各种情况。道格拉斯的书里直接说语言中的this设计之初就有错误，而本书详细给大家讲了这个“特性”，笑死。", "marks": "推荐"}
{"content": "挺不错的，但是第一部分翻译的比第二部分好，可能第二部分难点", "marks": "推荐"}
{"content": "不满足于基本的表象，深究一下内部的原理。特别是面向对象那章，先破后立，把JS内部真实的东西说出来。很棒的书，不适合做入门。", "marks": "力荐"}
{"content": "非常值得一读，这本书就像第一部分序中所说的，像拆收音机一样拆解 JavaScript 这门语言，可以说是最基础的 JavaScript 书，也可以说是最深奥的。感觉后半部分没有前半部分讲的清楚，也可能是因为对于原型和类式继承的理解根深蒂固。", "marks": "力荐"}
{"content": "深入浅出，推荐", "marks": "推荐"}
{"content": "翻译的很好。前几章都是为了第六章做铺垫，对js比较了解的建议直接看第六章", "marks": "推荐"}
{"content": "感觉开了另一扇门似的", "marks": "力荐"}
{"content": "很好的书，巩固了对JS的理解。翻译感觉一般。", "marks": "推荐"}
{"content": "不错，很多颠覆性的认知。", "marks": "力荐"}
{"content": "值得拥有的 JavaScript 进阶书籍。", "marks": "力荐"}
{"content": "好书！接着看中卷。", "marks": "力荐"}
{"content": "难得的不是\"典型\"教科书的书, 虽然不是面面俱到, 但却深入理解", "marks": "力荐"}
{"content": "经过一系列的筛选之后，我决定开始看这本书，书中还是能get到不少自己不曾了解的知识点的。", "marks": "力荐"}
{"content": "深入javascript继承的方法，原型继承，行为委托 的实现方法和意义\n对this的含义给出了清晰的解释，在不同的调用环境下如何使用它\n\n非常值得一读", "marks": "力荐"}
{"content": "值得一看", "marks": "推荐"}
{"content": "有观点的好书（没有读过这书我一定认为 class，new 是不错的习惯了），翻译的也不错。 就是开源的书纸质的还卖这么贵。", "marks": "推荐"}
{"content": "神作", "marks": "力荐"}
{"content": "有别于别的js书，you don't konw系列，是目前带式js核心部分讲解最深入的三本书，看完后回头js的理解有质的提升", "marks": "力荐"}
{"content": "深入讲 JS 语言最好的书，没有之一（如果一定要有之一那就是这个系列之一）。书中的每句话每块代码都值得仔细阅读和思考。翻译质量也不错，期待中卷和下卷 @图灵教育 @赵望野 @梁杰_numbbbbb", "marks": "力荐"}
{"content": "翻译至少没减分", "marks": "推荐"}
{"content": "炒鸡炒鸡棒", "marks": "力荐"}
{"content": "非常非常棒，有时间该做个笔记，重新吸收下。", "marks": "力荐"}
{"content": "选题不错，角度很新颖。", "marks": "力荐"}
{"content": "书很好, 适合有一定JavaScript经验的程序员, 大概是市面上介绍词法域和Prototype最好的书籍, 后半段关于JavaScript面向对象的思考很多, 但充斥着作者不少的偏见, 虽然我也不赞成ES6提供的class关键字, 但class作为词法糖的作用开发者们有目共睹, 而且作者提倡的委托模式通过使用不同的成员命名来避免作用域屏蔽的作法实在很low.", "marks": "力荐"}
{"content": "之前读了一半，这个月又重新读了一遍，蛮不错的一本书，对知识点又不同方向的看法。知其然，知其所以然。感觉后面类，对象，委托的排版有些混乱。期待下部，期待更多es2015思想结合。", "marks": "力荐"}
{"content": "值得放在手边随时参考", "marks": "力荐"}
{"content": "这本书很赞！！", "marks": "力荐"}
{"content": "讲述的是javascript的底层以及原理，虽然很多东西讲的不太明白，但还是可以的。推荐有基础的人阅读。", "marks": "推荐"}
{"content": "讲得不错，加深js基础", "marks": "推荐"}
{"content": "讲的不错，挺深入，需要挺深厚的JS基础才能好好掌握掌握其中原理", "marks": "推荐"}
{"content": "全是是生涩难懂的知识点，只是看了依旧头脑发胀，不过比原先好一些", "marks": "推荐"}
{"content": "看完就忘了", "marks": "力荐"}
{"content": "没有期望的醍醐灌顶的感觉", "marks": "还行"}
{"content": "值得二周目的书，翻译得也很可爱。", "marks": "力荐"}
{"content": "这本书超赞啊！", "marks": "力荐"}
{"content": "解决了很多一直以来迷惑的问题，让我恍然大悟，醍醐灌顶，茅塞顿开，文采斐然（我）。适合进阶～", "marks": "力荐"}
{"content": "打通JavaScript的任督二脉，领略语言内部的绝美风光", "marks": "力荐"}
{"content": "每天一小时，花了一周时间终于读完了这本书，当我合上书良久，内心还按捺不住的澎湃，很久没有一本书让我这样了，作用域，原型，this javascript就这但东西，全在里面了，可是作者还讲了很多其他的东西，真是大开眼界啊，只想说期待下部", "marks": "力荐"}
{"content": "很有挑战", "marks": "力荐"}
{"content": "非常好，简单明了，生动有趣", "marks": "力荐"}
{"content": "果然是我不知道的", "marks": "力荐"}
{"content": "推荐", "marks": "力荐"}
{"content": "个人感觉虎头蛇尾， 赵望野翻译的部分挺好，梁杰翻译的部分 就有些不知道说什么了。", "marks": "还行"}
{"content": "我能说比高程写得还好吗", "marks": "力荐"}
{"content": "读完了，后半部分提到的行为委托确实颠覆我对原型继承的理解，但是有待在实际中理解，尽信书不如无书，毕竟面向对象的继承洗脑太久，不能马上明白这种行为委托的好处。\n刚读到第五章，第一部分关于编译器、词法分析粗略的讲了一些，给人很多思考，希望深入学习；第二部分还没看完，this讲得不错，分类都很细致。总的老说比《JS高程》容易看进去，JS高程太啰嗦了", "marks": "力荐"}
{"content": "学js以来对this指针终于有了一个深入的了解，不得不说这本书确实适合进阶，期待下册", "marks": "力荐"}
{"content": "读完更不懂JavaScript了，ES6出了class挺开心，不过听作者讲，class并没有解决一些关键性问题，不过是语法糖，又迷茫起来", "marks": "力荐"}
{"content": "真的如标题所示：你不知道的JavaScript。里面解释了很多平时知道是如何运行的代码却不知为何如此的代码。当然就需要一定的基础才能看得下去。\n昨日看完了（有些是跳过的，捂脸...），对我很有帮助，自己还不觉得，被别人面试时瞬间就感觉出来了，JS的气质歘歘的提升了~", "marks": "力荐"}
{"content": "这本书好棒，极力推荐", "marks": "力荐"}
{"content": "通俗啊，比犀牛书强感觉", "marks": "力荐"}
{"content": "后面两章目前对我来说比较硬🙃", "marks": "力荐"}
{"content": "中文版翻译得也很棒，把JS讲透的一本书。满分推荐", "marks": "力荐"}
{"content": "不错的js进阶书籍", "marks": "推荐"}
{"content": "是很不错的书，学习js必看吧，但是翻译不是很好，并且错误较多，还是建议读原版", "marks": "力荐"}
{"content": "对javascript又深入一步", "marks": "力荐"}
{"content": "解释的很详细。非常好的一本书，看完绝对会有收获。", "marks": "力荐"}
{"content": "是有其他书里完全没有讲到的很细节的东西，\n有几页感觉很不好", "marks": "推荐"}
{"content": "读完JavaScript语言精髓 \n一定要读下这本书洗下三观", "marks": "力荐"}
{"content": "太棒了这本", "marks": "力荐"}
{"content": "看到设计模式直接一脸懵逼", "marks": "推荐"}
{"content": "从未见过如此有趣的程序员文笔，技术内容的讲解已经细致到位了，作者还插科打诨让文字充满生气。两位译者年纪轻轻就选中如此作品翻译，可见阅读量和眼光，功德无量。", "marks": "力荐"}
{"content": "面试和避坑宝典", "marks": "力荐"}
{"content": "醍醐灌顶，javascript中一些难点讲的非常透彻！", "marks": "力荐"}
{"content": "第二部分后半没有很懂，有时间二周目。", "marks": "力荐"}
{"content": "虽然里面的内容有许多都看过 但是书中用一种独特的角度进行再介绍 看完还是有不少收获！", "marks": "力荐"}
{"content": "读这本书是一种享受。一边是丝滑般的纸质触感，一边是时刻让你恍然大悟的深刻见解。", "marks": "力荐"}
{"content": "写的很有深度，有读第二遍的感觉", "marks": "力荐"}
{"content": "还可以，对this、原型、闭包等知识做了深入的解析。", "marks": "推荐"}
{"content": "讲的都是我javascript 高级程序里面接触到的东西，总体来说还算不错..", "marks": "还行"}
{"content": "书很棒，从原理角度看闭包和 this，非常推荐。\nPS：书在 github 上开源，这版翻译把程序的输出业给翻译了，这一点很无语。", "marks": "力荐"}
{"content": "好书", "marks": "力荐"}
{"content": "作用域和闭包讲的不错\nthis相关的也不错\n对象，类，原型什么的就一般了，总是在矫情一些概念", "marks": "推荐"}
{"content": "上卷分了作用域闭包和this绑定原型对象两大块，作为新手第一次认真思考这类内容，帮助很大。", "marks": "力荐"}
{"content": "不到200页的书，但是信息量不少，是深入了解js技术必读书籍", "marks": "力荐"}
{"content": "太棒了 比js红皮书好，不过推荐先有点js实践再去读红皮书，再读你不知道的js  升华", "marks": "力荐"}
{"content": "非常好，尤其是原型链和继承那里，会持续关注这个系列。", "marks": "力荐"}
{"content": "五星的神作，看完收获满满的", "marks": "力荐"}
{"content": "逻辑清晰，知识面很深入，通俗易懂。", "marks": "推荐"}
{"content": "很好的前端书籍，特别是闭包和this", "marks": "力荐"}
{"content": "好书，写了这么多年的js，这本书还是刷新了我的js姿势，虽然代码量不大，说话也絮絮叨叨，但知识面讲解的相当精辟和深入，远不是哪些什么《1个月入门到放弃》可以相提并论的，不过这书还是建议积累了一些经验的同志看，里面涉及到了很多常见的坑的解答，老鸟看了会很懂。", "marks": "力荐"}
{"content": "中文翻译太慢，开源英文5本全套打印，深入理解JS入门必备", "marks": "力荐"}
{"content": "好好看啊。 每次看都有好多收获。简直感人。", "marks": "力荐"}
{"content": "第一部分翻译的简直太好了,第二部分有点学院派的味道,味同嚼蜡'", "marks": "推荐"}
{"content": "读完之后有很多收获，说是在关于原型和闭包必读的一本书也不为过。前面也有人讲了作者对ES6中Class关键字的一些偏见啥的，我只能说百家争鸣百花齐放啊！解决问题才是最根本的，未来的发展不一定是最佳实践，但是必定是一个被大多数人接受的通用方案，在工程和标准方面获得统一才是最佳的发展途径。这是目前我作为一个前端小菜的看法~", "marks": "力荐"}
{"content": "说真的，js本来就不难，硬是被专业术语搞得晦涩难懂，比如说最后object.create继承非要叫委托，又加一个术语，也就骗骗新手，对于以前的jser哪有这么多概念，估计大多数读者都是学生，真工作造轮子多了会发现本书评价不值那么高。", "marks": "还行"}
{"content": "满牛逼的讲原理的书，深入浅出，this,prototype讲的透彻", "marks": "力荐"}
{"content": "非常短小精悍，讲清楚了 JavaScript 的一些基本概念，推荐JS开发的同学看一看", "marks": "力荐"}
{"content": "前半部分写的很好。\n后半部分为什么强行猜测读者心理，他预测了读者是学过其他语言的人，但是对于我这个js是第一个学习的语言的人来看，比如书中说的类，我根本没这么想啊，关键还用了相当大的篇幅来猜测读者想法...所以后半部分我一脸懵逼。\n当然可能是水平太低。。。", "marks": "推荐"}
{"content": "很有趣的一本书，可以用来提升js", "marks": "力荐"}
{"content": "非常不错的一本书，里面讲解一些词法作用域等平常接触不到的东西，很值得推荐的一本书。", "marks": "力荐"}
{"content": "对于那些比较模糊的概念进行了详细的解读。", "marks": "力荐"}
{"content": "关于this和闭包的理论阐释得很透彻，最后的类理论对比也很棒，收获很多", "marks": "力荐"}
{"content": "简单明了的好书", "marks": "力荐"}
{"content": "有错误的地方，最后一章委托模式没有看，其他地方都慢慢品了一遍 对闭包、原型、this 有个更深层次的认识", "marks": "推荐"}
{"content": "不懂闭包，原型链的看看就懂了", "marks": "力荐"}
{"content": "非常棒的一本书，相信会经久不衰，期待后续作品。", "marks": "力荐"}
{"content": "很棒很棒很棒的js书，强推", "marks": "力荐"}
{"content": "很不错的javascript进阶书。这本书没有泛泛而谈，就是写的javascript中比较难懂的2个方面：作用域和闭包、this和对象原型。看这本书需要有一定的js基础，建议进阶看，初学者不太友好，绝对值得反复查看。", "marks": "力荐"}
{"content": "前面部分讲的是基础，稍简单；最后两章略微有点难懂，我看了两遍。总体来说还是挺不错的，有过开发经验看的话能够理解的更好。", "marks": "推荐"}
{"content": "作者很厉害毋庸置疑。\n难能可贵的是翻译得也很通畅，读起来没有不畅的地方…\n写得贼好，很细节。\n前面几章都有醍醐灌顶的功效；\n最后4，5，6章也能看懂，但是还是云里雾里。", "marks": "力荐"}
{"content": "神书，值得一遍又一遍的读", "marks": "力荐"}
{"content": "必读系列,,", "marks": "力荐"}
{"content": "看了第一部分：另一个角度讲解js，革新我的思维---词法作用域，动态作用域， ES3的 try catch 块级作用域，模块机制", "marks": "力荐"}
{"content": "对JavaScript里的一些抽象的概念有很好的解释，好书！学习前期值得反复去看。", "marks": "推荐"}
{"content": "看完javascript高级程序设计基本这本书就不用看了，该知道的都知道了。不过单独拿这本书出来说还是不错的", "marks": "推荐"}
{"content": "挖掘javascript很深，但是感觉内容略显乏味", "marks": "还行"}
{"content": "this讲的真的是超级棒啊", "marks": "力荐"}
{"content": "看技术书是件比较痛苦的事,有点枯燥,易瞌睡,书写得很好...很多概念都没有听过", "marks": "推荐"}
{"content": "这本书更像是《Javascript高级程序设计》的节选版。。。", "marks": "推荐"}
{"content": "入门的时候看看不错。", "marks": "力荐"}
{"content": "很薄但很酷", "marks": "力荐"}
{"content": "把JavaScript面向对象特性简单介绍了一下，优点是言简意赅，且涵盖ES5下Object的属性特征讲解（defineProperty）以及禁止修改对象，最受用的一点是原型对象和[[Prototype/__proto__]]的图示说明原型继承链，真是一图胜千言呀！缺点是确实书籍太薄讲得不全，例如函数级作用域、闭包、集成模式只讲了构造函数继承和构造函数窃取与混入、还有常用模式等就不如《JavaScript面向对象编程指南》这本了讲得透彻了", "marks": "还行"}
{"content": "建议直接读英文版的。", "marks": "推荐"}
{"content": "还行，算是进阶的书吧。看着看着有点迷糊了。应该再看一遍。", "marks": "推荐"}
{"content": "精炼的Javascript入门书。适合有过短暂的JS开发经历的开发者。", "marks": "力荐"}
{"content": "言简意赅", "marks": "推荐"}
{"content": "复习下，一天就可以看完，很短", "marks": "推荐"}
{"content": "清晰的讲解javascript的对象定义，实现，继承，属性等知识，写的简单易懂。", "marks": "力荐"}
{"content": "好书 条理清晰 深入浅出", "marks": "力荐"}
{"content": "【中级】在具备了初级项目实战经验后，可以借助此书来回忆JS面向对象相关的知识点。会有不少细节值得思考。", "marks": "力荐"}
{"content": "大神的书啊，确实不错，很薄，读了3 4天，总体上有些收获，很精炼，很多es5，不过总感觉缺点什么，可能不是书的问题", "marks": "力荐"}
{"content": "用面向对象的思想，理解JavaScript的原型模式", "marks": "力荐"}
{"content": "非常赞，受益匪浅。", "marks": "力荐"}
{"content": "确实像是节选版，总结的比较精要，但是深入的话还是要配合其他书籍，适合时间不多时随手复习", "marks": "推荐"}
{"content": "百分之七十多是高程上的内容，通读全书，受益仍然匪浅，是一本精炼的好书，当得起精要二字。", "marks": "力荐"}
{"content": "初级", "marks": "力荐"}
{"content": "书给5分，扣一分是给js。javascript其实是靠可配置的map容器外加闭包实现的面向对象，它所谓的灵活，其实是别的语言里靠内置语法完成的事，你必须手工来实现，比如Square.prototype.constructor = Square。你不这样做，就会有不一样的事情发生，于是就“灵活”了……", "marks": "推荐"}
{"content": "  这本书讲解了js中对象创建，配置属性，构造函数和原型链以及最后来个单体模式和在构造函数内部增加一句验证代码，防止构造函数生成对象时意外漏掉new操作符。\n 整体来说讲的还可以，不过对我这个阶段来说，就是巩固一下对象的知识。\n  js不是这么一本书就能学好的，它只是路程中的一本", "marks": "力荐"}
{"content": "学习前端六个月时看的这本书，关于对象的知识梳理了一遍。和红宝书里的内容有重复，内容比较浅显易懂。适合花一天看看查缺补漏，巩固基础", "marks": "力荐"}
{"content": "很棒的书，虽然第六章有些许生涩。后续应该还是会再读几遍，读书笔记也会继续跟上。", "marks": "力荐"}
{"content": "书挺薄，很多知识点在《JavaScript高级程序设计》里面有讲到，当作复习巩固基础知识吧", "marks": "还行"}
{"content": "一本好书 如果看高程看不明白的话 这本书是另一个了解js面向对象的选择", "marks": "力荐"}
{"content": "很薄的一本书，100页不到，说的东西基本上尼古拉斯大神自己的《JavaScript高级程序设计》里都有讲过，当作复习了。", "marks": "推荐"}
{"content": "Javascript ", "marks": "力荐"}
{"content": "大神的书必买必读", "marks": "力荐"}
{"content": "全文都在讲对象，包含原型对象、构造、this对象、作用域、闭包……里面很多知识点也许是你会了，但是不知道原理，文中都有对其进行讲解", "marks": "力荐"}
{"content": "Nicholas的文字很棒。我是读完英文版的再读中文版。算是加深理解。\n对于面向对象方面，估计比较难的是 get/set以及prototype吧。这本书简单易懂，但是也深入浅出。值得一读", "marks": "力荐"}
{"content": "书很薄，简短精要，介绍了javascript里面怎么面向对象编程", "marks": "力荐"}
{"content": "短小精悍", "marks": "推荐"}
{"content": "很不错，原型那有些问题", "marks": "力荐"}
{"content": "P28：\n按惯例：bind()的第一个参数是要传给新函数this的值。其他所有参数代表需要被永久设置在新函数中的命名参数。你可以在之后继续设置任何非永久参数。\n\n....看不懂了", "marks": "较差"}
{"content": "很薄很经典的书，花不了你多长却能学到很多，物超所值", "marks": "力荐"}
{"content": "虽然薄，但是大部分都是干货", "marks": "力荐"}
{"content": "我读过的最好的一本js书籍之一，感觉仅次于js高级编程红宝书，很推荐想了解js面向对象和继承的同学们阅读", "marks": "力荐"}
{"content": "太基础了点。。。python基础、基础算法、statistic、dp 0/1背包 ML都点到了 ", "marks": "还行"}
{"content": "可以看作MIT 6.00.1课程的讲义，Python和编程入门的基础问题都提到了，实际上本书可能更像是科研人员的编程入门而不是程序员的入门，书中花费了大量时间讲解了统计学相关知识和图表的生成。编程问题点到为止，后面的章节还是有一定意义的，推荐泛读。@沈阳市图书馆", "marks": "推荐"}
{"content": "一本很不错的入门书籍，我挺喜欢的，读起来可以算是津津有味。", "marks": "推荐"}
{"content": "感觉跟SICP比起来比较没有那么探索计算机科学，而是比较把计算机作为工具的实践（蒙特卡洛）讲得比较细致", "marks": "推荐"}
{"content": "\"查看代码的时候，请记住我并没有完全理解它。否则程序不应该存在错误。\"", "marks": "还行"}
{"content": "值得一读！", "marks": "力荐"}
{"content": "即将开始阅读，目标串联一下关于计算机方面各研究方向的知识。9.13号开始阅读，10.中旬结束。\n10.22补充，阅读基本完成，但是没有完成过网上项目，感觉很快就会忘掉。。。谁能来解救我请豆油", "marks": "推荐"}
{"content": "知识密度刚刚好 引经据典堪比李贤平老师概率论答案的“青山遮不住 毕竟江流去”……", "marks": "力荐"}
{"content": "相比较SICP的玄幻，这本书更佳现实主义。", "marks": "推荐"}
{"content": "其实是Python入门", "marks": "还行"}
{"content": "MIT的书，是经典读物", "marks": "力荐"}
{"content": "python入门好书！学py的同时也能培养一些计算思维", "marks": "力荐"}
{"content": "译者能不能把该死的“都市传说”翻译成“坊间传闻”？！都市传说是什么鬼？！！", "marks": "还行"}
{"content": "短小精悍，python入门指导", "marks": "推荐"}
{"content": "科普计算机组成原理，然而这方面缺乏背景知识读的有点囫囵吞枣", "marks": "推荐"}
{"content": "也许书本身还可以，但是实在是太简单了……", "marks": "还行"}
{"content": "周日下午的时间，再次复习了程序的编译、装载和运行。这类书的阅读难度从易到难：《程序是怎样跑起来的》-->《程序员的自我修养》-->《链接器和装载器》。", "marks": "还行"}
{"content": "书籍内容不多，很多人说还不如去看计算机组成原理。但那本书内容太多，同时理解有难度，而这本就浅显易懂，但又把很多原理的东西都说出来了。关于程序的执行、高级语言、汇编语言、机器语言的关系、函数的调用机制作为加深是不错的，小品~~", "marks": "还行"}
{"content": "操作系统和高级程序语言使硬件抽象化。汇编语法是操作码和操作数。控制cpu,只需将编译器生成的本地代码加载到内存然后运行。软件控制硬件就是利用I/O端口中断DMA。运行环境=操作系统+计算机组成。理解寄存器，就理解程序的运行机制。程序把寄存器当对象。程序寄存器PC决定程序流程。\n", "marks": "力荐"}
{"content": "新手友好度五颗星！这本书并不适合已经看过人邮大部头著作的人回头看，它就是专门为新手而写，涉及各个概念且讲解的通俗易懂，当然浅，但这正是新手所需要的特质，后面补人邮大部头。", "marks": "力荐"}
{"content": "垃圾书，还不如找本一级考试的《计算机基础》课本翻一翻。", "marks": "还行"}
{"content": "开头比较水，中间从C语言到汇编那段有点干货", "marks": "力荐"}
{"content": "像我这样如果不是科班出身，又啃不动《计算机组成原理》这种大部头的话，阅读这种寓教于乐的版本是非常合适的", "marks": "推荐"}
{"content": "怎么说呢 日本人写的科普…说是写给电脑白痴看的…然而我还是看不懂…由此可以推出…什么…结论…呢？我连二进制的逻辑右移和算数右移无法好好领悟 活着还有什么用…", "marks": "还行"}
{"content": "为了买《图解密码技术》，凑数买了这本书，虽然基本都理解，但是却不是什么通俗读物，不能算入门读物挂着入门读物的名字，不知道为啥要搞个彩色版。三星凑合吧", "marks": "还行"}
{"content": "无论新学者还是复习者，本书都很接地气~补码和哈夫曼是我的补缺，CPU的逻辑结构可谓-书读百遍其义自现，C与汇编的对照是不错的学习方法！", "marks": "推荐"}
{"content": "汇编一段是精华 ", "marks": "力荐"}
{"content": "2015.09.26", "marks": "推荐"}
{"content": "复习计算机组成原理？", "marks": "还行"}
{"content": "介绍了计算机科学常识和软件运行的机理。", "marks": "力荐"}
{"content": "有趣的科普书", "marks": "力荐"}
{"content": "想入门组成原理还是去看 编码 吧", "marks": "还行"}
{"content": "比教科书好看易懂，深度刚好。", "marks": "力荐"}
{"content": "一般吧，有面向大众的诚意，像写博客的，适合学过汇编和c的人看", "marks": "推荐"}
{"content": "挺好，让我对计算机有了进一步的了解", "marks": "推荐"}
{"content": "嘛 挺有趣", "marks": "力荐"}
{"content": "很好的入门书", "marks": "力荐"}
{"content": "初中教材应该这样！", "marks": "推荐"}
{"content": "这本书应该翻译成为 电脑是怎么样跑起来的，不适合向家人特别是女友老妈普及计算机知识，现在都是高级语言程序了，学习底层知识的人，除非做底层开发，在工作上用的都不多了。", "marks": "还行"}
{"content": "计算机基础", "marks": "力荐"}
{"content": "一个简化版的 CSAPP，还不错", "marks": "推荐"}
{"content": "印刷错误好多……内容不错，搞清了一些小问题，但总体来说太浅了。", "marks": "推荐"}
{"content": "适合写程序的入门看。", "marks": "还行"}
{"content": "和 <Code> 一样值得推荐，计算机的本质本没有那么复杂，都被专家教授的一大堆外星语搞得没人想学，这本书用人类可以理解的语言配合示例简要的介绍了cpu，内存，硬盘，操作系统等基本概念，及他们是如何演变成现在这样的。将一个概念讲出来不难，但将一个概念给别人讲懂了才难。", "marks": "力荐"}
{"content": "通俗易懂，如果作者最后能够把启动程序到跑起来的整个过程再串起来讲一遍就更好了", "marks": "力荐"}
{"content": "我一直推崇日本的技术书，比如图解TCP/IP,可是这本书确实真的一般般，前面针对基础知识的讲解还算是可以的，但是后面就天马行空，根本抓不住主题了。", "marks": "还行"}
{"content": "书中有些小错误，特别是讲到第10章汇编，有些图片中的寄存器标错了。翻译有些地方比较拗口，比如“参阅”，我觉得应该翻译成“访问”。", "marks": "推荐"}
{"content": "作为基础知识书《编码》更好一些", "marks": "推荐"}
{"content": "读了部分，挺没意思的，也许是太基础了也许是我不感兴趣吧。", "marks": "还行"}
{"content": "终于看完了，学到很多冷知识 -- 因为有些其实已经不适用了", "marks": "推荐"}
{"content": "书薄，简单，易懂，适合外行爱好者。", "marks": "还行"}
{"content": "看过，但是还是有必要再看这方面的书", "marks": "还行"}
{"content": "超级迷你版《CSAPP》。不过还是应该看CSAPP，这个一般般", "marks": "还行"}
{"content": "有许多重要的地方讲得不是很清楚，但确实是计算机书里面看着很轻松的", "marks": "推荐"}
{"content": "太粗浅，当温故用吧。", "marks": "还行"}
{"content": "计算机组成原理和操作系统的简化版本,注意不是简单版本,适合随便翻翻", "marks": "还行"}
{"content": "开了个小差", "marks": "推荐"}
{"content": "通俗语言版本的编码，在硬件介绍的同时也兼顾了软件，阅读时间1下午足够，可以回顾很多细节，以及一些理解的不是特别透彻的地方", "marks": "推荐"}
{"content": "其实我还是没搞懂程序是怎样跑起来的。。。", "marks": "还行"}
{"content": "这是一本计算机程序原理的科普书籍，与《计算机组成原理》的部分内容关联，但讲得更为深入浅出。本书主要讲了CPU的结构、指令和执行原理，数据存储和处理方式（内存、磁盘、压缩等）；程序的软硬件运行环境，源代码如何编译、链接成本地代码，本地代码的内存分配、堆栈执行的原理；以及程序如何转换汇编指令，调用操作系统API，操作控制计算机硬件等。本书原理清晰，内容浅显易懂，适合初学者上手。", "marks": "推荐"}
{"content": "浮点数部分讲的比较清楚", "marks": "推荐"}
{"content": "内容太简单", "marks": "还行"}
{"content": "通俗易懂", "marks": "还行"}
{"content": "整本书很流畅，举例配图特别清晰，适合入门。", "marks": "推荐"}
{"content": "本书和另外一本一样，很基础。从计算机核心部件的基本组成和数据的表示，到程序和内存的本质，再到操作系统等基础知识，以及还包括了很具体的函数调用实现机制。总的来说，看完后对整个计算机软硬件都有了更深的理解。", "marks": "推荐"}
{"content": "看到压缩那里都能理解，后面汇编呀，操作系统开始理解起来就有点不懂了。基础性知识还是有点欠缺。", "marks": "还行"}
{"content": "读起来还真得有点基础，但作者已经尽力了，计算机这东西本来就是工程领域的创造，必须具备一定理论基础才能读懂。", "marks": "推荐"}
{"content": "讲得很系统，很通俗，很适合科普和入门，写得非常好。\n尤其适合学过一些计算机知识，然后想回头系统学习计算机程序的开始读物", "marks": "力荐"}
{"content": "内容浅显易懂。码代码的人还需了解底层啊。", "marks": "力荐"}
{"content": "计算机原理欠下的债，要还啊。  挺适合我的，受益匪浅。", "marks": "力荐"}
{"content": "确实通俗易懂。那几个专栏简直闲得蛋疼。", "marks": "力荐"}
{"content": "内容适合入门,但是比较分散,同时行文啰嗦,感觉这是我读到的基本日本书的通病", "marks": "推荐"}
{"content": "讲得比较浅，适合给小女生科普", "marks": "推荐"}
{"content": "入门时候遇到这本书就好了!", "marks": "推荐"}
{"content": "相对 简单易懂，但有些必要的东西没说明白，代码不怎么漂亮", "marks": "还行"}
{"content": "一本有趣有基础的书，内容不多，但足以引发兴趣。", "marks": "推荐"}
{"content": "大体心里有个谱！完全了解是不够的。", "marks": "推荐"}
{"content": "零基础小白表示看起来略费劲。。语言干巴巴的", "marks": "还行"}
{"content": "浅显易懂 适合轻松地阅读", "marks": "推荐"}
{"content": "从整体感受计算机，消除陌生感，走入编程的大坑", "marks": "推荐"}
{"content": "整体非常不错，简洁易懂。对于我们这种非计算机专业，然后又经常需要编程的人来说，比较合适，一两天就能了解底层的东西。汇编和CPU那部分讲的很好。", "marks": "力荐"}
{"content": "日本人真会写书。", "marks": "推荐"}
{"content": "从硬件底层讲解了程序是如何跑起来的，包括IC，汇编指令，C语言，编译器，内存，CPU。", "marks": "推荐"}
{"content": "很棒的入门书，比科班的教材有趣多了，但是看完了还是得去看教材。但再读教材就不是完全零基础了。算是帮助理解的课外读物吧。", "marks": "推荐"}
{"content": "程序原理入门书，浅显细致全面，日本风格技术书。", "marks": "力荐"}
{"content": "2015年9月读：这本书并不适合已经看过人邮大部头著作的人回头看，它就是专门为新手而写，涉及各个概念且讲解的通俗易懂，当然浅，但这正是新手所需要的特质，后面补人邮大部头。", "marks": "推荐"}
{"content": "很有意思的一本书，一看就懂。不像老师上课和那些“教课范本”那样枯燥。看完就想去学汇编了，感觉好有趣！", "marks": "力荐"}
{"content": "怎么样？是不是发现有一些问题无法简单地解释清楚呢？下面是笔者的答案和解析，供大家参考。", "marks": "力荐"}
{"content": "通俗 读完一遍就好", "marks": "力荐"}
{"content": "计算机组成原理的趣味解读版，语言通俗易懂，图解很到位，很适合初学者。", "marks": "力荐"}
{"content": "一本剖析程序如何运行科普书籍，从源代码、编译器、本地代码执行有一个完整和详细的解说。对初学者有很大的帮助。", "marks": "力荐"}
{"content": "通俗易懂，虽然深度很浅，但其本质目的达到了，确实是好书", "marks": "力荐"}
{"content": "书还不错，就是看的时候总想起大学计算机组成原理课，专业人员看的话挺好，非专业人员可能看不下去", "marks": "推荐"}
{"content": "这本书本身的内容，非常精妙！失败是在文案：这绝非入门书，甚至不能叫图解。最贴切的书名应该是《统计学习，从最小均方误差说开去》。私以为，入门机器学习途径有二，一是受深度学习感召，从感知器始，再来输入/单隐层/输出的标准神经网络结构，到多层感知器，再由自动编码、RNN和CNN渐入DNN家族，这种宏观视野有助于建立“模型-优化算法-准则”的机器学习大观。另一条是从统计入手，贝叶斯-似然估计-均方误差-线性判别-支持向量，推而广之到集成、度量学习、降维等，以代数与统计为主，从公式推演。本书是罕见的后一条路，起点不低，LS直接上核，给的第一个公式概括性极强，看出作者厚积薄发，但不适合初学！！！倒是已对整个ML领域走一圈回头读会醍醐灌顶。另外，一些术语（日语译法）和常用的不一致，但不影响理解。", "marks": "推荐"}
{"content": "大部分内容是公式，图解只是噱头，看了也没有什么帮助", "marks": "很差"}
{"content": "这书太坑了，相比日本人写的其他漫画入门书，比如漫画数据库、漫画线性代数，这本书太专业了，完全不像是让你入门的漫画书，公式太多，所谓的图解的“图”，难道就是大部分机器学习书都有的图么。。。", "marks": "较差"}
{"content": "比较失望，大部分都在讲解公式，有一些基本的统计和概率论内容，但是翻译的很不好。都不是用统计学通用名词，怪怪的", "marks": "较差"}
{"content": "#纸质书# 3.3 分。这主要是一本插画书…… 吧。", "marks": "还行"}
{"content": "有点意思，写的很精简，但是没听过课，去读又难理解", "marks": "还行"}
{"content": "尼玛都没图这也叫图解？公式贼多。建议看《机器学习实战》", "marks": "较差"}
{"content": "对于机器学习介绍得比较全面详细。翻译得有错误。另外里面公式偏多，对于门外汉来说有许多东西不能一下子看懂，所以我还得再找一些基础书籍看看才能继续看机器学习相关的内容了。", "marks": "还行"}
{"content": "极好，非常适合初学者。日本人，有点意思。", "marks": "力荐"}
{"content": "不推荐", "marks": "还行"}
{"content": "图的还可以，解的太专业。看过几页就完全看不懂了，让人恨不得埋头钻研数学，不愧是博士写给博士译，博士译给博士读的……", "marks": "还行"}
{"content": "适合建立概念", "marks": "推荐"}
{"content": "好难，好复杂。", "marks": "推荐"}
{"content": "日本人写的书，思路和符号都跟别人不一样", "marks": "还行"}
{"content": "需要一定的数学基础，这本图解也不简单呐", "marks": "还行"}
{"content": "“图解”就是随便画点不相干的漫画", "marks": "还行"}
{"content": "这也叫图解。。。", "marks": "还行"}
{"content": "想当入门书的可要慎重哦", "marks": "较差"}
{"content": "很好的入门书，虽然趣味性少了点", "marks": "推荐"}
{"content": "好入门，岛国的细致风格。", "marks": "推荐"}
{"content": "大量的公式堆砌，例子／背景／推导非常的少，和其他日本作者出的书的那种深入浅出差别很大，根本不适合什么轻松入门，让人失望", "marks": "较差"}
{"content": "不推荐，太差了，无论是入门，进阶还是当参考书都不合适。", "marks": "很差"}
{"content": "都是数学，，，，，", "marks": "推荐"}
{"content": "萌图。较多公式，但没有太多推导过程。适合轻松入门，不适合严肃学习", "marks": "还行"}
{"content": "什么图解！跟高数差不多一个难度！", "marks": "很差"}
{"content": "画几幅图，根本没用", "marks": "较差"}
{"content": "如果你对机器学习完全无基础的话，这本书不是一本好的入门书，因为它有很多的公式，并且没有给出证明，很难让人一下子接受。但如果你之前看过一些其它的书并且有一定矩阵的基础的话，你会发现这本书有着它自身的优点：有很多直观的解释，算法的优缺点理得很顺，整体的框架构造得很好，还有Matlab代码。如果想对Machine Learning有更深入的理解的话，肯定还要看其它的书籍，还要更多的实践。", "marks": "推荐"}
{"content": "图解类图书，很难兼顾内容的严谨详实和简单形象。我认为作者是用了心的，对于学过一些机器学习理论的人来看这本书还是会很有收获的。但确实不能用来入门。\n\n对了，还有贯穿全书那个蛙(ha?)太让人出戏。。。", "marks": "力荐"}
{"content": "比较晦涩难懂的一本“图解”类书籍，也有可能我是小白看不懂，没看完，放弃了去看西瓜书", "marks": "还行"}
{"content": "插图是来秀智商下限的吗。。。", "marks": "较差"}
{"content": "反正翻了几遍我是没看进去什么 推荐《机器学习实战》", "marks": "很差"}
{"content": "不说专业人士如何看本书内容  单单看封面 “轻松入门” 几个字足以误导众人", "marks": "较差"}
{"content": "七分。这本书并不是适合作为入门书籍，然而评论里清一色的ml投机分子试图以此为捷径入门，显然不可取。适合看过coursera cs229的人巩固提升或者用作demo 玩具算法演示或者增加一些直观的推导，公式虽多却都是入门级的矩阵和概率知识。想要深钻就去看论文，半吊子蓝翔app程序员线性代数都没学懂就来装逼喷？", "marks": "还行"}
{"content": "一本侧重实现代码的机器学习参考手册。冲着“图解”而来，不过诸多图鸡肋。内容果然“角度新颖“”与其他书籍有异”，不易读不宜懂，不适入门。代码能辅助理解，未曾动手练习。", "marks": "还行"}
{"content": "看过图解系列的其它计算机书籍，这本最差。图解面向的一般都是初学者，但书里用的语言专业性很强，语言也没有通俗易懂，插图根本对理解毫无帮助，不推荐购买", "marks": "很差"}
{"content": "这个图解的名字有点骗人了。公式很多，没有细究，大概能意会。但是好像并没有什么卵用。", "marks": "还行"}
{"content": "不得不说真心很一般，需要有一定基础，然而有一定基础的人怎么可能看这玩意。。。\n", "marks": "还行"}
{"content": "图解就是放一片萌图，但是复杂的地方放一堆公式", "marks": "还行"}
{"content": "没有想象的那么好啊", "marks": "还行"}
{"content": "为了读懂里面的内容，回去借了本概率论与数理统计，不是看图说话的那种，需要用到大学的数学相关知识。\n看了前面的几章，感觉阅读不是很友好。", "marks": "还行"}
{"content": "一些复杂的内容没有被很好的解释", "marks": "推荐"}
{"content": "所谓的图解就是配了些完全不相关的插画，插画中表现出一种焦躁或者顿悟的感情，跟机器学习方面没有一毛钱关系。另外其他的插图也都是一般机器学习书籍中都有的，另外有很多公式，需要自己反复推演。代码专门用一个电脑状的图片框起来就算做是图解了？整体画风有点像小学数学课本，小明小红和老师。", "marks": "较差"}
{"content": "从最基础的最小二乘、SVM等讲到部分前沿话题（作者果不其然把密度比推断等自己研究的问题也介绍了一下），图文并茂，内容精炼。无论小白还是有一定基础的读者都可以从中获得一些有用信息，本书就内容而言我是强烈推荐的。不过不知道是不是译者没怎么接触过国内术语，中译本中存在少量可能会影响到内容理解的翻译错误。另外本书毕竟还有科普的成分，所以个别表达也没有苛求严谨。", "marks": "推荐"}
{"content": "毕设要用、写的还不错、但算是入门", "marks": "推荐"}
{"content": "bullshit", "marks": "较差"}
{"content": "作者选择解析的源码不够全面，可能作者选择的是他最熟悉的吧，如果就当这本书算是源码解析方面的补漏还可以。", "marks": "还行"}
{"content": "虽然里面很多印刷错误以及校准错误，但是内容来说还是不错。断断续续看了一年。其实觉得这种类型的书还是分卷出比较好。这样各取所需就行了。这种写法都想一次性全部包括，但是不太可能啊。", "marks": "推荐"}
{"content": "搞不清作者到底想不想好好写这本书，挺厚的，但看完觉得除了大框架概念之外，没什么技术营养……疏漏就不说了", "marks": "还行"}
{"content": "去年看过一遍，根本找不到北，还觉得这本书太深奥了，今年看过深入理解android(1,2,3)后，又翻了翻这本书，突然感觉，一切都是那么好理解，而且知识覆盖率也相当大，但都不是特别深入", "marks": "推荐"}
{"content": "信息量还没国内那本大，错误也不少，不过可能是翻译编辑问题", "marks": "还行"}
{"content": "除了翻译以外，吐血推荐！", "marks": "力荐"}
{"content": "很一般的书，谈不上高级，很多工具和工程经验可以参照", "marks": "还行"}
{"content": "讲真，这种类型的书对于我现在没有太大意义了。顶多就是遇到问题查阅下细节。不如《程序员的自我修养》那本书好。", "marks": "还行"}
{"content": "收益很大，有一部分还是没明白。\n详细从底层说明了程序设计，从最初的设计，一步一步说明如何修改，很好的一本书", "marks": "推荐"}
{"content": "书中讲得浅显易懂，是本优秀的书", "marks": "推荐"}
{"content": "把《two scoops》里很多没解释清楚的东西都说明白了", "marks": "力荐"}
{"content": "其實大部份都是 best practices 而不是你以為的那種 design patterns，但是拿來翻翻還是不錯的", "marks": "还行"}
{"content": "上面有个哥们总结的好，大部分内容都是best practice，并且深度一般", "marks": "还行"}
{"content": "从quora上了解作者，后来有看了他的博客，从硅谷工程师的视角看待如何提高效能，很多观点很有启发。我想不仅仅对于软件工程师，对于我们这些整天和自动化流程打交道的工程师也很有用。书里的内容大多出自博客，没有发现有趣的新内容，不过还是买了书感谢作者。", "marks": "力荐"}
{"content": "A good read for any engineers interested in Startup jobs. Always think of leverage of what you are doing, and tools first development mindset.", "marks": "推荐"}
{"content": "作为软件工程师，你所需要的效率思维，工具和方法，这本书基本都介绍到了。\n", "marks": "力荐"}
{"content": "刚刚读完的一本好书，推荐给每一位开发者！", "marks": "力荐"}
{"content": "作为一名软件工程师，此书值得一读。如果只用一个词来概括这本书，那一定是\"leverage\"。", "marks": "力荐"}
{"content": "真的戳了很多痛点。", "marks": "力荐"}
{"content": "对我感觉像老生常谈了，todo list，move fast，善用编辑器等等", "marks": "推荐"}
{"content": "非常好的一本书，内容涉及研发效率、个人成长、团队管理，可惜没有中文版。", "marks": "力荐"}
{"content": "对于有软件工程需求的人来说，这是一本值得阅读的书籍。因为我自己的工程经验太少了，对于经验的判断我没有什么根据，但是我抽取到了自己想获取到信息。", "marks": "力荐"}
{"content": "良好且有条理的工作习惯不局限于工程师 而是通用于各个行业的职场 在项目初期尽早建立系统性的计划 验证可行性 工作进行中及时收集反馈 迅捷开展必要的更正 审慎靠谱的风格是一方面 不畏惧可能出现的错误 用开放平和的心态面对调整 更能够提升决策效率 牢记把时间花在刀刃上的简单道理!", "marks": "推荐"}
{"content": "一本不错\"one sit reading\"。但是内容比较空洞，主要是介绍作者关于互联网工程的经验。", "marks": "还行"}
{"content": "贪心算法实例化。", "marks": "推荐"}
{"content": "特别实用的一本书，可以很好的帮助developer的日常", "marks": "力荐"}
{"content": "很受用 想读第二遍", "marks": "力荐"}
{"content": "有所获.", "marks": "推荐"}
{"content": "感觉还是不够深入，相对于前辈《深入理解Java虚拟机 : JVM高级特性与最佳实践》，多了些JDK新知识，比如G1，实战部分如果更贴合实际生产需求会更好，而不是做实验性质的调优。", "marks": "还行"}
{"content": "这本书写得非常朴实，作者有很强的实践功底，每一部分内容除了有原理还有案例，非常适合入门学习", "marks": "力荐"}
{"content": "前面几章非常不错，可以了解jvm的内存分配，后面就有些啰嗦点，值得一看。\n", "marks": "还行"}
{"content": "快速复习一下Java虚拟机， 垃圾回收，堆，类加载...", "marks": "还行"}
{"content": "前面讲有关jvm的一些概念，最后讲class结构和指令的有些偏题，和副标题不太符合", "marks": "推荐"}
{"content": "简单，比周志明那本容易入门，看完再看另一本", "marks": "推荐"}
{"content": "个别章节未读，比周志明的《深入理解JAVA虚拟机》要浅显一些，可能因为该书的出版时间要近点，所以还是能GET到一些有用的点。另外，个人觉得章节内容的顺序性编排不错。", "marks": "还行"}
{"content": "前半部分值得一看", "marks": "还行"}
{"content": "整体上可能没有周志明的全和准确，但也有很多周没有讲到的。可以和深入理解jvm一起看。", "marks": "推荐"}
{"content": "比较入门的一本jvm的书籍，通俗易懂，书中的例子也比较好理解，挺好的！", "marks": "推荐"}
{"content": "花了三周左右的时间，看完的（除了多线程那块），感觉作为入门的了解java虚拟机的知识还是想想不错的。", "marks": "推荐"}
{"content": "这个书比较容易入门 适合 jvm初学者，然后和<深入理解JVM>这本书结合 那就更好了，形成高低搭配。", "marks": "推荐"}
{"content": "这本书还行吧，适合入门，讲了很多例子，而且GC部分也讲到了最新的G1，总体还是不错的，不过整书的连贯性上有所欠缺。比较推荐当做JVM入门来看！", "marks": "推荐"}
{"content": "深入浅出", "marks": "推荐"}
{"content": "特别惊诧于Java中引入函数式编程的方法，这么天然无邪，和原有的API又整合得毫无痕迹", "marks": "推荐"}
{"content": "还可以，主讲函数式方面的。", "marks": "推荐"}
{"content": "java 8 函数式编程入门：）", "marks": "力荐"}
{"content": "翻译的确实有些差强人意，但总体来说还是快速全面的介绍了Java8里新增lambda特性的方方面面", "marks": "还行"}
{"content": "对函数式编程倒是讲的很详细", "marks": "还行"}
{"content": "随便看看，没啥用", "marks": "较差"}
{"content": "比较简短，随便看看", "marks": "推荐"}
{"content": "入门挺不错的", "marks": "推荐"}
{"content": "快速了解Java 8 Lambda 和stream", "marks": "还行"}
{"content": "很不错的一本书，简要的介绍了java8函数式编程的要点，函数接口，使用的场景。将代码段或者模式重构为函数式编程的例子最为有用。令人意外的是译者是我同一期入职的同事，哈哈。", "marks": "推荐"}
{"content": "对于java8中最重要的新特性lambda有一个初步的了解，明白他能做什么，不能做什么！还是非常值得读的。", "marks": "力荐"}
{"content": "函数式编程入门推荐书籍", "marks": "还行"}
{"content": "书不错，简短易读，翻译的也没毛病，配图也比较用心。最近RxJava挺热门的嘛。", "marks": "推荐"}
{"content": "不错", "marks": "力荐"}
{"content": "各种基于Jvm的语言出来后，Java也加快了发展的脚步", "marks": "推荐"}
{"content": "java的语法糖多了，list处理更灵活了。挺好！", "marks": "推荐"}
{"content": "挺好的一本书，通俗易懂，简洁明了。用这本书入门函数式编程挺好", "marks": "力荐"}
{"content": "比较简短，速度入门，然后在工作中深入。", "marks": "力荐"}
{"content": "一本学习函数式编程的实用书本", "marks": "力荐"}
{"content": "系统的讲解了java8的lambda表达式及其应用，以及它对设计模式，并发编程的影响。后面事件驱动和响应式编程理解的不够透彻。还得找点其他文档看看，但对java8的使用，本书足以。", "marks": "力荐"}
{"content": "一本书能这样深入浅出将java8新特性的来龙去脉讲清楚，虽然贵点也值了，好评", "marks": "力荐"}
{"content": "入门还不错", "marks": "推荐"}
{"content": "几乎可以想象oracle的研究员们在设计Java8时候如何费煞心思地既保持向后兼容、又带来质的飞跃", "marks": "推荐"}
{"content": "一本不错的介绍Java8中stream和lambda表达式的小册子。", "marks": "推荐"}
{"content": "篇幅不长，大致介绍了Java 8引入的Stream API和lambda表达式的用法，对以往Java项目代码可做的改进等。还包括vertx和RxJava的简要介绍。阅读本书之外还需要更多的实践。", "marks": "推荐"}
{"content": "入门，想要精通还得细细揣摩", "marks": "还行"}
{"content": "读第一遍可能会开始尝试map-reduce之类的函数式方法，当然还有lambda表达式，然后后面写东西的时候有些东西想不起来就拿来翻一翻，每次总能学到一些东西，这本书可以当作入门，当然也可以当作参考书，放在手边，多翻一翻。", "marks": "力荐"}
{"content": "回头得把习题做一下！", "marks": "推荐"}
{"content": "能够对Java8中的lambda表达式有个初步的了解", "marks": "推荐"}
{"content": "不错的Java8新特性入门书，例子比较丰富。不过篇幅小，并没有介绍太深入，偏实用。", "marks": "还行"}
{"content": "内容实用，适合想上手使用Java8新特性的人。但书中更多的在介绍新特性的用法，缺少深入的剖析，最后两章有点在拼凑内容的感觉", "marks": "推荐"}
{"content": "基本点都涵盖到了，连rx、completablefuture也有所讲解，对于用java进行函数式编程是个不错的入门书籍，但是想要掌握还是得多多练习。", "marks": "推荐"}
{"content": "会帮助理解java8中函数式编程的理解，但感觉很多的是在教你怎么用，而对于背后是如何实现的，是语法层面的还是实现层面的，编译器在编译时是如何判断和分派的等等，没有很好的涉及。比如，对于函数的引用时，没有()和有()在编译和实现上是一种什么样的区别...", "marks": "推荐"}
{"content": "很不错的一本介绍函数式编程的书，深入浅出，后面还有一些DSL和NIO的内容。", "marks": "力荐"}
{"content": "这本书除了介绍函数式编程的使用方法外，还涉及单元测试，重构，设计原则和设计方法，但都是蜻蜓点水式的过了一遍。Java的函数式编程并不纯粹，也不够完美，但至少给广大Java程序员带来一种新的尝试。", "marks": "推荐"}
{"content": "+语言层解决了Spark流式处理范式的编写问题，但语言层面并没有解决分布式和网路传输的问题。全面性略输，入门必读。\n-Oracle为了解决Lambda进入Java的问题在语言的多个层面做了相当的妥协，甚至部分否决了之前接口与抽象类的差异策略。\n-只进行语言层解释", "marks": "力荐"}
{"content": "还不错，不厚，但该讲的都讲了，谈不上经典，但值得一看", "marks": "力荐"}
{"content": "大部分内容在飞机上看完了 还不错 比较薄 内容简明", "marks": "推荐"}
{"content": "入门推荐，不错。", "marks": "推荐"}
{"content": "不全面，不过足够让人再次爱上Java", "marks": "力荐"}
{"content": "入门的几章还好,后面有点吃力,源码要吃透不容易...", "marks": "推荐"}
{"content": "灰常好，不仅介绍了新增的lambda，对函数式编程思维也有阐述，最后函数式编程对设计模式的简化部分令人很有启发！", "marks": "推荐"}
{"content": "比较薄，不过关于JAVA8讲的不错，快速入门，比较精简，没有啥废话。要是增加课后习题就给5星了", "marks": "推荐"}
{"content": "很简短的书，花了一个下午从头过了一遍，很多关于lambda小技巧都特别实用，代码片段也很好理解。", "marks": "力荐"}
{"content": "凑合吧 介绍了一些新特性 但感觉不够深入", "marks": "还行"}
{"content": "还是很不错的 了解java8的同时深入浅出学习函数式编程 随手翻翻也有些收获", "marks": "力荐"}
{"content": "看过最好的Java 8函数式编程资料，即系统全面又实例生动，值得再读一遍的好书。", "marks": "力荐"}
{"content": "很不错的一本书，学习Java8的新知识以及Java的函数式编程最佳书籍", "marks": "力荐"}
{"content": "自己当然要推荐一下自己编译的，打一个广告。", "marks": "力荐"}
{"content": "一本云计算领域值得推荐的好书，其理论联系实际，包括丰富案例。拟在本科生的云计算课中尝试使用。", "marks": "力荐"}
{"content": "这本书里的示例代码必须要翻墙，否则完全没办法下载，可没有示例代码你根本学不了！！！！", "marks": "很差"}
{"content": "介绍了一些有趣的东西，比如Clojure、Elixir、OpenCL、OpenGL、Spark和Storm。个人认为用Hadoop是个败笔，Spark那么好的框架不用，用Hadoop这种难用落后的框架", "marks": "推荐"}
{"content": "既然是讲并发模型，感觉不应该这么强语言相关。\n7个并发模型有3个选用的clojure，不熟悉的话只能草草略过。\nPS：就连CSP模型都选的clojure   orz", "marks": "推荐"}
{"content": "太多clojure的内容了，副标题的go也是骗人的", "marks": "还行"}
{"content": "语言还是讲的太多了点。感觉一些语法层面的解说完全没必要啊。", "marks": "较差"}
{"content": "今年读到超多好书，但这本书仍是俺2015年遇到的最最佳书之一。", "marks": "力荐"}
{"content": "#图灵# #PDF# 3.7 分。面广。不过感觉至少读 Clojure 的两章都需要了解语言特性，必须有辅助材料。不过“七周七”系列一直是这样的吧。", "marks": "推荐"}
{"content": "咦，很少见到哪本书中文译本的评分高于原版的", "marks": "推荐"}
{"content": "书名和目录就决定了五星的质量，书不厚，但讲了Akka/Erlang的Actor，Go的CSP等等", "marks": "力荐"}
{"content": "说实话除了前几章，没怎么看懂", "marks": "力荐"}
{"content": "暂时4星，只读了Java部分，在Clojure和Scala的部分由于不熟悉暂时打住，闲暇时学习Clojure后再来继续", "marks": "推荐"}
{"content": "五一在南山书城大概翻了下，actor那章讲的比那些scala的书好太多了", "marks": "推荐"}
{"content": "讲的比较泛，看看结论就好", "marks": "还行"}
{"content": "讲的东西挺多，但是深入看还得自己去找资料。而且将的并不是很浅显易懂。", "marks": "推荐"}
{"content": "quick and straight", "marks": "推荐"}
{"content": "挺不错的，简单扼要", "marks": "推荐"}
{"content": "虽然书很薄，但是对各个并发模型都讲解的很细致深入。不过最好还是有函数式编程的基础再看。", "marks": "推荐"}
{"content": "很好的科普书，可以对各种模型的优势弱势有一个common sense，对go语言使用的channel 和gorutinue的clojure实现也有介绍。（忽然想起有个基友在页游公司写服务器使用Erlang……", "marks": "推荐"}
{"content": "讲的不错，有大概了解", "marks": "推荐"}
{"content": "以前提到并发只知道多线程和锁，其他并发还有很多其他概念和技术，着实拓宽的技术面和见解，很多概念还不是非常清晰，后面还是要不停翻阅作为参考。", "marks": "推荐"}
{"content": "closure的语法真绕。。预发层面的东西太多了一点。actor、csp模型的本质的东西讲的不够深入。", "marks": "还行"}
{"content": "有三章是用Clojure来讲的，一章Elixir来讲的，好好的CSP不是用Go来讲更好吗？Actor用Scala的Akka讲不是更好. 如果想看线程和锁这一部分的话，那它讲的真的是最基础的一部分了．", "marks": "还行"}
{"content": "这本书思路很开阔，值得一看，当然要全部搞懂是不可能的。我觉得对于一个复杂的话题，这种多看看多想想是个很好的模式，钻牛角尖很容易帆船。", "marks": "还行"}
{"content": "感觉还不错，挺薄的一本书，看完挺长见识的。每个模型没有很深入，但基本点都说到了", "marks": "推荐"}
{"content": "修改评论，二刷本书，逐渐感受到了它的魅力", "marks": "推荐"}
{"content": "还不错，通过各种示例讲解了不少并发模型的基础概念", "marks": "还行"}
{"content": "没读完，书中实例讲解为主，原理性的东西欠缺。讲线程和锁那一章还不错。", "marks": "还行"}
{"content": "受限于个人语言基础，只先粗略度一遍。值得后续细读，尤其actor和CSP模型，现在没啥体会", "marks": "推荐"}
{"content": "讲了锁（很蛋疼）、函数式不变性在并发里的优势、Actor模型、channel、GPU、lambda架构等。linus说的对，不要高看并发，其实场景很有限", "marks": "推荐"}
{"content": "讲的比较泛，提纲挈领的作用，要用erlang做示例语言就好了", "marks": "推荐"}
{"content": "挺浅显的入门书吧，很简明易懂", "marks": "推荐"}
{"content": "介绍性质的，蛮浅显的，了解下是不错，熟悉这块的话1,2天就能看完", "marks": "推荐"}
{"content": "翻译得一般。", "marks": "还行"}
{"content": "前几章写得更好。Clojure讲的比较多，也许以后会用起来。", "marks": "还行"}
{"content": "从最基本的线程讲起，谈到了我们在处理并发问题需要面临的问题。深入浅出，值得推荐。", "marks": "推荐"}
{"content": "快速翻过", "marks": "还行"}
{"content": "信息量确实很大，但只适合浮光掠影的阅读。", "marks": "还行"}
{"content": "并发不止于线程与锁，还有：函数式编程、Clojure、actor、通信顺序进程、数据级并行和Lambda架构。", "marks": "推荐"}
{"content": "比较概要", "marks": "还行"}
{"content": "并发模型和函数式编程语法介绍参杂在一起挺乱的，快速认识常见并发模型如actor，但具体应用的业务场景就要看别的书了", "marks": "还行"}
{"content": "简单扼要的介绍了并发系统", "marks": "推荐"}
{"content": "有点意思，但是觉得怪怪的，不是特别接地气", "marks": "推荐"}
{"content": "对我这种Java er来说，第一二章还能看得清楚，从第三章函数式编程开始，整个人就感觉不大好了，看来还得加强自己的内功，：P", "marks": "推荐"}
{"content": "当在各种科技播客上纷纷听到推荐七周系列，并在2015年了解到自己的高中学长翻译了这本《七周七并发模型》后，毫不犹豫地第一时间在线预订。一共9章，两次读完，刚拿到书看了1～5章，在这个周末读完了剩下的章节。因为之前阅读的姿势不正确，总想细究示例代码，待看到第6章CSP时发现是Clojure而非热门的Go语言时，把书暂时放下了——之前章节介绍的Clojure语法忘了差不多。最近工作上和Go语言有关，重回CSP章节。因为已有“A Tour of Go”的基础，也容易对比两个语言在CSP上的特性。正如“推荐序”部分所说，语言虽重要，但只是表象，作者希望让更多的人了解业界已有的并发和并行工具。七周系列不是读者成为某7个领域的专家，而是拓宽他们的视野，且保有深度。阅读过程中感觉世界被点亮，感谢作者译者！", "marks": "力荐"}
{"content": "过于语言化。", "marks": "还行"}
{"content": "讲的比较简略，封面上写着大大的 Java 和 Go，其实大部分代码都是 Clojure 啦。", "marks": "推荐"}
{"content": "用clojure的实现细节很多。函数式编程和并发的关系不是很清楚，只是稍微提到了STM、原子操作、固定类型等。很多并发的实现和clojure语言的实现相关。CSP讲得不是很透彻，没有用golang还是用了clojure来讲，感觉有点怪。", "marks": "推荐"}
{"content": "辣鸡", "marks": "较差"}
{"content": "P53", "marks": "推荐"}
{"content": "不错的入门书", "marks": "推荐"}
{"content": "打开了新世界的大门！", "marks": "力荐"}
{"content": "感觉在讲几种并发模型在几种语言的应用，而不是原理，这类书大概就这样吧", "marks": "还行"}
{"content": "可能是自己功力不够，虽然是讲并发模型，但是语言层面看起来还是相当吃力，到后来动手运行例子也坚持不下去了。不过倒是开了眼界，虽然某些并发模型还没用到过，但是有一些印象也很好。", "marks": "还行"}
{"content": "前面部分讲的非常棒，后面的CSP Actor感觉不是很好。这本书更大的意义在于开拓了自己的眼界。", "marks": "推荐"}
{"content": "  泛读  了解下并发  感觉这本书可以写得更短一点", "marks": "推荐"}
{"content": "各种并发模型讲得很清楚 受益匪浅", "marks": "推荐"}
{"content": "orz，功力不够读不下去，挖坑待回来补完。", "marks": "推荐"}
{"content": "Quick scan", "marks": "力荐"}
{"content": "讲述了不同语言并发设计上的模式和优缺点对比，知识面之广令人佩服，无论熟悉不熟悉closure erlang elixer opencl等语言，都值得一看，思想是可以相互借鉴的", "marks": "推荐"}
{"content": "【2017.06.20】大二的时候看过，一知半解，现在复习一下。总体而言，也就是七个 demo 级别的样例。扩展思路可以，然而要想深入，还是得看具体实践。某种程度上，为了增加并发系统的性能，可以把思路从减少临界区范围扩展到从业务设计，模型选择上避免临界区。", "marks": "推荐"}
{"content": "整体还是不错的，java的部分基本面已经覆盖到了，更多的新意在clojure的函数式编程以及go和CSP模型，clojure底层还是依赖jvm，所以其中的原子变量，copyonwrite,future基本还是java中的概念，很好奇actor的实现，如何做到那么轻量级（甚至每个操作一个go）,又能做到并发，难道是共用一个全局的线程池？Erlang的actor模型是个亮点，非常简洁和有效，而且还支持分布式，牛逼！还有那个GPU太底层，一般的非算法场景也用不到，最后说到的hadoop和Storm就是老生长谈，但值得关注", "marks": "推荐"}
{"content": "2015年唯一一本没看懂的，C10K问题那里过来的，前路漫漫", "marks": "力荐"}
{"content": "看了前面两章java的，并发编程入门书籍", "marks": "还行"}
{"content": "不错的介绍分布式和开发框架的书籍啦", "marks": "力荐"}
{"content": "应该专注于模型本身去讲的，然而作者一直尝试解释每一门语言的语法特点，有点吃力不讨好的感觉，最后，代码片段中不断出现的《银河系漫游指南》的梗实在是太欢乐了。", "marks": "推荐"}
{"content": "偶有惊艳，闲时可以翻看。", "marks": "还行"}
{"content": "略过时", "marks": "推荐"}
{"content": "一天看完。。。语言知识太多。。。golang那个标题骗人。。。感觉最大的收获在模型的一些思想", "marks": "还行"}
{"content": "怎么说呢，看得出来，作者在Hadoop上有过丰富的项目经验，书中的例子也较多很实际，尤其关于MapReduce的讲解很到位。但时代变了，现在看来，这些已经有些过时了", "marks": "还行"}
{"content": "带我入门hadoop的书，感谢小师父的推荐", "marks": "推荐"}
{"content": "太糟糕", "marks": "很差"}
{"content": "云计算的概念是在2006年提出来的，而2013年被称为“大数据元年”，标志着世界正式进入了大数据时代。我们有幸在技术飞述发展的当下，见证着一个个伟大的技术诞生，开源意味着每个人都能学习、使用。作为Apache软件基金会的项级项目——Hadoop的学习，我选用了《Hadoop海量数据处理——技术详解与项目实战》（第2版）作为我的入门书籍。原因是它第2版是在2016年6月出版，时间上比较新。另一原因是本书不仅有基础概念的解释，还有实战的演示，做为一本入门技术书籍，是很不错的选择。在此，感谢作者的分享。 \n\n另外，Hadoop的官网上的文档写的非常全且详细，但是由于Hadoop涉及的内容实在太多了，一时间竟不知道从何学起，所以有本书带着进入Hadoop的世界，事半功倍！（我的体验是可以结合着看）。", "marks": "力荐"}
{"content": "要多关注有价值的地方", "marks": "推荐"}
{"content": "算是比较良心的配套答案了，非常详尽，还有出题思路。", "marks": "力荐"}
{"content": "与原书一起，相得益彰", "marks": "力荐"}
{"content": "适合用来参考，但也有一些错误，要参照CP5仔细分析", "marks": "推荐"}
{"content": "配套练习题，好好学习天天向上！", "marks": "力荐"}
{"content": "配套 不过感觉叙述有点啰嗦", "marks": "推荐"}
{"content": "当初玩arduino的时候买的，超贵啊，以为这么厚内容肯定多了，结果也只是解释了每个函数的作用和用法。。被我拿来当成语法查询工具书了", "marks": "推荐"}
{"content": "适合有基础稍微看看又不打算特别深入的理论教材。", "marks": "推荐"}
{"content": "最新的jdk知识,语言有趣.有关于JVM的底层细节.", "marks": "力荐"}
{"content": "读过最好的 java 书，消除了恐惧，讲的特别清晰。大爱。", "marks": "力荐"}
{"content": "需要点基础才能看明白", "marks": "推荐"}
{"content": "比较简单,看完之后能够知道kafka各个模块的基本作用。简单介绍了配合storm，hadoop的一些使用场景", "marks": "还行"}
{"content": "基础读物，这货演进太快，2015年2月的书再读就过时了", "marks": "还行"}
{"content": "对Kafka的入门介绍，这样的资料网上很多", "marks": "较差"}
{"content": "kafka的入门介绍，讲的比较浅，读过对kafka有一定认识", "marks": "推荐"}
{"content": "内容不多，比较浅显。大致翻阅了一下。 15.06", "marks": "推荐"}
{"content": "比较浅，基本上点到为止，就当学习英文了", "marks": "推荐"}
{"content": " 下班回到酒店一晚上看完，可以通过这本书了解kafka的概念。值得看。", "marks": "力荐"}
{"content": "讲得比较浅显。", "marks": "推荐"}
{"content": "基础好的看会好一些，基础不太牢的看会很费劲，讲解的比较专业，有些晦涩，但无论怎样，看了都会觉得有收获。", "marks": "推荐"}
{"content": "基本没有翻天的变化，框架表象没变，内在变了。", "marks": "还行"}
{"content": "opencv入门书，以翻译官方文档为基础。编程进阶请看《Learning opencv》，理论进阶请看《数字图像处理》（冈萨雷斯）", "marks": "还行"}
{"content": "赞，很适合入门，作者还是90后，我辈老矣", "marks": "推荐"}
{"content": "网上的文章抄了整成一本书，里面还有一些小错误。不过入门还是不错的。", "marks": "还行"}
{"content": "很好的书，浅显易懂，适合入门。唯一打击我的是这是90后写的....", "marks": "推荐"}
{"content": "人家免费的官方文档，你合起来出了本书卖？？", "marks": "很差"}
{"content": "入门必备，很翔实的例子和写法，不怕看不懂。", "marks": "推荐"}
{"content": "入门吧。", "marks": "推荐"}
{"content": "囫囵吞枣地过了一遍，有些小错误，算法部分相对讲得少了。", "marks": "还行"}
{"content": "opencv入门教程，写的相当不错，比较通俗易懂，很多知识点都讲到了。不过代码部分写的一般，基本都是抄opencv手册的。", "marks": "推荐"}
{"content": "真的是入门级的", "marks": "还行"}
{"content": "同学推荐的入门书，师傅领进门，修行在个人。", "marks": "力荐"}
{"content": "3.5 微博上@作者请教了两个书中不明白的问题，作者私信解答了，开森", "marks": "推荐"}
{"content": "待我学成归来...好好学习...天天向上...", "marks": "力荐"}
{"content": "入门级别的书  概念都讲的很全面  初学者或者对这方面感兴趣的可以看看   当然进阶玩家就不用看这本书了", "marks": "力荐"}
{"content": "还不错的一本入门书，作者很多解释都到了点上，适合我读。", "marks": "推荐"}
{"content": "从零开始慢慢学习编程，希望不要落后于时代", "marks": "推荐"}
{"content": "入门级，翻译官方文档为主，有部分重复。贵在新，速成，近乎术。求道且看刚萨雷斯《数字图像处理》", "marks": "还行"}
{"content": "导师推荐的书，看了还不错，有的部有点晦涩，大部分章节通俗易懂，是个不错的工具书，比较实用。", "marks": "推荐"}
{"content": "刚入了编程的这个坑，朋友推荐了这本书，简单易懂，况且作者还是个90后啊，后生可畏", "marks": "力荐"}
{"content": "我们上课的教材，虽有瑕疵，但还是目前市面上最好国人创作。", "marks": "力荐"}
{"content": "大神同学推荐的入门书籍，看了几天，挺有用的", "marks": "推荐"}
{"content": "价格偏高，内容安排的有些虚，图配的也太大了吧", "marks": "还行"}
{"content": "同学推荐的工具书，作者的图片都选得很萌啊", "marks": "推荐"}
{"content": "这个入门级的很适合用，我刚开始学的时候也是通过同学推荐的，效果很理想。", "marks": "推荐"}
{"content": "很不错的入门书籍", "marks": "推荐"}
{"content": "讲解很透彻的opencv入门书，包含opencv2/3两个版本。大部分内容从博客摘抄，相比翻译版本阅读起来容易很多", "marks": "推荐"}
{"content": "新版opencv的资料本来就不多，这本书是是2015年出版的集大成者。期待第二版。", "marks": "力荐"}
{"content": "大神同学推荐的入门书籍，看了几天，挺有用的", "marks": "推荐"}
{"content": "opencv入门书，我导师推荐给我的确实很棒，厉害了我的作者，这本书精简又易懂！", "marks": "推荐"}
{"content": "作者大部分都是按照opencv.org上的教程来写的，简直就是翻译过来的。然后错别字还挺多的。。。总之这个有点像是在opencv3的书没有大批量出来之前，捞一笔的感觉", "marks": "较差"}
{"content": "通俗易懂的书，哈哈哈看完差不多会一些了", "marks": "力荐"}
{"content": "内容详细清楚，看来以后真的有能力上的提升，很棒啊", "marks": "力荐"}
{"content": "导师介绍的，很适合入门的一本书，标注明确，浅显易懂", "marks": "推荐"}
{"content": "内容很丰富，详实易懂！以后还有能力的提升空间", "marks": "力荐"}
{"content": "此书很好，评价怎么这么低，有人在故意差评吗？", "marks": "推荐"}
{"content": "想学习一下同学推荐我看看，还不错，对我很有帮助", "marks": "力荐"}
{"content": "非常赞，很适合入门参考，没想到作者竟然是90后的，很厉害了！", "marks": "推荐"}
{"content": "同学推荐的，很适合我这行入门的人看吧", "marks": "力荐"}
{"content": "2015年出版时，opencv界的一股清流。", "marks": "力荐"}
{"content": "2017年了，如果你要入门OpenCV2和OpenCV3，至今没有发现可以取代这本书的中文新书出现。里面一部分参考了OpenCV原版文档来翻译和编写，像是OpenCV2和OpenCV3版的国产《学习OpenCV》。在新版OpenCV资料稀少的年代，国人所著的这本书，更加难能可贵。", "marks": "推荐"}
{"content": "好书，很赞。实在看不下去某些恶意差评了。组织opencv爱好者，我们实验室的同学们行动起来，为好书打call。", "marks": "力荐"}
{"content": "\n以官方文档为引子，加上了大量自己的理解。入门很好的一本书。\n", "marks": "力荐"}
{"content": "工具书，很喜欢后面附录里的核心函数清单。\n", "marks": "力荐"}
{"content": "对入门小白来说，书中很多以示例对加深理解是个捷径。\n", "marks": "推荐"}
{"content": "导师推荐的，很受用，深入浅出，内容全面细致，是OpenCV3入门的好书,同样也是提升的必备宝典.", "marks": "力荐"}
{"content": "定位入门，确实是市面上最好的opencv入门书，但有一部分是在官方文档上的再创作，不喜勿看。", "marks": "力荐"}
{"content": "90后壮哉，老师给推荐的入门书，挺易懂的，作者太棒了", "marks": "推荐"}
{"content": "是同学推荐的，好奇所以看了一看。确实是一本值得推荐的入门书。非常棒。", "marks": "推荐"}
{"content": "读完这本书感觉很棒啦，给了我这个门外汉一点自信，真的这个对我超重要。很通俗易懂~支持", "marks": "力荐"}
{"content": "舍友给我推荐的，这段时间在恶补c++，完了就能看这书了", "marks": "力荐"}
{"content": "刚入了编程的这个坑，朋友推荐了这本书，简单易懂，况且作者还是个90后啊！", "marks": "力荐"}
{"content": "注释的程序源代码与思路说明都很详细 方便快速上手 方便我们学习", "marks": "力荐"}
{"content": "工具书，例子不错，作者的图片都选得很萌啊", "marks": "还行"}
{"content": "看不下去了，我们要给浅墨大神打call，刷一波好评。", "marks": "力荐"}
{"content": "我同学推荐给我的，确实适合入门，五星好评赞", "marks": "力荐"}
{"content": "我感觉挺好看的，所以说非常值得我们去欣赏，身边的人都在看呢", "marks": "力荐"}
{"content": "想自学编程同学给推荐的，易懂，是不错的入门书。", "marks": "力荐"}
{"content": "同学推荐的，对于入门的我来说刚刚好，读完一边实践，收益还是蛮多。", "marks": "力荐"}
{"content": "很好的入门书，90后作者，刺激我这80后啊，迫不及待充电了啊…", "marks": "推荐"}
{"content": "不错，比较通俗易懂，很多知识点都讲到了。不过代码部分写的一般，基本都是抄opencv手册的。", "marks": "力荐"}
{"content": "感觉像专门给小白写的书，标注明确，浅显易懂", "marks": "力荐"}
{"content": "哇 很不错的一本入门书，细节讲解非常到位，值得买", "marks": "力荐"}
{"content": "内容很全面，看过对我很有帮助，推荐不会的可以看下", "marks": "力荐"}
{"content": "2015年的书，要是能出个新版就好了。", "marks": "力荐"}
{"content": "书乍一看很厚，其实没什么干货，很多废话，甚至有些段落直接照搬百度百科。CSDN上很多大牛的博客内容质量比这本书高多了。", "marks": "较差"}
{"content": "OpenCV在计算机视觉领域扮演着重要的角色。这本书深入浅出地介绍了OpenCV2和OpenCV3中的强大功能、性能，以及新特性。", "marks": "力荐"}
{"content": "我正在准备学，然后网上找了好多书看的眼花缭乱，群里有学长学姐给我推荐了毛老师的书，我目前学习了一点！很好懂！", "marks": "力荐"}
{"content": "业余时间学习用这个入门的书还不错。简单易懂。", "marks": "推荐"}
{"content": "最近想自己学学编程，买了这本书，入门用起来还不错。", "marks": "推荐"}
{"content": "同学推荐的，很适合入门的学习，也很好理解。", "marks": "力荐"}
{"content": "前段时间想自学编程，然后同学就给我推荐了这本书，作为入门书真的挺不错的", "marks": "力荐"}
{"content": "只能说我最近比较闲，搞了这本书来看看，挺出乎我意料的，并没有想的那么难，看了还是学会了一些东西，可以可以", "marks": "推荐"}
{"content": "学长推荐的，超赞，学起来很快。", "marks": "力荐"}
{"content": "同学给推荐的，很基础适合入门级随便看看", "marks": "力荐"}
{"content": "同学推荐来的，没想到确实还不错，很好理解，推荐！！！", "marks": "力荐"}
{"content": "不错，入门级教材，可以很好的学习入门，讲解比较清晰，好评", "marks": "推荐"}
{"content": "很适合入门的工具书，浅显易懂，90后小作者好给力", "marks": "力荐"}
{"content": "同学推荐的 编程入门书 在同行里面算是非常不错的了 在学c+的看了有很深的感触", "marks": "力荐"}
{"content": "正需要这方面的知识，很快就入门了，写的很详细。", "marks": "力荐"}
{"content": "很不错的书，由浅到深，例子也比较典型，适合我们这些初学者来读。", "marks": "力荐"}
{"content": "楼上有些评论简直不负责任，张口就来，我就觉得作者写的挺好的！给五星！", "marks": "力荐"}
{"content": "openCV入门书籍，很赞，浅显易懂，导师推荐很久了", "marks": "力荐"}
{"content": "同学介绍的感觉不错  适合入门的哦  作者也很年轻", "marks": "推荐"}
{"content": "书很通俗易懂，对于我这种入门的人来说很好", "marks": "力荐"}
{"content": "入门书来说真的是很不错的了，同学推荐的，很容易看懂！！", "marks": "力荐"}
{"content": "入门书 朋友推荐来的 说是比较好的 导师讲解清楚 学得快 赶紧来看看 哈哈 学习就是要个过程吗 值得推荐一下", "marks": "力荐"}
{"content": "国内里不错的一本书。对刚入门的人很友好，我也是计算机专业，最近在看。非常有帮助", "marks": "力荐"}
{"content": "毋庸置疑，绝对是入门首选，老师推荐来的＋1", "marks": "力荐"}
{"content": "挺棒的书呀！同学学过之后推荐的，介绍的也比较详细，适合入门读", "marks": "推荐"}
{"content": "同学推荐的给我的，内容确实不错，想入门的可以先看看这本书", "marks": "推荐"}
{"content": "这部入门书我觉得是比较合适的，对初学者非常有帮助", "marks": "力荐"}
{"content": "同学推荐过来的一本书，适合自学，通俗易懂。", "marks": "力荐"}
{"content": "打算未来转行，朋友推荐我买这本来学，整体框架系统，很有帮助", "marks": "力荐"}
{"content": "爬虫入门级教程，知识比较浅，也是导师同学推荐来看的，看完受益良多，一本好教材", "marks": "推荐"}
{"content": "作者文笔很好，思路也很清晰！目的性很明确", "marks": "力荐"}
{"content": "在华为工作的老同学一直说此书不错，买来读了后，果然是本好书。", "marks": "推荐"}
{"content": "这本书确实蛮实用的，同学推荐我的，很不错。", "marks": "力荐"}
{"content": "入门的必备，确实能学到很多的知识，入门必备的工具书，这个作者支持他！", "marks": "推荐"}
{"content": "市面上入门新版opencv的最好的书，没有之一", "marks": "力荐"}
{"content": "本书也适合于图像处理、计算机视觉领域的业余爱好者，非常好", "marks": "力荐"}
{"content": "这是老师推荐的，个人觉得作者写的不错。", "marks": "推荐"}
{"content": "同学推荐的，编程是一个门槛一个门槛过的，这本书可以说是入门必备，作者比我还年轻，膜拜", "marks": "力荐"}
{"content": "很实用的OpenCV入门工具书，适合初学者学，讲的很通俗易懂，好评。", "marks": "力荐"}
{"content": "网上找了了很多此类型的书查看，最后选了这本，很适合刚入门的小白。", "marks": "推荐"}
{"content": "一个朋友在上海干编程很多年了，算是业界的大牛了，做过许多项目带过N个团队。我说像我这种想从头学起的编程小白应该看哪些书？他给我推荐了几本其中就有这一本，作为起步这本妥妥的够用了。", "marks": "力荐"}
{"content": "一个学计算机的同学推荐的，简明易懂，挺适合入门的，作为一本工具书可以说挺不错啦～～", "marks": "推荐"}
{"content": "简单易懂，不错的教材，很实用，适合新手自学！", "marks": "推荐"}
{"content": "超赞的工具书，作者肯定是大神，通俗易懂，周围很多人在用，我们专业课老师也说值！", "marks": "力荐"}
{"content": "朋友推荐给我看的，通俗易懂，感觉适合刚入门得新手，不懂为什么有恶意差评！作者写的不错，继续加油！", "marks": "推荐"}
{"content": "学术圈子戾气好重，这么好的书居然被人黑。\n", "marks": "较差"}
{"content": "实验室人手一本，都说很赞，我也来打个call，抵制网络暴力。\n", "marks": "力荐"}
{"content": "导师推荐的，很实用的工具书，作者还是个90后，真是年轻有为呀！自愧不如。学习吧！", "marks": "力荐"}
{"content": "优秀的opencv好书应该被赞扬。", "marks": "力荐"}
{"content": "导师推荐的，看完感觉作者写的太棒了，非常适合入门", "marks": "推荐"}
{"content": "很好的书，浅显易懂，适合入门。导师推荐的", "marks": "力荐"}
{"content": "真的是一本入门书，很适合入门，不过师傅领进门，修行在个人。", "marks": "力荐"}
{"content": "明明是作者自己的博客，有一部分精华摘录到书中。有人说抄袭，什么眼神啊。", "marks": "力荐"}
{"content": "支持好书。抵制恶意差评，抵制网络暴力。希望国 \n内opencv的学习环境会更好。也希望有更多优秀的opencv书籍的面世。", "marks": "力荐"}
{"content": "刚学完爬虫，还好我有点c的基础，导师让我看看这书，可以入门用", "marks": "力荐"}
{"content": "作为工具书，挺适合新手上路学习，内容浅显易懂", "marks": "力荐"}
{"content": "精通c++后  在看这本入门的书  真是简单易懂  ", "marks": "推荐"}
{"content": "书的目录不错，内容没什么价值，五星的应该人手一本《数字图像处理》", "marks": "较差"}
{"content": "是同学推荐过来的 说编程入门级的教材 看了一些感觉慢慢来还是可以的 不错", "marks": "力荐"}
{"content": "入门书，学习来看还挺好的，同学推荐的，易懂。很不错了！", "marks": "力荐"}
{"content": "不错，这种专业性的书籍写出来能吸引人看就很不错了，读者文笔精炼简短，表达清楚明白，值得一看。", "marks": "推荐"}
{"content": "是导师推荐了才看到这本书，感到对自己的学习很有用，一些原来比较模糊的概念在这里得到了清晰系统的解释，值得一看", "marks": "力荐"}
{"content": "老师推荐的，感觉特别适合新入门的同学，作者是90后，，英雄出少年呀", "marks": "力荐"}
{"content": "同学推荐来读的，感觉作者很有思想，确实是编程入门不可多得的好书。", "marks": "推荐"}
{"content": "新手入门级，通俗易懂，新手看的话还挺行，作者居然是90后…", "marks": "力荐"}
{"content": "整体很好，不知道豆瓣为什么这么低，对我专业挺有帮助。非常实用", "marks": "力荐"}
{"content": "老师推荐的，专业性真的不错，挺有帮助", "marks": "力荐"}
{"content": "比较水的一本书 硬件编程内容较少，前面都是基础操作。", "marks": "还行"}
{"content": "前面绝大多数都再讲基础知识，真正和硬件相关的也就20%，没啥用就别买了", "marks": "较差"}
{"content": "完全入门级，图示一步步解释该怎么做。最后一章才变得有趣，讲了二个操控硬件的例子：使用pcDiuno漏水检测和车库车门是否关闭。", "marks": "还行"}
{"content": "看书名是讲python硬件编程，但书中至少有3/4在讲python基础，最后介绍了一点开源硬件pcDuino和应用。", "marks": "还行"}
{"content": "面面俱到，难度不大，用到时再做参考。只可惜版本发布多，书中内容很容易过时", "marks": "还行"}
{"content": "它山之石，Spring batch最大的优点就是把批处理组件化了，批处理不再是一个长长的mian，而是各种可复用的组件组合在一起，二是对事务和重试机制支持的很完善，适合严肃的数据处理场景。缺点当然是用起来太麻烦，思想可以用在脚本语言，但永远不会用Java去做批处理……", "marks": "还行"}
{"content": "国内第一本介绍Spring Batch图书。", "marks": "力荐"}
{"content": "非常好的一本书，讲解很详细", "marks": "力荐"}
{"content": "核心是比较简单的对代码的简化把控", "marks": "力荐"}
{"content": "翻译的狗屁不通...不怕译者没文化，就怕译者小学语文就没及格过~\n翻译了几本书都一堆差评还好意思翻译下去...", "marks": "很差"}
{"content": "挺好一本书，看完learn python the hard way之后再把这本过一本基本就可以自己学着写项目了，就是封皮做成l廉价励志书的款。。。", "marks": "推荐"}
{"content": "根本不是零基础才能看懂的嘛。。", "marks": "很差"}
{"content": "看完一套教学视频之后在多看上发现了这本书，出乎意料的好用呢。再看看说明书什么的吧，用了python总感觉自己已经可以写代码了呢！哈哈哈哈哈", "marks": "力荐"}
{"content": "全书没有一个整体架构讲解，零散的知识点罗列，类似指导手册，查询还可以。作为第一本书只会看得云里雾里。不适合零基础。或许看过其他书再看还有用，但这样就不用再看这本了。", "marks": "很差"}
{"content": "这本书并不是一门适合入门的图书，而且内容也有部分错误，不是很多，不过对于初学者来说已经是大问题了。还好这不是我的第一本入门书，不推荐购买。", "marks": "较差"}
{"content": "感觉比较水的一本书。前三分一介绍了一下怎么用 mongodb，中间三分一介绍了一下 mongodb 的一些实现思想，后三分一给你撸一个 PHP 的电商例子还给不全代码。\n开开眼界还是挺可以的，如果务实一点起名叫《MongoDB 实践笔记》的话。", "marks": "还行"}
{"content": "完整和系统性上都不如官方文档，经验部分也没有太多亮点。笔误挺多的，以及大部分实例都为 PHP 代码……", "marks": "较差"}
{"content": "比较浅显，有个感性认识", "marks": "推荐"}
{"content": "看起来挺全面基础实在的", "marks": "还行"}
{"content": "之前做node项目时候使用过mongodb，昨天恰好在图书馆看到这本书，so借了下来，一晚上加一上午看完。本书浅显易懂，但讲的不是很深入，只是带你回忆的作用", "marks": "还行"}
{"content": "一直没读过国人的技术类书籍，jd凑单买了，写的实在太简单，还不如官方文档，这种东西也能出书了", "marks": "很差"}
{"content": "mongodb实战指南", "marks": "力荐"}
{"content": "代码质量很高，可与算法导论对照着看。难度低于日本那本《挑战程序设计竞赛》", "marks": "力荐"}
{"content": "东拉西扯大杂烩泡菜风格。大学acm刷题可以买。不然同样的钱还是买《算法》那本划算。", "marks": "还行"}
{"content": "还需多读", "marks": "推荐"}
{"content": "写的很一般 不是因为算法课老师出期末试卷会从里头出题 还真的不会看这本书", "marks": "还行"}
{"content": "C++代码不错", "marks": "力荐"}
{"content": "好好翻译的话，应该是一本不错的案头参考指南。可惜这本是机器翻译的。\n更囧的是，我是在书店里翻过才买的，当时是昏头了还是着急吃饭了？？", "marks": "很差"}
{"content": "当做随身备忘手册吧，毕竟健忘", "marks": "还行"}
{"content": "机翻系列。", "marks": "很差"}
{"content": "中文第五版翻译的太差了。用Google自动翻译的都比他强。", "marks": "很差"}
{"content": "内容还不错 深度见仁见智了", "marks": "推荐"}
{"content": "这本书应该是国内唯一一本撰写Android系统ROM定制方面的书了。不适合初学者看，但是学过Android应用程序开发之后再看这本书确实能从中汲取到很多营养。本书第四章帮了我很大忙。前三章有点散，也许作者懂的太多了，总想多放出点知识，结果散了，不过如果您积累足够多，那收获肯定也大。从第六章开始是对Android系统的几个重要方面作了深入探讨。有代码有讲解，可以看出作者很深的功力。代码是CM的第三方ROM，配合手头上现成的ROM也能看下去。不过看此书之前建议读者先把基于Java的应用程序开发学好再说吧。另外，此书并没涉及到太多的UI设计，就第13章聊到Launcher，我其实特别想知道MIUI，或者华为的EMUI等知名ROM的制作过程。希望有能力的作者尽快写出来赶紧犒赏我们这嗷嗷待哺的娃儿吧！", "marks": "力荐"}
{"content": "高屋建瓴！对于测试在实际项目中的实践有很强的指导性。", "marks": "力荐"}
{"content": "还是不错的，有些不错的思想和细节。但是解决方案给的还是比较少", "marks": "推荐"}
{"content": "第一部分，讲理论的部分引得我有些思考", "marks": "还行"}
{"content": "感觉此书一般吧。", "marks": "还行"}
{"content": "有很多测试的东西没接触过，还没读完", "marks": "还行"}
{"content": "书思维不错, 但翻译的一坨屎. 思考一下, 发现屎一样的翻译都有共同的特征, 就是文字是一跳一跳的, 完全不合我们的习惯.", "marks": "还行"}
{"content": "一本数字化的工具书，书中有些错别字", "marks": "推荐"}
{"content": "越往后看基础要求越高，提高知识水平再来一遍", "marks": "还行"}
{"content": "大段的文字，没有图不好确认跟着一步步做是不是对的，而且 xcode 的版本太旧（xcode 4），现在已经 8 了有些东西都改了没法对着书上的说明动手", "marks": "还行"}
{"content": "有些小错误……", "marks": "推荐"}
{"content": "其他书是在翻译文档，好一点的注释文档，而这本书是在教你编程。", "marks": "力荐"}
{"content": "代码太老，好多跑不通的地方。然后能不讲xib么。。。", "marks": "推荐"}
{"content": "好书，每次翻都有收获", "marks": "力荐"}
{"content": "手把手的 iOS code reference！（讲 iOS 之前还仔细讲了 ObjC（不错不错（唯一一点不足可能就是用的还是 ObjC 吧 _(:з」∠)_", "marks": "力荐"}
{"content": "入门的好书。", "marks": "力荐"}
{"content": "这本讲的是真细，原理透彻、案例也很好上手。", "marks": "推荐"}
{"content": "太老了", "marks": "还行"}
{"content": "难得的中译版都很优秀的技术书，非常感谢作者和译者", "marks": "力荐"}
{"content": "建议每个半路出家的iOS开发者都认真读一遍此书，会收获很多", "marks": "力荐"}
{"content": "基本看完了，对于没接触过的人来说还是有些难", "marks": "推荐"}
{"content": "这版本相对第三版没发现太大改动，内容涉及的很广，但每块讲的不深，点到为止", "marks": "还行"}
{"content": "很好的入门书，讲的方面很多，不深。", "marks": "力荐"}
{"content": "Big Nerd真不愧是移动开发领域的出版新秀。这本书和《Objective-C编程》都是入门佳作啊。当然译者的工作成果也功不可没。", "marks": "推荐"}
{"content": "我的iOS开发入门书之一", "marks": "推荐"}
{"content": "感觉这本书还是挺不错的，跟着一步步走，只是我买的kindle版本里的代码有点问题。有些地方不看示例代码真会坑死", "marks": "推荐"}
{"content": "除了讲iPad暂时没读，其它的过了一遍。算是一本入门好书，从培训机构的培训教材改过来的，以实例为主，每章会把要做什么以及相应的知识点讲一下，代码也比较具有参考性。", "marks": "推荐"}
{"content": "英文无力", "marks": "推荐"}
{"content": "现在已经ios7了，代码太老", "marks": "推荐"}
{"content": "iOS开发入门", "marks": "推荐"}
{"content": "案例合理，知识面详细。可惜有些地方版本比较陈旧，需要有一点基础来调试才能正常运行项目了。不过不管是入门还是提高都是一本十分详细的指导佳作。", "marks": "力荐"}
{"content": "好书 推荐, 不过这本译文 有一些错误 = .= 还有一些和最新版xcode有冲突的问题.", "marks": "推荐"}
{"content": "很不错，很适合入门的新手", "marks": "力荐"}
{"content": "入门必读", "marks": "力荐"}
{"content": "看的中文版。作为学习iOS app开发的第一本书，边读边练也算是前后弄了快一个月。总之在放实战感觉用这本书的来分分钟要跪，但是基础讲的不错，也不知该如何评价。storyboard和block讲的太少，还有都iOS7了UI设计基本不提真的好么", "marks": "还行"}
{"content": "相比于objective-c那本书，这本内容更面向初学者，基本技术只讲核心的概念和操作方式，并且铺垫一些原理讲解，看起来比较顺利。不过我想对于对于刚入门开发的同学来说，每章后面一点儿没有提示的练习题应该是挺难的。虽然近千页，但涵盖面大，很多细节不是很清楚，必须要看官方文档才可以。", "marks": "推荐"}
{"content": "有点过时了，但曾经伟大过，用几个很全面的项目贯穿了全书，容易上手也很适合深入学习，对iOS开发的启发很大，适合理解原理。但书的后半部分偶尔会出现错误，有的还是很关键的错误，几乎都是由于译者专业性不够导致的。", "marks": "力荐"}
{"content": "推荐这本入门书，比其他很多只是到故事板和堆代码的入门书好太多，讲解的很清楚，赞~", "marks": "力荐"}
{"content": "经典书籍，但是ios没人要了。。", "marks": "力荐"}
{"content": "适合整体了解下iOS开发，比较全。", "marks": "力荐"}
{"content": "很棒，一本好书可以让人少走很多弯路，钱花的值", "marks": "力荐"}
{"content": "快速的拉完，对iOS编程有个整体的了解，", "marks": "推荐"}
{"content": "有些部分讲的真的很细致 许多原来一知半解的部分都找到了答案 当然了 顺利毕业的功劳这本书得有一大半", "marks": "力荐"}
{"content": "好书，iOS入门必备。", "marks": "力荐"}
{"content": "BNR 的书内容非常棒，花了3周的晚上时间读完，所有代码敲了一遍，收获非常大，应用性非常强。之前看了一遍英文版，理解了三四成，这次刷一遍中文版，感觉超赞。感谢译者和出版社", "marks": "力荐"}
{"content": "版本问题导致了一些不必要的麻烦 内容不错 后面有少量印刷错误", "marks": "推荐"}
{"content": "尽快看完吧。", "marks": "力荐"}
{"content": "整本书基本读完，不知道时难度对于新手有点高，还是翻译问题，有时原理还不是理解的很透彻，总之对于初学者，难度不小，建议按作者的要求先看基础的object-c吧", "marks": "还行"}
{"content": "2014年开始读，拖到2015年年中才读完。细致入微，适合入门！", "marks": "力荐"}
{"content": "不错，但内容比较老了，有些代码已经跑不起来了，应该考虑出新版了。比如第二个程序uiwindow的rootviewcontroller没初始化就会直接奔溃。。。", "marks": "推荐"}
{"content": "经典，值得一读", "marks": "力荐"}
{"content": "我想说，中文翻译不是很好......", "marks": "推荐"}
{"content": "入门的好书", "marks": "力荐"}
{"content": "全部读完，入门推荐，细致翔实。", "marks": "力荐"}
{"content": "尤其是难得的中文翻译得非常干净漂亮。", "marks": "力荐"}
{"content": "总算出版了", "marks": "力荐"}
{"content": "非常不错哦。翻译也不错哦", "marks": "力荐"}
{"content": "书的内容比较全面，对于iOS编程的各个细节都有涉猎，而且作者把比较复杂的东西用很清晰的语言说出来，这点我很喜欢。\n现在Swift语言虽然出来了，但Objective-C仍然没有过时。引用一句苹果的话：“Objective-C is not going away, both Swift and Objective-C are first class citizens for doing Cocoa and Cocoa Touch development.”", "marks": "力荐"}
{"content": "简单详细", "marks": "力荐"}
{"content": "译文读起来很流畅，没有翻译腔，感谢译者技术语言复合型人才的作品", "marks": "力荐"}
{"content": "支持一下朋友翻译的书", "marks": "力荐"}
{"content": "很好的一本讲iOS开发的书", "marks": "力荐"}
{"content": "比较详尽，有点难学", "marks": "力荐"}
{"content": "感觉超级不适合入门的学习，主要是工具已经更新的xcode7.0 了", "marks": "很差"}
{"content": "看翻译版的时候经常得去查看英文版的，错误实在是太多了，要是英文好还是建议看英文版的", "marks": "还行"}
{"content": "不错的入门书籍，缺少对反射的介绍", "marks": "还行"}
{"content": "学了下java8的一些新特性，包括lambda、函数式接口、接口方法等。", "marks": "推荐"}
{"content": "相当平易近人的java入门参考书。我觉得作为入门书，一个很重要的原则就是代码一定要完整可执行，这本书很好读。而且难度设置很合理，编排读起来很顺畅，我这个初学者看着觉得很舒服。入门书应该就是这样。", "marks": "力荐"}
{"content": "非常好的入门书籍，同时讲解了jdk8的新特性。讲解非常细非常好的一本书", "marks": "力荐"}
{"content": "翻译的很好的一本书，学习编程知其然更要知其所以然", "marks": "力荐"}
{"content": "提都没提的内容，居然在小结里大书特书，真是烂爆了。docker最复杂最麻烦的网络部分，几句话一笔带过，呵呵呵", "marks": "较差"}
{"content": "就是个代码摘抄，基本没啥有价值的内容。原本我还以为高级议题里面能多讲点东西，结果就特么几页纸搞定了......真心不值得浪费银子。", "marks": "较差"}
{"content": "套用元首的话，渣渣。大段大段的代码运行结果，没有任何的意义，纯粹是骗稿费的。实质性内容不足100页。印刷排版也有问题，中间好多页空白。所幸Docker比想象中简单许多，拿来入门还真没问题。网购书籍需谨慎啊。。。试读很重要", "marks": "很差"}
{"content": "不知道是不是力有未逮，高级网络部分写得挺潦草的，从容器访问宿主那部分好像说到一半说不下去那样。", "marks": "还行"}
{"content": "入门还行，就是有一半的内容感觉是凑字数，把一堆命令行输出都贴出来", "marks": "推荐"}
{"content": "入门了，顺手搭了个监控系统", "marks": "推荐"}
{"content": "不适合入门，看到后面一头雾水…", "marks": "还行"}
{"content": "相比《第一本Docker书》差了点，但是作为少有的Docker入门书，还是值得鼓励的。", "marks": "还行"}
{"content": "输出占了一半还多，有什么可看的，给两星都多了~", "marks": "较差"}
{"content": "果然是两个月就能写出来的", "marks": "较差"}
{"content": "两个月就能写出来", "marks": "很差"}
{"content": "基本就是Docker官方文档的翻译集合。。。", "marks": "还行"}
{"content": "麦当劳十多分钟就读完了。。中间那些实战案例一点用都没有。。", "marks": "还行"}
{"content": "简单暴力，我喜欢。", "marks": "还行"}
{"content": "文档中文版", "marks": "较差"}
{"content": "烂", "marks": "较差"}
{"content": "没太多价值,还不如官方文档实在.拼凑的内容.", "marks": "很差"}
{"content": "入门看看不错", "marks": "还行"}
{"content": "前几章值得一读", "marks": "还行"}
{"content": "大面积的贴代码+命令行输出，大概就一半不到的内容有价值，写薄一点，通过一个开源项目把资源共享出来不行么？", "marks": "还行"}
{"content": "讲的比较简单，有一个问题是知识稍微有点落后了，快速发展的技术不太适合写书……", "marks": "还行"}
{"content": "我想搭建个精简/隔离的开发环境，看了一半这个书，没得到想得到的。当然，这里面一半是因为我太菜的缘故。", "marks": "还行"}
{"content": "每章的内容都短而浅显，缺乏深度。章节虽多但是有点华而不实。只能算把知识点介绍下，如果说这也是实战心得恐怕就有点可笑了。", "marks": "还行"}
{"content": "一般", "marks": "较差"}
{"content": "和官方文档差不多,而且没有官方文档详细,2天就读完了.", "marks": "还行"}
{"content": "适合入门。后面又是凑字数..", "marks": "还行"}
{"content": "工具的罗列而已...", "marks": "较差"}
{"content": "啥也没讲，而且这玩意确实也没啥可讲的，一半多的篇幅是各种命令。。。", "marks": "较差"}
{"content": "说实话，这个书还是不如读着英文文档来的爽", "marks": "还行"}
{"content": "补", "marks": "较差"}
{"content": "Docker is unpredictable, not stable, robust, and not ready for production, YET.  Ansible is a better choice.", "marks": "较差"}
{"content": "作为了解docker基本概念和用法还是不错的，最后的原理部分讲得太浅太少了。", "marks": "还行"}
{"content": "真是不值这书钱，入门都说高了", "marks": "较差"}
{"content": "简洁清晰,入门使用 以后的一种趋势", "marks": "推荐"}
{"content": "干货基本没有，还能写这么多", "marks": "较差"}
{"content": "入门书籍 ，自己的公司对docker用于生产环境太多不定 ，我们使用新技术解决什么问题？", "marks": "还行"}
{"content": "用来入门还不错，看完最大的感觉就是Docker实在是太好用了", "marks": "推荐"}
{"content": "入门工具书", "marks": "还行"}
{"content": "一般吧，很多内容深度不够，并没有说太清楚。", "marks": "还行"}
{"content": "命令的堆砌，比较浅显，入门还好，只是很郁闷每次都在这种潜水域游。", "marks": "还行"}
{"content": "呵呵呵", "marks": "还行"}
{"content": "仅入门使用，基本上只是介绍各种命令操作，有很大篇幅就凑字数。", "marks": "较差"}
{"content": "1. 高级网络配置还没有实际操作经验，2. 另外持续集成的概念有了一个初步的了解，3. docker kubernetes的概念需要进一步的了解", "marks": "推荐"}
{"content": "全是代码，很一般", "marks": "还行"}
{"content": "作为介绍类书籍，这本书已经不错了。电子版体验估计比实体书好很多。", "marks": "还行"}
{"content": "内容还是比较简单的，有很多例子，就是感觉有很多小错误", "marks": "推荐"}
{"content": "第一部分简单介绍了最基本的使用方法。第二部分就是完全可以砍掉，和docker完全无关啊；本来最期待第三部分，介绍docker的设计，然而只是停留在了泛泛而谈，有点失望。并且内容组织也略随意，有点想到哪说到哪的感觉。此外，其实并没有必要强行贴那么多无用的代码。\n本以为纸质书读起来比电子书好，仅仅是因为更方便阅读而已，现在看来，更多的还是内容本身的差别，绝大多数gitbook，内容水准还是比不上印刷品啊。", "marks": "较差"}
{"content": "懒得上网搜的话可以买一本，倒也能节省上网时间", "marks": "还行"}
{"content": "垃圾书", "marks": "很差"}
{"content": "哈哈哈，评分一踏糊涂，农村没网，只好对着这个PDF学习了下，挺适合基础一踏糊涂人群的\n对于应用层面的东西，文档，so/github issues，源码 仍然最直接高效的学习路子", "marks": "推荐"}
{"content": "技术入门与非实战", "marks": "还行"}
{"content": "基本上就是翻译了一遍官方文档。", "marks": "还行"}
{"content": "前年买的纸质版没细看，今发现gitbook上发布v2。一周读完，p1讲docker基础，p2讲docker架构及分布式。概念与架构都以简洁清晰的语言说明，并且有典型案例匹配。适合快速入门，也有人觉得讲得不细，但是我觉得细节应该去查官方文档。读完果断刷了二维码，送了杯咖啡给作者。", "marks": "力荐"}
{"content": "买书还是不能凑单。。。这书应该算是工具书，全书大部分是在枚举如何用Docker安装部署各种软件，只有最后一点讲到一些容器的原理，也只是浅尝辄止，信息量太少了。。。唉，还是去读文档吧", "marks": "较差"}
{"content": "docker，官方文档翻译", "marks": "较差"}
{"content": "前8章基础入门，适合无基础入门，后面几章实际应用不够深入，点到为止", "marks": "还行"}
{"content": "这本书出版的时间较早，IT 界的技术日新月异，更新很快，我看得比较晚了，  \n但并不妨碍看书时的系统化、全局化视角，同时书名概括了书的主要侧重点：入门和实践。\n一些具体细节可能和最新版本不同，Docker 相关项目的发展已经得和书出版时不同了。\n关于 Docker 企业实践，这本书讲的是一个指导性思想，并不具体，也是因为不同企业的情况不同，  具体实施的细节和要考虑的问题肯定不一样。这个一般书籍中也不好仔细说明，  我们可以多看看大中型公司的 Docker 最佳实践，从中学习，再实际结合到自己的生产环境中。", "marks": "还行"}
{"content": "拖了好久，终于看完了，稍微点评两句：\n1.书中内容太粗浅，真的只适合入门\n2.内容有点过时，毕竟2015年7月的书，而docker变化又那么快\n3.内容中过多篇幅的配置信息，呵呵\n4.只适合一般性扫盲，对于中级用户来说已经不必看了\n5.只给2.5分", "marks": "还行"}
{"content": "内容比较水", "marks": "还行"}
{"content": "第二版已经出来了，对照第二版电子版啃了一遍。", "marks": "力荐"}
{"content": "有用的东西不多", "marks": "较差"}
{"content": "虽然有300多页,不过浅显易懂(入门),操作日志丰富(注水).大量的实战就是操作,加日志.也许我看的顺序不对吧...据说还有第二版.今年看的第二本<实战>书了,各种blog似的内容,操作加日志,没有解释,功能相似..", "marks": "较差"}
{"content": "前半部分介绍还可以，后半部分贴了大量的Dockerfile文件，意义不大", "marks": "还行"}
{"content": "为了凑页数而嵌入的无关紧要的东西很多.", "marks": "还行"}
{"content": "知其然都做的不好", "marks": "较差"}
{"content": "我觉得这本书对我还是有很大帮助的（可能只是比较适合初学小白吧。 ", "marks": "还行"}
{"content": "罗列了一堆，然而怎么配置网络、配置常用服务、容器资源管理并没有讲。", "marks": "较差"}
{"content": "水书一本，大篇幅的log日志毫无用处，实际内容基本没有。", "marks": "较差"}
{"content": "入门必备", "marks": "推荐"}
{"content": "飞机上翻完了", "marks": "还行"}
{"content": "易懂", "marks": "力荐"}
{"content": "当时搜Docker入门搜到的GitBook版本看完的  后面不怎么样都是抄文档的 直接看文档吧  前面章节入门不错", "marks": "还行"}
{"content": "应该是docker使用起来比较简单吧，这个书看起来不费劲。\n感觉不值得出实体书。", "marks": "还行"}
{"content": "2014年的 确实有点老了，可以看，不能完全按这个来。基于docker 1.9写的。", "marks": "还行"}
{"content": "很一般，可以作为了解~", "marks": "较差"}
{"content": "覆盖很全，但不深入，适合入门", "marks": "推荐"}
{"content": "适合了解大概", "marks": "还行"}
{"content": "入门书籍，关于namespace，cgroup等介绍太过简单。后端存储部分未做详细说明，能作为一个简单的手册吧~", "marks": "推荐"}
{"content": "还是大四的时候买的书，毕业了才把书看完，也在虚拟机操作了大部分简单的命令，然后就没然后了呀，身边没人用这个东东，那就只能是打个基础了。", "marks": "还行"}
{"content": "好书", "marks": "力荐"}
{"content": "just known how just soso", "marks": "还行"}
{"content": "第一次接触docker看的书，现在想想，不推荐初学者看，乱七八糟的。", "marks": "较差"}
{"content": "感觉像翻译官方教程，没啥新意，入门翻翻还凑合", "marks": "较差"}
{"content": "开源图书，不过很多东西都是点到即止，入门还是推荐 第一本docker书！", "marks": "较差"}
{"content": "够啰嗦的，继python学习手册后看到的更啰嗦的书，适合编程基础少的人从头学习", "marks": "还行"}
{"content": "前半部分太烂，抄的语言规范吧，不是给人看的。后半部分，太罗嗦，虽然能看出来作者很厉害", "marks": "还行"}
{"content": "可以从一半开始看。。后一半好像也没啥内容。。。", "marks": "较差"}
{"content": "Go 语言的并发实践。但我感觉作者没把自己的东西转成语言，只是一些通用的知识的描述而已。", "marks": "还行"}
{"content": "看完后对go的一些原理很有收获,不过有得地方叙述稍显繁琐", "marks": "力荐"}
{"content": "看了 5-8 章，讲的很详细，也比较啰嗦，技术书还是文字组织简洁些好", "marks": "还行"}
{"content": "缺点是啰嗦，但是go虚拟机模型这部分就值回票价了。", "marks": "推荐"}
{"content": "总体来说还是不错的，但是前面很大一部分写了Go的基础，我觉得既然写Go的并发，就要大部分的篇幅都要放在并发上，可以讲讲协程的实现，gc的原理。", "marks": "还行"}
{"content": "看这本书真的比较挑战耐心！写的过于啰嗦，感觉和我自己写的有时为了凑字数的啰嗦的文档有得一比。\n书里综合操作系统、编程接口指南、案例实践等类型书籍于一体，并且字体过小，段落偏长。虽然书中有些内容是覆盖比较细致，但真的是挑战耐心。", "marks": "较差"}
{"content": "除了4、5章有点介绍性的价值，其他内容对不住书名中的并发二字", "marks": "较差"}
{"content": "老早就看完了，还不错的一本书", "marks": "推荐"}
{"content": "1：读者一定要有Go基础 \n2：绕口令爱好者 \n3：自虐狂爱好者\n4：作者虐我千百遍 我待郝林如初恋", "marks": "推荐"}
{"content": "这边书是进阶书！需要有一定的go基础，推荐先读完《go web编程》go语法部分再来看。不需要要全部阅读，选择自己需要的部分看!不需要要全部阅读，选择自己需要的部分看!不需要要全部阅读，选择自己需要的部分看!", "marks": "还行"}
{"content": "适合入门者学习，非常详细，文字解释非常细致", "marks": "力荐"}
{"content": "我觉得还是不错的呀，为什么那么多不好的评价", "marks": "推荐"}
{"content": "作者表达能力不行，明明简单的知识被你搞的枯燥无味", "marks": "较差"}
{"content": "或许作者的文风不是很好，但是这本书仍然是干货满满的。其实这本书挺适合作为深入了解Go语言的方方面面的。", "marks": "推荐"}
{"content": "看过这本书，整体感觉此书表达不是很明确，感觉很迷糊~", "marks": "推荐"}
{"content": "好啰嗦，扯太多无关的东西。看完前3章还不会写Hello World。", "marks": "很差"}
{"content": "给我的感觉就是作者的语文是体育老师教的。学了编程之后才知道英语学习多重要。", "marks": "很差"}
{"content": "572页的书基本上废话占一半吧", "marks": "较差"}
{"content": "内容很不错，适合有一定基础的朋友～", "marks": "推荐"}
{"content": "不推荐购买，这本书只会耗费你的精力和宝贵的时间，同样的知识点，在别的书一看就懂，在这本书你要花N倍以上的精力！光读一遍，都够累人了，更别谈还要去理解，其实学编程，对知识点进行例子讲解是最好学习的，这本书却走了相反的套路，说说说，其实一行代码一看就懂了。", "marks": "很差"}
{"content": "写的太啰嗦了，看的不爽，写作水平堪忧", "marks": "较差"}
{"content": "这本书写的太啰嗦，啰嗦到什么程度：\n200页语言基础！！！ 尼玛官网文档才有多少？！\n230页并发编程！！！其中100多页的啰嗦（tcp开始讲起），之后才讲goroutine和channel！！！\n120多页讲一个项目！！！而且没怎么贴代码！！！\n\n想想自己浪费了这么长时间磨这本书，连杀了作者的心都有了！！！", "marks": "较差"}
{"content": "太烦了，内容太繁琐了.....", "marks": "还行"}
{"content": "目前正在看，已经感觉很枯燥了。看他人的书评说，讲的很啰嗦。额，前面3章确实特别多的文字。但是目前正在慢慢看。\n我觉得作者应该用更加清晰简单的表达的表达方式。我选这本书主要是因为后门有项目介绍，希望之后能学到", "marks": "还行"}
{"content": "名不副实是真的，不过比之前那本学习笔记强多了。", "marks": "力荐"}
{"content": "有基本的人看看，了解一下。其本身是基础性技术性，起到介绍做用。只是起到了解移动web和webapp的一个最基本的介绍。如果想研究的这两块的同学，可以去图书馆花两小时扫一圈。但不值得购买。", "marks": "很差"}
{"content": "入门书", "marks": "还行"}
{"content": "入门也值五星。有些地方觉得不太合适，暂给四星", "marks": "推荐"}
{"content": "Qt是在多此一举？", "marks": "还行"}
{"content": "感觉很像把Matlab的说明是翻译成了中文搬上去了，还是可以做参考吧。", "marks": "推荐"}
{"content": "很多低级错误，书真心一般，不值得买！只看了前80页就发现了几个错误。最可恨的是132页，连二次方程的求根公式都写错了！不推荐这本。", "marks": "较差"}
{"content": "错误也太多了吧！没有人校对么？？？越看越恶心", "marks": "很差"}
{"content": "屎一样的翻译……", "marks": "还行"}
{"content": "中文版代码乱得扎眼！这编辑、校对实在是不用心！", "marks": "很差"}
{"content": "主要介绍了pygame的基本用法。每章都会有代码。但是书的内容不多。。代码又占大部分。。所以你懂得。。", "marks": "还行"}
{"content": "这本书的例子还不错 但是代码排版和翻译简直一团糟 建议直接下该书的demo看", "marks": "较差"}
{"content": "这书上手就map-reduce真的好吗...", "marks": "力荐"}
{"content": "13.25小时。拥抱苹果下一代开发语言swift！swift更加简洁高效 ，学习比Objective C陡峭不少，一旦掌握立即受益。本延续了by tutorial的风格，比苹果官方的the swift programming language有趣实用不少。可惜了，我太懒了没有一个个验证书中的实例，先观其大略吧。", "marks": "力荐"}
{"content": "这么贵的书 索性公司出钱 入门还是可以的", "marks": "还行"}
{"content": "有那么两章的案例还是值得练习一下的，整体低于期望（2015年读完）", "marks": "还行"}
{"content": "搞多本温习下", "marks": "推荐"}
{"content": "前阵子突然很喜欢日本人写的技术书，于是买了这本，花了三个月断断续续看完，感觉自己OC基础真是差劲。但读完大部头真是爽，感恩浦图😊", "marks": "还行"}
{"content": "适合初学者", "marks": "还行"}
{"content": "我老大说这本书不好，但我觉得还行，挺涨姿势的。", "marks": "推荐"}
{"content": "不得不说，日本人写的书可以用比较清晰的脉络、通俗易懂语言描述出来，读完一遍，发现把知识点都给梳理的清清楚楚。推荐", "marks": "力荐"}
{"content": "还行吧 刚入行的时候看的 ", "marks": "推荐"}
{"content": "Concurrency部分能理解的就那么一两个....另外这个版本和之前的Effective C++并不重合，书名换成Effective C++ with C++11/14 features估计会准确得多。", "marks": "力荐"}
{"content": "感觉就是C++11虽然填上了一些C++98的坑，但又引入了不少新坑。挺多新特性并不像它们表面上看起来那样简单。不过Meyers确实功力深厚，每个特性的前因后果都讲的一清二楚，给出的使用建议也很贴合实际。（其中关于smat pointer的部分看得我一头冷汗，自己写的程序里有不少错误的用法）", "marks": "力荐"}
{"content": "光第五章已经值回书价了。", "marks": "力荐"}
{"content": "可以在 Safari Books Online 上读 http://proquest.safaribooksonline.com/book/programming/cplusplus/9781491908419", "marks": "力荐"}
{"content": "到处是坑，人生苦短，早弃早享受", "marks": "推荐"}
{"content": "评分和对语言的看法无关。。。", "marks": "推荐"}
{"content": "趁最近比较闲大概翻了七成内容。以前一个条目基本上是一个practical tip，配上非常compelling的示例，这本有很多是语言特性的说明和示例。嘛，毕竟c++11/14对大多数程序员来说还很新，社区的实践也没那么丰富，没办法。作为不多的c++11/14资料，还是要给5星。\n", "marks": "力荐"}
{"content": "基于C++11/14，基本上每个Item都有新收获。", "marks": "力荐"}
{"content": "封面不对。", "marks": "力荐"}
{"content": "我觉得C++越来越臃肿了，除了std::shared_ptr和std::threads其他的不必要的更新只会让程序越来越难写和维护", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "这也是坑，那也是坑。", "marks": "推荐"}
{"content": "一如既往的经典", "marks": "力荐"}
{"content": "test", "marks": "力荐"}
{"content": "例子很全, 讲的都来自作者的编程经验,不是cppreference抄抄的那种", "marks": "推荐"}
{"content": "剛剛正式出了，翻了一下，感覺 C++ 果然是大坑… 其實有些 item 完全和 Google C++ style guide 一致。", "marks": "推荐"}
{"content": "有点啰嗦", "marks": "推荐"}
{"content": "学到不少东西，虽然没记住多少。以后用到了再回来仔细看。", "marks": "力荐"}
{"content": "感觉很多CS的知识都需要如primer c++那种事无巨细罗列的，和effective系列这种深入浅出讲解的两种学习方法。", "marks": "力荐"}
{"content": "Scott Meyers幽默略干涩，内容很好，在C++11/14/17这个节骨眼上正及时…", "marks": "力荐"}
{"content": "C++入坑者打卡，使用C++11/14必读", "marks": "力荐"}
{"content": "非常棒，item质量高，填补了effective系列不够现代的问题，想活用新标准必须要看", "marks": "力荐"}
{"content": "很不错，对于C++11的很多特性作了详细解释，也包含了很多最佳实践", "marks": "力荐"}
{"content": "C++11的注意点", "marks": "力荐"}
{"content": "已经C++11了，能不看这个吗？", "marks": "力荐"}
{"content": "并发一章质量不高", "marks": "推荐"}
{"content": "不错，c++11的好多坑", "marks": "力荐"}
{"content": "太罗嗦了一点……不过模板和 rvalue ref 相关的东西讲得很清楚", "marks": "推荐"}
{"content": "看了之后发现自己c++水平也不过如此，更何况还有对元编程完全不懂。\nC++可能真的不太适合作为第一门编程语言", "marks": "力荐"}
{"content": "不愧是scott Meyers 写的书，有几个小节略过，不是很看好 feature 这些新增的东西。", "marks": "力荐"}
{"content": "要反复的反复的读上10遍……", "marks": "力荐"}
{"content": "原 《Effective C++》的作者写的书，讲了 C++11 和 14 中的一些新的东西的用法和注意事项，有些地方讲得过于细节了，不过整体来讲是很不错的书。算是目前了解 C++ 新标准的一个很好的渠道。", "marks": "力荐"}
{"content": "讲解很详细，唯一略失望的地方还是好多建议的规则都有例外，说明就算当一门全新的语言来看也还是太复杂。。。", "marks": "力荐"}
{"content": "还不错。都是各种小细节。", "marks": "力荐"}
{"content": "一如既往的高质量", "marks": "力荐"}
{"content": "好书，这书看了会上瘾。介绍了大量C++11/14新特性，比较客观的说明了一些特性的优缺点。受益匪浅", "marks": "力荐"}
{"content": "学习C++11，以及最佳实践的好书一本。Meyers写得很清楚，之前一直懵逼的rvalue refference and universal refference终于了然了。", "marks": "力荐"}
{"content": "内容上是c++特性的一个快速入门书籍.   阅读经历上,  带着作者总结的条目,结合标准库的代码来看作者阐述的问题.   逐渐学会从代码中找答案.", "marks": "力荐"}
{"content": "依然好", "marks": "力荐"}
{"content": "还行。。。", "marks": "推荐"}
{"content": "陆陆续续，经过四个月终于看完了，类型推导、右值引用这两部分内容真是讲的太好了。看的台湾版，一如既往的拗口。。", "marks": "力荐"}
{"content": "整体没有前三部effective系列惊艳，很多都算新特性的基础。不过universal reference那几个Item还是受益匪浅。", "marks": "力荐"}
{"content": "第一本通篇读完的英文技术书", "marks": "力荐"}
{"content": "因为之前对 C++11 并不熟悉，所以读起来每一项都是干货，感觉就像是学了一门新的语言。不仅介绍了 Modern C++ 的新特性，而且详细阐述了最佳实践。", "marks": "力荐"}
{"content": "读过2遍", "marks": "力荐"}
{"content": "一如既往的犀利.", "marks": "力荐"}
{"content": "为了c++11而看，好吧，看得有点粗。。。", "marks": "推荐"}
{"content": "怎么说呢，scott 的输入，作者开创了 effective 系列。\n每个item 都娓娓道来，深入浅出，该作者effective 系列的都推荐。", "marks": "力荐"}
{"content": "Meyers的水平就不用说了，这本书无疑是正确使用C++ 11和C++ 14的最佳指导。", "marks": "力荐"}
{"content": "Effective系列果然是C++之学习圣经，这本书全面总结了C++11/14的新特性。可惜只有英文版，通读略吃力，期待简中出版。", "marks": "力荐"}
{"content": "C++１１　１４　１７更新的亂七八糟．．．Scott來拯救各位了", "marks": "力荐"}
{"content": "膜拜scott meyer，大师们对C++的理解真是已经达到了细致入微的地步！", "marks": "力荐"}
{"content": "是一个赶上C++在近几年来新的发展状况的必备书籍。非常详细到位，大大减少了你研读标准本身的时间。", "marks": "力荐"}
{"content": "对于深入了解Scala的内部机制和高级用法非常有用。书中对隐式定义和类型类等的讲解非常清楚，例子也较适中，适合具有Scala基础的Scala爱好者。", "marks": "力荐"}
{"content": "翻译的实在。。。有种读不下去的感觉，不知道译者有没有自己通读过一遍。", "marks": "很差"}
{"content": "译者有没有上过学啊，翻译的比书中代码还难懂", "marks": "很差"}
{"content": "翻译的太拗口了........", "marks": "推荐"}
{"content": "国内也没几本书，拿来入入门", "marks": "推荐"}
{"content": "原书 4 星，翻译扣 1 星，排版扣 1 星。这是我见过最差的编程类书籍排版。作者在文中写了大量（译者：XXX），这其实是对原文翻译不够精准的表现。不说了，去找原文了。", "marks": "较差"}
{"content": "抛开翻译，只说本书内容，囫囵吐糟，千万别当作入门书，坑死，很多地方讲的非常模糊！然而进阶都这种书就更没有必要了！强烈不建议入手！", "marks": "较差"}
{"content": "不错的资料，但不是最佳选择。", "marks": "还行"}
{"content": "书还是可以的，问题是Scala太复杂，特别是隐式转换和类型系统2章太复杂跳着读的。", "marks": "推荐"}
{"content": "不想读了", "marks": "较差"}
{"content": "再看了一遍，内容很丰富，延展很多", "marks": "推荐"}
{"content": "对 Scala 的一些核心概念讲解的很透彻，没有基本概念的罗列，直入核心，有一定 Scala 基础的话理解起来会更顺畅！", "marks": "力荐"}
{"content": "不适合入门！初学者千万不要买；一上来没有讲基础的语法 让人看得云里雾里， 打击学习积极性！", "marks": "还行"}
{"content": "书的内容挺不错，主要介绍了一些高级话题，但不适合入门。类型系统那几章很有意思，写得也比较清楚。主要的问题：中文版书中的错误非常非常多，代码和文字中都有，部分是英文原版书中存在的，但大多数是翻译带来的，书的语言也不是很好，看着比较累。", "marks": "还行"}
{"content": "内容覆盖挺不错的。翻译略差。\n适合有基础的人员", "marks": "推荐"}
{"content": "一般吧~  基本上programming in scala 和 快学scala看完，再看点博客，这本书的内容基本上涵盖了。", "marks": "还行"}
{"content": "读了第二遍，有些还是没法理解，建议学一下基础的，再看这本", "marks": "推荐"}
{"content": "快速的过了一遍英文版，一般。", "marks": "还行"}
{"content": "开卷有益。。。。吧\n4C方法还不错，不过整体来说干货不多。。", "marks": "还行"}
{"content": "实用，不啰嗦，恰到好处。特别适合已经有经验的架构师梳理思路。", "marks": "力荐"}
{"content": "冠之必读，有些过了，看完这本书，能对架构师的主要工作内容有个大致的了解就足够了。", "marks": "还行"}
{"content": "可能是因为书的前半部分过于说教 而这些说教也都是老生常谈，所以我个人认为这本书的价值主要集中在后半部分。C4工具还算新颖，可以在具体实践中应用。", "marks": "还行"}
{"content": "整体而言，实用的内容在后面，4C的解构方法和风险分析的模型是亮点……", "marks": "推荐"}
{"content": "很完整 值得多读几遍", "marks": "推荐"}
{"content": "太多太杂，但是没有一个深入。而且没有看到任何有价值的思想，偶尔看看当做是要考虑的点吧。", "marks": "较差"}
{"content": "非常精准剖析了当前工作困扰。", "marks": "力荐"}
{"content": "内容太水了，像一份提纲", "marks": "较差"}
{"content": "架构入门实践", "marks": "推荐"}
{"content": "匆匆扫了一遍，本书很薄，主要讲了什么是架构。我觉得互联网领域，可能更多的需要架构，因为用到的技术种类繁多。而说起架构，还是比较务虚的概念，不过我坚信架构师是需要从技术线上来的，并且了解多种技术，不然容易犯铁锤人的毛病，看哪里都是钉子。", "marks": "还行"}
{"content": "不够深入 更像是随笔集", "marks": "还行"}
{"content": "中规中矩，建立了一个大概的框架", "marks": "还行"}
{"content": "挺有启发性的。", "marks": "力荐"}
{"content": "没什么意思啊", "marks": "较差"}
{"content": "太散乱啦，最后的C4算是亮点，不推荐想系统学习架构方法论的程序员看。", "marks": "较差"}
{"content": "如果一个程序员期望转架构，那么本书列为必读也算合理。如果已有一些架构经验，按照书中的思路整理出自己的架构检查清单，也是非常有益的总结。", "marks": "推荐"}
{"content": "不错的一本书", "marks": "力荐"}
{"content": "有点虚，而且想表述的内容太多，显得非常零散。", "marks": "较差"}
{"content": "还可以，内容少了点", "marks": "推荐"}
{"content": "拼命攒经验", "marks": "推荐"}
{"content": "很好的解答了我一直在问的问题，什么是架构。", "marks": "推荐"}
{"content": "囫囵吞枣看完，内容稍有点空，也许是经验不够吧", "marks": "还行"}
{"content": "非常喜欢，关于轻软件架构我觉得适合当下的敏捷开发方式。", "marks": "力荐"}
{"content": "翻译很糟糕，读起来很困难", "marks": "还行"}
{"content": "不要把自己局限在写代码这件小事上。", "marks": "还行"}
{"content": "可以作为入门书籍，看看自己都缺什么，然后横向自己找更深入的书或者深入实践", "marks": "还行"}
{"content": "后面三分之一翻译感觉有点烂", "marks": "推荐"}
{"content": "感觉口水话较多，只有最后几章看起来有收获", "marks": "还行"}
{"content": "书里提到的概念比较好，虽然没有特别细致的实例，但理念很好。在刚开始接触架构的时候就读到这本书，可以阻挡我少走弯路。推荐", "marks": "力荐"}
{"content": "架构导论类", "marks": "推荐"}
{"content": "提了很多方法论", "marks": "推荐"}
{"content": "很好的工具书", "marks": "力荐"}
{"content": "这本是讲软件构架吗？不是！是一个可能已经有所成就并且感情丰富的构架师，以一种过来者的姿态告诉你什么是架构师，纯软文鸡汤。", "marks": "较差"}
{"content": "一直都是自己跟着感觉边查边写Flask，没有特别系统的学过。这本书里讲了很多最佳实践和一些推荐的Flask插件，有一些是之前没有注意到的，有一些是之前不知道的，比较受益。 但是作为一个Web开发者，中间的一些内容，比如用户角色，帖子管理这些显得过于基础了，另外就是没有太大的必要把每个插件的代码讲的过于详细，需要去查就好了。", "marks": "推荐"}
{"content": "python web development 中flask框架中文入门必备", "marks": "力荐"}
{"content": "讲的是啥？翻译的是猪吗？", "marks": "很差"}
{"content": "书里的代码已经过时，要对照的 GitHub 上的源码看", "marks": "还行"}
{"content": "python果然比php有趣的多", "marks": "推荐"}
{"content": "入门书籍，原著就不错，翻译的还不错。", "marks": "推荐"}
{"content": "大概通读，很多细节还要细细琢磨。读一遍肯定是不行的。", "marks": "力荐"}
{"content": "就学习怎么用flask来说，看文档更好。书里讲了很多第三方模块，有的已经过期了。只能看看为什么要这么用这些模块。bootstrap、用户认证模块什么的，功能很强大，但实在太麻烦，不如直接自己弄。", "marks": "还行"}
{"content": "这大概是入门Flask最最经典的教材了。可是我依然看得很吃力，我的自控力啊啊~到哪里去了", "marks": "力荐"}
{"content": "读完了，贵在实践，写代码到第四章，继续努力", "marks": "力荐"}
{"content": "翻译一坨", "marks": "力荐"}
{"content": "看文档就行了", "marks": "还行"}
{"content": "讲的挺全面挺系统 有的地方需要硬肯 不过好在指明了方向 比较贴近现在流行的开发模式 这两天写了一个小博客应用 希望能从这个起点开始 早日完成我心目中的在线数据分析系统 数据采集存储分析展现一条龙 要补的知识还很多 再一次感叹R的执行效率 难道R还是只适合做原型开发算法研究嘛 应用到生产环境做数据产品还是要靠python阿", "marks": "推荐"}
{"content": "挺不错的，博客的例子基本就是一个个人网站的模型。", "marks": "推荐"}
{"content": "循序渐进，内容详实", "marks": "力荐"}
{"content": "狗书，web开发必备", "marks": "推荐"}
{"content": "顺便推荐一下作者博客上的flask mega-tutorial", "marks": "力荐"}
{"content": "提到了挺多库，还挺有用的。其他内容没什么意思", "marks": "还行"}
{"content": "踩坑了。。。", "marks": "推荐"}
{"content": "有些地方讲得太详细了...20160513", "marks": "推荐"}
{"content": "先看了作者的博客，后来看到他出书了，好高兴。", "marks": "力荐"}
{"content": "网上所有flask入门教程的集合体，有高质量电子书...粗略翻完，还得看项目源代码", "marks": "推荐"}
{"content": "看了前一部分的基础篇，感觉需要随时参考~", "marks": "推荐"}
{"content": "教你如何使用插件把 Flask 配置成 Django，入门的介绍，适合新手…", "marks": "推荐"}
{"content": "认准动物书", "marks": "还行"}
{"content": "要python基础，然后可以直接看，内容很少。但是有一定相关工作经验看效果会更好，抄漏补缺", "marks": "力荐"}
{"content": "app factory的模式配置略繁琐，这样的话写接口用Bottle，大项目用Django，感觉Flask本身也鸡肋了起来。。。", "marks": "还行"}
{"content": "170615 重新看了一遍，加深理解了许多东西，尤其是自己已经部署好网站后，后续还需看flask源码以及加强bootstrap；/170217 囫囵吞枣的看了一遍，有些概念还未能理解。后续在阿里云上部署自己的服务器，尝试维护升级", "marks": "推荐"}
{"content": "基础", "marks": "推荐"}
{"content": "先介绍了 Flask 的几个组件，而后以一个实际项目为例，反复练习，并了解一些常见网站功能的实现方法", "marks": "力荐"}
{"content": "还不错，基本的都有了", "marks": "力荐"}
{"content": "这种项目驱动式的教材我最喜欢了，每一步都十分清楚，从开发到测试到部署的全过程都有讲解", "marks": "力荐"}
{"content": "很棒的书，作者很用心，操作指导性很强。", "marks": "推荐"}
{"content": "学习flask不二选择", "marks": "力荐"}
{"content": "看了两遍，受益。", "marks": "推荐"}
{"content": "简易完成一个demo还行，不怎么深入", "marks": "还行"}
{"content": "这类快餐书，用到就快速过一遍", "marks": "还行"}
{"content": "Flask 从入门到大成～", "marks": "力荐"}
{"content": "想了解Flask相关技术很好的一本书，而且也很容易阅读。", "marks": "力荐"}
{"content": "读了一遍，感觉内容是一般。", "marks": "还行"}
{"content": "废话较少，入门不错，不过后面还要靠自己都查资料和动手了。", "marks": "力荐"}
{"content": "对Flask的介绍比较全面，对实际开发有非常重要的指导意义", "marks": "力荐"}
{"content": "很不错，广度和深度都适中，入门上手都很快！", "marks": "力荐"}
{"content": "前几章看了俩月，之后就一直扔了不看了。后来我会了tornado，这本书我就不想再看了。", "marks": "还行"}
{"content": "临时要用到flask，找了这本书来看，发现写得还是非常清晰的，可以很快上手。", "marks": "推荐"}
{"content": "适合入门。。。为什么封面是狗🐶。。。", "marks": "力荐"}
{"content": "web入门", "marks": "力荐"}
{"content": "python web后端速成，深入了解还是要看源码", "marks": "力荐"}
{"content": "大致浏览一遍，好，牛逼", "marks": "力荐"}
{"content": "除了复习了下python，搞清楚了cgi wsgi 修饰器等细节外，最重要的是知道了用python作为技术栈去开发现代web如何去规划，有哪些工具，需要哪些人⋯⋯", "marks": "力荐"}
{"content": "浏览了一遍，其中很多细节值得遇到问题当作手册来查", "marks": "力荐"}
{"content": "第一遍看完（最后一Part没看）。正在第二遍撸代码。", "marks": "力荐"}
{"content": "非常赞", "marks": "力荐"}
{"content": "对于入门来说很有帮助，基本上涵盖实践中的大部分了。", "marks": "推荐"}
{"content": "很不错的书 跟着一步一步敲代码会有很多收获", "marks": "力荐"}
{"content": "左躲右闪被发配写 web 去了，还好只是小玩意 ", "marks": "推荐"}
{"content": "绝好！\n5月就看完一遍，目前还在反复看中。", "marks": "力荐"}
{"content": "真的很实用，眼界大开！", "marks": "力荐"}
{"content": "查漏补缺", "marks": "推荐"}
{"content": "受益诸多", "marks": "推荐"}
{"content": "* 有将近三分之一的内容是在以一个开发博客程序来详细说明，但在我看来，感觉有点鸡肋，其实我更希望看到的是作者对于 flask 的理解；\n* 基本结构内容是 flask 基础，jinja2 基础，然后就是基本的表单，数据库，还有邮件。然后是实例的博客开发，最后提及了测试和部署；\n* 翻译么，怎么说呢，由于看得都是官方的文档，其实看中文些许不习惯，因为我其实根本不知道中文的意思本来是什么好嘛 _(:3 但总感觉 blueprint 翻成蓝图有点怪怪的 endpoint 翻成端点也怪怪的。。。\n* 感觉应该不适合入门，应该面向的是 flask 初入门，但是缺乏实际开发经验的开发者；", "marks": "推荐"}
{"content": "靠此书3天写出一个搜索引擎...", "marks": "力荐"}
{"content": "第一本完成的编程书籍，对于没有基础的人来说，其中的很多概念没有遇到过，还是蛮难肯的，需要去补计算机网络，前端，数据库等一些概念。", "marks": "力荐"}
{"content": "不错的web实践手册", "marks": "推荐"}
{"content": "狗书，无需多言，安道老师良心翻译", "marks": "力荐"}
{"content": "大爱", "marks": "力荐"}
{"content": "跳跃度很大，代码没有前因后果，靠", "marks": "还行"}
{"content": "我一般不想评论翻译的问题，但是这本书的翻译真的是让人会花大量的时间来理解很多新名词。", "marks": "还行"}
{"content": "虽然没走上python工程师的道路，这本书还是蛮有用，了解下flask技术还是很有用。", "marks": "力荐"}
{"content": "草草地过了一遍", "marks": "力荐"}
{"content": "很好看的 Flask 的教程书，作者是二十多年编程经历的程序员，有分享过很多关于 Flask 的内容，他的博客推荐去看一下（地址贴在后面），书里内容没有废话，很多干货，对于对 Web 开发完全没有理解的同学可以在里面接触很多的东西。\n\n下面是作者的另一个在线的 Flask 的教程，和书本中的有些不一样，两者可以互补做参考。\n[The Flask Mega-Tutorial, Part I: Hello, World! - miguelgrinberg.com](http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world)", "marks": "力荐"}
{"content": "对于零基础的我来说，读此书几乎是硬啃。要想看懂，要补不少东西。", "marks": "力荐"}
{"content": "整个web内容太杂。读这一本书还是莫名其妙。", "marks": "还行"}
{"content": "翻译不错", "marks": "力荐"}
{"content": "对初学者友好，萧大指定的Python入门书籍，用来Flask入门很好", "marks": "推荐"}
{"content": "python语言实现的微型web框架，既然已经是针对框架的讲解，所以良好的python功底是必须的。书中对于常用的点都有详细的说明和github代码，按照书中的内容能实现从0到1的过程。对于flask的讲解而言，算是一本不错的书籍。", "marks": "推荐"}
{"content": "python web实战利器……慢悠悠总算是看完一遍了……", "marks": "力荐"}
{"content": "很多人推荐，所以就在读了。", "marks": "力荐"}
{"content": "不错", "marks": "力荐"}
{"content": "时间紧，大致过的。赶脚书还是比较系统的讲了一下flask的使用。但是现在这些工具书需要出么，发成blog连载不行么。。。", "marks": "还行"}
{"content": "极力推荐", "marks": "力荐"}
{"content": "知识点非常密集，描述简练而准确。\n真的是读了无数遍～每次都有新收获。", "marks": "推荐"}
{"content": "大概看了下，怎么做接口", "marks": "推荐"}
{"content": "粗略翻了一下，本来以为是flask基础入门的书，想看一下留着讲课用，没想到是中高级的开发应用，mark一下，以后有需求再看", "marks": "力荐"}
{"content": "挺好的，实用性强，就是翻译略渣", "marks": "推荐"}
{"content": "五星推！", "marks": "力荐"}
{"content": "一个工程上完整的例子，一步步教你怎么使用flask搭建一个web服务器，涉猎了整个现代web开发的全过程", "marks": "力荐"}
{"content": "可读性很差… 对新手并不友好 整个思路就是代码加解释 解释都没有背景只有几句关于代码意思的注解 得搭配搜索和文档来读才行  阅读中\n----------\n读完了，最后的部署已经过时了，我用了AWS做的部署，是本好书，难得有带做完整个项目的", "marks": "推荐"}
{"content": "感觉被带进沟里了", "marks": "还行"}
{"content": "翻译不行,代码错误好多啊", "marks": "推荐"}
{"content": "好书，内容浅显，语言直白易懂，手把手指导读者利用flask建站，而且传授了不少工程上进行python开发的实践经验，对于没有web开发经验的读者确实是盏指路明灯", "marks": "推荐"}
{"content": "做完了demo，还在消化，还经常翻开书看，不错，不错。", "marks": "力荐"}
{"content": "就算是其它语言的程序员读完此书也获益匪浅，书中有些内容比较旧，我能给大家的一点建议是，在使用gravatar获取头像时，可以用国内域名http://cn.gravatar.com/hash_value,最后吐槽一下GWF，真恶心，git不用代理慢得跟狗屎一样", "marks": "推荐"}
{"content": "完整的读过一遍，现在当工具书用。介绍了很多技术，当然可以配合书中各种技术的Document一块看，而且本书包含一个比较完整大项目。值得推荐！", "marks": "推荐"}
{"content": "Flask是Python语言中很出名的web微框架，精致小巧、功能强大的内核，再加上灵活、丰富的扩展，是开发web的利器。这本书先介绍了Flask的必备组件，而后用两个简单的实例，社区和博客，详细描述了开发各个模块，如用户认证、角色和用户资料等。从开发、测试、部署都讲了，Flask web开发入门的最佳读物。", "marks": "力荐"}
{"content": "抄了好多网页", "marks": "还行"}
{"content": "其实flask还是挺简单的，对于这本书，你必须自己照着敲下来，参照这手册来理解，虽然开始会比较困难，其实敲熟练了以后回过头来看，其实还是很简单的。", "marks": "力荐"}
{"content": "最爱flask。。。", "marks": "力荐"}
{"content": "从第7章起学习曲线突然陡峭了。\n话说flask在生产环境挺少见的。", "marks": "推荐"}
{"content": "写的很好，不过除了博客我好像也不会写别的web程序了。", "marks": "推荐"}
{"content": "Flask框架 Cookbook", "marks": "力荐"}
{"content": "很不错, 很细致, 大有收获", "marks": "推荐"}
{"content": "认真看了前半部分，浏览了后半部分。\n\n通过这本书能够较快了解到使用Flask进行Web开发的方方面面。\n\n本就不是一本讲述Flask原理的书，所以也不苛责太多。\n\n翻译其实也还好，但想必看原版的话效果会更好。\n\n最后啊，结合当初入门web.py的体验，我还是感觉：要入门就看官方文档，遇问题就上社区求教。", "marks": "推荐"}
{"content": "Flask的好书，不过里面关于flask讲的不是很多，主要是实践一个博客，大多数东西还是在文档里。", "marks": "力荐"}
{"content": "还是要实践。。", "marks": "力荐"}
{"content": "简单易用，适合初学者的入门教程", "marks": "力荐"}
{"content": "很喜欢作者循循善诱的讲述方式", "marks": "推荐"}
{"content": "终于看完了，自己也做了一个个人博客。讲得很好非常系统。", "marks": "力荐"}
{"content": "挺不错的！适合入门", "marks": "推荐"}
{"content": "手把手 step by step 看了一小半", "marks": "力荐"}
{"content": "浅显易懂，入门flask必备好书。", "marks": "力荐"}
{"content": "比官方文档要解释的详细，上下文，而且还讲到为什么要这样设计", "marks": "推荐"}
{"content": "继续欺负我吧flask", "marks": "力荐"}
{"content": "按部就班,由易到难,非常详细,有源码做指导,flask初学者的绝佳选择.", "marks": "力荐"}
{"content": "这本书非常适合Flask 入门，虽然说是入门书，但是我个人认为可以作为初中级的参考书籍，因为作者对 Flask 的讲解把握的非常到位，所以可以将很多概念和扩展的使用讲解得通俗易懂，但是，又不乏给有心人留下很多空间去进行自我寻找资料扩展学习。这本书我读了3遍了现在，也不敢说书中提及的所有内容我都了然于胸，当然，也可能是本人愚钝，没有得该书的精要。此外，还需要说明的是，本书作者也是 Pycon 的常客，如果大家有意思的话还可以去找找往年作者在 PyCon 上的分享，相信对自己加深 Flask 的理解大有帮助和另有一番感悟。", "marks": "力荐"}
{"content": "好书！值得初学者看3遍。", "marks": "力荐"}
{"content": "书基本上手把手的教会一个新手如何搭建一个简单的博客网站，而且上Github可以下载书中源码，非常方便。但是可能因为是编写时间的缘故，书中部分代码指令我在实现时除了问题，例如：书中关于windows环境下设置环境变量的代码，其所指的是CMD，而基本看了learn python the hard way的新手（我假设你和我一样的学习路径），用的都是powershell，所以大家需要自行辨别。", "marks": "力荐"}
{"content": "总体很详细的一本教材，里面介绍了很多之前被我习惯性忽略的有趣的插件。讲结构的第六章非常流畅，精巧详实。不足之处是有些过于简单的东西展开的篇幅太长，比如用户注册之类的...可能对新手来说更好上手吧。", "marks": "推荐"}
{"content": "很不错，将Flask讲得很清晰", "marks": "力荐"}
{"content": "每次开始一个小项目就拿出来翻一翻。", "marks": "力荐"}
{"content": "详细的教程，手把手教你做一个博客，但是过于直接的告诉你代码，会让你丧失一定的思考，以致于你做完博客之后，还是一知半解的状态。", "marks": "推荐"}
{"content": "Python 初学者进阶的一本实战好书", "marks": "力荐"}
{"content": "读之前，建议先去对对勘误表………我是官网，此书，flask之旅一起看的……", "marks": "还行"}
{"content": "实话，没接触过框架的同学一脸蒙蔽，不过学过web框架的还是可以看到很多东西的", "marks": "推荐"}
{"content": "初学者可以看看。。。很有条理", "marks": "还行"}
{"content": "看见很多人说看不懂，其实是你自己的原因。这本书需要先掌握Flask的基础知识以及一些常用的扩展，可以说这本书是为Flask进阶的人准备的，并不适合初学者。\nFlask的官方文档才是初学者最好的入门教程，之后再看这本书，你会发现，这是一本非常经典的Flask书。", "marks": "力荐"}
{"content": "作者单枪匹马撸了个豆瓣或者知乎.....", "marks": "推荐"}
{"content": "实战书，非常不错", "marks": "力荐"}
{"content": "一周多把前面到实践第一章学习完。实践部分与flask关联不大。\r包是老版本，一些函数，类都被对应的包建议弃用或停用。需要自己去看最新包的英文文档等。\r\r书还是有坑的，去github看use，一般都已经解决了。\r书上使用的是关系型数据库，用nosql数据库的自己找内容。", "marks": "推荐"}
{"content": "python web 开发入门", "marks": "力荐"}
{"content": "真的很好，适合用来入门", "marks": "力荐"}
{"content": "还不错。一步一步的", "marks": "推荐"}
{"content": "讲的太少了", "marks": "还行"}
{"content": "对于第一次接触Python web的我，这本书给了我很大的帮助，带你从零到构建成一个小型的博客平台，还是很不错的一本书", "marks": "推荐"}
{"content": "适合新手入门，比喻下就是没有告诉你搭房子的每个细节，但是告诉你搭建一个房子都需要哪些结构。细节方面需要自己去学习，比如数据库，json等…\n总而还是推荐的\n", "marks": "力荐"}
{"content": "好奇，这套以动物做封面的计算机编程类的书，一共有多少本？都是什么动物？对应那些语言？有什么规律吗？", "marks": "推荐"}
{"content": "很好的书，跟着做学习flask很快，书比较薄，但内容很详实，手把手的带你开发啊", "marks": "推荐"}
{"content": "一开始是看的文档，后来在图书馆看了这本书，书中的概念和介绍给了我很多启发", "marks": "推荐"}
{"content": "Python", "marks": "还行"}
{"content": "一本入门好书，内容犀利，涉及Flask Web开发的方方面面。", "marks": "力荐"}
{"content": "目前是第二次在读。本书完整地介绍了利用flask搭建一个网站的流程和具体方法，覆盖了模板的使用、表单、登录、留言、数据库、邮件、用户认证、文章管理、测试、发布等web开发部署中用到的一系列东西都有了，很全面。目前市场上这样子的书可没几本了。不过里面用到的一些技术，现在已经改变了，读者需要自己去摸索解决校正", "marks": "推荐"}
{"content": "这本书很适合懂python又想开发web的初学者，翻译也很流畅。不想很多书直译，这本书基本上是意译，讲作者的思想都很好地表达了出来。最后我还自己依葫芦画瓢在阿里云上搭了一个自己的blog。受益匪浅。。", "marks": "力荐"}
{"content": "简单易懂", "marks": "力荐"}
{"content": "配合github看比较好。因为版本比较低，作者github上都有更新的", "marks": "推荐"}
{"content": "入门Flask的不二选择", "marks": "力荐"}
{"content": "入门级介绍，Step by Step 教学", "marks": "推荐"}
{"content": "入门在读", "marks": "推荐"}
{"content": "写完这本书 还不够去豆瓣工作", "marks": "推荐"}
{"content": "支持！因为是我自己翻译的……", "marks": "力荐"}
{"content": "挺好的啊，感觉像是红宝书缩水版，还讲了一些最佳实践和设计模式。不过读完觉得js实在太灵活了，不太喜欢", "marks": "推荐"}
{"content": "目前读过的最佳javascript入门书籍", "marks": "力荐"}
{"content": "面向对象讲的比较详细， 读完对javascript 的高级用法有点模糊的印象了", "marks": "推荐"}
{"content": "书不错，只是太入门，现在读起来多少觉得是在浪费时间。", "marks": "推荐"}
{"content": "一开始还以为是专门讲解面向对象的书，但读了才发现是一本入门书。不过书中原型链那一章讲解得比较好，其它章节就感觉平平了，就都是一些入门知识。", "marks": "推荐"}
{"content": "对初学者来说, 此书比高程3更适合入门, 3456章不错", "marks": "推荐"}
{"content": "花了一天时间看了一下，对js有了初步了解", "marks": "推荐"}
{"content": "好书！作者是大牛，这本算是他写的「设计模式」那本书的入门版本。不过语言类比得特别好，很容易理解OOP。", "marks": "力荐"}
{"content": "真正讲面向对象的只是内容的一小部分，其他大部分都在讲JS基础知识", "marks": "还行"}
{"content": "对于闭包和原型链教的很明白。", "marks": "力荐"}
{"content": "推荐初学者", "marks": "力荐"}
{"content": "内容讲的很容易理解，是了解javascript面向对象编程一本好书。", "marks": "推荐"}
{"content": "javascript面向对象入门，最开始很引人入胜，再后是和C/C++/JAVA差不多的语法结构，闭包依然不懂，原型讲得比较一般没有讲太多原理解释虽然看着用了很多篇幅，__proto__ === constructor.prototype为true，prototype=xxxx prototype.constructor=原\nconstructor，讲解BOM、DOM得比较少但是感觉不混乱，适合入门，翻译得还行，书上有一点小错误。", "marks": "还行"}
{"content": "这本书绝对值得一读，这是本书的第二版了，我还没有看过，不知道和第一版有什么区别，过几天看看。", "marks": "力荐"}
{"content": "这么好的书，居然很少人评价，此书相较于其他书的优点就是，很多东西点得很透，直面铺垫非常好，对常见误区解释的非常详细；其他大部分点其他书也说，但是没给人一种恍然大悟的感觉", "marks": "力荐"}
{"content": "  两个月之前读过了，这本书正好处在我提升的节点上。好评666.\n  ", "marks": "力荐"}
{"content": "言简意赅 不错不错", "marks": "力荐"}
{"content": "最好的Javascript入门书，深入浅出，例子经典。有基础的也能有所收获。", "marks": "力荐"}
{"content": "12种原型继承模式呢，语言通俗，即使是我这种小白，也能够轻松看懂", "marks": "力荐"}
{"content": "将相关基本概念讲解的十分清楚，举例丰富。对原型、继承、闭包的分析尤其透彻，对于js入门打基础绝对是本难得的好书", "marks": "力荐"}
{"content": "灵活到让我经常怀疑自己智商不够🙂", "marks": "推荐"}
{"content": "讲的实现方法很详细", "marks": "推荐"}
{"content": "花了3天，感觉特别适合新手，是一本我认为的最佳js入门书。", "marks": "力荐"}
{"content": "入门的好书，非常好", "marks": "力荐"}
{"content": "个人认为这本比dom艺术更适合入门 js是一门完备的语言 ", "marks": "推荐"}
{"content": "经典不必多说", "marks": "力荐"}
{"content": "不错的入门书，有些章节也有一定深度，看起来还是比较爽的。", "marks": "推荐"}
{"content": "适合初级入门", "marks": "力荐"}
{"content": "其实还是不错的，着重看4.5.6.8.9这几章，学习爬虫也可以一看。但是里面的库有点多，不是很喜欢，不过实用性有点强，flickr,google,amazon。一边看《HTTP权威指南》一边看这书，感觉良好，知识互相对照起来。", "marks": "推荐"}
{"content": "实例不错，对工作有帮助", "marks": "推荐"}
{"content": "搞成类似手册的东西了，里面都是用各种库写的实例，感觉层次有点低", "marks": "还行"}
{"content": "读过的最烂的cookbook，没有之一。大概也是读过的最差的技术书之一。还不如很多人的gist整理。完全看不懂是给为了学网络的人还是学Python的人还是学网络编程的人看的。书名翻译成这样也真是服了译者了。", "marks": "很差"}
{"content": "其实这本书蛮不错的，从基础套接字到实用程序都有。只是这是从python语言层面出发的，应用部分的有趣实例也是围绕着谷歌、雅虎、亚马逊等的服务展开。总觉得时效性有些强。", "marks": "还行"}
{"content": "非常失望。。。", "marks": "较差"}
{"content": "这本书前四部分讲的还可以，都是比较基础的，到后面就垃圾了。该书的最大毛病就是不深入浅出，而是很基础的搞一些例子，知识点并没有细讲，很多东西需要自己在下面花大时间整理。", "marks": "还行"}
{"content": "这本书缺乏理论", "marks": "还行"}
{"content": "适合对网络编程有基本概念的看，写的不深，偏指导方向型", "marks": "还行"}
{"content": "差评！！！", "marks": "很差"}
{"content": "没什么用的cookbook。", "marks": "还行"}
{"content": "全是各种网络模块的使用，算不上入门，但也算不上进阶，讲的有点半吊子，也不太实用。", "marks": "还行"}
{"content": "内容挺老了, 而且一点不实用", "marks": "较差"}
{"content": "还不错的书，在不熟悉 Python 的时候拿来当做工具书很适合，当成熟手之后再看就略显单薄了。", "marks": "推荐"}
{"content": "有点失望，是期望太高了吗？", "marks": "还行"}
{"content": "算是工具书吧", "marks": "推荐"}
{"content": "这本书怎么说呢，你说它一无是处，也不是，你说它好呢，也不是。里面给了挺多例子，但是没有细致的例子分析。所以这一本书挺适合初学者，利用它开阔一下视野，但是原理性的东西就不要指望这本书了，得查其他的参考资料。里面代码的风格也很差，人邮现在也是饥不择食啊，质量全体现在封皮上了。", "marks": "较差"}
{"content": "都3时代了，居然还是2.7的代码", "marks": "较差"}
{"content": "这本比上一本中的语言小众多了。编程语言确实非常多，但主流、常用的也确实只有那么几个。再多就太小众了。", "marks": "还行"}
{"content": "Lua 作为易读简洁的也可用作嵌入式设备的脚本语言，在游戏领域用得较多。Factor 的语法则更符合数据操作流程。ELm 则是Haskell 化后来代替JS 的，而且不再用callback 而是通过消息传递来做，而且能很好的做reactive programming。Elixir 衍生于Erlang，也受Ruby 影响，但没有Scala 等那么复杂的类型系统。Julia 以后就是科学计算领域 的dominator，性能如C 一样好，操作如Matlab、R等一样便捷。miniKanren 则是Clojure 里的Logic programming language，不像Prolog 那么局限，而能做更通用的编程。Idris 是动态的有类型语言， 所以也就有对应的优劣。", "marks": "还行"}
{"content": "其实这本书更合适的名字应该是Processing Java的Manul中文翻译，当然作者翻译的不错。第一部分就是一个Java基本元素介绍，第二个部分非常有意思就是Processing怎么动态展示，可惜的是只见树木不见森林，当然作者讲的都是基本的知识，在这个基础上才可以展示。第三个部分主要是用户交互，不用的用户直接跳过即可，因为这在你做展示性动画的时候基本用不到。最后是感受，这本书更多的是细节手册吧，不是教会你怎么做漂亮动画的，就好比提供给了你完美的锅碗瓢盆使用方法，但是没有告诉你怎么买菜做菜一样。当然不应该求全责备，这本书已经做的不错，毕竟和买菜做菜类似，动画展示说实在的是一个艺术创作的过程。推荐运行下Processing自带的Examples然后就会知道怎么做了。", "marks": "推荐"}
{"content": "女票都能看懂的编程书...本书的亮点就是简单.", "marks": "推荐"}
{"content": "比较全面的语法讲解书，突然要用时可以当“字典”看", "marks": "推荐"}
{"content": "非常值得阅读的一本关于Processing的书籍，基础、实用！", "marks": "力荐"}
{"content": "看了一部分，基础理论讲得比较多，虽然接触过一点processing但还是看得好晕。。感觉对零基础不够友好，因为相对之前看的另一本，不能够很快见到成效，所以适合需要巩固理论的孩纸食用。", "marks": "推荐"}
{"content": "看完图形编程那块，获益匪浅", "marks": "力荐"}
{"content": "生拉硬凑，胜在通俗易懂", "marks": "推荐"}
{"content": "最后一章突然变PPT了？", "marks": "推荐"}
{"content": "基础读物，点到为止，会给别人推荐", "marks": "推荐"}
{"content": "比较实用，浅显易懂", "marks": "推荐"}
{"content": "http://gameprogrammingpatterns.com/", "marks": "力荐"}
{"content": "比较清晰，有空应该把reference再看看，对我来说主要是知道了esc模式和享元模式", "marks": "推荐"}
{"content": "受益匪浅 软件工程的书难得有一本读的进去的", "marks": "力荐"}
{"content": "入门的好书，不过现在看已经太简单了", "marks": "力荐"}
{"content": "对于新手来说，此书可谓入门宝典。对于有一定经验的人来说，此书则可举一反三、查漏补缺。快速啃完，需要消化。", "marks": "力荐"}
{"content": "啃的第一本英文原版书", "marks": "力荐"}
{"content": "多线程和STRATEGY 可以再多写点,其他都非常不错.", "marks": "推荐"}
{"content": "不能更好！", "marks": "力荐"}
{"content": "不可不读的好书", "marks": "力荐"}
{"content": "示例非常好理解", "marks": "力荐"}
{"content": "内容其实算不上太深，但是同类的书籍实在太少，加上这本书的篇幅又比较短，所以还是值得稍微花一点时间看一看的。", "marks": "力荐"}
{"content": "https://github.com/cyh24/GameProgrammingPatterns-CN\n中文翻译~~已经完成", "marks": "力荐"}
{"content": "讲的很中肯，建议不懂的设计模式仔细阅读，熟悉的通读来了解其在游戏中的使用", "marks": "力荐"}
{"content": "Wonderful for fresh game developer ", "marks": "力荐"}
{"content": "全程高能，5.1、6.1、7.x 直戳G点。千万别看翻译版，那货用谷歌翻译的", "marks": "力荐"}
{"content": "据观察，每次想要重构前，读一本设计模式书，可以有效减少重构次数", "marks": "力荐"}
{"content": "非常好的一本书，作者爱用比喻，说话抽象。。所以看着也很有意思", "marks": "力荐"}
{"content": "讲述了游戏中常用的设计模式，很多文中提到的设计模式都是当下主流游戏引擎有所应用的东西。", "marks": "推荐"}
{"content": "带了一下午熊孩子，不仅要帮助学coding，还要注意撕x的哥哥和妹妹…身心交瘁orz", "marks": "推荐"}
{"content": "(16-33)书里花花绿绿的净是彩图，还有漫画，能抓住孩子，例程编出来却没多大意思", "marks": "还行"}
{"content": "对于小学初中初学编程的孩子来说，是一本不错的书。不过我作为一个成年人觉得一般。", "marks": "推荐"}
{"content": "很易读，不过也没什么特别新奇的东西。。", "marks": "推荐"}
{"content": "有点啰嗦。是意图编程，但意图是怎么来的，没能让我读的时候直接感受到。", "marks": "还行"}
{"content": "可惜是java的书", "marks": "推荐"}
{"content": "实操比较强，如果不实践，看了等于没看", "marks": "推荐"}
{"content": "关键词：代码的意图", "marks": "力荐"}
{"content": "一个step by step的书，包括思维的step by step , 值得反复阅读", "marks": "力荐"}
{"content": "TDD 传教书籍，读起来轻松，但是感觉在现实世界中有点不接地气的样子", "marks": "还行"}
{"content": "TDD的布道者， 非常精细的实际操作演示了 Refactoring to Patterns", "marks": "力荐"}
{"content": "Ruby版SICP", "marks": "力荐"}
{"content": "非常精彩，这么薄的一本书，覆盖了图灵机、lambda演算、SKI 组合子等计算理论，并且提供了可供运行和测试的代码，还有啥不知足的呢？略微可惜的可能是因为篇幅或者作者故意限制，没有特别深入。", "marks": "力荐"}
{"content": "看了这本书，对学习计算理论导引有很大的帮助，这本书可以看做是计算理论导引的实战版本。", "marks": "力荐"}
{"content": "2016.1.18开始读。2017.7.9 理解了图灵机，就理解了算法（有限状态机）与数据结构（抽象的纸带）=图灵机，也就理解了编译原理的理论部分，线程编程本质就是事件驱动模型，也就是写一个有限状态机。程序看做数据作为其他程序的输入。\n", "marks": "力荐"}
{"content": "#图灵PDF# 4.3 分。有点像大三大四两门外教课的课本欸！可爱也可爱在 Ruby 实现，啰嗦也啰嗦在这儿。如果能够压缩成 150 来页的小品，就更可爱啦！还蛮有趣的~", "marks": "推荐"}
{"content": "必须是力荐，讲解通俗易懂，非常平易，可以让人轻松学习，里面的资料也比较丰富，我很喜欢。", "marks": "力荐"}
{"content": "难得的好书，简明有趣。", "marks": "力荐"}
{"content": "从有限状态机到图灵机，全书在引导读者剖析理论层面的计算机，lambda算法激动人心，就是Ruby语法有点琐碎。遗憾就是看的半懂。", "marks": "力荐"}
{"content": "循序渐进而又启发性很强的一本书", "marks": "力荐"}
{"content": "SICP", "marks": "推荐"}
{"content": "Ruby版编译原理", "marks": "推荐"}
{"content": "可以和 计算机理论导引 、图灵的秘密 一起看", "marks": "推荐"}
{"content": "非常棒的一本书", "marks": "力荐"}
{"content": "满足好奇心", "marks": "推荐"}
{"content": "抽象描述计算机物体和人之间关系。机器，语言，编程。以及结果的预判，可能与不可能。处理对象中方法，消息类，模块，数据，语法，语义。", "marks": "推荐"}
{"content": "这本书的读者对象是“没有正规学习过数学或者计算机科学的朋友”，然而根据我的目前的阅读经验来看，没有基础的人是完全不可能看得懂这本书的。因为这本书主要以实战为主，理论讲的超级烂的，内容编排也不够到位……看不懂的建议先补理论吧。", "marks": "推荐"}
{"content": "玄学 看不懂了", "marks": "推荐"}
{"content": "lambda写的FizzBuzz太惊艳了", "marks": "力荐"}
{"content": "在不到三百页的篇幅里，把自动机，图灵机，lambda过了一遍，而且还附了实现及测试代码。唯一不足的就是用工程的态度去讲解科学，会缺乏更细致的理解。看来还得先看看几本导论性质的计算理论的书，再来刷一遍，相信理解会深入一些。", "marks": "力荐"}
{"content": "2016年最有收获的一本技术书，从有限状态机到下推自动机，再到终极机器图灵机，能力一步步增强。中间介绍了一些图灵完备的系统，但是图灵机也有做不到的事情，也就是判断一个系统或者一段程序做了什么，最后通过介绍几个案例来弥补这些不可能做到的事情。", "marks": "力荐"}
{"content": "练习到了第六章，后面三章大概看了下。", "marks": "力荐"}
{"content": "前半部写编译器的那部分不是很喜欢，可能是因为在kindle上看的原因，代码的格式太奇怪了。后面讲lambda演算的时候开始放大招了啊，只用proc实现的map一串数字到字母的function，expand出源码的时候简直看呆。然后到SKI组合子，标签系统，通过证明它们与图灵机的对等性来证明它们是通用的，这部分也很棒。最后一部分通过停机问题介绍了不可计算性，当程序能引用自身的时候，是无法解决说谎者悖论的。整部书对计算理论的介绍很详细又很通俗，除了kindle上不好看代码以外很值得读。", "marks": "力荐"}
{"content": "1星不是说这本书写的不好, 是我看不懂", "marks": "很差"}
{"content": "前半部分不错，后半部分的形式语言讲的太浅了", "marks": "还行"}
{"content": "《计算的本质》以Ruby程序为工具讲解了计算机、程序、程序语言等基本的计算机科学问题，是一本非常好的计算机科学实践书籍。使用Ruby语言模拟了各种机器的计算能力、计算机语言的语义，深入浅出的讨论了计算的本质。\r\n书中详细探讨了各种类型机器的计算能力，机器按照计算能力分为有限自动机（FA），下推自动机（PDA），图灵机（TM），通用计算机；除图灵机与通用计算机等价外，计算能力逐渐增强。有限状态机增加外部存储的栈，扩大计算能力就是下推自动机；有限状态机增加无限长的纸带访问就是图灵机，图灵机的实质就是能够访问无限长纸带的有限状态机。\r\nDFA可以识别正则式，NPDA可以识别回文字符串，确定性图灵机(DTM)可以进行二进制递增运算。每种机器都有相当明显的能力限制，FA无法解决涉及无限制的计数问题，例如判", "marks": "力荐"}
{"content": "习惯了站在巨人的肩膀上, 偶尔也要往下看看", "marks": "力荐"}
{"content": "本书亮点在于用Ruby代码实现了各种计算模型，并粗略地涉及了形式语义、编译原理、抽象解释等方面的知识，可作为普通开发者的科普读物或科班学生学习计算理论的辅助书。唯一的缺点在于翻译比较生涩，阅读不够流畅。", "marks": "力荐"}
{"content": "用最小ruby语言子集编写程序解释自动机，图灵机等计算理论。", "marks": "力荐"}
{"content": "你竟然用ruby!!于是我没看下去", "marks": "还行"}
{"content": "书本身还是不错的，看得出作者的用心，但是定位就有点尴尬，因为理论部分的缺失所以没有办法学到很多真正有用的知识，如果算作科普书籍的话难度又有些大，没有基础很容易看的似懂非懂。归根到底是计算理论这部分知识太抽象太难了吧，不过如作者所说的用来“满足自己的好奇心”还是足够有趣的。", "marks": "推荐"}
{"content": "可惜是 ruby 描述的", "marks": "还行"}
{"content": "对编译原理和计算机组成原理的解释，思想新颖", "marks": "推荐"}
{"content": "建议直接看SICP，讲得不如那本也没有习题可以做", "marks": "推荐"}
{"content": "这半年读过的最漂亮的一本书，各种计算模型及某些通用计算模型的等价性、语义分析/语法分析以及最后一章的类型检查系统（给我感觉就是在写一个小的编译器或者解释器）、还有停机问题的具体介绍都非常精彩。最最重要的是，所有的论述都用上了 Ruby 代码，大部分例子理论上都是可以运行的！Ruby 的灵活性（比如代码即数据在某些语言中就不是很方便）给本书某些章节写实现时带来不少便利，第八章作者甚至一本正经胡说八道地用 evaluate function 写了个停机问题的函数，然后想尝试解决哥德巴赫猜想。\n\n笔记过几天附上。", "marks": "力荐"}
{"content": "计算理论~", "marks": "推荐"}
{"content": "可以跑的ruby代码，好兴奋呀！ https://github.com/tomstuart/computationbook", "marks": "力荐"}
{"content": "应该是给大忙“牛”人写的，不如果本身对于Java的一些特性使用不多的话，会很容易看得云里雾里，因为这不是一本入门书。前三章关于函数式及Stream的介绍知识性比较松散，导致我得又去看O Really的另外两本......", "marks": "还行"}
{"content": "也有涉及到一点 JDK7 的内容，原来 JDK7 里面还加入了这么多的东西。", "marks": "推荐"}
{"content": "加上函数式编程，真不不少东西要学。", "marks": "推荐"}
{"content": "对新特性为什么出现提的不多，讲用例就有点干巴巴的感觉。lambda部分还不错，其它就只能将就了。", "marks": "还行"}
{"content": "花两天补了这个坑，接下来找一些代码来改改，巩固一下知识。节后才能做培训。", "marks": "力荐"}
{"content": "更新Java新知识的好书。", "marks": "力荐"}
{"content": "jdk8新特性并没有全部都介绍到，借鉴了Guava、Joda大量的思想（代码？），jdk8增加了stream和lambda是否偏重数据分析方面，ps. 和《Java 8函数式编程》一起看的", "marks": "还行"}
{"content": "要是再涉及一些API设计思想就好了。", "marks": "推荐"}
{"content": "前三章还不错，后面就开始抄API文档了……", "marks": "还行"}
{"content": "之前一直没法通过零星的知识点理解Lambda，这次算是入门了。\nstream看的云里雾里，最后还是上网看教程去了，好在看懂了\nJDK7的特性补充还不错\n翻译的比较烂……", "marks": "推荐"}
{"content": "Java8的新特性及java7的特性，阅读本书应一步一步进行敲代码与阅读", "marks": "还行"}
{"content": "简明扼要。可以作为小册子随时翻阅。", "marks": "推荐"}
{"content": "挺赞的，基本上了解了java 8的新特性，升级升级", "marks": "力荐"}
{"content": "前面三章还行后面就有点敷衍的意思了，还是看Brian大神的两篇文章比较好", "marks": "还行"}
{"content": "lamda演算，必须好好学习", "marks": "力荐"}
{"content": "倒不是说书有多好，但真心鼓励这种一口气能看完的，倒是有些书偏要把10页写成100页。", "marks": "力荐"}
{"content": "java8入门基础", "marks": "推荐"}
{"content": "翻了一遍，讲了一些基本的点以及一些大致的原理和用法，真的要用还得去看官方API和源码", "marks": "推荐"}
{"content": "感觉非常不错的书，比较节省时间，而且该讲的都讲的，部分内容还比较深入。", "marks": "力荐"}
{"content": "很好啊，没有一句废话", "marks": "力荐"}
{"content": "java8有很多新特性是为了大数据数据而做的", "marks": "推荐"}
{"content": "回顾", "marks": "推荐"}
{"content": "入门很不错", "marks": "推荐"}
{"content": "作为jdk8的主要特性一览丛书，不会要求其内容的深度，只要求覆盖日常工作中常见使用场景即可。这本书基本做到了：从lambda入手，到streamAPI，再到日期时间处理，并发改进，最后列举其他一些常用特性。相信这些武器在你的日常工作中一定让你屡试不爽，代码爽歪歪。唯一美中不足的就是jvm得特性覆盖不足，可以稍微从底层将一下jvm的改动。", "marks": "推荐"}
{"content": "总有新的发现，值得一看，快速了解Java8\n", "marks": "力荐"}
{"content": "中规中矩的介绍新特性，纯干货，适合没时间细细阅读的我，了解大概对症下药，放在办公室作为索引参考，lambda内容不够多建议参考《Java 8函数式编程》", "marks": "推荐"}
{"content": "挺不错的，可惜项目中不能用到java8", "marks": "力荐"}
{"content": "翻译的不太好", "marks": "还行"}
{"content": "主要介绍java8的新语法和代码示例。", "marks": "还行"}
{"content": "入门级Java8，适合作为一个工具书。", "marks": "推荐"}
{"content": "有了lambda，可以少写很多匿名类；StreamAPI感觉太强大。", "marks": "推荐"}
{"content": "新特性罗列一下比较容易看见", "marks": "推荐"}
{"content": "还不错，主要讲了些新的变化，讲的挺好，练习题目也都很不错。java8引入的Function Intrerface 和 CompletableFuture 太赞了，期待太久了。parallelStream 也让人眼前一亮", "marks": "推荐"}
{"content": "并没觉得很好。短，讲的不全，真正的零基础er（如我，掩面）要查很多东西。后面从  写测试  开始看不懂。", "marks": "还行"}
{"content": "我感觉自己被调戏了。", "marks": "力荐"}
{"content": "感谢作者和译者，很好的手把手的一个新手编程体验书，消除编程物质恐惧感，在线看的liam huang翻译的版，不确定看的是第几版，有一些加分题没有做，第五十题黑手党外星人飞船做起来有点压力，准备转去codeacademy / think python和a byte of python在进行一些学习和practice，之前看了一个半月的C++第五版，转过来看Python以后只想说Python真是小天使般的好上手……", "marks": "推荐"}
{"content": "非常好的Python入门书，作者的写作风格我很喜欢。", "marks": "推荐"}
{"content": "很好的入门书。只是代码有挺多错误的，网上的原版就没有错，应该是编辑时出的问题。", "marks": "推荐"}
{"content": "入门首选", "marks": "推荐"}
{"content": "when you get stucked，you should get more information。按照习题模式来引导编程", "marks": "力荐"}
{"content": "花了一周的时间看完，在以前的基础上零零碎碎学了一些新的东西，还算是有所收获，但是前面讲的很基础很简单，到ex40之后突然难度增加不是很懂在讲些什么。", "marks": "力荐"}
{"content": "入门确实很好。但是第二周作业开始GUI了，这本没有讲到呢。换下一本。", "marks": "推荐"}
{"content": "最后一个游戏那里就做不下去了……差太远", "marks": "还行"}
{"content": "学习笔记： https://github.com/hairuo/LPTHW", "marks": "推荐"}
{"content": "在 learn python the hard way官网上有下载 也可以在线看 ^ ^ ", "marks": "推荐"}
{"content": "每天敲一两节练习，历时 41 天，敲练与记录心得同时完成，再花一天修订，刚刚是 42 天。我正按此书为蓝本写《笨方法学写作》，地址是　https://cnfeat.gitbooks.io/learnwritingthehardway/content/", "marks": "力荐"}
{"content": "太基础了.", "marks": "还行"}
{"content": "我已经有了一定的C#基础再来学PYTHON，在我看来这样对着敲代码而不从编程思维去解决问题的学习方式真的不适合我。", "marks": "较差"}
{"content": "相当基础的入门教程", "marks": "还行"}
{"content": "这才是真正的零基础入门书", "marks": "推荐"}
{"content": "跟着全做了遍，有了个大概", "marks": "推荐"}
{"content": "几乎快一年了，算是读完了，其实习题根本都没做几道，很多内容看到最后，前面的就忘的差不多了。程序猿的世界博大精深，就连一本入门书读起来都这么艰难。\n不过编程更重要的是练习，光看书是不行的，要自己多动手做东西。", "marks": "力荐"}
{"content": "其中的代码有几处错误，坑爹呀。", "marks": "推荐"}
{"content": "要是有深入版就好了", "marks": "推荐"}
{"content": "错别字还是挺多的，我觉得我需要深入一点学习了", "marks": "还行"}
{"content": "你会编程。他们不会。这真他妈的酷。", "marks": "推荐"}
{"content": "书不错，适合无基础入门，不够深入，讲的也不是很细。", "marks": "推荐"}
{"content": "挺好的，", "marks": "力荐"}
{"content": "入门好书.", "marks": "力荐"}
{"content": "适合新手入门，不过不少地方没讲清楚，知识点不全。有经验的同学直接在线看就可以了。盛名之下，看个热闹吧", "marks": "还行"}
{"content": "212页这段太牛b了", "marks": "还行"}
{"content": "抛开一切,敲起来。告诉你,编程的正确姿势。", "marks": "力荐"}
{"content": "入门不错 后面坑太大 先入个小坑吧", "marks": "推荐"}
{"content": "原以为它会很浅显入理，但看来并不是这样而是机械的操作和无聊的跟随，没有突出应有的编程思维优势", "marks": "较差"}
{"content": "挺适合零基础的我学习Python，感受下Python大法。", "marks": "推荐"}
{"content": "人生苦短", "marks": "推荐"}
{"content": "有一些基础的会觉得这本书太入门了，另外其实还是英文版好一点。", "marks": "推荐"}
{"content": "终于读完了，手写复制了大部分代码，对于高手来说可能不是什么好书，但是对于我这种菜鸟来说，还是收获不少的。", "marks": "力荐"}
{"content": "I hate it when a textbook tells me to ignore some important underlying mechanisms and just to follow instructions. However, this textbook encourages readers themselves to search for deeper and wider knowledge about Python, which is a good thing but somehow reflects the author's \"laziness\". It leaves many things unexplained!!!!", "marks": "还行"}
{"content": "比较好的入门书，可以引起兴趣，动手实践确实是最好的学习方法", "marks": "力荐"}
{"content": "不错的一本书。", "marks": "推荐"}
{"content": "断断续续刷完了。。。对于最后的搭建项目还是有点一知半解。。。看别人都说这是超级基础的入门书。。我对自己的智商有些忧虑了。。这本书最好是连续一段时间刷完。。毕竟是初学。断了之后再看可能就没感觉了。总之能有所了解。。其实可以看英文版的。。因为用的单词都很简单。", "marks": "推荐"}
{"content": "Learn Python the hard way", "marks": "力荐"}
{"content": "在看网页版（https://learnpythonthehardway.org/book/）。出python3的教程了。", "marks": "推荐"}
{"content": "喜欢这种书，直击客户的需求。", "marks": "推荐"}
{"content": "那游戏好无聊……", "marks": "推荐"}
{"content": "啰嗦", "marks": "还行"}
{"content": "前期通过简单习题让你熟悉语法，后期就不太好了。", "marks": "推荐"}
{"content": "python/R/Matlab 我的技能就在这个暑假get了", "marks": "推荐"}
{"content": "前面很通俗易懂，到后面十来个章节还挺难的，需要多次翻看练习", "marks": "推荐"}
{"content": "说是笨办法，其实讲的还挺浅显的，属于入门书籍。附赠的光盘实在不知所云：现在有几台笔记本带光驱的？", "marks": "还行"}
{"content": "比入门教程难，比高级教程简单，两边不讨好。最有启发的是作者对于编程这事的态度。", "marks": "还行"}
{"content": "作为初学者入门读物可以，行文打破正统编程教材的体例，对话式的内容编排。", "marks": "推荐"}
{"content": "非常友善，有助于树立信心。但有些地方讲的并不清楚详细。", "marks": "推荐"}
{"content": "没有一门语言能坚持学下去，连皮毛都没搞懂就不想搞了。而且，实际上，读这本书最困难的地方在于不会用我积了两年灰的Mac！", "marks": "还行"}
{"content": "不知道为啥知乎上很多大牛推荐这本书，我觉得很不适合初学者啊，只讲语法是没有用的，况且这语法还讲得不清不楚。还是廖雪峰的网站教程清晰明了，强烈推荐。", "marks": "还行"}
{"content": "类与模块的对比，多态继承与合成的对比，都有恍然大悟之感，值得再翻一次读书笔记，入门好书", "marks": "推荐"}
{"content": "找时间继续学", "marks": "力荐"}
{"content": "买了一本父与子和这本 互为对照查阅不懂得知识点 进步很快 这本书简单又有趣 入门级最佳教学书！", "marks": "推荐"}
{"content": "-真正的python零基础书。短小精悍，幽默风趣。推荐！\n-一个初级程序员需要知道的三种最基本的技能：读写代码，注意细节，分辨力。", "marks": "力荐"}
{"content": "3.5/5", "marks": "还行"}
{"content": "Review", "marks": "推荐"}
{"content": "面向对象一节讲得不清楚，可以参考廖雪峰的教程。我更喜欢作者最后的自白，“编程20年，兴趣已无，语言不重要的，解决问题才是，如果为了赚钱，开家快餐店更直接。”", "marks": "推荐"}
{"content": "很基础很基础，学了notepad和powershell写python。不过为什么不用集成写呢，也很方便啊。算是入门了吧，继续学习", "marks": "推荐"}
{"content": ":（ 没读完，没时间hard way了", "marks": "还行"}
{"content": "作者说如果不喜欢这本书的话他推荐think python 和 a byte of python , 我就三本一起读的 这本的教学方法非常独特 对小白算是极端友好了 ", "marks": "力荐"}
{"content": "大一看的，还挺好，虽然现在觉得不必这么“笨”\n", "marks": "力荐"}
{"content": "入门", "marks": "还行"}
{"content": "垃圾到要死的书", "marks": "很差"}
{"content": "太基础，翻翻就没了", "marks": "还行"}
{"content": "还是不太适合没有编程基础的同学。", "marks": "力荐"}
{"content": "全书充满了笑点,基本看了一遍，实现到提交表单，session由于在最后游戏项目里就忽略了。", "marks": "推荐"}
{"content": "还是蛮简单的，如果当初好好跟着学就好了╮(￣▽￣)╭拖了一年半的书终于搞完了🤔最后两个实例没做😂还有面向对象编程，在情人节看太煎熬了🤔这就是我没有对象的原因啊", "marks": "推荐"}
{"content": "没用，太浅", "marks": "较差"}
{"content": "first python course", "marks": "推荐"}
{"content": "我觉得写得一般", "marks": "还行"}
{"content": "所谓笨办法并不是真的笨，浅显易懂并且直接要害。没有任何程序开发基础的人都可以看懂。解决了我多年一看见程序开发的书就害怕、啃不动的问题。这一次彻底解决多年来未曾弄懂的“面向对象”。对于非程序员、但要使用程序解决实际小问题的人非常有帮助。至少能看懂别人的代码，稍加修改为己所用。", "marks": "力荐"}
{"content": "往后还是需要一定的基础，主题思想是对的，鼓励自学、上网查知识、多练习。对新手应该有帮助", "marks": "力荐"}
{"content": "从面对对象这一章开始看得有点困难。个人觉得，作为入门书，这本还是很不错的。", "marks": "推荐"}
{"content": "书不错，学完，算是有个基本感觉了吧！", "marks": "推荐"}
{"content": "还行，算是基础的东西", "marks": "还行"}
{"content": "这作者老哥，真是有趣又有病。", "marks": "还行"}
{"content": "我觉得后面的越看越模糊，撸一遍估计不够。 ", "marks": "推荐"}
{"content": "这个译本有些问题，不过受制于英语水平啃不动原版，对照着看还是不错的。", "marks": "还行"}
{"content": "201605大概读完。本来想很强迫症地读完全部再来写评价，现在看何必呢？应该构建的是以自己为中心的学习体系和方法，而非以某一材料为中心。对于某一材料，实在撸不下去的地方就先放下好了，但是要always learning sth new。\n回过来说这本书，书的好处是短平快迅速上手，作者时不时逗你一下放松点继续搬砖；不足之处是有时语言鸡血风我不太喜欢，以及某些地方跳跃过大不踏实。综合来看完全从外围入门拿来作为参考书之一也好，特别是对代码有恐惧的人。", "marks": "还行"}
{"content": "编程这东西真是看完书对编程序并无任何帮助。。。不过还是挺好的", "marks": "推荐"}
{"content": "1个月的时间搞定了这本书，不得不说，这种方法学习编程不枯燥又有趣。\n", "marks": "推荐"}
{"content": "挺基础，说解易懂，翻译欠佳。", "marks": "推荐"}
{"content": "停在了第41节，做不下去了，不会做", "marks": "还行"}
{"content": "入门应该还可以， python的书真多。", "marks": "推荐"}
{"content": "适合一点编辑基础都没有的人入门,可以学到一些写代码和读代码的技巧", "marks": "力荐"}
{"content": "前面讲的不错，最后几章看的云里雾里的", "marks": "还行"}
{"content": "确实是一本很好的Python入门书", "marks": "力荐"}
{"content": "都怪我在买书之前没有好好关注此书是不是适合我。。。这本书是完全面对没编过程序的人的。。。", "marks": "还行"}
{"content": "非常适合初学者，没有过多的概念和理论，读起来不枯燥，赞！", "marks": "力荐"}
{"content": "挺好", "marks": "推荐"}
{"content": "入门必备", "marks": "力荐"}
{"content": "我認真的把裡面的代碼都敲了一邊~", "marks": "推荐"}
{"content": "一般，不适合作为入门书", "marks": "还行"}
{"content": "入门不错哎", "marks": "推荐"}
{"content": "写得很好，很适合入门学习\n喜欢Zed的风格", "marks": "力荐"}
{"content": "内容简短，实际例子简单上手，入门级别书籍", "marks": "推荐"}
{"content": "不错、不过后面的有点进度过快", "marks": "推荐"}
{"content": "除了是用Python2写的代码，这本书真是本好书！", "marks": "推荐"}
{"content": "真心不错的基础入门教程", "marks": "推荐"}
{"content": "很简单的入门教程", "marks": "力荐"}
{"content": "Practice make perfect", "marks": "推荐"}
{"content": "变量参数（arv），OOP都没有将清楚。拿来上手很不错，但是千万别当参考书。作者假定你得自己去网上查，但是自己讲什么class却扯半天讲不透彻。", "marks": "较差"}
{"content": "只要会用就OK", "marks": "力荐"}
{"content": "Python入门书籍", "marks": "力荐"}
{"content": "怎么说呢其实还好吧 但是学完了以后你也不算会了Python 还有许多要学的\n", "marks": "还行"}
{"content": "这本书，真是基础的不能再基础了，买错了，不过很适合没有任何基础的人来看", "marks": "力荐"}
{"content": "附录的命令行快速入门不错（之前都不会用，新技能get），习题做到中间部分就看不大懂了，解释也不大清楚，感觉不太适合零基础（好像每本书对零基础的定义都不一样）果断转《父与子编程》，以后再回来看吧", "marks": "推荐"}
{"content": "笨笨的，确实是0基础入门", "marks": "推荐"}
{"content": "初学者最好别用这个", "marks": "很差"}
{"content": "内容不多，主要是大量重复的机械性练习。没有推荐啥乱七八糟的IDE，强制用命令行，这点比较好。", "marks": "推荐"}
{"content": "入门很不错", "marks": "力荐"}
{"content": "通过书内的一些小练习，熟悉python的基础语法和内部机制，python入门的不错之选\n", "marks": "推荐"}
{"content": "第一本Python书籍，内容比较简单，大一上看的，零基础的可当做第一本编程书，有基础的可不看。", "marks": "推荐"}
{"content": "总的来说不是很系统，但撸这些代码还是可以，可以激发你学习兴趣吧\n英语渣的我伤不起哦，最后八个习题草草看了一下。", "marks": "还行"}
{"content": "不适合完全零基础的人去读，我是先看了简明python教程有了基础之后再来看这本书的，书中很多地方讲得并不细，想要完全读懂还要自己查资料，不过用来入门和培养编程兴趣挺好的", "marks": "推荐"}
{"content": "前面的40题太简单，各种基础不怎么讲，让初学者自己去查，习题答案也没有（网上也没有），请问不会怎么办？做完怎么对答案？41题开始，直接各种函数，超长代码炸死你，难度一下子突增，这本书不适合入门！", "marks": "很差"}
{"content": "用来复习挺有用的，从零开始学到有难度", "marks": "推荐"}
{"content": "很抱歉，这本书其实是对初学者并不友好的，很多东西都没有讲明白，需要自己上网查，问题是我自己网上可以搜到很多东西，为什么要去看你这本书，而且很多地方作者讲的并不明白，不够细致，其实这本书对零基础并不友好。", "marks": "较差"}
{"content": "用来做入门还是不错的，但后面的ex感觉有点吃力。。。还需要配合其他python入门书练习", "marks": "推荐"}
{"content": "一定先搞懂 命令行", "marks": "力荐"}
{"content": "搞笑幽默。不过到最后为了搞笑而搞笑。", "marks": "还行"}
{"content": "不推荐，表面上看对小白很友好但其实到后期是跨度很大的，有Java基础的学起来都费劲，更别说对没有任何编程基础的人了。\n看完本书之后还得看别的书系统的学习，这本书只是让读者了解基本的python编程模式。", "marks": "还行"}
{"content": "建议入门第一本", "marks": "还行"}
{"content": "要是没基础就别看了", "marks": "还行"}
{"content": "很基础，入门必备", "marks": "推荐"}
{"content": "这本书不适合学习过其他编程语言的程序员，内容不深，蜻蜓点水，适合编程小白无痛入门Python，但是40章之后的高级话题对于小白来说会难以理解，可以忽略这些内容。想要真正用Python工作仅仅阅读这本书显然是不够的，建议小白阅读其他书籍深入理解Python。", "marks": "推荐"}
{"content": "完全的案例入门式，做完全书的案例，你的编程水平将得到巨大的提升，可惜我还是没坚持下来", "marks": "推荐"}
{"content": "作为新手入门来说还不错，内容挺浅的。", "marks": "还行"}
{"content": "可以入门，但是编辑的细节错误不少", "marks": "推荐"}
{"content": "比王家林什么的好太多了。", "marks": "推荐"}
{"content": "内容还不错，整体上把Spark的运行逻辑和注意点都理清了，但不少地方有些粗糙。", "marks": "还行"}
{"content": "分布式系统", "marks": "推荐"}
{"content": "计算机科学", "marks": "还行"}
{"content": "了解spark系统原理的较好的入门书", "marks": "推荐"}
{"content": "理论还要联系实践呀", "marks": "还行"}
{"content": "第三，四两章不错，包含rdd操作还有spark的工作机制。", "marks": "推荐"}
{"content": "后面的代码越贴越多，而且整本书的csdn风格太浓，整个读下来几乎没得到什么新的见解", "marks": "较差"}
{"content": "很全面，也很技术。", "marks": "力荐"}
{"content": "错误有点多  居然没有找到网上勘误", "marks": "较差"}
{"content": "2016 NO.7 还是有不少收获的，要是用 Java 代码就好了", "marks": "推荐"}
{"content": "朋友的书，支持一下~", "marks": "还行"}
{"content": "章节的安排，先难后易，抛出一大堆概念和原理。。有点谭浩强，太不注重实践了", "marks": "较差"}
{"content": "真的是很差,配图和文字都有诸多错误.", "marks": "很差"}
{"content": "书的内容还不错，就是内容顺序不太好，总感觉读起来不顺畅，有些章节顺序对调下，可能会比较好", "marks": "还行"}
{"content": "主要是一些偏底层的东西，大概过了一遍，内容泛而浅，基本就是源码解读，水水的…\n不是这本，实际是内核机制解析与性能调优，但豆瓣没找到…", "marks": "还行"}
{"content": "初学者看一看还是蛮有帮助，不过还是看官方手册来的靠谱些。", "marks": "推荐"}
{"content": "内容很少，且大多泛泛而谈，很多东西都是网上能够找到的东西，不推荐", "marks": "较差"}
{"content": "这本书里边有比较多的细节错误或者描述不清。但是总体还行，读过之后可以对spark的某些方面的实现和优化，有一定的理解。", "marks": "还行"}
{"content": "为了rush一个ios app出来...", "marks": "推荐"}
{"content": "略过一遍", "marks": "还行"}
{"content": "非常全 适合放手边当手册看 不过这类书还不如看官方的programming language", "marks": "还行"}
{"content": "生编硬凑出来的东西，讲的太浅，如蜻蜓点水。", "marks": "较差"}
{"content": "看着书实在忍不了来豆瓣吐槽评论，怀疑各大网站对这本书的评分都是刷出来的。作为写了7年程序的看都觉得讲的不清楚，错误多，真不知道刚上手学的人怎么学这本书，实在太烂了", "marks": "很差"}
{"content": "有一些错误，最新编译不过的地方。但是看得出来作者比较用心，和其他的国产书不一样。", "marks": "推荐"}
{"content": "好书", "marks": "力荐"}
{"content": "说真的，这本书的作者真不行，语言表达十分有问题，这无形中加重了学习的难度。对了，我还去看了他的教学视频，真的毫无结构感，想到哪儿就说到哪儿。对于初学者不推荐这本书。", "marks": "较差"}
{"content": "入门好书？我表示超垃圾", "marks": "很差"}
{"content": "基本不发评论，实在忍不住了，必须找个地方吐槽。这本书实在是太烂了，讲的乱七八糟，完全没有逻辑。为什么豆瓣评分最低分只能是1分？", "marks": "很差"}
{"content": "入门好书", "marks": "力荐"}
{"content": "纸上得来终觉浅 须知此事要躬行 ^ ^  ", "marks": "还行"}
{"content": "浅显，排版不好，配图少，重点不明显，代码不高亮，不建议看", "marks": "较差"}
{"content": "coding while reading", "marks": "还行"}
{"content": "其实这个书不错", "marks": "推荐"}
{"content": "coding style的书。例子讲得太少。而且其实tab就是比空格好，作者不懂内在的逻辑。", "marks": "还行"}
{"content": "事实上还没看完，但这种书还是时候偶尔翻一翻，因为很多总结不是一下子看完就能吸收得了的，毕竟作者拥有10+年开发经验，而这本又相当于总结的散文集了", "marks": "还行"}
{"content": "看见帝老师在刷, 我就看看~~~ 看了一半,都是些老生常谈的东西", "marks": "还行"}
{"content": "翻译得稀烂！！！实在看不下去了，各位还是看英文原版吧。", "marks": "很差"}
{"content": "wwwwwwwwwwwwwww", "marks": "力荐"}
{"content": "读了一些基础，对后面学习Android有一定的帮助", "marks": "还行"}
{"content": "总的来说是一本不错的书。1.有点像headfirst的风格，可能比headfirst略难一点点，但是还是极其适合初学者的。2.时不时可以看到作者的一些美式小幽默。3.已经掌握或了解过一门程序语言的可以看更系统的教材，不至于浪费太多时间。4.之看完了前9章，后头3章和GUI之类相关的还没有看。留着以后需要的时候再学吧。5.出版社选纸太差，书的印刷有点问题，有一小部分不影响阅读的错字。如果这本书还有机会再版可能会改正吧。", "marks": "力荐"}
{"content": "WTF! 这本神书的评论居然少的这么可怜 我虽然是枚Rubyist 但是所有的Python的书 我只推荐这一本 为什么？ 太实用了 所有的概念和术语在一个一个“游戏”的制作中讲解的非常透彻，虽然游戏是弱，但是道理容易揉进去讲给你听 这难道不好吗 最近有点忙 有时间以后 我会po这本书的详细评论和笔记的！", "marks": "力荐"}
{"content": "入门神器", "marks": "力荐"}
{"content": "很好的入门教材，简单明了", "marks": "力荐"}
{"content": "只有我livewires不能用吗？", "marks": "很差"}
{"content": "琐事太多了，学的很慢。后来因为考试粥就还掉了（づ￣3￣）づ╭❤～才看了一半，里面的小程序都能自己写出来还蛮有成就感的。现在要学SQL啦，有机会再把后面半本的程序撸一遍吧", "marks": "力荐"}
{"content": "本书语句活泼，非常适合入门学习，不仅能学到Python的知识，更能培养编程的兴趣。以游戏作为引导和切入点。", "marks": "力荐"}
{"content": "入门神器，对初学者很友好，可能天生智商拙劣，入门书看了几本，从简明教程，像科学家一样思考……但都没有感觉，唯独这本，跟着书上一个个小游戏一路敲下来，倒是很有豁然开朗的感觉，特别是面向对象那一块，感觉挺好。最重要的是，一个个小游戏下来，能让知识对读者来说有一定的求知欲望。", "marks": "力荐"}
{"content": "我就是python的新手，这本书真的太好用了。在实践中理解的很快，不过课后的挑战程序有些我觉得很吃力，最重要的不知道自己写的是不是最快捷了，如果哪位大神能写个参考答案就好了，也能知道自己的思维漏洞。", "marks": "力荐"}
{"content": "入门神器,分章节学习,跟着实践走,上手快", "marks": "力荐"}
{"content": "有点老，错误也比较多，看的时候结合勘误吧：http://www.ituring.com.cn/book/1481", "marks": "还行"}
{"content": "开学时想借鸟哥的看看，发现版本太老，于是看到这本。内容很浅显，足以适合入门。还是 The Linux Command Line 好。20151022", "marks": "较差"}
{"content": "语言朴实 感觉诚意满满 有用 入门好教程", "marks": "还行"}
{"content": "不错的入门书，稍微浅显了，但是作为入门书足够了，一些命令介绍的很详细，剩下的修行还需要自己根据自己的需要去查。", "marks": "推荐"}
{"content": "以前对linux只知道一点点命令，从没系统学习过，这本书很棒，成功带我入门，感谢阿铭，五颗星，建议小白或者女友来", "marks": "力荐"}
{"content": "很棒的linux入门读物，贵在实用，可以当工具书来查，多谢阿铭！", "marks": "推荐"}
{"content": "刚开始读，看完再打分。粗略看了下，入门级教程，但是实战性很强。鸟哥的Linux私房菜不错，但是太厚了，看下去很难，这本书很薄，适合Linux接触不深的人群。\n\n花了2周 读完了 也跟着书上配置了下环境 网站有免费版(http://www.apelearn.com/study_v2/chapter1.html)是一本领你入门的书籍，需要多敲多想，准备继续读下鸟哥的那两本圣经～", "marks": "推荐"}
{"content": "简单易懂、但写作风格却也严谨且组织结构清晰，能兼顾到这两方面的入门书真的不可多得。作者似乎很懂初学者的认知程度，每个知识点的讲解都恰到好处，不追求大而全，而是“读者能理解到哪讲到哪（课后题也会对知识点做适当的拓展延伸）”，很优秀的“入门书”，个人觉得是“IT入门书”的写作方式典范。至于网上大把人推荐刚入门Linux的人去看“鸟哥”的书，真的没法理解，有考虑过刚入门的人的“学习认知曲线”吗.... “鸟哥”的书确实大而全，但大而全往往几乎意味着——不！适！合！入！门！  这本刚刚好，推荐！", "marks": "力荐"}
{"content": "让小白和女友都能轻松学会的linux教程", "marks": "力荐"}
{"content": "看完能用，像操作手册", "marks": "还行"}
{"content": "Python Scripting for ArcGIS的翻译版本。", "marks": "推荐"}
{"content": "20150817在读，20170918读过", "marks": "推荐"}
{"content": "目前比较专业的中文资料", "marks": "推荐"}
{"content": "书挺薄的，有ArcGIS和Python基础的话1、2就可以看完", "marks": "推荐"}
{"content": "这是什么破书，csdn真的没出过什么好的", "marks": "很差"}
{"content": "简单的了解了点程序员的工作", "marks": "还行"}
{"content": "偶然间在图书馆看到这本书，算是意外的收获吧", "marks": "推荐"}
{"content": "主要用来补足基础部分。末尾的SQL和FLASK还没看。", "marks": "还行"}
{"content": "这本书里用的是python2，没看完，python2和3语法稍有不同，建议看最新版。印象中逻辑教法，快速入门还是可以的", "marks": "还行"}
{"content": "发现新领域了；在新领域里发现前人的智慧了。\n好啊，好！", "marks": "推荐"}
{"content": "左右Unity3D 人工智能的入门书籍是非常不错的，讲的浅又不失广度，入门10分。", "marks": "力荐"}
{"content": "人工智能是一直是我比较喜欢的一个方向,而近年来很多3A大作的AI更是让人惊叹.这本针对Unity来讲解AI开发的入门书,虽然谈不上精品，用来对游戏AI有个整体性了解还是不错的。书中对于常见的AI知识点,如状态机,集群行为,A*寻路,行为树等都有对应的讲解。并附有实际代码,但是这本书对A*和行为树等知识更多是讲解插件的使用,而没有对原理深究.另外清华出版社上的相应源码下载也只有源代码,没有工程文件和资源。有了这些基础可以去看一些更深的书了。--2015年1月19日于北京", "marks": "还行"}
{"content": "把几个插件自己使使就搬到了书里，原理讲的还行。", "marks": "还行"}
{"content": "YII2入门非常不错", "marks": "推荐"}
{"content": "functional programming的标杆之作 。最赞的是，全部付有习题和解答，以及源代码（github上放着）", "marks": "力荐"}
{"content": "https://github.com/fpinscala/fpinscala", "marks": "推荐"}
{"content": "好书，清晰明了", "marks": "力荐"}
{"content": "看了前几章，暂停；scala还是偏复杂", "marks": "推荐"}
{"content": "不知道为啥不喜欢这本,任性..", "marks": "较差"}
{"content": "大开眼界！很棒的函数式编程入门书。我的笔记：http://facaiy.github.io/tech/2017/04/23/Functional-Programming-in-Scala.html", "marks": "力荐"}
{"content": "很赞，配套C站课程刷作业，喜欢这种老司机带你上路的方式，很好的入门指南", "marks": "力荐"}
{"content": "越看越不懂了", "marks": "推荐"}
{"content": "非常不错的函数式编程入门书籍，Scala 进阶书籍。再次证明了，Scala 并不是better java，而是一门全新语言。不过有些地方不太理解，准备找时间二刷此书。", "marks": "力荐"}
{"content": "作为programming in scala的进阶版正合适，逐一解决习题并对照Github上的答案绝对大有帮助", "marks": "力荐"}
{"content": "其实比较无聊", "marks": "还行"}
{"content": "两位作者都是数据科学家 但是技能上感觉像是算法组的某个数学高手突然得到了教授级别的Python功力那样 ... ；部分解释和代码有错 不过整体上还是很有诚意的一本书 示例都是作者认真挑选过的而且附上了不同实现比较的图表 完整的代码可以在github上找到", "marks": "力荐"}
{"content": "本书可以分成最后两章和其它……不过说来作者们的水平还是相当可以的", "marks": "推荐"}
{"content": "干货！", "marks": "力荐"}
{"content": "The last chapter alone is worth five stars", "marks": "力荐"}
{"content": "值得一看，python的性能本来就不高。但是还是要注意，能避免的劣化还是要避免。", "marks": "推荐"}
{"content": "难得将python高性能的好书", "marks": "力荐"}
{"content": "主题不错，都是别的书没有的，集群的主题更是，接近于实践级的而不是本入门教学类的书。", "marks": "还行"}
{"content": "#心灵鸡汤# 看一个男人的品味要看他的鞋子；看一个人的Python功底，要看他在项目中对类型验证的把控！", "marks": "推荐"}
{"content": "主要看了多进程那块，写的非常不错，重点突出，有翔实的例子，手动跑起来就能看到效果。 如果再加上官方文档一起阅读，能把知识了解的非常透彻。 ", "marks": "力荐"}
{"content": "纸上得来终觉浅 须知此事要躬行 ^ ^ ", "marks": "还行"}
{"content": "快速入门不错", "marks": "推荐"}
{"content": "快速入门很好用，但是官方文档更舒服。", "marks": "较差"}
{"content": "翻译的官方文档吧", "marks": "还行"}
{"content": "翻了一遍感觉就是赶时间将官方文档翻译了一下，标榜的SpriteKit和Flappybird只有最后几页内容，没有看到想看的语言本身的特色。附赠的网络课程也没必要看了", "marks": "还行"}
{"content": "本书语言较为流畅，但是书中代码的排版很差，另外是以Swift语言测试版为基础写的，书中的很多语法在当前Swift2.0中已经被废弃，不建议阅读本书，另外，书中谬误不少，除去字面错误，本书居然还有知识点讲解的错误，由以P120中的9.3.5中的方法的变异为代表。这是比较难以接受的，推荐两颗星，另外，最后的Flappybird没有给出源码。", "marks": "较差"}
{"content": "不好", "marks": "较差"}
{"content": "不错的入门书，内容少了点。如果是刚出的时候看，值这个价钱。后面一定会有更好的替代品。", "marks": "推荐"}
{"content": "出书过于心急，有很多知识点2.0都不用了，排版不好，还有很多错别字，冲着SpriteKit去看的，结果只有最后一章几页讲解了一下，后悔买了。", "marks": "较差"}
{"content": "看的是Oreilly上卖的Early Release的未编辑版本，但感觉已经非常棒，对iOS零基础的人学起来非常轻松，教学方法简单好记，swift的一些loop的语法也很简洁易用。纯粹为了好玩而学习，学得很哈皮!", "marks": "力荐"}
{"content": "入门教程，8章以后的地图等没有看，还无法理解，优点是 swift与app实践，这种方式挺好", "marks": "力荐"}
{"content": "面向初学者的书", "marks": "较差"}
{"content": "本书主要是面向初学者的，里面的代码都不难容易理解，主要是能够跟着代码写一遍最好。不建议大家购买，书里的代码感觉都是网上汇总的，去图书馆借就好。。。", "marks": "还行"}
{"content": "不错，可以作为参考的集子，着重解决功能代码才是本来应该干的而不是该死的用xx框架", "marks": "推荐"}
{"content": "2016.41 抄袭加东拼西凑的书，真是够烂的", "marks": "很差"}
{"content": "非常不错的一本JS方面的书", "marks": "力荐"}
{"content": "值得一读，内容很赞，有条理的总结", "marks": "力荐"}
{"content": "代码段很丰富，面试题很丰富，实战经验很丰富，绝对是最丰富的代码段类书。", "marks": "力荐"}
{"content": "mark", "marks": "力荐"}
{"content": "就冲这水军也要打一星", "marks": "很差"}
{"content": "表达不够精炼，作者应该是很罗嗦的人吧。国内技术书，写得好的，太少了。", "marks": "很差"}
{"content": "废话太多，使得论述中心很模糊。", "marks": "较差"}
{"content": "作者语文水平再好点就好了", "marks": "推荐"}
{"content": "如果去掉一些“胖哥认为”什么的，精简下这本书，可能会更好。也算涉及到了一些底层分析，可能作者的这种风格不太适合书籍，倒是蛮适合博客的", "marks": "还行"}
{"content": "有些内容还是不错的.不过语言略繁琐.可以精简下,一语道破最好了", "marks": "还行"}
{"content": "非常好的一本书，书中会提到一些平时不注意到的一些细节的技术点，语言比较欢快。其实更期待一些介绍中下册里要写的东西。", "marks": "力荐"}
{"content": "所谓Java的奇技淫巧=-= 感觉和 Java程序性能优化  性质差不多，但是讲的点有所不同", "marks": "推荐"}
{"content": "仅供查漏补缺。", "marks": "还行"}
{"content": "书是好书,内容也非常接地气,讲解了java中的io和多线程部分;\n但是作者的大段大段的废话严重拉低了读书的效率,博客风太重,语言读起来太难以理解.\n", "marks": "推荐"}
{"content": "一般Java程序员提高可看。但里面很多细节没讲清楚，废话太多。而且存在一些概念错误。关键是，好多错别字。", "marks": "还行"}
{"content": "顶多算一本及格的书，内容覆盖的还是比较全面，但作者语言工底实在不敢恭维，本来一个简单的知识点，作者绕来绕去，越绕越糊涂。", "marks": "较差"}
{"content": "涉及java基础核心，数据库，虽然浅析但抓住重点，容易理解", "marks": "推荐"}
{"content": "据说讲的很深入很细节", "marks": "推荐"}
{"content": "知识点还是不错的，跟科班书算个互补吧，值得刷一遍。", "marks": "推荐"}
{"content": "感觉这本书讲的还不错啊，尤其是是涉及到多线程中源码的讲解思想，还算不错。比自己干啃源码好多了…", "marks": "力荐"}
{"content": "讲到了很多细节。总觉得成书效果和作者的预期有差距。", "marks": "还行"}
{"content": "我只想说好.有些地方可能大家嫌啰嗦,但是我个人还是挺喜欢这种的.多一种思考的方式嘛.", "marks": "力荐"}
{"content": "全书风格像是有人在跟你闲聊java的一些东西，16年年初看的，自己已经不是小白了，跟休闲读物一样看完了，8个子概括：言之有物，有点啰嗦。", "marks": "还行"}
{"content": "读着还可以", "marks": "推荐"}
{"content": "这本书不能买，废话太多。也许作者很明白，但是杂七杂八的说不清楚。我今天从图书馆借来了都后悔了。。。", "marks": "很差"}
{"content": "很一般", "marks": "还行"}
{"content": "给比较熟练的程序员看的手册", "marks": "还行"}
{"content": "不如ruby元编程好，但可以作为工具书…", "marks": "推荐"}
{"content": "内容很基础, 相当于 Py 的学习手册, 大部头但看起来很轻松. 差就差在代码低级错误太多, 怀疑是中译版的问题, 让人怀疑出版社的人是不是妈的智障.", "marks": "较差"}
{"content": "很基础的一本书，可以过一遍之后当字典查\n", "marks": "推荐"}
{"content": "之后看了 《Ruby on Rails 教程》。\n\nhttps://railstutorial-china.org/", "marks": "力荐"}
{"content": "teach your self Ruby in 3 days。和斧头书有的一拼，章节编排也类似。", "marks": "推荐"}
{"content": "很适合入门阅读，里边略有些错别字，不过整体来说非常好读，基本上所有的细节都有所涉及", "marks": "推荐"}
{"content": "不错的入门书。但是内容没有涉及元编程", "marks": "推荐"}
{"content": "工具書而已，比「The Ruby Way」無趣多了。", "marks": "还行"}
{"content": "混个眼熟，不错的入门书。", "marks": "还行"}
{"content": "非常适合Ruby入门", "marks": "力荐"}
{"content": "适合入门，也适合当工具书", "marks": "力荐"}
{"content": "ruby入门书，鬼子写的书就是通俗易懂。。。", "marks": "还行"}
{"content": "相当于一本手册了，对于入门并不友好，还不如codecademy上的教程入门来得好，备查倒是可以的！", "marks": "推荐"}
{"content": "作为新手，看一遍然后放在旁边当工具书好了。", "marks": "还行"}
{"content": "前面几章过于简单，不过总的来说，是很好的ruby入门书", "marks": "推荐"}
{"content": "前面写得简明易懂，不过后面的章节就不怎么样了", "marks": "还行"}
{"content": "价格偏高，错误偏多，新手不友好啊，可惜了", "marks": "还行"}
{"content": "Ruby 的入门书", "marks": "力荐"}
{"content": "Ruby终于入门了", "marks": "力荐"}
{"content": "确实挺基础 因为Ruby和C语系差别很大 还是挺合适的入门书", "marks": "推荐"}
{"content": "风骚的ruby", "marks": "力荐"}
{"content": "入门教程还得看日本人", "marks": "推荐"}
{"content": "粗略的读完了！好的超乎预期，日本的东西很精致。我爱日本~", "marks": "力荐"}
{"content": "非常基础  适合入手和进阶", "marks": "推荐"}
{"content": "学Ruby的Pythoner，简单的看完前16章", "marks": "力荐"}
{"content": "Ruby于20th90s由日本人松本行宏开发，因此很多instance是日语。作为script语言，确实很简练，但是上手还需训练。这本书居然看了快4个月，确实有点晦涩。在国内还是有点冷门，没有好的图书和译作。聊胜于无吧。", "marks": "还行"}
{"content": "基础教程，仅仅是基础，可以作为一个手册来使用。", "marks": "还行"}
{"content": "手把手教学系列之一", "marks": "推荐"}
{"content": "怎么连4星都不到呢。", "marks": "力荐"}
{"content": "说实话，实在是太基础了。", "marks": "还行"}
{"content": "非常基础的一本书，有不少ruby的重要特性没有提到，适合ruby新手", "marks": "还行"}
{"content": "最初看的时候觉得很详细，但是越往后看越迷糊。需要配合其他的书看。", "marks": "还行"}
{"content": "熟悉一下常用类再回头看《元编程》", "marks": "力荐"}
{"content": "因为blog用到jekyll所以了解了一点关于ruby方面的知识。拿的朋友的事翻了翻。", "marks": "还行"}
{"content": "入门其实还不错吧。大概花5天时间看完之后，可以用ruby写一些小程序了，比如我写的终端版的2048：https://github.com/liuxueyang/Ruby_version_2048 整本书还是挺简洁，挺实用的吧。接下来要看ruby程序设计了。。", "marks": "推荐"}
{"content": "对得起”基础“二字，但有些细节讲得很含糊。非常适合入门，掌握一些基本功能，要仔细研究Ruby还必须看《Ruby编程语言》。", "marks": "推荐"}
{"content": "读的很快，说明matz设计时就让ruby很好入门，其实是还不错啦", "marks": "力荐"}
{"content": "同名书多 临时抱佛脚", "marks": "还行"}
{"content": "太浅，当入门知识点总结来看的", "marks": "还行"}
{"content": "这本书某种程度上可以当个Java入门导论，知识很全，从Java的基本知识都数据库到JavaWeb到数据结构等，但是都很浅，另外后面笔试题很多代码都不严谨缺少边界值的考虑。感觉这本书可以当程序员入门书籍。", "marks": "还行"}
{"content": "面试前翻下，还好", "marks": "推荐"}
{"content": "书中前半部分总结了java基础知识以及易错点，后半部分是数据结构与算法。自己注重看了基础知识部分，发现有些地方与java编程理想所讲内容有所出入。后半部分海量数据可参考july的博客，算法参考剑指offer，故未看。既然是面试笔试宝典，希望下一版增加计算机网络和操作系统的总结！", "marks": "还行"}
{"content": "虽然很浅，但是总结的很广泛，很基础", "marks": "推荐"}
{"content": "挺全面，知识点很多也很实用，考前抓点神书～", "marks": "还行"}
{"content": "书中前半部分总结了java基础知识以及易错点，后半部分是数据结构与算法、海量数据处理，写的非常好。满分推荐", "marks": "力荐"}
{"content": "纸上得来终觉浅 须知此事要躬行 ^ ^", "marks": "还行"}
{"content": "还不如另外那本翻译的官方文档…", "marks": "还行"}
{"content": "质量还是不错的，swift提供了一些不错的语言特性", "marks": "力荐"}
{"content": "在图书馆浏览了一遍，其实相当于稍作修改的中文版《The Swift Programming Language》，加上一个计算器的 toy app。", "marks": "还行"}
{"content": "讲的较浅,直接看官方文档应该更好.", "marks": "较差"}
{"content": "简单的介绍", "marks": "推荐"}
{"content": "太浅显，适合在校大学生初学编程那种人阅读", "marks": "还行"}
{"content": "《构建之法》链接汇总（含对应序号）：http://www.cnblogs.com/xinz/p/4470424.html", "marks": "力荐"}
{"content": "难得有国情的软件工程书，不过无论哪种形式的软件工程书都不像是让人打得起精神来的东西...", "marks": "力荐"}
{"content": "在生活中能不能锻炼PM的能力呢？当然可以，比如装修房子、组织一个大型活动、带自己的孩子、帮邻居家带三天孩子，等等。", "marks": "力荐"}
{"content": "可能是最接地气和适合中国学生的软件工程课本。", "marks": "力荐"}
{"content": "先来看看", "marks": "推荐"}
{"content": "软件 = 程序 + 软件工程，这本书对于软件工程的方方面面：需求、设计、开发、测试、团队协作以及个人成长等都有所涉及且内容简洁、精炼可以很轻松的一口读完，不过读过了，还要亲自动手实践，这样才能够内化为你自己的知识，很值得多读几次的好书。", "marks": "力荐"}
{"content": "此类书中看过最好的一本", "marks": "力荐"}
{"content": "还挺有趣的，有种“专业书终于说人话了”的感觉。", "marks": "推荐"}
{"content": "涵盖知识面非常广的一本书，也许不那么细致，但是觉得理清了软件工程的方方面面，非常有借鉴和指导价值。对于为接触过正式软件项目和流程的人来说是一本得以认识软件工程的经典，对于已经在软件行业摸爬滚打过的人来说也是一部可以 用来检验自身和公司实践的佳作。本书时候工程师，设计师，产品甚至几乎所有和软件产品相关的人和对软件产品的流程感兴趣的人。", "marks": "力荐"}
{"content": "很多方法和理念很好，可操作性强", "marks": "推荐"}
{"content": "讲的很不错，配的例子生动有趣，也遍历了包括敏捷在内的现代软件开发模式。挺适合高校作为教材的，可惜了。", "marks": "力荐"}
{"content": "干货极多！强力推荐。。。所有干工程项目的都可以读一读", "marks": "力荐"}
{"content": "接地气，但是深度不是很够，不过这种表达比较适合读下去，可能是相对不空洞的讲述方式了吧", "marks": "推荐"}
{"content": "挺实用的一本书，学习现代软件工程很不错，但若想用其作为过程实践指导则还嫌内容不够具体化。通过人物故事的形式将知识点介绍出来，理论学习起来不枯燥，阅读性强。", "marks": "推荐"}
{"content": "野生程序员见到了正规军打法，但是因为没有实践，所以只是快速过了一遍，虽说如此但是收获依然不少", "marks": "推荐"}
{"content": "内容很多，对于未走出校园的我来说短时间内难以消化，有些地方不够详细，有点像上课用的讲稿了。不过前面几章做科普还是不错的，感觉自己软件工程白学了。", "marks": "推荐"}
{"content": "如果软工的课程用的是这本书的话，我当时一定会把它读完的，即便是在一家敏捷化程度较高的公司工作了几年，读到书中的第五章团队与流程，第12章用户体验，第16章创新，第17章职业道德时，仍然是有些许收获的，测试那张也很有趣。\n本书的内容通俗充实，贴近实际，而且讲述的道理都比较客观，没有走极端，如对于敏捷的看法。如果该书有下一版，我有如下的几点建议：\n1. 将MSF放在最后作为参考阅读，毕竟这个只是微软内部的实践，不见得是最佳实践；\n2. 加一些关于Lean的内容，可以挑37Signals, Zappos作为例子；\n3. 加入持续交付/部署的介绍\n本书如果要作为教材，配合实际的项目学生感受会更深刻些。\n最后，深深的觉得，软工这门课程，作为学校至少应该邀请一些经验丰富的开发人员去做些分享。", "marks": "力荐"}
{"content": "挺有趣的，说了不少大实话。因为是面向学生的书，所以比较宽泛，不太涉及具体技术。", "marks": "推荐"}
{"content": "非常不错的软件工程书，生动活泼，让人重温，除了开始上来就提到测试有点怪，别的都不错。", "marks": "推荐"}
{"content": "转行做软件开发人员了.", "marks": "力荐"}
{"content": "最后一章很有意思，其实是本纯教材；不建议有相关工作经验的同学购买。", "marks": "还行"}
{"content": "里面基本没讲任何编程技巧，和之前软件项目工程那本书有点像。讲的是团队配合，市场竞争思路", "marks": "推荐"}
{"content": "非常不错的入门教科书~", "marks": "力荐"}
{"content": "胡乱吞枣，有收获。", "marks": "推荐"}
{"content": "贴近现代实践的软件工程教材", "marks": "力荐"}
{"content": "看到了一些工作的真相，但写得太教材化了，不太喜欢", "marks": "推荐"}
{"content": "适合初学者", "marks": "还行"}
{"content": "仔细体会一下还没有得到的东西", "marks": "推荐"}
{"content": "今年终于看了本专业相关的。赞一个。", "marks": "力荐"}
{"content": "系统而有洞见，而且接地气，让读者由衷地乐意与作者共同工作，佩服邹欣老师", "marks": "力荐"}
{"content": "包含从设计、开发、测试、发布、绩效考核方方面面的内容，相当易读", "marks": "力荐"}
{"content": "讲软件工程、开发流程方面的好书，与时俱进。更偏向于教材，翻一遍还是不错的", "marks": "力荐"}
{"content": "按照叫教材来设计的，没有加入互联网行业的许多方法论，不够好。", "marks": "还行"}
{"content": "语言风格很不错", "marks": "力荐"}
{"content": "软工里，这个够接地气的了", "marks": "力荐"}
{"content": "说人话的软件工程，看得出作者有实际开发经验。学校的教材可以扔掉了", "marks": "推荐"}
{"content": "准备开始第二遍精读", "marks": "力荐"}
{"content": "基本术语都会有浅显的解释，入门好书，作者是位好老师。", "marks": "推荐"}
{"content": "看了几章，内容还不够深入，应该比较适合初学者，每一章最后都有很多参考资料。", "marks": "推荐"}
{"content": "软件工程开发流程。灰蒙蒙。。。用上东西。。。不多啊。。。坐等忘 scrum", "marks": "还行"}
{"content": "读完之后感觉软件工程牵涉太广了，而且不实践一下，可能一个月以后就忘光了。。。", "marks": "推荐"}
{"content": "诙谐、透、与时俱进。", "marks": "力荐"}
{"content": "软件工程入门书，简单介绍了从需求、分析、设计、开发、测试、到产品发布的流程，着重学习了需求分析和PM应当关注的点。写法简洁、举例风趣，看着不累。内容范围较广、不过并不深入，只是表面的了解，适合软件专业大学生或其他专业的行业从业者。", "marks": "还行"}
{"content": "基本的软件工程，有些实战的分享", "marks": "推荐"}
{"content": "非常值得一看，很全面，很多经验性知识", "marks": "力荐"}
{"content": "好书，通读了一遍，没有什么实践，但是仍然收益匪浅。感觉码代码的能力还不够，现在努力练习如何将算法快速实现，减少低级错误。多写写算法的习题，将语言这种低级能力化为本能之类的东西。我还会再回来看这本书的。", "marks": "力荐"}
{"content": "15/08/28 现在想想,作为初级程序员的我,并不适合读完之后对整体开发有了整体认识，我这种水货程序员感觉有用；其中5、8、9、10、12章  不是程序员的观看也很有帮助，要是学校有这种质量的书当教材，感觉学习效果会更好一点", "marks": "推荐"}
{"content": "了解下微软的软件工程过程。", "marks": "推荐"}
{"content": "用的材料新。部分讲解举例啰嗦。", "marks": "还行"}
{"content": "写的好好一点不像教材 很全面实用又通俗易懂 适合入门", "marks": "力荐"}
{"content": "当做教科书的原因，有些描述稍显拖沓，但各方面的内容都讲到了，帮我理清了一直没搞懂的软工概念", "marks": "推荐"}
{"content": "学《软件工程》，可以把课本扔了读这本，或者先读这本再读课本。", "marks": "力荐"}
{"content": "很不错的软件工程类书籍，可能学校里体会不深，实习工作了会很有帮助！", "marks": "力荐"}
{"content": "软件工程方法论，思维方式提升，开发过程的理解", "marks": "推荐"}
{"content": "算是非常接近实际开发的软件工程教材了", "marks": "推荐"}
{"content": "邹老师出品必属精品", "marks": "力荐"}
{"content": "课本风格，介绍的工具很多是微软那一套，但是总觉得不适合新手看，比较适合野路子出身的、经验丰富的程序员。", "marks": "推荐"}
{"content": "与平时上的软件工程课相差很多，更具体了解了在公司一个项目的流程，不那么假大空了。里面的博客文章没有细看。这本书值得反复读。", "marks": "推荐"}
{"content": "我知道很多人看这本书都有一种相见恨晚的感觉。坦率讲，如果你没有在一些实际问题上遇到通点，这本书依然与其他软工的书一样对你无用。很幸运，我在当前阶段有空间和实际的问题去实践和校准书上的这些方法。", "marks": "力荐"}
{"content": "一本很实际的软件工程，国内出版少有的优质资源", "marks": "力荐"}
{"content": "无聊，适合完全没项目经验的看看", "marks": "较差"}
{"content": "读来有点浪费时间", "marks": "还行"}
{"content": "都是大实话", "marks": "力荐"}
{"content": "发现软工的书已经读到有些冗余了，该是重读了吗？", "marks": "推荐"}
{"content": "软件工程理论大观。有不少可以直接拿来用的方法，但要用好也不是易事。", "marks": "推荐"}
{"content": "正三冠的好书", "marks": "力荐"}
{"content": "不喜欢这种叙述方法", "marks": "还行"}
{"content": "的确更接地气", "marks": "推荐"}
{"content": "邹老师的软件开发经验和水平自不必多说。但我始终不习惯这种写童话故事似的技术书籍。阅读体验往往变成了在一大堆技术人员写的人物对话中去寻找那些可能对我有用的知识。", "marks": "还行"}
{"content": "书里面的例子，让我结合自己的经历理解起来更容易。", "marks": "力荐"}
{"content": "太棒，一口气读完，写得接地气，内容有趣不空洞", "marks": "力荐"}
{"content": "没有看过国内的其他软件工程的书，所以也无从比较，但我一直认为书首先要好玩才能吸引读者。能把一门学问说得深入浅出，果然非行内大家不能及也。", "marks": "还行"}
{"content": "多希望自己在学校学习软件工程的时候用的是这个教材。有了工作经验回过头再看这本书，才发现软件工程是一门在学校学习时重要性被忽略的专业课。", "marks": "力荐"}
{"content": "对初学者来说，确实是不错。但也仅限于此，启发性不大。。。", "marks": "还行"}
{"content": "过于简单", "marks": "还行"}
{"content": "还是得多实践！", "marks": "推荐"}
{"content": "真的挺无趣的一本书，尽管作者很努力地让它显得有趣。感觉没学到什么东西……", "marks": "还行"}
{"content": "写的不错，属于少见的写的平实易懂的软件工程基础教材，值得在图书馆借回来认真一读", "marks": "推荐"}
{"content": "看了前六章还不错，后面没怎么看", "marks": "推荐"}
{"content": "通俗,接地气地将软件工程的基本流程进行描述", "marks": "推荐"}
{"content": "关注“软件工程师的成长”，“敏捷流程”，“人，绩效和职业道德”这几章，作者写的不错，但感觉谈的比较少", "marks": "推荐"}
{"content": "通过此书相对系统地学习软件工程，有干货，有趣味，内容丰富。", "marks": "力荐"}
{"content": "这是一本软件工程方面的好书，尽管作者有很强烈的传教意愿，但是书中的内容还是很有启发意义。", "marks": "推荐"}
{"content": "接地气，阅读也轻松，微软哥们还是给行业贡献不少", "marks": "力荐"}
{"content": "试读部分挺有意思的。", "marks": "推荐"}
{"content": "比起枯燥的《软件工程导论》教材读起来舒服不少。", "marks": "推荐"}
{"content": "软件工程中流程介绍，详细内容还需扩展来看。结合具体实践才知效果如何", "marks": "推荐"}
{"content": "算是比较好的软件工程的书了，比我当时学的一本强了很多。", "marks": "推荐"}
{"content": "很早就知道这边书，抽空了一天，好好看完，评价如下。\n\n1个人认为这本书比较适合教材教书使用，毕竟许多知识还是点到为止，最好有人指导看，当然指面对初级的工程师。\n2本书较为系统，由于有多年开发和团队管理经验，所以许多知识都有感觉，因此较为适合我平常当做工具翻一翻。\n3邹欣老师的书少了许多枯燥，多了些平易近人，看起来较为没有压力。\n\n由于本书案例是.net，计划自行改为php，把书本知识点变为PPT课件，内部培训使用。", "marks": "推荐"}
{"content": "国内难得一见的软件工程好书了，不容易", "marks": "推荐"}
{"content": "软件工程的教材，写的很生动，但还是难改软件工程类书的让人没兴趣。通篇看完了本书，软件开发的整个流程都涉及到了。对于学生来讲，可以一看，算是科普，对于工作的人来说，看了也白看，大点的公司工作流程就是这样的，小公司流程不规范，看了也没用。总结:刚毕业的学生，最好先去大公司，做好入门。", "marks": "还行"}
{"content": "好读书，不求甚解。一天一章看完了，对软件工程的了解就是这样了......", "marks": "还行"}
{"content": "总的来说，这是一本让我不断猜想“啥时候才能扯完蛋正经谈软件工程”的书，然后直到看完募然回首发现软件工程课已经讲完了…", "marks": "力荐"}
{"content": "易于阅读，并且可实践，但目前我还无法判断效果的好坏", "marks": "推荐"}
{"content": "读了差不多一半，感觉还是先读读算法之类的回报比较快。这本书不错，剩下的以后再读。", "marks": "推荐"}
{"content": "大概翻完，读起来轻松有趣，只是很多对我现在没什么意义。", "marks": "推荐"}
{"content": "软件工程入门很不错的指导书", "marks": "推荐"}
{"content": "一盘散沙，没有主线，泛泛而谈，也不知道为何评分这么高。差。", "marks": "较差"}
{"content": "重拾软件工程思想，要知行合一", "marks": "力荐"}
{"content": "还是比较偏理论吧", "marks": "推荐"}
{"content": "选择好书最有效的方法之一就是选对作者，像邹老师这样经验丰富的大师，一本书的价值已经顶我做几个项目了。书中引用了很多比喻，一针见血，把软件工程的本质讲述得清楚明白，力荐！", "marks": "力荐"}
{"content": "适合学生学习，然而对一些有根深蒂固诟病的企业来说没有办法改变", "marks": "推荐"}
{"content": "传统的软件工程思想，略过时", "marks": "还行"}
{"content": "全都是启示", "marks": "力荐"}
{"content": "可以拓展知识面", "marks": "力荐"}
{"content": "思路清晰，结构合理的一本好书", "marks": "力荐"}
{"content": "很不错的一本软件工程类的书，让人能从头读到尾的书，如果配合课堂教学就更好了~值得推荐", "marks": "推荐"}
{"content": "废话太多，建议的阅读方法是快速地全书过一遍，然后精读感兴趣的部分。", "marks": "还行"}
{"content": "比较基础，适合本科生阅读", "marks": "还行"}
{"content": "提高程序员眼界的一本书~~从软件生命周期的顺序来讲，通俗，而且有很多很实用的建议", "marks": "力荐"}
{"content": "一本不枯燥的软件工程书籍，工作后翻阅依旧会有收获", "marks": "推荐"}
{"content": "就是把原来的博客文章整在一起把软件项目的过程走了一遍，一些工具和方法还是比较好。\n感叹一下微软的水平就是高，项目里能够花的钱就是多，能够找到的人也是好，自己公司的项目还是根据实际情况来做，不能强求。", "marks": "推荐"}
{"content": "比学校里的软件工程课本好读到不知道哪里去了", "marks": "力荐"}
{"content": "这本书适合采用“通读”的方式进行阅读，作者较为完善的介绍了软件工程的整个流程，尤其是产品新人，通读之后将会软件开发的整个流程有更进一步的了解，包括需求分析、项目管理、软件开发、测试、发布等。其中还介绍了敏捷开发、绩效管理等方法，让产品新人对软件开发能有一定性的了解，还是值得一读", "marks": "推荐"}
{"content": "软件工程部分不枯燥，读着很有趣", "marks": "力荐"}
{"content": "我读过几乎所有软件工程教材。相比之下，邹老师这本《构建之法》不仅写得有血有肉，而且是我读过最好懂的软件工程书。一般的软工教材为了追求更广更久的接受度，在内容采纳上趋于保守，这也意味着落后实际2-5年。而这本书则十分贴近当下，是汇聚了邹老师多年实战经验的精华。尤其是书里的一些评论十分精彩，讲了很多软件工程教材没有讲清楚或不敢讲的事。这本书有很多干货，是一本让人读后有满足感的好书！ 强力推荐！\n", "marks": "力荐"}
{"content": "总觉得吧，没有评论说的那么神", "marks": "推荐"}
{"content": "很不错的学习软件工程的教材，力荐", "marks": "力荐"}
{"content": "姜jun分的书里的一部分，这本应该还在李hai东那里，算送出去了。自己没怎么看", "marks": "推荐"}
{"content": "挺好", "marks": "推荐"}
{"content": "就是不一样。", "marks": "力荐"}
{"content": "很好", "marks": "力荐"}
{"content": "如果你是一个新人，入门读物还是可以的。如果在程序猿的行业已经混了几年，那还是看点别的吧。有段时间，这本书就放在工作台旁边，先来无事就翻翻，真觉得没什么内容。豆瓣居然给评到8.6分之多。赶紧评价下。", "marks": "还行"}
{"content": "想要购买护肤品的找我。品种多多", "marks": "力荐"}
{"content": "构建之法，移山之道。用计算机的严谨和软件工程的逻辑去构思", "marks": "力荐"}
{"content": "不错哦！", "marks": "力荐"}
{"content": "想看", "marks": "力荐"}
{"content": "实力+品质出版", "marks": "力荐"}
{"content": "第二本清华出版的樱桃书，非常推荐，作者写案例有比较幽默的段子风格，不止对h5 和c3有详细的基础功介绍，还有第二部分的开发实战，很受用，适合有基础的开发者使用。", "marks": "力荐"}
{"content": "看前三章即可，后面的章节感觉都是举例子充数了...", "marks": "还行"}
{"content": "真的很难读啊 翻译的不好。", "marks": "很差"}
{"content": "代码缩进排版太差，否则必须五星！", "marks": "推荐"}
{"content": "单元测试算是今年比较关注的一个主题，内容还算不错。就是语言写的是C#。没太能理解。", "marks": "推荐"}
{"content": "有一定的测试经验再读会稍微好一些，一直想给一个项目加单元测试，一直没有加，明天加一下！", "marks": "还行"}
{"content": "细读前3章，粗读后面。", "marks": "还行"}
{"content": "提出了优秀的单元测试的几个要点以及单元测试臭味的几个方面。", "marks": "推荐"}
{"content": "有时候离优秀只差一本好书。作者一定是这个领域的专家，各个话题游刃有余。", "marks": "推荐"}
{"content": "所有程序员都知道应该做单元测试！很不错的入门书，哪怕那是用C＃写的案例代码，和java又有多大区别呢？ 哈哈", "marks": "力荐"}
{"content": "保持代码可测性，不能依赖测试来证明程序正确性", "marks": "推荐"}
{"content": "理论性还是比较强的，个人感觉对编程功底尤其是面向对象的理解有一定要求。想写出好的单元测试还是蛮不容易的，配合测试驱动开发实践效果更佳。要说缺点就是没有真实项目示例，有些东西可能看得似懂非懂", "marks": "推荐"}
{"content": "非常不错的关于单元测试的书。尤其是对于单元测试的命名，Mock对象的使用，面向可测试代码的设计。", "marks": "力荐"}
{"content": "英文版太贵，中文版有些看不懂，希望是跟翻译没有关系。在豆瓣上写这类书是不是不太好。", "marks": "推荐"}
{"content": "勉强算是读完了吧，以后也懒得碰了。书很烂，要么就是介绍安装配置，要么就是贴代码。并没有深入介绍Hadoop的系统设计（介绍的也都是官方文档上的内容），不利于读者理解。另外，Hadoop一代已经过时了啊，Intel的Hadoop发行版已经放弃维护了吧？", "marks": "较差"}
{"content": "推荐研究生看看", "marks": "力荐"}
{"content": "14年的书，觉得大数据之类的书应该是越新越好。不是计算机专业的，只能粗略的看，步骤详细，可以跟着做做的样子", "marks": "还行"}
{"content": "随便翻了下~", "marks": "还行"}
{"content": "如果你写过几年代码，熟练运用多门语言，这本书不适合你；如果你到目前为止只写过一门编程语言的代码，或者你对编程刚刚入门，那么花上一天时间读一下这本书会有很多帮助。", "marks": "推荐"}
{"content": "\n如果你是计算机专业大一的学生，刚接触一门编程语言，如果你是非计算机专业，但是已经可以编程，但不了解编程语言背后的概念，那么这本书还是很值得看的。它把编程语言的外衣解开，把骨骼，血管和神经解剖给你看。\n\n如果你已经学习了计算机专业的其他课程，或者了解了编程语言的实现，那么这本书可以作为了解编程语言发展沿革，不同编程语言有哪些不同的选择的一本科普读物。\n\n2015年3月10日购于亚马逊（豆瓣怎么把短评和附注搞一块去了？）", "marks": "还行"}
{"content": "常识科普 期望值不要太高", "marks": "还行"}
{"content": "加深概念，还不错。低级勘误不能吐槽...（版权信息请居中好吗？）", "marks": "推荐"}
{"content": "虽然实际讨论的内容并不丰富，不过在一本薄薄的小册子里能够做到涵盖语言设计的核心要点且行文流畅、引人入胜，也是作者功底的体现。本书适合作为学习编译器原理前的开胃菜。", "marks": "推荐"}
{"content": "CS 🎓的就略过吧，都是常识... 和代码之道完全不是一个级别的，感觉有收获的可以接着看 Ruby 之父《松本行弘的程序世界》还有《七周七语言 : 理解多种编程范型》", "marks": "还行"}
{"content": "刷了一下午知乎，不过还是紧赶慢感把这本书看完了。这本书是讲编程语言设计的思路和原则的，可以和语言具体的实现(语法、程序风格等)互相印证。还是很不错的，值得一看。", "marks": "推荐"}
{"content": "轻小说一般的科普书......", "marks": "力荐"}
{"content": "不懂。", "marks": "还行"}
{"content": "手贱点了预约，今天顶着烈日走去图书馆拿了这本书。可能是翻译的原因，有点看不下去。", "marks": "还行"}
{"content": "这书名字虽然恶心，但是还真是不错", "marks": "推荐"}
{"content": "以内存 汇编理解计算机编程语言的一些概念\n略简短\n", "marks": "力荐"}
{"content": "programming", "marks": "推荐"}
{"content": "读书研究的好方法", "marks": "推荐"}
{"content": "好书，需要多看几遍", "marks": "力荐"}
{"content": "看了三遍 雾水 雾水 豁然 ", "marks": "力荐"}
{"content": "内容很浅，广度还成。", "marks": "推荐"}
{"content": "写的有点太浅了", "marks": "还行"}
{"content": "比较简单，通识书~", "marks": "推荐"}
{"content": "编程之美上承希腊哲学思想，用简洁的语言描述世界的运行", "marks": "推荐"}
{"content": "历史总是惊人的相似，借本书尝试一窥程序语言的真髓吧！从历史发展轨迹来一步步探讨从原始较底层且功能有限的语言是如何进化成为当今流行的现代语言，很多看似必须的特性都是后来逐步被添加进编程语言中的，不想被编程语言语法糖掩盖本质的各位可以一读，200页的小册子很袖珍很易读", "marks": "推荐"}
{"content": "定位看不懂系列。然而书内容其实还行", "marks": "还行"}
{"content": "旁征博引的一本书，前面看的较仔细，后面速翻了一下。有待二周目。", "marks": "力荐"}
{"content": "说简单和科普的那些, 有多少个是自己写代码思考为什么这样使用语言特性, 以及设计缺陷的", "marks": "力荐"}
{"content": "日本人好像写这种入门书比较拿手。通俗易懂，广度不错，涉及的知识点都很重要。不过这本书不是面向编程高手的，如果已经熟悉几门编程语言并且了解其中的机制，就没必要看了。", "marks": "推荐"}
{"content": "不错！", "marks": "推荐"}
{"content": "挺好的一本书", "marks": "推荐"}
{"content": "挺不错的一本基础入门书。美中不足的是勘误……", "marks": "推荐"}
{"content": "不错的科普书，把各种语言放在一块进行比较，讲的也很浅显易懂，不过我水平有限没全看明白。", "marks": "推荐"}
{"content": "应该都是挺基础的东西，不过有的内容还是得 有多语言的体验才能看得明白。\n后面关于类的历史和观点挺有启发的。", "marks": "推荐"}
{"content": "这本书还是有些过于简单了，很多问题讨论的并不深入。不过这本书的讨论形式还是让我有些收获。作者关于多种编程语言的比较，直指一些编程语言概念的根本目的，让人能抛弃一些理所当然的狭隘观点，例如关于面向对象，类，还有动态类型语言的讨论。另外这本书是在亚马逊上购买的，能在北美亚马逊上直接买到中文书还是蛮方便。", "marks": "还行"}
{"content": "额，太入门了...基本就是常识，应该给新手看。四星是给娓娓道来不装逼的", "marks": "推荐"}
{"content": "通识书，非常适合初学编程者学习语言时配合阅读。涉及具体要点不多，但多是微言大义", "marks": "推荐"}
{"content": "计算机语言的笼统介绍书，似乎由小品短文组成。看完后，对作者对js是健值语言的判断很有印象", "marks": "还行"}
{"content": "作为休闲读物来说还算不错。上下班地铁上很快就读完了", "marks": "推荐"}
{"content": "科普的书", "marks": "还行"}
{"content": "入门大法好，还额外赠送入门学法。。", "marks": "推荐"}
{"content": "泛泛", "marks": "还行"}
{"content": "适合非计算机专业阅读，易懂", "marks": "力荐"}
{"content": "定位是个问题，这些内容不适合初学者，而懂一点的又没啥学习价值", "marks": "还行"}
{"content": "编程科普书籍，从语言的设计原理角度阐述", "marks": "还行"}
{"content": "欲看龙书撞墙之前，请先读此书。最近看了不少日本人写的编程的书。\n", "marks": "力荐"}
{"content": "小而全，对于接触语言不多的人还是可以的", "marks": "还行"}
{"content": "太浅了", "marks": "还行"}
{"content": "比起“语言”像是生动的“语言学”一样的科普读物，没吃过肉，先尝骨髓。", "marks": "推荐"}
{"content": "作为只会C的辣鸡到后面的面向对象看得云里雾里，从此书开始立下flag，学编程的路坚持坚持再坚持", "marks": "推荐"}
{"content": "通俗易懂、开阔眼界的好书。从中知道了 green thread、Mix-in 等概念。加深了我对 OOP 的理解。今后也应该关注日本科技作者的书籍了。", "marks": "力荐"}
{"content": "对理解编程语言设计的起源于理解有所帮助", "marks": "力荐"}
{"content": "由浅入深的讲到了各种语言的特性为什么会发展到现在这个样子。让我们不仅知其然，也知其所以然。我觉得要是和《七周七语言》对比看看，就更完美了。", "marks": "力荐"}
{"content": "内容很基础，刚入门编程时可以看看。书名起得有点大了，书中有些地方挖得也不够深，而且并没有什么独到的见解。另外，书中有几处明显的翻译错误。", "marks": "还行"}
{"content": "语言基本概念的深度探索", "marks": "推荐"}
{"content": "编程语言的核心概念每天都在应用，却不知道其实也是经过进化而来的。了解这些概念的来历，不错。", "marks": "推荐"}
{"content": "还行吧，有小部分地方，特别是前半部分的一些章节对我确实是有启发，后面的就都是老生常谈的东西了，没看出什么感觉，3.5星", "marks": "还行"}
{"content": "通过对多种语言之间的差别来阐述编程中的基本概念", "marks": "推荐"}
{"content": "值得一看。", "marks": "力荐"}
{"content": "概念讲得通俗易懂。有用。", "marks": "力荐"}
{"content": "最后两章对象与类、集成与代码再利用很多看不懂。不过总的来说学到不少。", "marks": "推荐"}
{"content": "写了不少语言特性，但是都不太深入。", "marks": "还行"}
{"content": "到底还是纸版阅读体验更好\n再读读", "marks": "力荐"}
{"content": "这只是一本通识读物，配不上那么高大上的书名。不过有些部分还是可以的，解释了不少我所不了解的内容。\n\n", "marks": "还行"}
{"content": "语言概念的科普文，挺不错的~", "marks": "还行"}
{"content": "从历史发展取舍和多语音横向对比来讲述编程语言中的基本概念，可以在某个闲暇的下午快速浏览一遍。", "marks": "推荐"}
{"content": "这本书的定位有点奇怪，非常基础的编程科普，却又要求读者了解数门编程语。但是既然已经了解数门编程语言了为什么还要回去读这种基础科普呢？当然书还是不错，这是因为这个奇怪的位置似乎没有其他书可以作为衡量标准。", "marks": "推荐"}
{"content": "不错的入门书。真正的深入浅出，乍读觉得自己什么都会。认真读一读后，还是会有很多收获。作者最后的话很有道理，多关注What和Why而不是How。这个思想也贯穿本书，先提出程序语言设计中遇到的问题，再介绍各个语言的解决方案，如果能紧跟作者节奏去思考，一定会有不少收获。本书的目的绝不是简单介绍各个语言的语法特性，而正因如此，反而更让人容易理解各种语法特性。我不得不收回我说的第一句话了，作者刻意从简单的概念讲起，很容易让读者觉得没有干货。如果你真觉得它是入门书，要么是你的水平太高，要么就是还没有真正读懂。", "marks": "推荐"}
{"content": "没什么用,但同意”在比较中学，在历史中学”", "marks": "推荐"}
{"content": "不愧其名，对每个主题的描写都可谓句句见血，直击本质。读后有种相见恨晚的感觉。", "marks": "力荐"}
{"content": "适合初学者 完全没多少有价值的内容 有点太标题党了", "marks": "还行"}
{"content": "看完了，就忘完了。", "marks": "力荐"}
{"content": "难得不仅是会某个东西，而是把会的东西嚼烂了让牙口没那么好的人也能品尝到美食。可以看出作者是一个善于思考的人，写出了这么一本形象生动，对于非科班程序员和编程初学者很有帮助的书。", "marks": "力荐"}
{"content": "简单介绍了很多编程语言的基本概念，里面对于同一概念多种语言的比较很有意。", "marks": "还行"}
{"content": "面对编程语言中的常见概念，不同的语言有不同的理解和处理方式。", "marks": "推荐"}
{"content": "不如称为通用语言编程思想吧！很适合新手们作为入门书籍。", "marks": "力荐"}
{"content": "内容比书名好系列，翻译不错，如果想了解编程技术的演化史，这是一本不错的书～", "marks": "推荐"}
{"content": "去年读这本书时，我只会c语言，看的一知半解。现在再来看这本书，感觉懂了很多。这本书很适合用来回顾、归纳知识用。", "marks": "推荐"}
{"content": "一个下午慢慢看完了，深入浅出，有些概念解释的很独特。", "marks": "推荐"}
{"content": "专注于编程语言的通识读本，适合对若干编程语言有基本了解的人阅读，编辑错误太多", "marks": "还行"}
{"content": "虽然我在编程方面还是个辣鸡，还是觉得这本书很浅。。。", "marks": "还行"}
{"content": "对于各种程序设计语言的特性进行了较为精炼的描述，对于语言的特性、各种语言的设计都进行了大致的介绍，确实很能开阔视野~另一方面，有些理解确实加深了，比如委托的概念，之前在C#中学习感觉实在有些朦胧，本书用Java演示了一下，就清晰多了~", "marks": "推荐"}
{"content": "通俗易懂的科普书", "marks": "推荐"}
{"content": "感觉等我懂得多一点的时候可以再读一次", "marks": "推荐"}
{"content": "I love the book!", "marks": "力荐"}
{"content": "犹如读小说般品着，还是不错的。计算机程序设计原理的介绍", "marks": "推荐"}
{"content": "本书首先讲了如何深入高效地学习程序设计语言 ，探讨了程序设计语言是如何产生的。接着介绍了和程序设计语言相关的各种概念，讲概念时，作者不会以某特定语言为叙述前提，他会将几种语言作比较。“培养对不同语言都适用的理解能力，是非常重要的。 ”\n\n我想的是，如果我上学的时候或者最初工作的时候读到这本书，会不会对编程产生浓烈兴趣？跟学校老师的“实用性”讲解风格不同，作者会讲到语言设计者为解决何种问题而创造了这种语言，或者某种功能，这对语言学习非常有帮助。感觉理解更透彻。", "marks": "推荐"}
{"content": "写了这么久代码，还多时候都是知道怎么实现功能，对语言的设计的缘由并不了解。本书在深度上并没有太多展开，但是引出了许多有趣的话题。", "marks": "推荐"}
{"content": "巩固基础的一本书。", "marks": "推荐"}
{"content": "介绍了各语言之间的共通点, 让人理解了编程语言的精髓, 娓娓道来, 意味深长", "marks": "力荐"}
{"content": "从宏观上了解编程的原理和设计的动机", "marks": "力荐"}
{"content": "专注于讨论why。", "marks": "推荐"}
{"content": "比较不同的语言，对比中发现精髓", "marks": "推荐"}
{"content": "光看书名，还以为是讲如何写出牛逼代码的。不过内容主要讲了一门编程语言的各个考量点，对比了很多过去、现在的语言，讲解了为什么这样设计、不同语言它们是怎样设计的。科普版的编译原理，挺有意思的。200多页，当闲时读物挺不错的，值得一读。", "marks": "推荐"}
{"content": "简洁而不失内涵。于我这样的入门者来说是很好的。", "marks": "推荐"}
{"content": "舒筋活血，意犹未尽", "marks": "力荐"}
{"content": "其实和七周七语言差不多，不在于讲具体的技术而是在于一种学习方法，即在比较中学习与在历史中学习。", "marks": "力荐"}
{"content": "读完可以对编程原理有更深刻的认识，尤其是对于编程新手吧，如果对于编程老手来说的话，可能讲的内容就不值一提了，我读完还是收获了不少的。", "marks": "推荐"}
{"content": "代码之髓，虽然有些浅显。入职的时候没有领电脑，花了半天时间看了一遍，通俗易懂，适合新入门者。", "marks": "力荐"}
{"content": "介绍一些基础的东西，之前确实没想过，很好", "marks": "力荐"}
{"content": "值得一读。有作者自己的思考在。", "marks": "力荐"}
{"content": "已经看完一大半了，适合对编程有稍微了解的朋友，内容深入浅出，举例简单易懂，挺不错", "marks": "力荐"}
{"content": "编程科普", "marks": "还行"}
{"content": "比较简短的程序语言科普书，虽然简短，但探讨了许多程序设计领域非常重要的问题，同时日本作者严谨的态度也值得学习。最为有意义的是，本书从很多概念的源头开始，剖析其发展的路径，从而将一些看似颠簸不破的理论拉下“神坛”，表明其只是一种人们的表述或共识而已。这种思辨、对比而不人云亦云的学习态度值得汲取。", "marks": "推荐"}
{"content": "中间加了很多es7的内容。总体来说讲得还是不错的。就是js的学习曲线又变得陡峭了。", "marks": "推荐"}
{"content": "做个大概了解，满满的函数式语言的影子~", "marks": "还行"}
{"content": "浅显易懂 娓娓道来 不过的确是一本没有“用”的书  ES6支持度没达到  另外本书体系性不强  适合掌握了ES5的人", "marks": "还行"}
{"content": "作者一贯的风格，诚意很足，不过说实话还是太细碎了，即使是作为参考。", "marks": "还行"}
{"content": "挺不错，有一定 JavaScript 基础的话半天即可扫完。阮的作品一如既往通俗易懂简单明晰，要赞下。", "marks": "推荐"}
{"content": "挺好的，正好系统学习下 es6", "marks": "推荐"}
{"content": "网上对阮一峰这类科普性的博客褒贬不一，但是这类中文技术笔记看起来快啊，具体要用再慢慢查文档吧~（可以愉快地写 React Native 啦！", "marks": "推荐"}
{"content": "看了人家开源电子版 买本纸版支持下。话说160页32开本定价49，技术图书市场的发展势头不错", "marks": "推荐"}
{"content": "阮老师的技术文章还是一贯的简单易懂。 ES6 引进了很多 CoffeeScript 等语言的实用特性，让人迫不及待得想用上", "marks": "推荐"}
{"content": "翻了一下ES6，讲解算是非常详细，挺好的书，不过现在我感觉对这类书不感冒，阅读完就是知道了一堆语法糖，没有那种醍醐灌顶，“哇，原来是这样”的感觉。", "marks": "推荐"}
{"content": "阮老师的科普小书！短小精悍，通俗易懂。", "marks": "推荐"}
{"content": "遇到不熟悉的 ES6语法就查一查", "marks": "力荐"}
{"content": "let set map等融合其他语言啦，取长补短，挺好的", "marks": "推荐"}
{"content": "因为有java、c和python基础，我就直接看了mozilla的ES6入门指南和廖雪峰的js教程，涉及ES6的部分参考了阮老师的这本书(当然就选看了几章)。算是入了门。\n", "marks": "推荐"}
{"content": "简单易懂，而且有很多例子，最重要是附加了很多使用场景，更好的理解ecma为什么要添加这个功能， 其中   Generator函数.  和  异步操作和Async函数  需要多阅读下例子和做些实践", "marks": "力荐"}
{"content": "花了两个多小时看了一遍，没写过多少js，看到的都是Python、Erlang、Lua的影子，对JS改观不少", "marks": "推荐"}
{"content": "我觉得你直接在百度上搜索ECMAScript6，基本内容就和本书也差不了多少。而且价格还定的这么贵", "marks": "较差"}
{"content": "翻了一下，好像没什么新意，相比于C++真是差远了", "marks": "还行"}
{"content": "算是重新认识了遍JavaScript，ES6让JavaScript的门槛变得很高，各种特性的补全和语法糖的加入让JavaScript向着OO的思想靠近。不过也有一些特性个人认为并不是很好，降低了代码的可读性。let和const，解构赋值，Symbol，set和map数据结构，Iterator接口，promise对象，Class，Module都是一些现在ES5正寻求的开源模块，加入也都是理所当然的，更不用说大大提高了开发效率，哎，2015年定的标准，普及起码也要2018年了吧", "marks": "推荐"}
{"content": "不是有些人说的只是语法糖之类的介绍，认真看还有很多底层实现的原理，其实你只要收获了1%都是非常值得看的，很适合经常拿出来重读。", "marks": "力荐"}
{"content": "比较精简，体系性不强", "marks": "推荐"}
{"content": "我决定放弃电子版和纸质书，对于这种题材的技术书记，online才是首选。", "marks": "还行"}
{"content": "入门介绍", "marks": "还行"}
{"content": "通熟易懂", "marks": "推荐"}
{"content": "读的电子版，里面有很多很好的例子，文字也通俗易懂。新知识点很多，要用的时候再回头查吧。", "marks": "力荐"}
{"content": "简洁，明了，正好最近在进行前端模块化编程，很有用。", "marks": "力荐"}
{"content": "Any application that can be written in JavaScript will eventually be written in JavaScript.", "marks": "推荐"}
{"content": "值得期待的一本书，许多新的特性。", "marks": "还行"}
{"content": "写的太赞了，通俗易懂", "marks": "力荐"}
{"content": "性价比不太高 入门可以", "marks": "还行"}
{"content": "ES6真是太美好了！", "marks": "推荐"}
{"content": "推荐", "marks": "力荐"}
{"content": "不错的入门书籍", "marks": "力荐"}
{"content": "很赞，各个知识点讲解的很细致，配合大量的例子又说明了各个功能的应用，这是一本难得的国产好书", "marks": "力荐"}
{"content": "最佩服阮老师，写博客，写教程坚持这么多年真的不容易。", "marks": "力荐"}
{"content": "http://es6.ruanyifeng.com", "marks": "推荐"}
{"content": "值得读", "marks": "推荐"}
{"content": "是自己对js了解的太少，在es6里面js也有了类，有了继承，有了用as改名，但还是有些方法没有看懂，后面还需要再看两遍，将第一遍没看懂的方法弄懂，这书对于我这种菜鸟还是不错的", "marks": "推荐"}
{"content": "纸质版内容比较少，还是在线版比较好。", "marks": "推荐"}
{"content": "买的版本比较老，内容都不怎么及时，但是还是很精彩，看过一遍后有必要去作者的网站看最新的内容巩固知识。", "marks": "力荐"}
{"content": "粗略浏览一遍", "marks": "还行"}
{"content": "花了半天全部看完了，总体来说还不错，但是也算不上深刻。快餐一点", "marks": "还行"}
{"content": "书如其名，了解ES6各种特性.\n半天就可以看完…可惜我看完的时候已经出到第二版😳", "marks": "推荐"}
{"content": "ES6，有点看不懂 多看看", "marks": "力荐"}
{"content": "知道有什么，很多细节都没有好好掌握，如果真的有一天去写node了，再来细磨。", "marks": "还行"}
{"content": "技术书就应该这样，简洁直接明确通俗。", "marks": "力荐"}
{"content": "图书馆居然进这本书了  惊喜 书很薄 能对es6有全面的了解 但从封面就能看出品质，内容排版很用心 值得jser都去读一下 ", "marks": "推荐"}
{"content": "作为工具书还是很不错的，很详细，栗子很多", "marks": "力荐"}
{"content": "温故而知新", "marks": "力荐"}
{"content": "阮老师写的就是简洁易懂～", "marks": "推荐"}
{"content": "看的电子版学习了一下语法，后来做项目直接写上了，大爱 ES6 ", "marks": "推荐"}
{"content": "两三个小时就可以读完，写的还是比较通俗易懂的，比如promise，generator，iterator等等，好的地方是会把新特性的应用场景写出来。感觉ES6修正了一些历史的坑，加入了一些实用的语法糖以及更多的对FP的支持，大致有个概念具体用的时候再查文档吧", "marks": "力荐"}
{"content": "例子详实，适合刚入门的看。", "marks": "力荐"}
{"content": "需要付诸于实际应用才能更好的理解", "marks": "推荐"}
{"content": "讲得很浅，适合有一定 JavaScript 基础的同学对 ECMAScript 做一定了解。", "marks": "推荐"}
{"content": "ECMA还是一贯秉承“存在即合理”，新标准很多都是根据现有框架功能去制定。也是，框架功能基本能体现这个时期原生技术的不足。感觉新标准还是不错，就是不喜欢class功能。。。特么的越来越像强类型了。", "marks": "推荐"}
{"content": "一周的零散时间翻看了一遍，Iterator 、Generator 和 Promise 要重点再看看", "marks": "力荐"}
{"content": "鶸前前后后看了20多天才记了个七八成，大佬各种2小时一下午看完，萌新瑟瑟打抖。", "marks": "力荐"}
{"content": "很棒的一本书，不过不推荐没有一点JavaScript基础的人阅读。ES6新增了很多语法糖，变量解构、let、for of、Simbol元数据类型等等，避免了很多程序员在编写JS时很容易忽视的问题，比如闭包造成的内存泄露等等。如果平时项目允许的话，我觉得我会更偏向于ES6的使用，当然，traceur可以将ES6转成ES5，但总是会存在这样那样的小问题。\n总而言之，很值得阅读的一本书，毕竟ES6是大势所趋。", "marks": "推荐"}
{"content": "排版非常喜欢，内容大部分比较准确", "marks": "还行"}
{"content": "短小精悍，通俗易懂", "marks": "推荐"}
{"content": "不错的书，就是排版不大舒服", "marks": "还行"}
{"content": "咦，看了文档才知道豆瓣app还有扫图书的功能呀，👍", "marks": "力荐"}
{"content": "介绍了很多ES6的新特性。书中没有讲很多原理性的东西，全是代码实例。作者很厉害,这本书可以搭配其网站http://es6.ruanyifeng.com/", "marks": "推荐"}
{"content": "我买了好多前端书（17本好像），一般先看电子版试读一章，觉得不错再卖正版，但是这本书我一读就晕，写的太详细了，感觉看了一大段就是一个知识点，再看一大段发现前面的想不起来了，难道只有我一个有这种感觉", "marks": "推荐"}
{"content": "王群锋就是我啦。。。", "marks": "还行"}
{"content": "#图灵PDF# 其实 mark 这本书的唯一目的是显 low ……= = 然后里面的样例代码实现很一般啊~ > <", "marks": "还行"}
{"content": "一般，觉得数据结构的学习还是不要以js作为例子了，因为作为一个高级语言，很多数据结构实际上在语言层面已经实现了，很多例子都毫无意义。", "marks": "很差"}
{"content": "底层没讲，搞了一些简单的用法就出书了。不负责任，小学生入门比较合适。外加，代码实在不严谨，各种隐患问题。而且代码的错误特别多。。。", "marks": "较差"}
{"content": "虽然有些简单但还是很必要的", "marks": "推荐"}
{"content": "还不错吧", "marks": "推荐"}
{"content": "代码质量真心不高", "marks": "较差"}
{"content": "几个排序算法以后面试的时候可能用得着。手头已经有好几本数据结构有关的书，这本书不该买。", "marks": "还行"}
{"content": "不太严谨，概览", "marks": "较差"}
{"content": "代码质量不高，还有不少错误", "marks": "还行"}
{"content": "算法的简单科普,示例的错误太多", "marks": "较差"}
{"content": "不枉参与翻译。", "marks": "推荐"}
{"content": "错误有点多。。。。", "marks": "还行"}
{"content": "这也能叫算法书？", "marks": "很差"}
{"content": "概念浅显，不会用到，适合初学者", "marks": "推荐"}
{"content": "看这书评价不太好，不过对于我这种数据结构算法渣来说，够了~", "marks": "推荐"}
{"content": "做Leetcode时进行不下去，才想起来手里还有这本书。当初买的时候，JD上找了一圈也没有针对javascript算法和数据结构的书，只此一本，所以就入手了。现在挨章刷才发现，这都是些啥……", "marks": "较差"}
{"content": "教你如何封装Array系列。。。", "marks": "力荐"}
{"content": "代码质量差，内容简单", "marks": "很差"}
{"content": "跟着敲了一遍。感觉智商余额不足了。", "marks": "还行"}
{"content": "很适合前端学习，代码确实存在一些小问题，不过影响不大。书很薄，一天可以看好多遍的那种，自己都实现一遍的话，还是蛮有收获。", "marks": "推荐"}
{"content": "2016.15 js的算法书很少见，介绍了常用算法的js实现，出发点很不错，数据结构和算法也是大部分前端的短板，但是这本书感觉太敷衍了，代码也有很多错误，很多算法的底层也没介绍 稀里糊涂直接贴代码", "marks": "还行"}
{"content": "对于我这样前端工程师入门还是不错的，为接下来打好基础，但是书中许多代码有凑数的嫌疑，而且有些验证代码写错了...比如最后的动态规划背包问题，还好小问题不影响理解", "marks": "还行"}
{"content": "比较简单，不够深入", "marks": "还行"}
{"content": "一般", "marks": "还行"}
{"content": "讲的东西比较弱。书很薄，只有不到200页，代码占大部分。而且代码写的很弱。学过数据结构的很容易就能发现其中的BUG，不推荐", "marks": "较差"}
{"content": "书中代码好多错误。", "marks": "较差"}
{"content": "这本书的翻译是合格的。内容比较基础，给出的代码实现也是入门级的，有少部分例子有bug。不过js算法书比较罕见，这本书用来入门没问题。", "marks": "推荐"}
{"content": "然而读完并没什么收获。", "marks": "推荐"}
{"content": "要不是学过其他语言，会被里面的代码事例坑死，有语言基础的可以看，只学过JS的就算了吧", "marks": "还行"}
{"content": "JavaScript 作为一切皆对象的语言，一个用了 10 天就开发出来的语言，在数据结构上自然表现的很奇怪，例如连 Map 这么重要的数据结构都没有，还需要自己来实现。\n\n如果不是计算机科班生，又没有了解过数据结构及算法相关的内容，这本书是很合适的。\n\n如果已经了解了各种数据结构，想简单的看一下在 JavaScript 中能够以什么样的形式写出来，这本书也是合适的。", "marks": "力荐"}
{"content": "适合算法入门，但是里面好多错误啊！", "marks": "还行"}
{"content": "用JavaScript语言描述基本的数据结构与算法，既学习了JavaScript又复习了数据结构与算法的思想，不错", "marks": "推荐"}
{"content": "1.目前读过动物书中质量最差的一本，太多错误和不规范的写法，后来发现图灵社区达几页的勘误。2.不过算法描述都还是清晰的，可以自己去实现，虽然书上有些代码都是错的。3.总的来说是值得一读的，思想是关键，不过译者都只给自己3分，那～～", "marks": "推荐"}
{"content": "这个系列我买了好多，只有这本是看完的，但是老实说可能还要看第二遍，对于各种数据结构的介绍还是挺好理解的，就是没啥用。。。因为不涉及实际业务，就是讲原理吧 所以后面我看的有点困。", "marks": "推荐"}
{"content": "错误比较多\n内容比较基础\n课后习题答案不好找\n第一本用js描述还是可以的", "marks": "还行"}
{"content": "代码里到处是print，JavaScript里直接打印机打印了啊喂，不知道是作者还是译者搞的。图灵的书出现这种问题太不应该了。", "marks": "很差"}
{"content": "出了不少低级错误, 显然不是一本作者用心写的书籍，估计都没有校勘。通过这本书只能学习到简单的数据结构。错误实在太多, 改为一星。", "marks": "很差"}
{"content": "请作者写这些垃圾代码前自己跑一遍，没研究清楚，就不要拿出来误导别人。", "marks": "很差"}
{"content": "有人买了不想要吗...二手转给我吧 ，要正版的", "marks": "力荐"}
{"content": "比较适合前端初学者去看，封装了很多数组的方法，但是，数据结构方面的知识比较浅显，不过也容易看懂", "marks": "还行"}
{"content": "书真的很差，不过看来是原作者的问题\n1.不严谨，使用了很多不规范的写法\n2.写法繁琐，使用了很多没必要且繁琐的方法\n3.仅能做了解使用，无法学到可以实际使用的内容\n", "marks": "较差"}
{"content": "几个排序算法以后面试的时候可能用得着。手头已经有好几本数据结构有关的书，这本书不该买。#说无用其实有点担心辜负了臭臭兄的一片好意#", "marks": "还行"}
{"content": "错误很多，代码很粗糙", "marks": "较差"}
{"content": "讲的比较浅显，适合学习过数据结构与算法，想了解JavaScript实现的人阅读", "marks": "还行"}
{"content": "我本来都想打2分的。。。。。。这儿薄的书，这么多网上都能找到的内容，这么坑爹的价格，这么不负责任的内容。。。", "marks": "还行"}
{"content": "书比想象中的小。。。。讲的比较详细。更新版本比如0.9.1和0.9.2没有讲不过都差不多。为啥貌似原来storm有zmq现在都是netty了？", "marks": "推荐"}
{"content": "非常薄的一般，全篇代码，对不起阿里的名声！", "marks": "较差"}
{"content": "薄薄的一册，各种知识点都是点到为止，一般。。。读完可以对storm了解个大概", "marks": "较差"}
{"content": "书薄到只用半天就看完了。PS 内容适合入门，基本是storm英文文档的整理，附加了一两个简单案例。吐槽下这本书的编辑，整书170页，每页行距特别大，然后定价59元？", "marks": "还行"}
{"content": "写的很简明，浅显易懂。好书。", "marks": "推荐"}
{"content": "山寨技术总结", "marks": "较差"}
{"content": "没营养，给1星不能再多", "marks": "很差"}
{"content": "感觉像一篇入门文章的量伪装成了书的样子，太坑爹了。这就是阿里的技术现状？！！！破书", "marks": "很差"}
{"content": "在网络上各种资料都看过了，本来想买本书深入学习Storm，但是这本书针对每个点都只是点到即止了，貌似大部分就是量子恒道的博客的博文，还有storm官方文档的翻译，再披上阿里巴巴数据平台事业部商家数据业务部的外衣，就这样出版了。", "marks": "较差"}
{"content": "买《大规模分布式存储系统》时包邮凑单买的。。看着页少字大就先读了，没用过Storm，讲的挺少的。", "marks": "较差"}
{"content": "简洁，实用", "marks": "力荐"}
{"content": "书很薄，170多页，都是一些基础的东西，很多东西更是直接从官网直接翻译过来的。。。对不起这个价格。", "marks": "很差"}
{"content": "阿里系图书的败笔 没有什么太多价值 窜书", "marks": "较差"}
{"content": "很好的入门书，但打怪升级什么的完全扯淡，浪费篇幅", "marks": "力荐"}
{"content": "入门好书", "marks": "力荐"}
{"content": "很适合有Java基础但是没有Android基础的人入门，讲的很浅显易懂。细节上面不够深入，偶尔需要上网查阅一下细节才行，但是对于入门者来说足够用了。看完这个之后再对着公司代码多看一看，应该就可以入门了。", "marks": "推荐"}
{"content": "国内不错的一本书，适合初学入门，细节不够深入，停留在抄代码的层面，打怪的故事很鸡肋。", "marks": "推荐"}
{"content": "写得有点啰嗦", "marks": "还行"}
{"content": "写得好，我想，主要还是因为Android入门搞起来很简单吧", "marks": "力荐"}
{"content": "挺好的Android入门书籍，我是先看了Marz的重制版第一季的视频", "marks": "力荐"}
{"content": "不错的android入门书，综合评分三颗半星。代码排版不太好，每章最后的打怪系统可以跳过，部分内容有凑页数之嫌，建议配合源码和图灵上的勘误来阅读。虽然有以上缺点，但依然是国内最好的android入门书，比疯狂XX讲义强多了。", "marks": "还行"}
{"content": "挺不错的入门指引书，其实看完这本书，联系跟着做，就可以查着官方文档写实际项目了。注意：这不是培训类的书，跟一个实际项目开发相似，出了写代码，还有版本控制系统的应用、广告的植入，很实用。", "marks": "力荐"}
{"content": "虽然不喜欢做android但是因为工作还是得稍微了解一下相关技术栈。这本书确实适合没有基础的人入门，讲的东西也比较浅显易懂。但是有个问题也在于此，很多关键性的内容只是停留在表面的讲解，做不到点到让你可以很快有一个intuitive understanding的地步。这个和作者本身的讲述水平有关，也可能考虑到读者群体的因素。 2016/02/26", "marks": "推荐"}
{"content": "当时入门时用的书，简直赞。", "marks": "力荐"}
{"content": "不错的入门书，android零基础的我读的很轻松。", "marks": "力荐"}
{"content": "蛮好的", "marks": "推荐"}
{"content": "太适合入门了", "marks": "力荐"}
{"content": "再出一本进阶的。2000页我也买。", "marks": "力荐"}
{"content": "android入门好书", "marks": "力荐"}
{"content": "郭神的安卓入门书", "marks": "推荐"}
{"content": "入门", "marks": "推荐"}
{"content": "入门最好的第一本，简洁清晰，花了几小时照着敲一遍代码，学习起来，效率相当高，内容安排和讲解都恰到好处。", "marks": "力荐"}
{"content": "自学安卓开发的第一本书，浅显易懂，由浅入深。", "marks": "推荐"}
{"content": "短短续续，总算是看完了。非常适合入门。", "marks": "力荐"}
{"content": "比中文版权威编程写的明白", "marks": "力荐"}
{"content": "这是一本故事书，讲述了Android应用的来历。即使是不会java阅读起来都不会太困难，从头到尾把Android应用开发所用到的基本知识介绍一遍，例子精简，功能点突出，非常适合作为Android入门的书籍，不求深入但求全面了解Android应用的概况，即使如此，阅读完本书也能写出个不错的应用，阅读本书同时就已经把一些小技巧用到的项目当中，当然还有一些还没来得及实践。\n\n从这里又了解一个阅读的技巧，对于这些讲究知识面的内容，不求甚解，但求了解，只要在真实的项目当中遇到问题能够想到有这么个东西，而又能够从书中找到，或者知道从网络上如何找到即可，阅读时没必要深究，这也符合我步入研究生时给自己订的方法论。\n\n一千个读者一千个哈姆雷特，我比较喜欢这种类型的书籍，细节有必要时继续深入。", "marks": "力荐"}
{"content": "非常良心", "marks": "推荐"}
{"content": "评判不出来这本书作为入门书到底好不好，明明是作为最入门的书但有些地方写得不够浅显", "marks": "推荐"}
{"content": "不错的入门书", "marks": "推荐"}
{"content": "第一本看完的编程书，入门很适合", "marks": "力荐"}
{"content": "233， 不用两天就入门android开发。可以写一个了。", "marks": "推荐"}
{"content": "基础入门，介绍的比较全面，作者的blog也不错", "marks": "力荐"}
{"content": "编写android app的入门书籍，简单代码实例讲解。", "marks": "推荐"}
{"content": "挺好的，超级实用。反正就是入门嘛。不过涉及的东西有点少。作者还把git的使用穿插进去简直惊喜。。虽然我的git是看简明入门弄懂的吧。另外不知道进阶有什么好书呢", "marks": "力荐"}
{"content": "用了二十天敲完全部代码，《第一行代码》准确的说是有8000行代码", "marks": "力荐"}
{"content": "看完了。！", "marks": "推荐"}
{"content": "详细的讲解了Android的各个知识点，技术较全，适合新人了解Android开发。不过还是觉得权威指南那种学习方式更适合我。", "marks": "推荐"}
{"content": "Android最佳入门书籍", "marks": "力荐"}
{"content": "好医生治病尾，之前试过几本渣渣的后试看这本，这才叫真正适合初学入门的书！！", "marks": "推荐"}
{"content": "除了百毒app和股沟play的部分其它都老老实实跑着写了一遍，还算不错~ // 打怪升级什么的其实比较无聊，但好像还是作为亮点来宣传的。。。", "marks": "推荐"}
{"content": "不错，不过我还是推荐作者是不是能够做一个网络版本，这本书还是基于ADT和Eclipse的但是现在AS其实已经很完善了。还是要考虑这个领域进化迭代的太快了。", "marks": "力荐"}
{"content": "入门书籍，带新人的时候可以看看。", "marks": "推荐"}
{"content": "目前感觉挺有趣的", "marks": "力荐"}
{"content": "来来回回读了将近一个月，作为入门级的教程书是相当好的，详细的代码，最佳实践部分都很好。", "marks": "力荐"}
{"content": "翻了翻，挺好懂", "marks": "力荐"}
{"content": "初学者适用，不过对比Android编程权威指南还是相差不少，不过码农写书还是要支持一下的", "marks": "还行"}
{"content": "仅仅是看完了，然后理解了一大半。", "marks": "力荐"}
{"content": "挺不错的，很适合Android入门书", "marks": "推荐"}
{"content": "书精简结构清晰，入门很好。打怪那里的确太多余了...太罗嗦", "marks": "力荐"}
{"content": "入门很好的书，不过对我来说太简单了，安卓应用开发和c#中窗体开发也很类似嘛，界面实现机制都差不多，了解基本概念后，上手很快", "marks": "推荐"}
{"content": "感谢郭婶。", "marks": "力荐"}
{"content": "我的第一本android书。适合初学者。", "marks": "推荐"}
{"content": "很好的一本入门书", "marks": "推荐"}
{"content": "挺好的  好久不看技术书了", "marks": "推荐"}
{"content": "很好的入门书，虽然有点啰嗦。但打怪升级什么的完全扯淡，浪费篇幅。", "marks": "推荐"}
{"content": "一本不错的Android书籍，适合入门级读者。", "marks": "推荐"}
{"content": "不错，不过把升级打怪换成小技巧或知识点更好", "marks": "力荐"}
{"content": "2017.3.10\n入门如此简单，看得酣畅淋漓\n写了个总结才发现安卓入门很简单\nwww.jianshu.com/nb/10723951", "marks": "推荐"}
{"content": "看了前八章，书写得很详细，简单易懂，需要具备一点java基础。学习Android感觉还是应该从项目入手，自己做几个App，带着需求与问题来学习比较好。", "marks": "力荐"}
{"content": "真的是跟着敲完了的Android开发相关的书，挺好的。就是由于系统环境和软件版本不兼容的原因，出现一些莫名其妙的FC，体验不是很好。所以还是前端舒服~纠错能力强大，编码反馈及时，覆盖所有平台，前端简直就是春天！", "marks": "力荐"}
{"content": "国内android入门第一书 当然如果有不认同的 可以推荐给我", "marks": "力荐"}
{"content": "郭神还是屌", "marks": "力荐"}
{"content": "对新手很友好，但是需要更新了。", "marks": "力荐"}
{"content": "这个比某老外写的好多了", "marks": "力荐"}
{"content": "不错的入门书", "marks": "推荐"}
{"content": "写的很好，案例相当华丽", "marks": "力荐"}
{"content": "适合做初学者的入门书，前面几章写的比较好，中间开始一章比一章水，打怪升级什么就当是作者个人爱好了。", "marks": "推荐"}
{"content": "很适合初学者，按照书中内容认真操作过一遍，基本的概念和操作都懂了。想要更有深度的学习，可以再去找相关的内容。这本书主要是概念和格局的大致讲解，逻辑很清晰，讲解也很详细。", "marks": "力荐"}
{"content": "对Android开发初学者非常友好的一本书，照着书中的代码全部敲一遍，大概就了解Android是怎么一回事了，接下来的提升可以去看看作者的博客、Android官方文档、Android开发周报 。PS：学完这本书后顺利找到了实习，非常感谢！", "marks": "力荐"}
{"content": "Android开发，最好的入门书！", "marks": "力荐"}
{"content": "第一行代码居然是Log.d();", "marks": "力荐"}
{"content": "内容都挺基础的", "marks": "推荐"}
{"content": "代码有些解释不到位，不过穿插的git算是个惊喜，够用了，给三星半，最后的综合实例不错，总的来说，还是可以的，入门可以，对整个Android有个大体上的了解", "marks": "还行"}
{"content": "这几天一直在看，很好看。结构清楚，讲的不深入但是很容易掌握。这我读的第二本Android书。", "marks": "推荐"}
{"content": "适合初学者，讲的有些简略。可以快速了解Android开发的大体情况。对Github的介绍是亮点。", "marks": "推荐"}
{"content": "手把手入门的经典 边看边学边打代码收获很大 但是如果你真的想学的快一点 最好还是先想好自己要做什么程序 然后一部分一部分做 不会的地方就看书", "marks": "力荐"}
{"content": "讲得很好，实用。\n提示：现在已经不适合用这本书了，Android API好多有变化了。", "marks": "推荐"}
{"content": "简单易懂，语言风趣，设计人性化。每段小结语确实让人轻松一下。不过比较基础，想更进一步的，需要再看别的东西。", "marks": "推荐"}
{"content": "第一步android书，调理清晰，很适合入门。", "marks": "力荐"}
{"content": "适合android入门，不要嫌弃它是4.0版本的代码，其实道理是互通的。", "marks": "力荐"}
{"content": "5天时间跟着做，入门不错，快速建立整体概念", "marks": "推荐"}
{"content": "带我入门", "marks": "推荐"}
{"content": "一个够格的入门书，比疯狂好些。推荐！", "marks": "力荐"}
{"content": "作者很用心，写得很有条理，适合入门。", "marks": "力荐"}
{"content": "很不错的入门书籍！", "marks": "力荐"}
{"content": "我曾经写过自己的程序", "marks": "力荐"}
{"content": "作为入门书确实够用，但也仅仅只是入门。 虽然书看上去比较薄，但知识点、内容不够全，更谈不上细。介绍UI控件时只是浅尝辄止，基本没有涉及各组件的深入、扩展讲解，这样对于实际开发就完全不够，对于这些UI控件，如果只是简单实用，我们学过android的人基本都会实用，压根就没必要来看书，但对于实际开发而言，我希望看到的深入掌握各UI控件的用法、甚至各种UI控件的深入定制，可能有人会说，那你可以去参考官方文档啊。问题是，如果我都完全可以自行参考官方文档，那我又何必买这本书。\n\n另外，最基本的动画机制居然完全没有介绍，我不知道作者到底有没有实际android开发经验，先不说开发稍微实用的自定义控件（没有动画知识，想都别想了），就是android应用的组件之间的切换动画，难道作者练这些都不知道？他到底有", "marks": "很差"}
{"content": "讲得比较浅，算最基本的入门吧", "marks": "推荐"}
{"content": "非常适合新手入门", "marks": "力荐"}
{"content": "自己主要是C/C++方向，Java语言只是了解的程度，不过并不影响阅读本书。个人认为是一本初学入门Android程序开发的好书。推荐一下！\n自己学Android的终极目的是逆向自己感兴趣的应用程序，要想逆向，必须先要学会自己开发程序。这本作为铺垫读物很不错。", "marks": "推荐"}
{"content": "很不错，适合初学者！", "marks": "推荐"}
{"content": "内容比较基础，同时知识点都覆盖到了，阅读举例的代码还是基本没什么障碍，所以读的有点快，3天就读完了，当然，以后时不时还得翻翻", "marks": "力荐"}
{"content": "很一般，说这书有多好的人还真是没读过好书。", "marks": "较差"}
{"content": "不错入门", "marks": "力荐"}
{"content": "非常好的安卓入门书，比疯狂系列好很多——思路清晰、讲解简洁没废话、例子很靠谱，此外实战给的用法很实用——是真的可以用于企业开发的；有java基础的人想学安卓的话建议直接入手本书", "marks": "推荐"}
{"content": "约24日，41个番茄钟，20小时左右。", "marks": "推荐"}
{"content": " 很适合初学者的一本书，安卓更新这么快，想找到一本完全跟上的教材是不可能的。", "marks": "力荐"}
{"content": "书评区疯狂android讲义的水军太恶心人了，真是B脸不要。", "marks": "推荐"}
{"content": "有几处小bug，总体很赞", "marks": "力荐"}
{"content": "我只是为了入门", "marks": "推荐"}
{"content": "通俗易懂，结构清晰，详略得当，可以算是android入门最好的选择之一。", "marks": "力荐"}
{"content": "很棒的入门书，过一遍之后对Android开发流程以及Java语法都有了大致的了解", "marks": "推荐"}
{"content": "虽然是2年前出版的，虽然那时候最新的安卓版本是4.4，虽然用的IDE是eclipse，但是作为新手入门是最合适不过的了，把基本概念讲得都非常清楚。", "marks": "推荐"}
{"content": "入门佳作，但看过一遍就可以扔开去读博客了。", "marks": "推荐"}
{"content": "没人说的这么好，即使是入门，也不能把用到的东西说成“一般用不上，写入xx就好”这样的敷衍了事。要知道这是害死强迫症的我的，累死了。越后面越模糊，真的只是入门，看前面就好了", "marks": "还行"}
{"content": "给入门级别的看得，但是也太基础了，知识点太少了，而且缺乏一种分析", "marks": "较差"}
{"content": "作为资深android 开发工程师，我基本把android 目前世面上的好书全部读过了。其中，最有收获的还是任玉刚和老罗的两本。郭霖这本书我大概花了5天的业余时间全部读完，对新手来说应该不错，对中级开发者基本无价值。", "marks": "还行"}
{"content": "易读，入门", "marks": "力荐"}
{"content": "由浅入深，很适合初学者。可以反复看", "marks": "力荐"}
{"content": "全是基础知识点，适合还没开始写代码（和名字真搭配），买错书了！😔 不过，作者的博客还是不错的。平均下来四星吧。", "marks": "推荐"}
{"content": "挺好的入门书", "marks": "推荐"}
{"content": "最近热评的一本书，比较简略的过了一遍Android开发中的基础知识。详情度没有《疯狂Android讲义》这本书写得详细，新人其实还是推荐看《疯狂Android讲义》", "marks": "还行"}
{"content": "安卓入门", "marks": "推荐"}
{"content": "没坚持完，坚持了几个月 ，浪费时间了", "marks": "还行"}
{"content": "为了毕设", "marks": "力荐"}
{"content": "内容太简单， 为了凑篇幅，故意扯什么打怪升级，纯属骗钱。", "marks": "很差"}
{"content": "与学习JavaScript时看的《超实用的JavaScript代码》一样的调调，比学Web时的W3C更浅尝辄止，每章总结是用游戏闯关的形式写的有的看着挺无厘头的，最关键的是本版用的老旧的Android 4 + Eclipse ADT编码，如今用新版SDK+Android Studio果然踩了不少坑，也没有集中与读者讨论的地儿好在现在已入手第二版，目录架构瞅着一样但愿能把第一版的坑填上。", "marks": "还行"}
{"content": "讲得很清楚。", "marks": "力荐"}
{"content": "安卓入门还是不错的 通俗易懂 会点java没啥问题", "marks": "推荐"}
{"content": "郭霖的博客讲解都是很易懂。买这本书就是支持一下郭神， 对android入门者这是比较好的一本书。如果对android有一定的理解，可以作为梳理一下自己的android知识。 这本书非常不错，推荐！更推荐CSDN上面郭霖的博客，里面的很多博文真的很赞。", "marks": "力荐"}
{"content": "太差，内容太浅，已退。", "marks": "很差"}
{"content": "太差了，基础讲得不清楚。而且太多东西没有讲", "marks": "很差"}
{"content": "放在角落快遗忘了，入门好书。", "marks": "力荐"}
{"content": "非常好的入门书籍，简单而且实用，可以快速将Android体系中的重点掌握。", "marks": "力荐"}
{"content": "主要是很多东西没有讲，看得时候以为自己学会了，但实际上还要自学太多东西。", "marks": "很差"}
{"content": "适合入门", "marks": "还行"}
{"content": "虽然这本书很多东西都是一带而过，介绍一个demo，但是我觉得真的很适合初学者，跟着敲一遍，就对Android基本有个大体认识了，在做个项目就会感觉有质的飞跃。", "marks": "力荐"}
{"content": "看了郭霖的博客，觉得郭大的讲述条理清晰，内容充实，读起来也不枯燥，就买了一本他的书，本来期望也不高，因为博客是是想到哪写到哪，但是写成书难免会写得比较应付，但事实证明我错了，这本书质量相当高，刚到手的时候就一口气读了三章，书的语言相当易读，没有废话，没有生帮硬套，都是作者自己的思想，看书就好像郭大在你面前讲述一般，其次代码也很整洁，理解起来相当容易。总之，这是Android应用开发入门的首选书籍，在此书面世之前，能找到的入门书籍都是不合格的。", "marks": "力荐"}
{"content": "给初学者很多经验，很赞", "marks": "推荐"}
{"content": "正在使用，适合有java基础的人入门安卓使用。入门，不需要太多的特效之类的，实用最重要。这门书做到了～", "marks": "推荐"}
{"content": "不错，特别详细，作为入门书来说足够了！", "marks": "力荐"}
{"content": "api编程", "marks": "还行"}
{"content": "深入浅出", "marks": "力荐"}
{"content": "内容很好，不过不详细", "marks": "推荐"}
{"content": "绝对的入门必备", "marks": "力荐"}
{"content": "Android入门教材，读着还行！", "marks": "推荐"}
{"content": "适合入门吧，但是很浅。", "marks": "还行"}
{"content": "初学者入门值得一读的Android书", "marks": "推荐"}
{"content": "国产难得好书。看完android算是入门了。只是有些基本的设计模式，可以稍微提一下", "marks": "力荐"}
{"content": "超棒的入门书。另外，想入门的千万别看李刚的疯狂系列", "marks": "力荐"}
{"content": "字体印刷的大，不过这样看起来不累。\n内容适合初学，主线清晰合理，跟官网的一致。如果你需要快速了解android开发的套路，本书还是不错的。有一定java基础的话，看起来会很快，之后会对android开发有一个整体的认知。\n如书名，这本来就不是高阶书籍，觉得不够可以再看进阶书籍，不用这样贬低作者吧。", "marks": "还行"}
{"content": "入门最好的一本书，没有之一，不过里面的API 都有点过时，建议看第二版，这本书的优点在于，不那么枯燥，也很好理解 ，这本书 可以让你 在有JAVA基础的条件上  快速的 学会android开发，这里指的的会 不过是参照东西做， 如果想弄明白，这本书显然不够， 不过 可以看一看 作者郭霖的技术博客也也很好", "marks": "力荐"}
{"content": "最近正在学习，之前借的书都太着急。看的迷迷糊糊，这本书真的非常适合入门学习。通熟易懂", "marks": "力荐"}
{"content": "😳我的入门书，永远感激呀", "marks": "力荐"}
{"content": "适合初学者，一本不错的Android入门书", "marks": "推荐"}
{"content": "当时学Android看的第一本入门书籍，啧啧～", "marks": "还行"}
{"content": "很不错的Android开发入门书", "marks": "力荐"}
{"content": "推荐入门，从作者博客学了很多", "marks": "推荐"}
{"content": "不错的入门书，要用的工具，涉及到的知识都讲到了，即使不深入，但是有个概念，以后实际项目遇到了就知道怎么回事，再去深入学习就行。", "marks": "推荐"}
{"content": "入门不错，学Android第一个月看很好", "marks": "推荐"}
{"content": "差评.打怪升级有必要吗？疯狂讲义强多了", "marks": "很差"}
{"content": "入门类的好书，深入缺了点。", "marks": "力荐"}
{"content": "研一暑假时，刚自学Android时买的，当时书还是刚上市。因为一直在关注作者的博客，看到他的书一出来，立马就买了。对我的入门作用很大。我觉得是国产书里面，第一本写的最好的Android入门书。", "marks": "力荐"}
{"content": "可以。扫了一遍理下思路给新人培训用。14章的天气app api不可用，改了一份放在https://github.com/jzhangs/coolweather。", "marks": "推荐"}
{"content": "感觉目录做的不好。不够细致，找东西找不到，内容过时， 没基础的人根本看不懂。", "marks": "很差"}
{"content": "基础知识不全面，只是没有项目，地图那一章的代码跑不通，最后一章项目讲的一般般，调用的api，发回的数据不对，项目不能用。", "marks": "很差"}
{"content": "内容太浅了，太多内容没有涉及", "marks": "很差"}
{"content": "可以这么说，这本书是我唯一一本几乎一页一页翻着看完的书。很适合初学者，思路和某些堆积木性质的书不太一样，作者能够把你的兴趣点带起来，这很了不起啊。能够读进去，应该是这本书最成功之处了。另外陈冰老师写的打怪升级系统，我很喜欢。", "marks": "力荐"}
{"content": "入门可以， 不过只看到了第十章， 后面都是草草翻过，看看讲了什么， 个人感觉还是有点难， 经验值彩蛋感觉还不错啊。。我看的是pdf，没买书支持， 有点对不住了。", "marks": "推荐"}
{"content": "这本书其实改个名字更好——R语言的众多包指南。所以这本书中写了很多的包，但是如果你只是负责一个部分的R语言，那么其实这本书就是用来了解了解。当然作者的文章很多都在网上可以查到，本身就是从博客文章改编的内容。支持下这个做法。当然如果可以推荐你在图书馆里面看一遍，就不用自己买了。讲的还错但是偏浅，当然推荐的人很强大，Xieyihui，刘思吉贝吉塔都推荐了这本书，不过我觉得他们的推荐并不准确又夸张，这本书改个名字更好，虽然说到理想但是书的内容实在骨感。", "marks": "还行"}
{"content": "如书名所言，这本书就是本纯工具书，主要是不同R包的大段实例代码和描述，可以看做是R文档的实例丰富版本，对于快速上手某个包和整体了解哪些包比较拥有可能还有那么一点帮助。总的来说，本书性价比不高，启发性非常一般。", "marks": "还行"}
{"content": "书名起得大而无当，就是介绍了一些R包，参考价值不太大。", "marks": "较差"}
{"content": "没有细读，但是可以看得出来书很棒。", "marks": "推荐"}
{"content": "还不错咯", "marks": "推荐"}
{"content": "指导到位，很有参考价值，纸版价格稍贵", "marks": "推荐"}
{"content": "刚看到开头部分，主要是围绕着几个常用的R添加包进行讲解。在Kindle上面看的，第一感觉是代码罗列的过多，然而并没有进行足够的解释。\r\n\r\n很可能是作者默认大家可以理解各个代码的作用吧。不过如果真的是这样的话，其实没有必要非得把所有的输出都贴出来的。", "marks": "还行"}
{"content": "想买这本书的小伙伴先看一下目录，感觉一下，有哪些是自己学习或者工作需要用的，如果有看看，如果没有就不用看了，这本书本身就是包的使用，不需要花费大量时间去看，除非有你用的包，有些东西可能对于 我这种遗传学的熊孩子来说，可能一辈子也用不到，你说你去看那有啥用，但是有些能用到的，看下还是能很快上手的", "marks": "还行"}
{"content": "DFDFD", "marks": "推荐"}
{"content": "书本内容设置很不错：HTML5，CSS3，nodejs都有实例涉猎，做了第一个例子，觉得书上代码有问题，事件不能绑定在行内的，准备归还了， 代码还是自己写，不要看书上的", "marks": "推荐"}
{"content": "这本书讲的很不错，有些知识点很有用，也很适合入门", "marks": "力荐"}
{"content": "看了前五章，代码缩进糟糕得要哭了(¯O¯) 第二章的某个示例代码感觉有逻辑错误", "marks": "还行"}
{"content": "相当不错的书。", "marks": "推荐"}
{"content": "大半本书讲了设计模式， 在脑海中回忆了一遍提及的名词，不再细看代码。 然后是简单的并发，xml-rpc和rpyc， 本地库调用以及opengl。内容不多，但是依然提及的比较浅，都不如网上一些blog来的有深度", "marks": "还行"}
{"content": "关于并发的那几章还挺有价值的", "marks": "力荐"}
{"content": "gui和游戏编程的代码示例 对于我这种这网站的用处不大", "marks": "还行"}
{"content": "在写框架，回头参考一些设计模式，作者的确实战派，各种例子，相对来说，看例子比文字更轻松，示例代码地址https://www.qtrac.eu/pipbook-1.0.zip", "marks": "推荐"}
{"content": "略扯", "marks": "较差"}
{"content": "亮点不多，可参考之处不多。", "marks": "还行"}
{"content": "这书偏重实践，不像其他Python编程书那样纠结于Python的语法和哲学这些比较玄乎的东西。这本书的作者讲解了用Python去解决编程现实中的很多问题，比如设计模式，并发，网络，图形库等。", "marks": "力荐"}
{"content": "看前三章就够了", "marks": "推荐"}
{"content": "挺好的", "marks": "力荐"}
{"content": "太难", "marks": "还行"}
{"content": "看前3章即可，看看Python可以怎么利用设计模式，拓展一些思维。后面几张都是一些标准库的用法，价值不大。", "marks": "还行"}
{"content": "好书，精彩", "marks": "推荐"}
{"content": "偏实践，要有一定 Python 开发来看会比较好。", "marks": "推荐"}
{"content": "这本书的精华是前半部分介绍的用python实现设计模式。可以看的出作者对python语法非常精通，一个问题可以用几种不同的思想实现，学到了很多高级技巧。不过书籍的编排过于紧凑，代码down不下来。", "marks": "推荐"}
{"content": "设计模式部分值得一看！", "marks": "推荐"}
{"content": "一般般", "marks": "还行"}
{"content": "Python的经典，适合自学", "marks": "力荐"}
{"content": "书写得一般，之前做C++的时候看过这个作者写得《C++ GUI Programming with Qt4》。那本书质量确实不错，但是这本Python书一翻开就感觉作者是写C++的，代码里充满了C++的味道。“设计模式”这部分就是把C++的实现搬到python上，一点都不pytho", "marks": "还行"}
{"content": "是我看过最适合R语言新手入门的一本书了。比较系统。", "marks": "力荐"}
{"content": "很好的工具书，数据分析各个方面在r里的实现都有涉及", "marks": "力荐"}
{"content": "写的不错，但是可以提升的空间巨大：1. 图做的比较粗糙，作者连打磨一下的冲动都没有吗？2. 中国地图上没有台湾省，这书也可以出版？3. 我喜欢最后一章的几个案例，虽然做的比较浅，有点浅尝辄止的感觉但算是个惊喜。4. 书的代码规范不太好。总体来说，在目前中文R语言的图书市场，算是一本用心的书！", "marks": "还行"}
{"content": "中规中矩的感觉", "marks": "还行"}
{"content": "前面几篇都不错", "marks": "还行"}
{"content": "小短文。 团队建设，过程改进还不错。", "marks": "还行"}
{"content": "篇篇都很实在，都是真刀真枪总结出来的精华，虽然大部分都读过，再次读还是会有新的共鸣和收获。", "marks": "力荐"}
{"content": "全功能团队的建设  很棒  我有点喜欢上thoughtworks这家公司了 一个传播文化的公司  团队建设和项目管理真的需要所有coder 了解一下", "marks": "推荐"}
{"content": "很具有启发性，特别是对象相似度、对象类型相似度和方法相似度的EDP空间的描述，深刻剖析了OOP常见设计模式的要素。", "marks": "力荐"}
{"content": "将对象的调用又分为很多类，是看待模式和oo设计的新思路。以前可能也是这么理解的，但没有书中那么系统和全面。不过pin箱之类的虽是创新但意义不大，作者文字比较啰嗦", "marks": "还行"}
{"content": "非常理论化的一本书，但是从另一个视角看设计模式，给大家比较大的启发。", "marks": "推荐"}
{"content": "element design patterns于design patterns，就像e于坐标系。", "marks": "力荐"}
{"content": "探究设计模式中的公共元素，附录中的ρ演算眼界大开。不过这本书想要像DP一样影响大师不可能了。", "marks": "推荐"}
{"content": "太过理论性，参考价值很低", "marks": "还行"}
{"content": "可能和自己原来的期望有冲突，感觉作者自己说的很HIGH，相比GOF并没有特别突出的地方。", "marks": "还行"}
{"content": "把设计模式拆分出来，再组合起来", "marks": "推荐"}
{"content": "作者自己独特的理解模式的方式 没有耐心仔细阅读", "marks": "还行"}
{"content": "主要介绍了一种思想，一种工具。\r思想是，将大众熟知的设计模式分解为更细粒度的元素模式。使用元素模式去自由组合发散，扩张现有设计模式，同时令他们的经过度大大上升。\r工具是使用PIN 箱，使用PIN箱来分析设计模式，将模式之间的组合关系表达得更加清楚。可以让人们对于模式的日常交流更容易，更方便。", "marks": "推荐"}
{"content": "还没读完先上评价。绝对的好书，适合我这种看了敲了许多初级代码，迷迷糊糊的已入门者。", "marks": "力荐"}
{"content": "只是罗列了Android编程技术的各项概念性知识，讲解比较笼统，不适合初学者。", "marks": "还行"}
{"content": "适合刚刚入门的Android开发人员，有一定的基础但是没有一个系统的思想和开发方法流程的人去看，确实是一本非常好的图书", "marks": "力荐"}
{"content": "必须承认，这本书是android提高道路上一大推手，我才读到第七章，感觉每一章节都很好看，很多用过但是不知道的知识讲的不算细致，但是google一下几乎都能找到，算是我看到android书中维数不多的好书，非常推荐。", "marks": "力荐"}
{"content": "凑单书，写的不错，就是太入门了，当然把这些知识写简单需要雄厚的功力。我就看看windows下怎么搞", "marks": "推荐"}
{"content": "简单", "marks": "力荐"}
{"content": "于是，很感激快节奏的生活，因为它会逼着我去成长、去发现。", "marks": "推荐"}
{"content": "把除去 windows 的部分几乎看完了", "marks": "力荐"}
{"content": "清晰有力！作者必须功力深厚啊", "marks": "力荐"}
{"content": "入门书，至少不再对套接字恐惧", "marks": "推荐"}
{"content": "有的地方有些问题,阻塞非阻塞没讲。。。", "marks": "推荐"}
{"content": "大部分知识都知道 着重看了部分章节", "marks": "还行"}
{"content": "把 windows 的部分去掉感觉更好。。", "marks": "推荐"}
{"content": "前几章的Windows网络编程比较鸡肋，但后面专门的Windows编程里的异步模型讲的挺好的.整本书用最少的api来讲解网络编程常用的知识，各种并发模型，感觉特别好。最后的http服务器如果再复杂点就更好了。\n整部书难度跟 csapp 最后部分相当", "marks": "推荐"}
{"content": "读完apue才发现这本有多垃圾。。。不清不楚，逻辑混乱，当然,比高校老师那些垃圾书还是强几万倍的", "marks": "还行"}
{"content": "我觉得作为入门教材非常不错的书。", "marks": "力荐"}
{"content": "比较基础 & 浅显易懂", "marks": "推荐"}
{"content": "不错的入门书，读 Unix 网络编程有困难的话可以先读一下这本。", "marks": "推荐"}
{"content": "入门级，linux和windows方面的网络编程都讲到了，但不深入。", "marks": "还行"}
{"content": "入门书。", "marks": "推荐"}
{"content": " TCP/IP 编程入门好书", "marks": "力荐"}
{"content": "适合入门的好书。", "marks": "力荐"}
{"content": "纯C语言， 这本书很适合新手入门， 作者语言也非常生动。", "marks": "力荐"}
{"content": "形象生动，浅显易懂，非常好的网络编程入门书籍！", "marks": "力荐"}
{"content": "作为入门书还是很不错的，代码整体比较易懂（虽然代码中有点小问题，认真读过的朋友应该能找出并修正），下一步要继续深入《Unix网络编程》", "marks": "力荐"}
{"content": "值得推荐，写的很通俗，例程丰富，内容也充足，有配图，以后有机会会入手购买这本书", "marks": "力荐"}
{"content": "这本书从IT行业发展的视角证明了历史不断重演.  \n正如现在 90% C/C++渣程序员依然美好地相信C/C++就是上帝,\n过去就是汇编程序员鄙视高级语言使用者(当时Fortran, C)\n\n实用主义和面向人友好的技术(如鼠标, GUI)发展下来, \n而如今七牛云存储坚持CLI风格,文档不对人类友好, \n又拍云虽然技术实力相对弱, 文档和接口设计面向人设计,\n受众会更广. \n云服务不仅仅是面向程序员的，更应该面向更多行业的人.\n易用一直都是发展的方向.\n\n\n", "marks": "推荐"}
{"content": "知道了Unix、管道、Pascal的得名，word、Visual Basic的历史，Linus和Stallman的分歧，大家都从施乐「偷东西」，大家都看过As We May Think，最后大家都喜欢玩一字棋", "marks": "还行"}
{"content": "故事，就是老重复一些内容算什么意思。书是参加pycon2014的奖品", "marks": "推荐"}
{"content": "图形界面部分给了我新的想法（对图形界面的新看法），重新给个评价，写得太糟糕了，一股子无聊畅销书的味道，翻译也有问题。", "marks": "较差"}
{"content": "计算机学科中应该有一门叫软件史的课。", "marks": "推荐"}
{"content": "新聞記者寫科技史就是隔靴撓癢。", "marks": "还行"}
{"content": "回到历史中的一本书。有趣的是，这本2001年的书最后写到了 grid computing，那个没有最终占领市场的想法，后来的成功的是云计算。", "marks": "推荐"}
{"content": "翻下就好", "marks": "还行"}
{"content": "读的电子版，感想是能发明语言的人小时就天赋异人", "marks": "推荐"}
{"content": "软件史梗概", "marks": "还行"}
{"content": "还行", "marks": "还行"}
{"content": "java Gnu Not Unix", "marks": "推荐"}
{"content": "软件背后的故事就是思想和文化。“中断”是分时的产物，SQL经历过导航向关系的转变，JAVA是网络时代的语言，开源、栅格……理解编程是进化的产物，历史才能比教材生动~本书可以更精彩！", "marks": "推荐"}
{"content": "我们习以为常的技术其实经历了激动人心的发展过程。", "marks": "还行"}
{"content": "FORTRAN COBOL Unix和C BASIC Algol到Pascal再到C++ Word的故事 Macintosh Java Apache和开源运动，每个故事都很经典", "marks": "力荐"}
{"content": "if only it could cover the advances in the last decade. . .", "marks": "推荐"}
{"content": "乱，差。\n作者搜集了一堆关系不大的材料堆积在一起，本书就诞生了。各种杂乱无章的故事，几乎没有任何真知灼见。\n另外，读着读着就让人抓狂了。这作者也太不认真了，就算你不懂技术，你可以问懂的啊！怎么也总不能胡编乱造啊。从如山的错误里挑出两个例子：把SQL说成制作网页的语言，面向对象的概念更是驴唇不对马嘴。\n建议还是不要浪费时间阅读本书了，有空可以读读《编程人生》之类的，就算看维基百科也比这本书好。", "marks": "还行"}
{"content": "花了几个晚上读完。结论如下：大神也是人，但大神都有共同的特质。公司规模大了总会⋯⋯类似OS360的杯具还在继续。脚本语言介绍的太少。该书不如《编程人生》", "marks": "推荐"}
{"content": "囫囵吞枣般翻过。唯一印象深刻的就是Word之父 查尔斯西蒙尼的故事。", "marks": "推荐"}
{"content": "计算机历史，课外乐趣读物", "marks": "还行"}
{"content": "编程语言的近代史", "marks": "推荐"}
{"content": "内容还行，配一些相应的图就更好了，但感觉翻译的有点怪怪的", "marks": "推荐"}
{"content": "就那样吧，封面多好看，坚持了几章，还不错，算是了解了高级语言的发展。到后面实在的太枯燥了，还不如那些技术书籍有意思。", "marks": "还行"}
{"content": "不错的计算机语言史", "marks": "推荐"}
{"content": "不那么有趣", "marks": "还行"}
{"content": "一般，路边读物而已，有些故事还很有意思，有些思想很受教。\n计算机科学家的一个重要任务是建立机器与人的桥梁，从汇编到c到c++到java编程语言会变得越来越简单。", "marks": "还行"}
